In archive libarduino-crt.a:

server_drv.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000628  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  0000065c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00000000  00000000  0000065c  2**0
                  ALLOC
  3 .stab         0000123c  00000000  00000000  0000065c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001b4d  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ZN9ServerDrv9availDataEh>:
    }
    SpiDrv::spiSlaveDeselect();
   return _data;
}

uint16_t ServerDrv::availData(uint8_t sock)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9ServerDrv9availDataEh+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9ServerDrv9availDataEh+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	8c 83       	std	Y+4, r24	; 0x04
{
	WAIT_FOR_SLAVE_SELECT();
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    // Send Command
    SpiDrv::sendCmd(AVAIL_DATA_TCP_CMD, PARAM_NUMS_1);
  16:	8b e2       	ldi	r24, 0x2B	; 43
  18:	61 e0       	ldi	r22, 0x01	; 1
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendParam(&sock, sizeof(sock), LAST_PARAM);
  1e:	ce 01       	movw	r24, r28
  20:	04 96       	adiw	r24, 0x04	; 4
  22:	61 e0       	ldi	r22, 0x01	; 1
  24:	41 e0       	ldi	r20, 0x01	; 1
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    // Wait for reply
    uint8_t _dataLen = 0;
  2e:	19 82       	std	Y+1, r1	; 0x01
	uint16_t len = 0;
  30:	1b 82       	std	Y+3, r1	; 0x03
  32:	1a 82       	std	Y+2, r1	; 0x02

    SpiDrv::waitResponseCmd(AVAIL_DATA_TCP_CMD, PARAM_NUMS_1, (uint8_t*)&len,  &_dataLen);
  34:	9e 01       	movw	r18, r28
  36:	2e 5f       	subi	r18, 0xFE	; 254
  38:	3f 4f       	sbci	r19, 0xFF	; 255
  3a:	8b e2       	ldi	r24, 0x2B	; 43
  3c:	61 e0       	ldi	r22, 0x01	; 1
  3e:	a9 01       	movw	r20, r18
  40:	9e 01       	movw	r18, r28
  42:	2f 5f       	subi	r18, 0xFF	; 255
  44:	3f 4f       	sbci	r19, 0xFF	; 255
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    SpiDrv::spiSlaveDeselect();
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    return len;
  4e:	8a 81       	ldd	r24, Y+2	; 0x02
  50:	9b 81       	ldd	r25, Y+3	; 0x03
}
  52:	0f 90       	pop	r0
  54:	0f 90       	pop	r0
  56:	0f 90       	pop	r0
  58:	0f 90       	pop	r0
  5a:	cf 91       	pop	r28
  5c:	df 91       	pop	r29
  5e:	08 95       	ret

00000060 <_ZN9ServerDrv14getClientStateEh>:
    }
    SpiDrv::spiSlaveDeselect();
   return _data;
}

uint8_t ServerDrv::getClientState(uint8_t sock)
  60:	df 93       	push	r29
  62:	cf 93       	push	r28
  64:	00 d0       	rcall	.+0      	; 0x66 <_ZN9ServerDrv14getClientStateEh+0x6>
  66:	00 d0       	rcall	.+0      	; 0x68 <_ZN9ServerDrv14getClientStateEh+0x8>
  68:	0f 92       	push	r0
  6a:	cd b7       	in	r28, 0x3d	; 61
  6c:	de b7       	in	r29, 0x3e	; 62
  6e:	8b 83       	std	Y+3, r24	; 0x03
{
	WAIT_FOR_SLAVE_SELECT();
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
  74:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    // Send Command
    SpiDrv::sendCmd(GET_CLIENT_STATE_TCP_CMD, PARAM_NUMS_1);
  78:	8f e2       	ldi	r24, 0x2F	; 47
  7a:	61 e0       	ldi	r22, 0x01	; 1
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendParam(&sock, sizeof(sock), LAST_PARAM);
  80:	ce 01       	movw	r24, r28
  82:	03 96       	adiw	r24, 0x03	; 3
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    // Wait for reply
    uint8_t _data = 0;
  90:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
  92:	1a 82       	std	Y+2, r1	; 0x02
    if (!SpiDrv::waitResponseCmd(GET_CLIENT_STATE_TCP_CMD, PARAM_NUMS_1, &_data, &_dataLen))
  94:	fe 01       	movw	r30, r28
  96:	32 96       	adiw	r30, 0x02	; 2
  98:	8f e2       	ldi	r24, 0x2F	; 47
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	9e 01       	movw	r18, r28
  9e:	2f 5f       	subi	r18, 0xFF	; 255
  a0:	3f 4f       	sbci	r19, 0xFF	; 255
  a2:	a9 01       	movw	r20, r18
  a4:	9f 01       	movw	r18, r30
  a6:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
  aa:	9d 83       	std	Y+5, r25	; 0x05
  ac:	8c 83       	std	Y+4, r24	; 0x04
    {
        WARN("error waitResponse");
    }
    SpiDrv::spiSlaveDeselect();
  ae:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
   return _data;
  b2:	89 81       	ldd	r24, Y+1	; 0x01
}
  b4:	0f 90       	pop	r0
  b6:	0f 90       	pop	r0
  b8:	0f 90       	pop	r0
  ba:	0f 90       	pop	r0
  bc:	0f 90       	pop	r0
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	08 95       	ret

000000c4 <_ZN9ServerDrv14getServerStateEh>:
    }
    SpiDrv::spiSlaveDeselect();
}


uint8_t ServerDrv::getServerState(uint8_t sock)
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	00 d0       	rcall	.+0      	; 0xca <_ZN9ServerDrv14getServerStateEh+0x6>
  ca:	00 d0       	rcall	.+0      	; 0xcc <_ZN9ServerDrv14getServerStateEh+0x8>
  cc:	0f 92       	push	r0
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	8b 83       	std	Y+3, r24	; 0x03
{
	WAIT_FOR_SLAVE_SELECT();
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
  d8:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    // Send Command
    SpiDrv::sendCmd(GET_STATE_TCP_CMD, PARAM_NUMS_1);
  dc:	89 e2       	ldi	r24, 0x29	; 41
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendParam(&sock, sizeof(sock), LAST_PARAM);
  e4:	ce 01       	movw	r24, r28
  e6:	03 96       	adiw	r24, 0x03	; 3
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
  f0:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    // Wait for reply
    uint8_t _data = 0;
  f4:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
  f6:	1a 82       	std	Y+2, r1	; 0x02
    if (!SpiDrv::waitResponseCmd(GET_STATE_TCP_CMD, PARAM_NUMS_1, &_data, &_dataLen))
  f8:	fe 01       	movw	r30, r28
  fa:	32 96       	adiw	r30, 0x02	; 2
  fc:	89 e2       	ldi	r24, 0x29	; 41
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	9e 01       	movw	r18, r28
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	3f 4f       	sbci	r19, 0xFF	; 255
 106:	a9 01       	movw	r20, r18
 108:	9f 01       	movw	r18, r30
 10a:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 10e:	9d 83       	std	Y+5, r25	; 0x05
 110:	8c 83       	std	Y+4, r24	; 0x04
    {
        WARN("error waitResponse");
    }
    SpiDrv::spiSlaveDeselect();
 112:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
   return _data;
 116:	89 81       	ldd	r24, Y+1	; 0x01
}
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	0f 90       	pop	r0
 122:	cf 91       	pop	r28
 124:	df 91       	pop	r29
 126:	08 95       	ret

00000128 <_ZN9ServerDrv10stopClientEh>:
    }
    SpiDrv::spiSlaveDeselect();
}

// Start server TCP on port specified
void ServerDrv::stopClient(uint8_t sock)
 128:	df 93       	push	r29
 12a:	cf 93       	push	r28
 12c:	00 d0       	rcall	.+0      	; 0x12e <_ZN9ServerDrv10stopClientEh+0x6>
 12e:	00 d0       	rcall	.+0      	; 0x130 <_ZN9ServerDrv10stopClientEh+0x8>
 130:	0f 92       	push	r0
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	8b 83       	std	Y+3, r24	; 0x03
{
	WAIT_FOR_SLAVE_SELECT();
 138:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 13c:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    // Send Command
    SpiDrv::sendCmd(STOP_CLIENT_TCP_CMD, PARAM_NUMS_1);
 140:	8e e2       	ldi	r24, 0x2E	; 46
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendParam(&sock, 1, LAST_PARAM);
 148:	ce 01       	movw	r24, r28
 14a:	03 96       	adiw	r24, 0x03	; 3
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 154:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    // Wait for reply
    uint8_t _data = 0;
 158:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
 15a:	1a 82       	std	Y+2, r1	; 0x02
    if (!SpiDrv::waitResponseCmd(STOP_CLIENT_TCP_CMD, PARAM_NUMS_1, &_data, &_dataLen))
 15c:	fe 01       	movw	r30, r28
 15e:	32 96       	adiw	r30, 0x02	; 2
 160:	8e e2       	ldi	r24, 0x2E	; 46
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	9e 01       	movw	r18, r28
 166:	2f 5f       	subi	r18, 0xFF	; 255
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	a9 01       	movw	r20, r18
 16c:	9f 01       	movw	r18, r30
 16e:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 172:	9d 83       	std	Y+5, r25	; 0x05
 174:	8c 83       	std	Y+4, r24	; 0x04
    {
        WARN("error waitResponse");
    }
    SpiDrv::spiSlaveDeselect();
 176:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
}
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	cf 91       	pop	r28
 186:	df 91       	pop	r29
 188:	08 95       	ret

0000018a <_ZN9ServerDrv13checkDataSentEh>:
    }
    return false;
}


uint8_t ServerDrv::checkDataSent(uint8_t sock)
 18a:	df 93       	push	r29
 18c:	cf 93       	push	r28
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	2a 97       	sbiw	r28, 0x0a	; 10
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	8f 83       	std	Y+7, r24	; 0x07
{
	const uint16_t TIMEOUT_DATA_SENT = 25;
 1a0:	89 e1       	ldi	r24, 0x19	; 25
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	9c 83       	std	Y+4, r25	; 0x04
 1a6:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t timeout = 0;
 1a8:	1a 82       	std	Y+2, r1	; 0x02
 1aa:	19 82       	std	Y+1, r1	; 0x01
	uint8_t _data = 0;
 1ac:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t _dataLen = 0;
 1ae:	1e 82       	std	Y+6, r1	; 0x06

	do {
		WAIT_FOR_SLAVE_SELECT();
 1b0:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 1b4:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
		// Send Command
		SpiDrv::sendCmd(DATA_SENT_TCP_CMD, PARAM_NUMS_1);
 1b8:	8a e2       	ldi	r24, 0x2A	; 42
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
		SpiDrv::sendParam(&sock, sizeof(sock), LAST_PARAM);
 1c0:	ce 01       	movw	r24, r28
 1c2:	07 96       	adiw	r24, 0x07	; 7
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

		//Wait the reply elaboration
		SpiDrv::waitForSlaveReady();
 1cc:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

		// Wait for reply
		if (!SpiDrv::waitResponseCmd(DATA_SENT_TCP_CMD, PARAM_NUMS_1, &_data, &_dataLen))
 1d0:	9e 01       	movw	r18, r28
 1d2:	2b 5f       	subi	r18, 0xFB	; 251
 1d4:	3f 4f       	sbci	r19, 0xFF	; 255
 1d6:	fe 01       	movw	r30, r28
 1d8:	36 96       	adiw	r30, 0x06	; 6
 1da:	8a e2       	ldi	r24, 0x2A	; 42
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	a9 01       	movw	r20, r18
 1e0:	9f 01       	movw	r18, r30
 1e2:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 1e6:	9a 87       	std	Y+10, r25	; 0x0a
 1e8:	89 87       	std	Y+9, r24	; 0x09
		{
			WARN("error waitResponse isDataSent");
		}
		SpiDrv::spiSlaveDeselect();
 1ea:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

		if (_data) timeout = 0;
 1ee:	8d 81       	ldd	r24, Y+5	; 0x05
 1f0:	88 23       	and	r24, r24
 1f2:	01 f0       	breq	.+0      	; 0x1f4 <_ZN9ServerDrv13checkDataSentEh+0x6a>
 1f4:	1a 82       	std	Y+2, r1	; 0x02
 1f6:	19 82       	std	Y+1, r1	; 0x01
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <_ZN9ServerDrv13checkDataSentEh+0x70>
		else{
			++timeout;
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	9a 81       	ldd	r25, Y+2	; 0x02
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	9a 83       	std	Y+2, r25	; 0x02
 202:	89 83       	std	Y+1, r24	; 0x01
			delay(100);
 204:	64 e6       	ldi	r22, 0x64	; 100
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
	const uint16_t TIMEOUT_DATA_SENT = 25;
    uint16_t timeout = 0;
	uint8_t _data = 0;
	uint8_t _dataLen = 0;

	do {
 210:	8d 81       	ldd	r24, Y+5	; 0x05
 212:	88 23       	and	r24, r24
 214:	01 f4       	brne	.+0      	; 0x216 <_ZN9ServerDrv13checkDataSentEh+0x8c>
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	9a 81       	ldd	r25, Y+2	; 0x02
 21a:	89 31       	cpi	r24, 0x19	; 25
 21c:	91 05       	cpc	r25, r1
 21e:	00 f0       	brcs	.+0      	; 0x220 <_ZN9ServerDrv13checkDataSentEh+0x96>
			++timeout;
			delay(100);
		}

	}while((_data==0)&&(timeout<TIMEOUT_DATA_SENT));
    return (timeout==TIMEOUT_DATA_SENT)?0:1;
 220:	18 86       	std	Y+8, r1	; 0x08
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
 226:	89 31       	cpi	r24, 0x19	; 25
 228:	91 05       	cpc	r25, r1
 22a:	01 f0       	breq	.+0      	; 0x22c <_ZN9ServerDrv13checkDataSentEh+0xa2>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	88 87       	std	Y+8, r24	; 0x08
 230:	88 85       	ldd	r24, Y+8	; 0x08
}
 232:	2a 96       	adiw	r28, 0x0a	; 10
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
 23e:	cf 91       	pop	r28
 240:	df 91       	pop	r29
 242:	08 95       	ret

00000244 <_ZN9ServerDrv8sendDataEhPKhj>:
    }
    return false;
}


bool ServerDrv::sendData(uint8_t sock, const uint8_t *data, uint16_t len)
 244:	df 93       	push	r29
 246:	cf 93       	push	r28
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	2a 97       	sbiw	r28, 0x0a	; 10
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 258:	8b 83       	std	Y+3, r24	; 0x03
 25a:	7d 83       	std	Y+5, r23	; 0x05
 25c:	6c 83       	std	Y+4, r22	; 0x04
 25e:	5f 83       	std	Y+7, r21	; 0x07
 260:	4e 83       	std	Y+6, r20	; 0x06
{
	WAIT_FOR_SLAVE_SELECT();
 262:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 266:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    // Send Command
    SpiDrv::sendCmd(SEND_DATA_TCP_CMD, PARAM_NUMS_2);
 26a:	84 e4       	ldi	r24, 0x44	; 68
 26c:	62 e0       	ldi	r22, 0x02	; 2
 26e:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendBuffer(&sock, sizeof(sock));
 272:	ce 01       	movw	r24, r28
 274:	03 96       	adiw	r24, 0x03	; 3
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendBuffer((uint8_t *)data, len, LAST_PARAM);
 280:	8c 81       	ldd	r24, Y+4	; 0x04
 282:	9d 81       	ldd	r25, Y+5	; 0x05
 284:	2e 81       	ldd	r18, Y+6	; 0x06
 286:	3f 81       	ldd	r19, Y+7	; 0x07
 288:	b9 01       	movw	r22, r18
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 290:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    // Wait for reply
    uint8_t _data = 0;
 294:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
 296:	1a 82       	std	Y+2, r1	; 0x02
    if (!SpiDrv::waitResponseData8(SEND_DATA_TCP_CMD, &_data, &_dataLen))
 298:	ae 01       	movw	r20, r28
 29a:	4e 5f       	subi	r20, 0xFE	; 254
 29c:	5f 4f       	sbci	r21, 0xFF	; 255
 29e:	84 e4       	ldi	r24, 0x44	; 68
 2a0:	9e 01       	movw	r18, r28
 2a2:	2f 5f       	subi	r18, 0xFF	; 255
 2a4:	3f 4f       	sbci	r19, 0xFF	; 255
 2a6:	b9 01       	movw	r22, r18
 2a8:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 2ac:	9a 87       	std	Y+10, r25	; 0x0a
 2ae:	89 87       	std	Y+9, r24	; 0x09
    {
        WARN("error waitResponse");
    }
    SpiDrv::spiSlaveDeselect();
 2b0:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    if (_dataLen!=0)
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	88 23       	and	r24, r24
 2b8:	01 f0       	breq	.+0      	; 0x2ba <_ZN9ServerDrv8sendDataEhPKhj+0x76>
    {
        return (_data == 1);
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	18 86       	std	Y+8, r1	; 0x08
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	01 f4       	brne	.+0      	; 0x2c2 <_ZN9ServerDrv8sendDataEhPKhj+0x7e>
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	88 87       	std	Y+8, r24	; 0x08
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <_ZN9ServerDrv8sendDataEhPKhj+0x84>
    }
    return false;
 2c8:	18 86       	std	Y+8, r1	; 0x08
 2ca:	88 85       	ldd	r24, Y+8	; 0x08
}
 2cc:	2a 96       	adiw	r28, 0x0a	; 10
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
 2d8:	cf 91       	pop	r28
 2da:	df 91       	pop	r29
 2dc:	08 95       	ret

000002de <_ZN9ServerDrv11sendUdpDataEh>:
        return (_data == 1);
    }
    return false;
}

bool ServerDrv::sendUdpData(uint8_t sock)
 2de:	df 93       	push	r29
 2e0:	cf 93       	push	r28
 2e2:	00 d0       	rcall	.+0      	; 0x2e4 <_ZN9ServerDrv11sendUdpDataEh+0x6>
 2e4:	00 d0       	rcall	.+0      	; 0x2e6 <_ZN9ServerDrv11sendUdpDataEh+0x8>
 2e6:	00 d0       	rcall	.+0      	; 0x2e8 <_ZN9ServerDrv11sendUdpDataEh+0xa>
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	8b 83       	std	Y+3, r24	; 0x03
{
	WAIT_FOR_SLAVE_SELECT();
 2ee:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 2f2:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    // Send Command
    SpiDrv::sendCmd(SEND_DATA_UDP_CMD, PARAM_NUMS_1);
 2f6:	89 e3       	ldi	r24, 0x39	; 57
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendParam(&sock, sizeof(sock), LAST_PARAM);
 2fe:	ce 01       	movw	r24, r28
 300:	03 96       	adiw	r24, 0x03	; 3
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 30a:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    // Wait for reply
    uint8_t _data = 0;
 30e:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
 310:	1a 82       	std	Y+2, r1	; 0x02
    if (!SpiDrv::waitResponseData8(SEND_DATA_UDP_CMD, &_data, &_dataLen))
 312:	ae 01       	movw	r20, r28
 314:	4e 5f       	subi	r20, 0xFE	; 254
 316:	5f 4f       	sbci	r21, 0xFF	; 255
 318:	89 e3       	ldi	r24, 0x39	; 57
 31a:	9e 01       	movw	r18, r28
 31c:	2f 5f       	subi	r18, 0xFF	; 255
 31e:	3f 4f       	sbci	r19, 0xFF	; 255
 320:	b9 01       	movw	r22, r18
 322:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 326:	9e 83       	std	Y+6, r25	; 0x06
 328:	8d 83       	std	Y+5, r24	; 0x05
    {
        WARN("error waitResponse");
    }
    SpiDrv::spiSlaveDeselect();
 32a:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    if (_dataLen!=0)
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	88 23       	and	r24, r24
 332:	01 f0       	breq	.+0      	; 0x334 <_ZN9ServerDrv11sendUdpDataEh+0x56>
    {
        return (_data == 1);
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	1c 82       	std	Y+4, r1	; 0x04
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	01 f4       	brne	.+0      	; 0x33c <_ZN9ServerDrv11sendUdpDataEh+0x5e>
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	8c 83       	std	Y+4, r24	; 0x04
 340:	00 c0       	rjmp	.+0      	; 0x342 <_ZN9ServerDrv11sendUdpDataEh+0x64>
    }
    return false;
 342:	1c 82       	std	Y+4, r1	; 0x04
 344:	8c 81       	ldd	r24, Y+4	; 0x04
}
 346:	26 96       	adiw	r28, 0x06	; 6
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	f8 94       	cli
 34c:	de bf       	out	0x3e, r29	; 62
 34e:	0f be       	out	0x3f, r0	; 63
 350:	cd bf       	out	0x3d, r28	; 61
 352:	cf 91       	pop	r28
 354:	df 91       	pop	r29
 356:	08 95       	ret

00000358 <_ZN9ServerDrv13insertDataBufEhPKhj>:
        return true;
    }
    return false;
}

bool ServerDrv::insertDataBuf(uint8_t sock, const uint8_t *data, uint16_t _len)
 358:	df 93       	push	r29
 35a:	cf 93       	push	r28
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	2a 97       	sbiw	r28, 0x0a	; 10
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	de bf       	out	0x3e, r29	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	8b 83       	std	Y+3, r24	; 0x03
 36e:	7d 83       	std	Y+5, r23	; 0x05
 370:	6c 83       	std	Y+4, r22	; 0x04
 372:	5f 83       	std	Y+7, r21	; 0x07
 374:	4e 83       	std	Y+6, r20	; 0x06
{
	WAIT_FOR_SLAVE_SELECT();
 376:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 37a:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    // Send Command
    SpiDrv::sendCmd(INSERT_DATABUF_CMD, PARAM_NUMS_2);
 37e:	86 e4       	ldi	r24, 0x46	; 70
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendBuffer(&sock, sizeof(sock));
 386:	ce 01       	movw	r24, r28
 388:	03 96       	adiw	r24, 0x03	; 3
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendBuffer((uint8_t *)data, _len, LAST_PARAM);
 394:	8c 81       	ldd	r24, Y+4	; 0x04
 396:	9d 81       	ldd	r25, Y+5	; 0x05
 398:	2e 81       	ldd	r18, Y+6	; 0x06
 39a:	3f 81       	ldd	r19, Y+7	; 0x07
 39c:	b9 01       	movw	r22, r18
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 3a4:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    // Wait for reply
    uint8_t _data = 0;
 3a8:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
 3aa:	1a 82       	std	Y+2, r1	; 0x02
    if (!SpiDrv::waitResponseData8(INSERT_DATABUF_CMD, &_data, &_dataLen))
 3ac:	ae 01       	movw	r20, r28
 3ae:	4e 5f       	subi	r20, 0xFE	; 254
 3b0:	5f 4f       	sbci	r21, 0xFF	; 255
 3b2:	86 e4       	ldi	r24, 0x46	; 70
 3b4:	9e 01       	movw	r18, r28
 3b6:	2f 5f       	subi	r18, 0xFF	; 255
 3b8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ba:	b9 01       	movw	r22, r18
 3bc:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 3c0:	9a 87       	std	Y+10, r25	; 0x0a
 3c2:	89 87       	std	Y+9, r24	; 0x09
    {
        WARN("error waitResponse");
    }
    SpiDrv::spiSlaveDeselect();
 3c4:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    if (_dataLen!=0)
 3c8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ca:	88 23       	and	r24, r24
 3cc:	01 f0       	breq	.+0      	; 0x3ce <_ZN9ServerDrv13insertDataBufEhPKhj+0x76>
    {
        return (_data == 1);
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	18 86       	std	Y+8, r1	; 0x08
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	01 f4       	brne	.+0      	; 0x3d6 <_ZN9ServerDrv13insertDataBufEhPKhj+0x7e>
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	88 87       	std	Y+8, r24	; 0x08
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <_ZN9ServerDrv13insertDataBufEhPKhj+0x84>
    }
    return false;
 3dc:	18 86       	std	Y+8, r1	; 0x08
 3de:	88 85       	ldd	r24, Y+8	; 0x08
}
 3e0:	2a 96       	adiw	r28, 0x0a	; 10
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	cf 91       	pop	r28
 3ee:	df 91       	pop	r29
 3f0:	08 95       	ret

000003f2 <_ZN9ServerDrv10getDataBufEhPhPj>:
        return true;
    }
    return false;
}

bool ServerDrv::getDataBuf(uint8_t sock, uint8_t *_data, uint16_t *_dataLen)
 3f2:	df 93       	push	r29
 3f4:	cf 93       	push	r28
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
 3fa:	28 97       	sbiw	r28, 0x08	; 8
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	f8 94       	cli
 400:	de bf       	out	0x3e, r29	; 62
 402:	0f be       	out	0x3f, r0	; 63
 404:	cd bf       	out	0x3d, r28	; 61
 406:	89 83       	std	Y+1, r24	; 0x01
 408:	7b 83       	std	Y+3, r23	; 0x03
 40a:	6a 83       	std	Y+2, r22	; 0x02
 40c:	5d 83       	std	Y+5, r21	; 0x05
 40e:	4c 83       	std	Y+4, r20	; 0x04
{
	WAIT_FOR_SLAVE_SELECT();
 410:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 414:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    // Send Command
    SpiDrv::sendCmd(GET_DATABUF_TCP_CMD, PARAM_NUMS_1);
 418:	85 e4       	ldi	r24, 0x45	; 69
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendBuffer(&sock, sizeof(sock), LAST_PARAM);
 420:	ce 01       	movw	r24, r28
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 42e:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    // Wait for reply
    if (!SpiDrv::waitResponseData16(GET_DATABUF_TCP_CMD, _data, _dataLen))
 432:	2a 81       	ldd	r18, Y+2	; 0x02
 434:	3b 81       	ldd	r19, Y+3	; 0x03
 436:	4c 81       	ldd	r20, Y+4	; 0x04
 438:	5d 81       	ldd	r21, Y+5	; 0x05
 43a:	85 e4       	ldi	r24, 0x45	; 69
 43c:	b9 01       	movw	r22, r18
 43e:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 442:	98 87       	std	Y+8, r25	; 0x08
 444:	8f 83       	std	Y+7, r24	; 0x07
    {
        WARN("error waitResponse");
    }
    SpiDrv::spiSlaveDeselect();
 446:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    if (*_dataLen!=0)
 44a:	ec 81       	ldd	r30, Y+4	; 0x04
 44c:	fd 81       	ldd	r31, Y+5	; 0x05
 44e:	80 81       	ld	r24, Z
 450:	91 81       	ldd	r25, Z+1	; 0x01
 452:	00 97       	sbiw	r24, 0x00	; 0
 454:	01 f0       	breq	.+0      	; 0x456 <_ZN9ServerDrv10getDataBufEhPhPj+0x64>
    {
        return true;
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	8e 83       	std	Y+6, r24	; 0x06
 45a:	00 c0       	rjmp	.+0      	; 0x45c <_ZN9ServerDrv10getDataBufEhPhPj+0x6a>
    }
    return false;
 45c:	1e 82       	std	Y+6, r1	; 0x06
 45e:	8e 81       	ldd	r24, Y+6	; 0x06
}
 460:	28 96       	adiw	r28, 0x08	; 8
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	de bf       	out	0x3e, r29	; 62
 468:	0f be       	out	0x3f, r0	; 63
 46a:	cd bf       	out	0x3d, r28	; 61
 46c:	cf 91       	pop	r28
 46e:	df 91       	pop	r29
 470:	08 95       	ret

00000472 <_ZN9ServerDrv7getDataEhPhh>:
    SpiDrv::spiSlaveDeselect();

    return len;
}

bool ServerDrv::getData(uint8_t sock, uint8_t *data, uint8_t peek)
 472:	df 93       	push	r29
 474:	cf 93       	push	r28
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	29 97       	sbiw	r28, 0x09	; 9
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
 486:	8b 83       	std	Y+3, r24	; 0x03
 488:	7d 83       	std	Y+5, r23	; 0x05
 48a:	6c 83       	std	Y+4, r22	; 0x04
 48c:	4e 83       	std	Y+6, r20	; 0x06
{
	WAIT_FOR_SLAVE_SELECT();
 48e:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 492:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    // Send Command
    SpiDrv::sendCmd(GET_DATA_TCP_CMD, PARAM_NUMS_2);
 496:	8c e2       	ldi	r24, 0x2C	; 44
 498:	62 e0       	ldi	r22, 0x02	; 2
 49a:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendParam(&sock, sizeof(sock));
 49e:	ce 01       	movw	r24, r28
 4a0:	03 96       	adiw	r24, 0x03	; 3
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendParam(peek, LAST_PARAM);
 4aa:	8e 81       	ldd	r24, Y+6	; 0x06
 4ac:	88 2f       	mov	r24, r24
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 4b6:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    // Wait for reply
    uint8_t _data = 0;
 4ba:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
 4bc:	1a 82       	std	Y+2, r1	; 0x02
    if (!SpiDrv::waitResponseData8(GET_DATA_TCP_CMD, &_data, &_dataLen))
 4be:	ae 01       	movw	r20, r28
 4c0:	4e 5f       	subi	r20, 0xFE	; 254
 4c2:	5f 4f       	sbci	r21, 0xFF	; 255
 4c4:	8c e2       	ldi	r24, 0x2C	; 44
 4c6:	9e 01       	movw	r18, r28
 4c8:	2f 5f       	subi	r18, 0xFF	; 255
 4ca:	3f 4f       	sbci	r19, 0xFF	; 255
 4cc:	b9 01       	movw	r22, r18
 4ce:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 4d2:	99 87       	std	Y+9, r25	; 0x09
 4d4:	88 87       	std	Y+8, r24	; 0x08
    {
        WARN("error waitResponse");
    }
    SpiDrv::spiSlaveDeselect();
 4d6:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    if (_dataLen!=0)
 4da:	8a 81       	ldd	r24, Y+2	; 0x02
 4dc:	88 23       	and	r24, r24
 4de:	01 f0       	breq	.+0      	; 0x4e0 <_ZN9ServerDrv7getDataEhPhh+0x6e>
    {
        *data = _data;
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	ec 81       	ldd	r30, Y+4	; 0x04
 4e4:	fd 81       	ldd	r31, Y+5	; 0x05
 4e6:	80 83       	st	Z, r24
        return true;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	8f 83       	std	Y+7, r24	; 0x07
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <_ZN9ServerDrv7getDataEhPhh+0x7c>
    }
    return false;
 4ee:	1f 82       	std	Y+7, r1	; 0x07
 4f0:	8f 81       	ldd	r24, Y+7	; 0x07
}
 4f2:	29 96       	adiw	r28, 0x09	; 9
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
 4fe:	cf 91       	pop	r28
 500:	df 91       	pop	r29
 502:	08 95       	ret

00000504 <_ZN9ServerDrv11startClientEmjhh>:
    }
    SpiDrv::spiSlaveDeselect();
}

// Start server TCP on port specified
void ServerDrv::startClient(uint32_t ipAddress, uint16_t port, uint8_t sock, uint8_t protMode)
 504:	0f 93       	push	r16
 506:	df 93       	push	r29
 508:	cf 93       	push	r28
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	2c 97       	sbiw	r28, 0x0c	; 12
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	6b 83       	std	Y+3, r22	; 0x03
 51c:	7c 83       	std	Y+4, r23	; 0x04
 51e:	8d 83       	std	Y+5, r24	; 0x05
 520:	9e 83       	std	Y+6, r25	; 0x06
 522:	58 87       	std	Y+8, r21	; 0x08
 524:	4f 83       	std	Y+7, r20	; 0x07
 526:	29 87       	std	Y+9, r18	; 0x09
 528:	0a 87       	std	Y+10, r16	; 0x0a
{
	WAIT_FOR_SLAVE_SELECT();
 52a:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 52e:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    // Send Command
    SpiDrv::sendCmd(START_CLIENT_TCP_CMD, PARAM_NUMS_4);
 532:	8d e2       	ldi	r24, 0x2D	; 45
 534:	64 e0       	ldi	r22, 0x04	; 4
 536:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendParam((uint8_t*)&ipAddress, sizeof(ipAddress));
 53a:	ce 01       	movw	r24, r28
 53c:	03 96       	adiw	r24, 0x03	; 3
 53e:	64 e0       	ldi	r22, 0x04	; 4
 540:	40 e0       	ldi	r20, 0x00	; 0
 542:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendParam(port);
 546:	8f 81       	ldd	r24, Y+7	; 0x07
 548:	98 85       	ldd	r25, Y+8	; 0x08
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendParam(&sock, 1);
 550:	ce 01       	movw	r24, r28
 552:	09 96       	adiw	r24, 0x09	; 9
 554:	61 e0       	ldi	r22, 0x01	; 1
 556:	40 e0       	ldi	r20, 0x00	; 0
 558:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendParam(&protMode, 1, LAST_PARAM);
 55c:	ce 01       	movw	r24, r28
 55e:	0a 96       	adiw	r24, 0x0a	; 10
 560:	61 e0       	ldi	r22, 0x01	; 1
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 568:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    // Wait for reply
    uint8_t _data = 0;
 56c:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
 56e:	1a 82       	std	Y+2, r1	; 0x02
    if (!SpiDrv::waitResponseCmd(START_CLIENT_TCP_CMD, PARAM_NUMS_1, &_data, &_dataLen))
 570:	fe 01       	movw	r30, r28
 572:	32 96       	adiw	r30, 0x02	; 2
 574:	8d e2       	ldi	r24, 0x2D	; 45
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	9e 01       	movw	r18, r28
 57a:	2f 5f       	subi	r18, 0xFF	; 255
 57c:	3f 4f       	sbci	r19, 0xFF	; 255
 57e:	a9 01       	movw	r20, r18
 580:	9f 01       	movw	r18, r30
 582:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 586:	9c 87       	std	Y+12, r25	; 0x0c
 588:	8b 87       	std	Y+11, r24	; 0x0b
    {
        WARN("error waitResponse");
    }
    SpiDrv::spiSlaveDeselect();
 58a:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
}
 58e:	2c 96       	adiw	r28, 0x0c	; 12
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	f8 94       	cli
 594:	de bf       	out	0x3e, r29	; 62
 596:	0f be       	out	0x3f, r0	; 63
 598:	cd bf       	out	0x3d, r28	; 61
 59a:	cf 91       	pop	r28
 59c:	df 91       	pop	r29
 59e:	0f 91       	pop	r16
 5a0:	08 95       	ret

000005a2 <_ZN9ServerDrv11startServerEjhh>:
#include "debug.h"
}


// Start server TCP on port specified
void ServerDrv::startServer(uint16_t port, uint8_t sock, uint8_t protMode)
 5a2:	df 93       	push	r29
 5a4:	cf 93       	push	r28
 5a6:	cd b7       	in	r28, 0x3d	; 61
 5a8:	de b7       	in	r29, 0x3e	; 62
 5aa:	28 97       	sbiw	r28, 0x08	; 8
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	f8 94       	cli
 5b0:	de bf       	out	0x3e, r29	; 62
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	cd bf       	out	0x3d, r28	; 61
 5b6:	9c 83       	std	Y+4, r25	; 0x04
 5b8:	8b 83       	std	Y+3, r24	; 0x03
 5ba:	6d 83       	std	Y+5, r22	; 0x05
 5bc:	4e 83       	std	Y+6, r20	; 0x06
{
	WAIT_FOR_SLAVE_SELECT();
 5be:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 5c2:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    // Send Command
    SpiDrv::sendCmd(START_SERVER_TCP_CMD, PARAM_NUMS_3);
 5c6:	88 e2       	ldi	r24, 0x28	; 40
 5c8:	63 e0       	ldi	r22, 0x03	; 3
 5ca:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendParam(port);
 5ce:	8b 81       	ldd	r24, Y+3	; 0x03
 5d0:	9c 81       	ldd	r25, Y+4	; 0x04
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendParam(&sock, 1);
 5d8:	ce 01       	movw	r24, r28
 5da:	05 96       	adiw	r24, 0x05	; 5
 5dc:	61 e0       	ldi	r22, 0x01	; 1
 5de:	40 e0       	ldi	r20, 0x00	; 0
 5e0:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
    SpiDrv::sendParam(&protMode, 1, LAST_PARAM);
 5e4:	ce 01       	movw	r24, r28
 5e6:	06 96       	adiw	r24, 0x06	; 6
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	41 e0       	ldi	r20, 0x01	; 1
 5ec:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 5f0:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>

    // Wait for reply
    uint8_t _data = 0;
 5f4:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
 5f6:	1a 82       	std	Y+2, r1	; 0x02
    if (!SpiDrv::waitResponseCmd(START_SERVER_TCP_CMD, PARAM_NUMS_1, &_data, &_dataLen))
 5f8:	fe 01       	movw	r30, r28
 5fa:	32 96       	adiw	r30, 0x02	; 2
 5fc:	88 e2       	ldi	r24, 0x28	; 40
 5fe:	61 e0       	ldi	r22, 0x01	; 1
 600:	9e 01       	movw	r18, r28
 602:	2f 5f       	subi	r18, 0xFF	; 255
 604:	3f 4f       	sbci	r19, 0xFF	; 255
 606:	a9 01       	movw	r20, r18
 608:	9f 01       	movw	r18, r30
 60a:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
 60e:	98 87       	std	Y+8, r25	; 0x08
 610:	8f 83       	std	Y+7, r24	; 0x07
    {
        WARN("error waitResponse");
    }
    SpiDrv::spiSlaveDeselect();
 612:	0e 94 00 00 	call	0	; 0x0 <_ZN9ServerDrv9availDataEh>
}
 616:	28 96       	adiw	r28, 0x08	; 8
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	f8 94       	cli
 61c:	de bf       	out	0x3e, r29	; 62
 61e:	0f be       	out	0x3f, r0	; 63
 620:	cd bf       	out	0x3d, r28	; 61
 622:	cf 91       	pop	r28
 624:	df 91       	pop	r29
 626:	08 95       	ret

socket.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ac  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000001e0  2**0
                  ALLOC
  3 .stab         0000063c  00000000  00000000  000001e0  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000a2d  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <socket>:
*
*/
#include <inttypes.h>
#include "socket.h"

SOCKET socket(uint8 protocol) {return 0;} // Opens a socket(TCP or UDP or IP_RAW mode)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
   c:	80 e0       	ldi	r24, 0x00	; 0
   e:	90 e0       	ldi	r25, 0x00	; 0
  10:	0f 90       	pop	r0
  12:	cf 91       	pop	r28
  14:	df 91       	pop	r29
  16:	08 95       	ret

00000018 <close>:
void close(SOCKET s) {} // Close socket
  18:	df 93       	push	r29
  1a:	cf 93       	push	r28
  1c:	00 d0       	rcall	.+0      	; 0x1e <close+0x6>
  1e:	cd b7       	in	r28, 0x3d	; 61
  20:	de b7       	in	r29, 0x3e	; 62
  22:	9a 83       	std	Y+2, r25	; 0x02
  24:	89 83       	std	Y+1, r24	; 0x01
  26:	0f 90       	pop	r0
  28:	0f 90       	pop	r0
  2a:	cf 91       	pop	r28
  2c:	df 91       	pop	r29
  2e:	08 95       	ret

00000030 <connect>:
uint8 connect(SOCKET s, uint8 * addr, uint16 port) {return 0;} // Establish TCP connection (Active connection)
  30:	df 93       	push	r29
  32:	cf 93       	push	r28
  34:	00 d0       	rcall	.+0      	; 0x36 <connect+0x6>
  36:	00 d0       	rcall	.+0      	; 0x38 <connect+0x8>
  38:	00 d0       	rcall	.+0      	; 0x3a <connect+0xa>
  3a:	cd b7       	in	r28, 0x3d	; 61
  3c:	de b7       	in	r29, 0x3e	; 62
  3e:	9a 83       	std	Y+2, r25	; 0x02
  40:	89 83       	std	Y+1, r24	; 0x01
  42:	7c 83       	std	Y+4, r23	; 0x04
  44:	6b 83       	std	Y+3, r22	; 0x03
  46:	5e 83       	std	Y+6, r21	; 0x06
  48:	4d 83       	std	Y+5, r20	; 0x05
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	26 96       	adiw	r28, 0x06	; 6
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	f8 94       	cli
  52:	de bf       	out	0x3e, r29	; 62
  54:	0f be       	out	0x3f, r0	; 63
  56:	cd bf       	out	0x3d, r28	; 61
  58:	cf 91       	pop	r28
  5a:	df 91       	pop	r29
  5c:	08 95       	ret

0000005e <disconnect>:
void disconnect(SOCKET s) {} // disconnect the connection
  5e:	df 93       	push	r29
  60:	cf 93       	push	r28
  62:	00 d0       	rcall	.+0      	; 0x64 <disconnect+0x6>
  64:	cd b7       	in	r28, 0x3d	; 61
  66:	de b7       	in	r29, 0x3e	; 62
  68:	9a 83       	std	Y+2, r25	; 0x02
  6a:	89 83       	std	Y+1, r24	; 0x01
  6c:	0f 90       	pop	r0
  6e:	0f 90       	pop	r0
  70:	cf 91       	pop	r28
  72:	df 91       	pop	r29
  74:	08 95       	ret

00000076 <listen>:
uint8 listen(SOCKET s) { return 0;}	// Establish TCP connection (Passive connection)
  76:	df 93       	push	r29
  78:	cf 93       	push	r28
  7a:	00 d0       	rcall	.+0      	; 0x7c <listen+0x6>
  7c:	cd b7       	in	r28, 0x3d	; 61
  7e:	de b7       	in	r29, 0x3e	; 62
  80:	9a 83       	std	Y+2, r25	; 0x02
  82:	89 83       	std	Y+1, r24	; 0x01
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	0f 90       	pop	r0
  88:	0f 90       	pop	r0
  8a:	cf 91       	pop	r28
  8c:	df 91       	pop	r29
  8e:	08 95       	ret

00000090 <send>:
uint16 send(SOCKET s, const uint8 * buf, uint16 len) { return 0;} // Send data (TCP)
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	00 d0       	rcall	.+0      	; 0x96 <send+0x6>
  96:	00 d0       	rcall	.+0      	; 0x98 <send+0x8>
  98:	00 d0       	rcall	.+0      	; 0x9a <send+0xa>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	9a 83       	std	Y+2, r25	; 0x02
  a0:	89 83       	std	Y+1, r24	; 0x01
  a2:	7c 83       	std	Y+4, r23	; 0x04
  a4:	6b 83       	std	Y+3, r22	; 0x03
  a6:	5e 83       	std	Y+6, r21	; 0x06
  a8:	4d 83       	std	Y+5, r20	; 0x05
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	26 96       	adiw	r28, 0x06	; 6
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
  ba:	cf 91       	pop	r28
  bc:	df 91       	pop	r29
  be:	08 95       	ret

000000c0 <recv>:
uint16 recv(SOCKET s, uint8 * buf, uint16 len) {return 0;}	// Receive data (TCP)
  c0:	df 93       	push	r29
  c2:	cf 93       	push	r28
  c4:	00 d0       	rcall	.+0      	; 0xc6 <recv+0x6>
  c6:	00 d0       	rcall	.+0      	; 0xc8 <recv+0x8>
  c8:	00 d0       	rcall	.+0      	; 0xca <recv+0xa>
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	9a 83       	std	Y+2, r25	; 0x02
  d0:	89 83       	std	Y+1, r24	; 0x01
  d2:	7c 83       	std	Y+4, r23	; 0x04
  d4:	6b 83       	std	Y+3, r22	; 0x03
  d6:	5e 83       	std	Y+6, r21	; 0x06
  d8:	4d 83       	std	Y+5, r20	; 0x05
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	26 96       	adiw	r28, 0x06	; 6
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
  ea:	cf 91       	pop	r28
  ec:	df 91       	pop	r29
  ee:	08 95       	ret

000000f0 <sendto>:
uint16 sendto(SOCKET s, const uint8 * buf, uint16 len, uint8 * addr, uint16 port) {return 0;} // Send data (UDP/IP RAW)
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	df 93       	push	r29
  f6:	cf 93       	push	r28
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	2a 97       	sbiw	r28, 0x0a	; 10
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
 108:	9a 83       	std	Y+2, r25	; 0x02
 10a:	89 83       	std	Y+1, r24	; 0x01
 10c:	7c 83       	std	Y+4, r23	; 0x04
 10e:	6b 83       	std	Y+3, r22	; 0x03
 110:	5e 83       	std	Y+6, r21	; 0x06
 112:	4d 83       	std	Y+5, r20	; 0x05
 114:	38 87       	std	Y+8, r19	; 0x08
 116:	2f 83       	std	Y+7, r18	; 0x07
 118:	1a 87       	std	Y+10, r17	; 0x0a
 11a:	09 87       	std	Y+9, r16	; 0x09
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	2a 96       	adiw	r28, 0x0a	; 10
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	cf 91       	pop	r28
 12e:	df 91       	pop	r29
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <recvfrom>:
uint16 recvfrom(SOCKET s, uint8 * buf, uint16 len, uint8 * addr, uint16  *port) {return 0;} // Receive data (UDP/IP RAW)
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	df 93       	push	r29
 13c:	cf 93       	push	r28
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	2a 97       	sbiw	r28, 0x0a	; 10
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	9a 83       	std	Y+2, r25	; 0x02
 150:	89 83       	std	Y+1, r24	; 0x01
 152:	7c 83       	std	Y+4, r23	; 0x04
 154:	6b 83       	std	Y+3, r22	; 0x03
 156:	5e 83       	std	Y+6, r21	; 0x06
 158:	4d 83       	std	Y+5, r20	; 0x05
 15a:	38 87       	std	Y+8, r19	; 0x08
 15c:	2f 83       	std	Y+7, r18	; 0x07
 15e:	1a 87       	std	Y+10, r17	; 0x0a
 160:	09 87       	std	Y+9, r16	; 0x09
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	2a 96       	adiw	r28, 0x0a	; 10
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
 172:	cf 91       	pop	r28
 174:	df 91       	pop	r29
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <igmpsend>:

uint16 igmpsend(SOCKET s, const uint8 * buf, uint16 len) {return 0;}
 17c:	df 93       	push	r29
 17e:	cf 93       	push	r28
 180:	00 d0       	rcall	.+0      	; 0x182 <igmpsend+0x6>
 182:	00 d0       	rcall	.+0      	; 0x184 <igmpsend+0x8>
 184:	00 d0       	rcall	.+0      	; 0x186 <igmpsend+0xa>
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	9a 83       	std	Y+2, r25	; 0x02
 18c:	89 83       	std	Y+1, r24	; 0x01
 18e:	7c 83       	std	Y+4, r23	; 0x04
 190:	6b 83       	std	Y+3, r22	; 0x03
 192:	5e 83       	std	Y+6, r21	; 0x06
 194:	4d 83       	std	Y+5, r20	; 0x05
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	26 96       	adiw	r28, 0x06	; 6
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
 1a6:	cf 91       	pop	r28
 1a8:	df 91       	pop	r29
 1aa:	08 95       	ret

spi_drv.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd8  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00000000  00000000  00000c0c  2**0
                  ALLOC
  3 .stab         000016c8  00000000  00000000  00000c0c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001cc1  00000000  00000000  000022d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ZN6SpiDrv3endEv>:
	  SPCR |= _BV(MSTR);
	  SPCR |= _BV(SPE);
	  //SPSR |= _BV(SPI2X);
}

void SpiDrv::end() {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
  SPCR &= ~_BV(SPE);
   8:	ac e4       	ldi	r26, 0x4C	; 76
   a:	b0 e0       	ldi	r27, 0x00	; 0
   c:	ec e4       	ldi	r30, 0x4C	; 76
   e:	f0 e0       	ldi	r31, 0x00	; 0
  10:	80 81       	ld	r24, Z
  12:	8f 7b       	andi	r24, 0xBF	; 191
  14:	8c 93       	st	X, r24
}
  16:	cf 91       	pop	r28
  18:	df 91       	pop	r29
  1a:	08 95       	ret

0000001c <_Z8delaySpiv>:
void SpiDrv::spiSlaveDeselect()
{
    digitalWrite(SLAVESELECT,HIGH);
}

void delaySpi()
  1c:	df 93       	push	r29
  1e:	cf 93       	push	r28
  20:	00 d0       	rcall	.+0      	; 0x22 <_Z8delaySpiv+0x6>
  22:	00 d0       	rcall	.+0      	; 0x24 <_Z8delaySpiv+0x8>
  24:	00 d0       	rcall	.+0      	; 0x26 <_Z8delaySpiv+0xa>
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
{
	int i = 0;
  2a:	1e 82       	std	Y+6, r1	; 0x06
  2c:	1d 82       	std	Y+5, r1	; 0x05
	const int DELAY = 1000;
  2e:	88 ee       	ldi	r24, 0xE8	; 232
  30:	93 e0       	ldi	r25, 0x03	; 3
  32:	9c 83       	std	Y+4, r25	; 0x04
  34:	8b 83       	std	Y+3, r24	; 0x03
  36:	00 c0       	rjmp	.+0      	; 0x38 <_Z8delaySpiv+0x1c>
	for (;i<DELAY;++i)
	{
		int a =a+1;
  38:	89 81       	ldd	r24, Y+1	; 0x01
  3a:	9a 81       	ldd	r25, Y+2	; 0x02
  3c:	01 96       	adiw	r24, 0x01	; 1
  3e:	9a 83       	std	Y+2, r25	; 0x02
  40:	89 83       	std	Y+1, r24	; 0x01

void delaySpi()
{
	int i = 0;
	const int DELAY = 1000;
	for (;i<DELAY;++i)
  42:	8d 81       	ldd	r24, Y+5	; 0x05
  44:	9e 81       	ldd	r25, Y+6	; 0x06
  46:	01 96       	adiw	r24, 0x01	; 1
  48:	9e 83       	std	Y+6, r25	; 0x06
  4a:	8d 83       	std	Y+5, r24	; 0x05
  4c:	8d 81       	ldd	r24, Y+5	; 0x05
  4e:	9e 81       	ldd	r25, Y+6	; 0x06
  50:	23 e0       	ldi	r18, 0x03	; 3
  52:	88 3e       	cpi	r24, 0xE8	; 232
  54:	92 07       	cpc	r25, r18
  56:	04 f0       	brlt	.+0      	; 0x58 <_Z8delaySpiv+0x3c>
	{
		int a =a+1;
	}
}
  58:	26 96       	adiw	r28, 0x06	; 6
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	f8 94       	cli
  5e:	de bf       	out	0x3e, r29	; 62
  60:	0f be       	out	0x3f, r0	; 63
  62:	cd bf       	out	0x3d, r28	; 61
  64:	cf 91       	pop	r28
  66:	df 91       	pop	r29
  68:	08 95       	ret

0000006a <_ZN6SpiDrv11spiTransferEc>:

char SpiDrv::spiTransfer(volatile char data)
  6a:	df 93       	push	r29
  6c:	cf 93       	push	r28
  6e:	00 d0       	rcall	.+0      	; 0x70 <_ZN6SpiDrv11spiTransferEc+0x6>
  70:	00 d0       	rcall	.+0      	; 0x72 <_ZN6SpiDrv11spiTransferEc+0x8>
  72:	00 d0       	rcall	.+0      	; 0x74 <_ZN6SpiDrv11spiTransferEc+0xa>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	8c 83       	std	Y+4, r24	; 0x04
{
    SPDR = data;                    // Start the transmission
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	8c 81       	ldd	r24, Y+4	; 0x04
  80:	80 83       	st	Z, r24
    while (!(SPSR & (1<<SPIF)))     // Wait the end of the transmission
  82:	ed e4       	ldi	r30, 0x4D	; 77
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	1e 82       	std	Y+6, r1	; 0x06
  8a:	88 23       	and	r24, r24
  8c:	04 f0       	brlt	.+0      	; 0x8e <_ZN6SpiDrv11spiTransferEc+0x24>
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	8e 83       	std	Y+6, r24	; 0x06
  92:	8e 81       	ldd	r24, Y+6	; 0x06
  94:	88 23       	and	r24, r24
  96:	01 f4       	brne	.+0      	; 0x98 <_ZN6SpiDrv11spiTransferEc+0x2e>
    {
    };
    char result = SPDR;
  98:	ee e4       	ldi	r30, 0x4E	; 78
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	8b 83       	std	Y+3, r24	; 0x03
    DELAY_TRANSFER();
  a0:	1a 82       	std	Y+2, r1	; 0x02
  a2:	19 82       	std	Y+1, r1	; 0x01
  a4:	00 00       	nop
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	9a 81       	ldd	r25, Y+2	; 0x02
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	9a 83       	std	Y+2, r25	; 0x02
  ae:	89 83       	std	Y+1, r24	; 0x01
  b0:	1d 82       	std	Y+5, r1	; 0x05
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	9a 81       	ldd	r25, Y+2	; 0x02
  b6:	8a 30       	cpi	r24, 0x0A	; 10
  b8:	91 05       	cpc	r25, r1
  ba:	04 f4       	brge	.+0      	; 0xbc <_ZN6SpiDrv11spiTransferEc+0x52>
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	8d 83       	std	Y+5, r24	; 0x05
  c0:	8d 81       	ldd	r24, Y+5	; 0x05
  c2:	88 23       	and	r24, r24
  c4:	01 f4       	brne	.+0      	; 0xc6 <_ZN6SpiDrv11spiTransferEc+0x5c>

    return result;                    // return the received byte
  c6:	8b 81       	ldd	r24, Y+3	; 0x03
}
  c8:	26 96       	adiw	r28, 0x06	; 6
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
  d4:	cf 91       	pop	r28
  d6:	df 91       	pop	r29
  d8:	08 95       	ret

000000da <_ZN6SpiDrv8getParamEPh>:
void SpiDrv::waitForSlaveReady()
{
	while (!waitSlaveReady());
}

void SpiDrv::getParam(uint8_t* param)
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	00 d0       	rcall	.+0      	; 0xe0 <_ZN6SpiDrv8getParamEPh+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <_ZN6SpiDrv8getParamEPh+0x8>
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	9c 83       	std	Y+4, r25	; 0x04
  ea:	8b 83       	std	Y+3, r24	; 0x03
{
    // Get Params data
    *param = spiTransfer(DUMMY_DATA);
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
  f2:	eb 81       	ldd	r30, Y+3	; 0x03
  f4:	fc 81       	ldd	r31, Y+4	; 0x04
  f6:	80 83       	st	Z, r24
    DELAY_TRANSFER();
  f8:	1a 82       	std	Y+2, r1	; 0x02
  fa:	19 82       	std	Y+1, r1	; 0x01
  fc:	00 00       	nop
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	9a 83       	std	Y+2, r25	; 0x02
 106:	89 83       	std	Y+1, r24	; 0x01
 108:	1d 82       	std	Y+5, r1	; 0x05
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	8a 30       	cpi	r24, 0x0A	; 10
 110:	91 05       	cpc	r25, r1
 112:	04 f4       	brge	.+0      	; 0x114 <_ZN6SpiDrv8getParamEPh+0x3a>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	8d 83       	std	Y+5, r24	; 0x05
 118:	8d 81       	ldd	r24, Y+5	; 0x05
 11a:	88 23       	and	r24, r24
 11c:	01 f4       	brne	.+0      	; 0x11e <_ZN6SpiDrv8getParamEPh+0x44>
}
 11e:	0f 90       	pop	r0
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	cf 91       	pop	r28
 12a:	df 91       	pop	r29
 12c:	08 95       	ret

0000012e <_ZN6SpiDrv8readCharEv>:
    getParam((uint8_t*)readChar);

    return  (*readChar == checkChar);
}

char SpiDrv::readChar()
 12e:	df 93       	push	r29
 130:	cf 93       	push	r28
 132:	0f 92       	push	r0
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
{
	uint8_t readChar = 0;
 138:	19 82       	std	Y+1, r1	; 0x01
	getParam(&readChar);
 13a:	ce 01       	movw	r24, r28
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
	return readChar;
 142:	89 81       	ldd	r24, Y+1	; 0x01
}
 144:	0f 90       	pop	r0
 146:	cf 91       	pop	r28
 148:	df 91       	pop	r29
 14a:	08 95       	ret

0000014c <_ZN6SpiDrv11waitSpiCharEh>:
    DELAY_TRANSFER();

    return result;                    // return the received byte
}

int SpiDrv::waitSpiChar(unsigned char waitChar)
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	28 97       	sbiw	r28, 0x08	; 8
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
 160:	8c 83       	std	Y+4, r24	; 0x04
{
    int timeout = TIMEOUT_CHAR;
 162:	88 ee       	ldi	r24, 0xE8	; 232
 164:	93 e0       	ldi	r25, 0x03	; 3
 166:	9b 83       	std	Y+3, r25	; 0x03
 168:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char _readChar = 0;
 16a:	19 82       	std	Y+1, r1	; 0x01
    do{
        _readChar = readChar(); //get data byte
 16c:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 170:	89 83       	std	Y+1, r24	; 0x01
        if (_readChar == ERR_CMD)
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	8f 3e       	cpi	r24, 0xEF	; 239
 176:	01 f4       	brne	.+0      	; 0x178 <_ZN6SpiDrv11waitSpiCharEh+0x2c>
        {
        	WARN("Err cmd received\n");
        	return -1;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	9f ef       	ldi	r25, 0xFF	; 255
 17c:	9e 83       	std	Y+6, r25	; 0x06
 17e:	8d 83       	std	Y+5, r24	; 0x05
 180:	00 c0       	rjmp	.+0      	; 0x182 <_ZN6SpiDrv11waitSpiCharEh+0x36>

int SpiDrv::waitSpiChar(unsigned char waitChar)
{
    int timeout = TIMEOUT_CHAR;
    unsigned char _readChar = 0;
    do{
 182:	1f 82       	std	Y+7, r1	; 0x07
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	9b 81       	ldd	r25, Y+3	; 0x03
 188:	18 16       	cp	r1, r24
 18a:	19 06       	cpc	r1, r25
 18c:	04 f4       	brge	.+0      	; 0x18e <_ZN6SpiDrv11waitSpiCharEh+0x42>
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	9f 83       	std	Y+7, r25	; 0x07
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	9b 81       	ldd	r25, Y+3	; 0x03
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	9b 83       	std	Y+3, r25	; 0x03
 19a:	8a 83       	std	Y+2, r24	; 0x02
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	9f 81       	ldd	r25, Y+7	; 0x07
 1a0:	89 27       	eor	r24, r25
 1a2:	88 23       	and	r24, r24
 1a4:	01 f4       	brne	.+0      	; 0x1a6 <_ZN6SpiDrv11waitSpiCharEh+0x5a>
 1a6:	99 81       	ldd	r25, Y+1	; 0x01
 1a8:	8c 81       	ldd	r24, Y+4	; 0x04
 1aa:	98 17       	cp	r25, r24
 1ac:	01 f0       	breq	.+0      	; 0x1ae <_ZN6SpiDrv11waitSpiCharEh+0x62>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	88 87       	std	Y+8, r24	; 0x08
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_ZN6SpiDrv11waitSpiCharEh+0x68>
 1b4:	18 86       	std	Y+8, r1	; 0x08
 1b6:	88 85       	ldd	r24, Y+8	; 0x08
 1b8:	88 23       	and	r24, r24
 1ba:	01 f4       	brne	.+0      	; 0x1bc <_ZN6SpiDrv11waitSpiCharEh+0x70>
        {
        	WARN("Err cmd received\n");
        	return -1;
        }
    }while((timeout-- > 0) && (_readChar != waitChar));
    return  (_readChar == waitChar);
 1bc:	1e 82       	std	Y+6, r1	; 0x06
 1be:	1d 82       	std	Y+5, r1	; 0x05
 1c0:	99 81       	ldd	r25, Y+1	; 0x01
 1c2:	8c 81       	ldd	r24, Y+4	; 0x04
 1c4:	98 17       	cp	r25, r24
 1c6:	01 f4       	brne	.+0      	; 0x1c8 <_ZN6SpiDrv11waitSpiCharEh+0x7c>
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	9e 83       	std	Y+6, r25	; 0x06
 1ce:	8d 83       	std	Y+5, r24	; 0x05
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	9e 81       	ldd	r25, Y+6	; 0x06
}
 1d4:	28 96       	adiw	r28, 0x08	; 8
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	de bf       	out	0x3e, r29	; 62
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	cf 91       	pop	r28
 1e2:	df 91       	pop	r29
 1e4:	08 95       	ret

000001e6 <_ZN6SpiDrv16readAndCheckCharEcPc>:

int SpiDrv::readAndCheckChar(char checkChar, char* readChar)
 1e6:	df 93       	push	r29
 1e8:	cf 93       	push	r28
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <_ZN6SpiDrv16readAndCheckCharEcPc+0x6>
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <_ZN6SpiDrv16readAndCheckCharEcPc+0x8>
 1ee:	0f 92       	push	r0
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	89 83       	std	Y+1, r24	; 0x01
 1f6:	7b 83       	std	Y+3, r23	; 0x03
 1f8:	6a 83       	std	Y+2, r22	; 0x02
{
    getParam((uint8_t*)readChar);
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	9b 81       	ldd	r25, Y+3	; 0x03
 1fe:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>

    return  (*readChar == checkChar);
 202:	ea 81       	ldd	r30, Y+2	; 0x02
 204:	fb 81       	ldd	r31, Y+3	; 0x03
 206:	90 81       	ld	r25, Z
 208:	1d 82       	std	Y+5, r1	; 0x05
 20a:	1c 82       	std	Y+4, r1	; 0x04
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	98 17       	cp	r25, r24
 210:	01 f4       	brne	.+0      	; 0x212 <_ZN6SpiDrv16readAndCheckCharEcPc+0x2c>
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	9d 83       	std	Y+5, r25	; 0x05
 218:	8c 83       	std	Y+4, r24	; 0x04
 21a:	8c 81       	ldd	r24, Y+4	; 0x04
 21c:	9d 81       	ldd	r25, Y+5	; 0x05
}
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	cf 91       	pop	r28
 22a:	df 91       	pop	r29
 22c:	08 95       	ret

0000022e <_ZN6SpiDrv13sendParamLen8Eh>:
    // if lastParam==1 Send Spi END CMD
    if (lastParam == 1)
        spiTransfer(END_CMD);
}

void SpiDrv::sendParamLen8(uint8_t param_len)
 22e:	df 93       	push	r29
 230:	cf 93       	push	r28
 232:	0f 92       	push	r0
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	89 83       	std	Y+1, r24	; 0x01
{
    // Send Spi paramLen
    spiTransfer(param_len);
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
}
 240:	0f 90       	pop	r0
 242:	cf 91       	pop	r28
 244:	df 91       	pop	r29
 246:	08 95       	ret

00000248 <_ZN6SpiDrv9sendParamEPhhh>:
    }
    return 1;
}


void SpiDrv::sendParam(uint8_t* param, uint8_t param_len, uint8_t lastParam)
 248:	df 93       	push	r29
 24a:	cf 93       	push	r28
 24c:	00 d0       	rcall	.+0      	; 0x24e <_ZN6SpiDrv9sendParamEPhhh+0x6>
 24e:	00 d0       	rcall	.+0      	; 0x250 <_ZN6SpiDrv9sendParamEPhhh+0x8>
 250:	00 d0       	rcall	.+0      	; 0x252 <_ZN6SpiDrv9sendParamEPhhh+0xa>
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	9c 83       	std	Y+4, r25	; 0x04
 258:	8b 83       	std	Y+3, r24	; 0x03
 25a:	6d 83       	std	Y+5, r22	; 0x05
 25c:	4e 83       	std	Y+6, r20	; 0x06
{
    int i = 0;
 25e:	1a 82       	std	Y+2, r1	; 0x02
 260:	19 82       	std	Y+1, r1	; 0x01
    // Send Spi paramLen
    sendParamLen8(param_len);
 262:	8d 81       	ldd	r24, Y+5	; 0x05
 264:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>

    // Send Spi param data
    for (i=0; i<param_len; ++i)
 268:	1a 82       	std	Y+2, r1	; 0x02
 26a:	19 82       	std	Y+1, r1	; 0x01
 26c:	00 c0       	rjmp	.+0      	; 0x26e <_ZN6SpiDrv9sendParamEPhhh+0x26>
    {
        spiTransfer(param[i]);
 26e:	29 81       	ldd	r18, Y+1	; 0x01
 270:	3a 81       	ldd	r19, Y+2	; 0x02
 272:	8b 81       	ldd	r24, Y+3	; 0x03
 274:	9c 81       	ldd	r25, Y+4	; 0x04
 276:	fc 01       	movw	r30, r24
 278:	e2 0f       	add	r30, r18
 27a:	f3 1f       	adc	r31, r19
 27c:	80 81       	ld	r24, Z
 27e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
    int i = 0;
    // Send Spi paramLen
    sendParamLen8(param_len);

    // Send Spi param data
    for (i=0; i<param_len; ++i)
 282:	89 81       	ldd	r24, Y+1	; 0x01
 284:	9a 81       	ldd	r25, Y+2	; 0x02
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	9a 83       	std	Y+2, r25	; 0x02
 28a:	89 83       	std	Y+1, r24	; 0x01
 28c:	8d 81       	ldd	r24, Y+5	; 0x05
 28e:	28 2f       	mov	r18, r24
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	9a 81       	ldd	r25, Y+2	; 0x02
 296:	82 17       	cp	r24, r18
 298:	93 07       	cpc	r25, r19
 29a:	04 f0       	brlt	.+0      	; 0x29c <_ZN6SpiDrv9sendParamEPhhh+0x54>
    {
        spiTransfer(param[i]);
    }

    // if lastParam==1 Send Spi END CMD
    if (lastParam == 1)
 29c:	8e 81       	ldd	r24, Y+6	; 0x06
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	01 f4       	brne	.+0      	; 0x2a2 <_ZN6SpiDrv9sendParamEPhhh+0x5a>
        spiTransfer(END_CMD);
 2a2:	8e ee       	ldi	r24, 0xEE	; 238
 2a4:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
}
 2a8:	26 96       	adiw	r28, 0x06	; 6
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	cf 91       	pop	r28
 2b6:	df 91       	pop	r29
 2b8:	08 95       	ret

000002ba <_ZN6SpiDrv14sendParamLen16Ej>:
{
    // Send Spi paramLen
    spiTransfer(param_len);
}

void SpiDrv::sendParamLen16(uint16_t param_len)
 2ba:	df 93       	push	r29
 2bc:	cf 93       	push	r28
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <_ZN6SpiDrv14sendParamLen16Ej+0x6>
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	9a 83       	std	Y+2, r25	; 0x02
 2c6:	89 83       	std	Y+1, r24	; 0x01
{
    // Send Spi paramLen
    spiTransfer((uint8_t)((param_len & 0xff00)>>8));
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	9a 81       	ldd	r25, Y+2	; 0x02
 2cc:	89 2f       	mov	r24, r25
 2ce:	99 27       	eor	r25, r25
 2d0:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
    spiTransfer((uint8_t)(param_len & 0xff));
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
}
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	cf 91       	pop	r28
 2e0:	df 91       	pop	r29
 2e2:	08 95       	ret

000002e4 <_ZN6SpiDrv13readParamLen8EPh>:

uint8_t SpiDrv::readParamLen8(uint8_t* param_len)
 2e4:	df 93       	push	r29
 2e6:	cf 93       	push	r28
 2e8:	00 d0       	rcall	.+0      	; 0x2ea <_ZN6SpiDrv13readParamLen8EPh+0x6>
 2ea:	0f 92       	push	r0
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	9b 83       	std	Y+3, r25	; 0x03
 2f2:	8a 83       	std	Y+2, r24	; 0x02
{
    uint8_t _param_len = spiTransfer(DUMMY_DATA);
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 2fa:	89 83       	std	Y+1, r24	; 0x01
    if (param_len != NULL)
 2fc:	8a 81       	ldd	r24, Y+2	; 0x02
 2fe:	9b 81       	ldd	r25, Y+3	; 0x03
 300:	00 97       	sbiw	r24, 0x00	; 0
 302:	01 f0       	breq	.+0      	; 0x304 <_ZN6SpiDrv13readParamLen8EPh+0x20>
    {
        *param_len = _param_len;
 304:	ea 81       	ldd	r30, Y+2	; 0x02
 306:	fb 81       	ldd	r31, Y+3	; 0x03
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	80 83       	st	Z, r24
    }
    return _param_len;
 30c:	89 81       	ldd	r24, Y+1	; 0x01
}
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	cf 91       	pop	r28
 316:	df 91       	pop	r29
 318:	08 95       	ret

0000031a <_ZN6SpiDrv12waitResponseEhPhPS0_h>:
    }         
    return 1;
}
*/

int SpiDrv::waitResponse(uint8_t cmd, uint8_t* numParamRead, uint8_t** params, uint8_t maxNumParams)
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	df 93       	push	r29
 320:	cf 93       	push	r28
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	c1 55       	subi	r28, 0x51	; 81
 328:	d0 40       	sbci	r29, 0x00	; 0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	fe 01       	movw	r30, r28
 336:	e8 5b       	subi	r30, 0xB8	; 184
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	80 83       	st	Z, r24
 33c:	fe 01       	movw	r30, r28
 33e:	e7 5b       	subi	r30, 0xB7	; 183
 340:	ff 4f       	sbci	r31, 0xFF	; 255
 342:	71 83       	std	Z+1, r23	; 0x01
 344:	60 83       	st	Z, r22
 346:	fe 01       	movw	r30, r28
 348:	e5 5b       	subi	r30, 0xB5	; 181
 34a:	ff 4f       	sbci	r31, 0xFF	; 255
 34c:	51 83       	std	Z+1, r21	; 0x01
 34e:	40 83       	st	Z, r20
 350:	fe 01       	movw	r30, r28
 352:	e3 5b       	subi	r30, 0xB3	; 179
 354:	ff 4f       	sbci	r31, 0xFF	; 255
 356:	20 83       	st	Z, r18
{
    char _data = 0;
 358:	1f 82       	std	Y+7, r1	; 0x07
    int i =0, ii = 0;
 35a:	1e 82       	std	Y+6, r1	; 0x06
 35c:	1d 82       	std	Y+5, r1	; 0x05
 35e:	1c 82       	std	Y+4, r1	; 0x04
 360:	1b 82       	std	Y+3, r1	; 0x03

    char    *index[WL_SSID_MAX_LENGTH];

    for (i = 0 ; i < WL_NETWORKS_LIST_MAXNUM ; i++)
 362:	1e 82       	std	Y+6, r1	; 0x06
 364:	1d 82       	std	Y+5, r1	; 0x05
 366:	00 c0       	rjmp	.+0      	; 0x368 <_ZN6SpiDrv12waitResponseEhPhPS0_h+0x4e>
            index[i] = (char *)params + WL_SSID_MAX_LENGTH*i;
 368:	6d 81       	ldd	r22, Y+5	; 0x05
 36a:	7e 81       	ldd	r23, Y+6	; 0x06
 36c:	fe 01       	movw	r30, r28
 36e:	e5 5b       	subi	r30, 0xB5	; 181
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	20 81       	ld	r18, Z
 374:	31 81       	ldd	r19, Z+1	; 0x01
 376:	8d 81       	ldd	r24, Y+5	; 0x05
 378:	9e 81       	ldd	r25, Y+6	; 0x06
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	82 95       	swap	r24
 380:	92 95       	swap	r25
 382:	90 7f       	andi	r25, 0xF0	; 240
 384:	98 27       	eor	r25, r24
 386:	80 7f       	andi	r24, 0xF0	; 240
 388:	98 27       	eor	r25, r24
 38a:	a9 01       	movw	r20, r18
 38c:	48 0f       	add	r20, r24
 38e:	59 1f       	adc	r21, r25
 390:	9b 01       	movw	r18, r22
 392:	22 0f       	add	r18, r18
 394:	33 1f       	adc	r19, r19
 396:	ce 01       	movw	r24, r28
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	82 0f       	add	r24, r18
 39c:	93 1f       	adc	r25, r19
 39e:	fc 01       	movw	r30, r24
 3a0:	37 96       	adiw	r30, 0x07	; 7
 3a2:	51 83       	std	Z+1, r21	; 0x01
 3a4:	40 83       	st	Z, r20
    char _data = 0;
    int i =0, ii = 0;

    char    *index[WL_SSID_MAX_LENGTH];

    for (i = 0 ; i < WL_NETWORKS_LIST_MAXNUM ; i++)
 3a6:	8d 81       	ldd	r24, Y+5	; 0x05
 3a8:	9e 81       	ldd	r25, Y+6	; 0x06
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	9e 83       	std	Y+6, r25	; 0x06
 3ae:	8d 83       	std	Y+5, r24	; 0x05
 3b0:	8d 81       	ldd	r24, Y+5	; 0x05
 3b2:	9e 81       	ldd	r25, Y+6	; 0x06
 3b4:	8a 30       	cpi	r24, 0x0A	; 10
 3b6:	91 05       	cpc	r25, r1
 3b8:	04 f0       	brlt	.+0      	; 0x3ba <_ZN6SpiDrv12waitResponseEhPhPS0_h+0xa0>
            index[i] = (char *)params + WL_SSID_MAX_LENGTH*i;

    IF_CHECK_START_CMD(_data)
 3ba:	80 ee       	ldi	r24, 0xE0	; 224
 3bc:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 3c0:	62 96       	adiw	r28, 0x12	; 18
 3c2:	1f ae       	std	Y+63, r1	; 0x3f
 3c4:	62 97       	sbiw	r28, 0x12	; 18
 3c6:	00 97       	sbiw	r24, 0x00	; 0
 3c8:	01 f4       	brne	.+0      	; 0x3ca <_ZN6SpiDrv12waitResponseEhPhPS0_h+0xb0>
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	62 96       	adiw	r28, 0x12	; 18
 3ce:	8f af       	std	Y+63, r24	; 0x3f
 3d0:	62 97       	sbiw	r28, 0x12	; 18
 3d2:	62 96       	adiw	r28, 0x12	; 18
 3d4:	9f ad       	ldd	r25, Y+63	; 0x3f
 3d6:	62 97       	sbiw	r28, 0x12	; 18
 3d8:	99 23       	and	r25, r25
 3da:	01 f0       	breq	.+0      	; 0x3dc <_ZN6SpiDrv12waitResponseEhPhPS0_h+0xc2>
 3dc:	61 96       	adiw	r28, 0x11	; 17
 3de:	1f ae       	std	Y+63, r1	; 0x3f
 3e0:	1e ae       	std	Y+62, r1	; 0x3e
 3e2:	61 97       	sbiw	r28, 0x11	; 17
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <_ZN6SpiDrv12waitResponseEhPhPS0_h+0xcc>
    {
        CHECK_DATA(cmd | REPLY_FLAG, _data){};
 3e6:	fe 01       	movw	r30, r28
 3e8:	e8 5b       	subi	r30, 0xB8	; 184
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	80 81       	ld	r24, Z
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	9e 01       	movw	r18, r28
 3f2:	29 5f       	subi	r18, 0xF9	; 249
 3f4:	3f 4f       	sbci	r19, 0xFF	; 255
 3f6:	b9 01       	movw	r22, r18
 3f8:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 3fc:	2f 96       	adiw	r28, 0x0f	; 15
 3fe:	1f ae       	std	Y+63, r1	; 0x3f
 400:	2f 97       	sbiw	r28, 0x0f	; 15
 402:	00 97       	sbiw	r24, 0x00	; 0
 404:	01 f4       	brne	.+0      	; 0x406 <_ZN6SpiDrv12waitResponseEhPhPS0_h+0xec>
 406:	e1 e0       	ldi	r30, 0x01	; 1
 408:	2f 96       	adiw	r28, 0x0f	; 15
 40a:	ef af       	std	Y+63, r30	; 0x3f
 40c:	2f 97       	sbiw	r28, 0x0f	; 15
 40e:	2f 96       	adiw	r28, 0x0f	; 15
 410:	ff ad       	ldd	r31, Y+63	; 0x3f
 412:	2f 97       	sbiw	r28, 0x0f	; 15
 414:	ff 23       	and	r31, r31
 416:	01 f0       	breq	.+0      	; 0x418 <_ZN6SpiDrv12waitResponseEhPhPS0_h+0xfe>
 418:	61 96       	adiw	r28, 0x11	; 17
 41a:	1f ae       	std	Y+63, r1	; 0x3f
 41c:	1e ae       	std	Y+62, r1	; 0x3e
 41e:	61 97       	sbiw	r28, 0x11	; 17
 420:	00 c0       	rjmp	.+0      	; 0x422 <_ZN6SpiDrv12waitResponseEhPhPS0_h+0x108>

        uint8_t numParam = readChar();
 422:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 426:	8a 83       	std	Y+2, r24	; 0x02

        if (numParam > maxNumParams)
 428:	fe 01       	movw	r30, r28
 42a:	e3 5b       	subi	r30, 0xB3	; 179
 42c:	ff 4f       	sbci	r31, 0xFF	; 255
 42e:	9a 81       	ldd	r25, Y+2	; 0x02
 430:	80 81       	ld	r24, Z
 432:	89 17       	cp	r24, r25
 434:	00 f4       	brcc	.+0      	; 0x436 <_ZN6SpiDrv12waitResponseEhPhPS0_h+0x11c>
        {
            numParam = maxNumParams;
 436:	fe 01       	movw	r30, r28
 438:	e3 5b       	subi	r30, 0xB3	; 179
 43a:	ff 4f       	sbci	r31, 0xFF	; 255
 43c:	80 81       	ld	r24, Z
 43e:	8a 83       	std	Y+2, r24	; 0x02
        }
        *numParamRead = numParam;
 440:	fe 01       	movw	r30, r28
 442:	e7 5b       	subi	r30, 0xB7	; 183
 444:	ff 4f       	sbci	r31, 0xFF	; 255
 446:	01 90       	ld	r0, Z+
 448:	f0 81       	ld	r31, Z
 44a:	e0 2d       	mov	r30, r0
 44c:	8a 81       	ldd	r24, Y+2	; 0x02
 44e:	80 83       	st	Z, r24
        if (numParam != 0)
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	88 23       	and	r24, r24
 454:	01 f4       	brne	.+0      	; 0x456 <_ZN6SpiDrv12waitResponseEhPhPS0_h+0x13c>
 456:	00 c0       	rjmp	.+0      	; 0x458 <_ZN6SpiDrv12waitResponseEhPhPS0_h+0x13e>
        {
            for (i=0; i<numParam; ++i)
 458:	1e 82       	std	Y+6, r1	; 0x06
 45a:	1d 82       	std	Y+5, r1	; 0x05
 45c:	00 c0       	rjmp	.+0      	; 0x45e <_ZN6SpiDrv12waitResponseEhPhPS0_h+0x144>
            {
            	uint8_t paramLen = readParamLen8();
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 466:	89 83       	std	Y+1, r24	; 0x01
                for (ii=0; ii<paramLen; ++ii)
 468:	1c 82       	std	Y+4, r1	; 0x04
 46a:	1b 82       	std	Y+3, r1	; 0x03
 46c:	00 c0       	rjmp	.+0      	; 0x46e <_ZN6SpiDrv12waitResponseEhPhPS0_h+0x154>
                {
                	//ssid[ii] = spiTransfer(DUMMY_DATA);
                    // Get Params data
                    index[i][ii] = (uint8_t)spiTransfer(DUMMY_DATA);
 46e:	8d 81       	ldd	r24, Y+5	; 0x05
 470:	9e 81       	ldd	r25, Y+6	; 0x06
 472:	9c 01       	movw	r18, r24
 474:	22 0f       	add	r18, r18
 476:	33 1f       	adc	r19, r19
 478:	ce 01       	movw	r24, r28
 47a:	01 96       	adiw	r24, 0x01	; 1
 47c:	82 0f       	add	r24, r18
 47e:	93 1f       	adc	r25, r19
 480:	fc 01       	movw	r30, r24
 482:	37 96       	adiw	r30, 0x07	; 7
 484:	20 81       	ld	r18, Z
 486:	31 81       	ldd	r19, Z+1	; 0x01
 488:	8b 81       	ldd	r24, Y+3	; 0x03
 48a:	9c 81       	ldd	r25, Y+4	; 0x04
 48c:	89 01       	movw	r16, r18
 48e:	08 0f       	add	r16, r24
 490:	19 1f       	adc	r17, r25
 492:	8f ef       	ldi	r24, 0xFF	; 255
 494:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 498:	f8 01       	movw	r30, r16
 49a:	80 83       	st	Z, r24
        if (numParam != 0)
        {
            for (i=0; i<numParam; ++i)
            {
            	uint8_t paramLen = readParamLen8();
                for (ii=0; ii<paramLen; ++ii)
 49c:	8b 81       	ldd	r24, Y+3	; 0x03
 49e:	9c 81       	ldd	r25, Y+4	; 0x04
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	9c 83       	std	Y+4, r25	; 0x04
 4a4:	8b 83       	std	Y+3, r24	; 0x03
 4a6:	89 81       	ldd	r24, Y+1	; 0x01
 4a8:	28 2f       	mov	r18, r24
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	8b 81       	ldd	r24, Y+3	; 0x03
 4ae:	9c 81       	ldd	r25, Y+4	; 0x04
 4b0:	82 17       	cp	r24, r18
 4b2:	93 07       	cpc	r25, r19
 4b4:	04 f0       	brlt	.+0      	; 0x4b6 <_ZN6SpiDrv12waitResponseEhPhPS0_h+0x19c>
                	//ssid[ii] = spiTransfer(DUMMY_DATA);
                    // Get Params data
                    index[i][ii] = (uint8_t)spiTransfer(DUMMY_DATA);

                }
                index[i][ii]=0;
 4b6:	8d 81       	ldd	r24, Y+5	; 0x05
 4b8:	9e 81       	ldd	r25, Y+6	; 0x06
 4ba:	9c 01       	movw	r18, r24
 4bc:	22 0f       	add	r18, r18
 4be:	33 1f       	adc	r19, r19
 4c0:	ce 01       	movw	r24, r28
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	82 0f       	add	r24, r18
 4c6:	93 1f       	adc	r25, r19
 4c8:	fc 01       	movw	r30, r24
 4ca:	37 96       	adiw	r30, 0x07	; 7
 4cc:	20 81       	ld	r18, Z
 4ce:	31 81       	ldd	r19, Z+1	; 0x01
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	9c 81       	ldd	r25, Y+4	; 0x04
 4d4:	f9 01       	movw	r30, r18
 4d6:	e8 0f       	add	r30, r24
 4d8:	f9 1f       	adc	r31, r25
 4da:	10 82       	st	Z, r1
            numParam = maxNumParams;
        }
        *numParamRead = numParam;
        if (numParam != 0)
        {
            for (i=0; i<numParam; ++i)
 4dc:	8d 81       	ldd	r24, Y+5	; 0x05
 4de:	9e 81       	ldd	r25, Y+6	; 0x06
 4e0:	01 96       	adiw	r24, 0x01	; 1
 4e2:	9e 83       	std	Y+6, r25	; 0x06
 4e4:	8d 83       	std	Y+5, r24	; 0x05
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	28 2f       	mov	r18, r24
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	8d 81       	ldd	r24, Y+5	; 0x05
 4ee:	9e 81       	ldd	r25, Y+6	; 0x06
 4f0:	82 17       	cp	r24, r18
 4f2:	93 07       	cpc	r25, r19
 4f4:	04 f4       	brge	.+0      	; 0x4f6 <_ZN6SpiDrv12waitResponseEhPhPS0_h+0x1dc>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <_ZN6SpiDrv12waitResponseEhPhPS0_h+0x1de>
        {
            WARN("Error numParams == 0");
            readAndCheckChar(END_CMD, &_data);
            return 0;
        }
        readAndCheckChar(END_CMD, &_data);
 4f8:	9e 01       	movw	r18, r28
 4fa:	29 5f       	subi	r18, 0xF9	; 249
 4fc:	3f 4f       	sbci	r19, 0xFF	; 255
 4fe:	8e ee       	ldi	r24, 0xEE	; 238
 500:	b9 01       	movw	r22, r18
 502:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
    }
    return 1;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	61 96       	adiw	r28, 0x11	; 17
 50c:	9f af       	std	Y+63, r25	; 0x3f
 50e:	8e af       	std	Y+62, r24	; 0x3e
 510:	61 97       	sbiw	r28, 0x11	; 17
 512:	00 c0       	rjmp	.+0      	; 0x514 <_ZN6SpiDrv12waitResponseEhPhPS0_h+0x1fa>
                index[i][ii]=0;
            }
        } else
        {
            WARN("Error numParams == 0");
            readAndCheckChar(END_CMD, &_data);
 514:	9e 01       	movw	r18, r28
 516:	29 5f       	subi	r18, 0xF9	; 249
 518:	3f 4f       	sbci	r19, 0xFF	; 255
 51a:	8e ee       	ldi	r24, 0xEE	; 238
 51c:	b9 01       	movw	r22, r18
 51e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
            return 0;
 522:	61 96       	adiw	r28, 0x11	; 17
 524:	1f ae       	std	Y+63, r1	; 0x3f
 526:	1e ae       	std	Y+62, r1	; 0x3e
 528:	61 97       	sbiw	r28, 0x11	; 17
 52a:	61 96       	adiw	r28, 0x11	; 17
 52c:	8e ad       	ldd	r24, Y+62	; 0x3e
 52e:	9f ad       	ldd	r25, Y+63	; 0x3f
 530:	61 97       	sbiw	r28, 0x11	; 17
        }
        readAndCheckChar(END_CMD, &_data);
    }
    return 1;
}
 532:	cf 5a       	subi	r28, 0xAF	; 175
 534:	df 4f       	sbci	r29, 0xFF	; 255
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	f8 94       	cli
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	cf 91       	pop	r28
 542:	df 91       	pop	r29
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	08 95       	ret

0000054a <_ZN6SpiDrv18waitResponseParamsEhhP6tParam>:
    }     
    
    return 1;
}

int SpiDrv::waitResponseParams(uint8_t cmd, uint8_t numParam, tParam* params)
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	df 93       	push	r29
 550:	cf 93       	push	r28
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
 556:	2e 97       	sbiw	r28, 0x0e	; 14
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	f8 94       	cli
 55c:	de bf       	out	0x3e, r29	; 62
 55e:	0f be       	out	0x3f, r0	; 63
 560:	cd bf       	out	0x3d, r28	; 61
 562:	8f 83       	std	Y+7, r24	; 0x07
 564:	68 87       	std	Y+8, r22	; 0x08
 566:	5a 87       	std	Y+10, r21	; 0x0a
 568:	49 87       	std	Y+9, r20	; 0x09
{
    char _data = 0;
 56a:	1e 82       	std	Y+6, r1	; 0x06
    int i =0, ii = 0;
 56c:	1d 82       	std	Y+5, r1	; 0x05
 56e:	1c 82       	std	Y+4, r1	; 0x04
 570:	1b 82       	std	Y+3, r1	; 0x03
 572:	1a 82       	std	Y+2, r1	; 0x02


    IF_CHECK_START_CMD(_data)
 574:	80 ee       	ldi	r24, 0xE0	; 224
 576:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 57a:	1e 86       	std	Y+14, r1	; 0x0e
 57c:	00 97       	sbiw	r24, 0x00	; 0
 57e:	01 f4       	brne	.+0      	; 0x580 <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x36>
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	8e 87       	std	Y+14, r24	; 0x0e
 584:	9e 85       	ldd	r25, Y+14	; 0x0e
 586:	99 23       	and	r25, r25
 588:	01 f0       	breq	.+0      	; 0x58a <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x40>
 58a:	1d 86       	std	Y+13, r1	; 0x0d
 58c:	1c 86       	std	Y+12, r1	; 0x0c
 58e:	00 c0       	rjmp	.+0      	; 0x590 <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x46>
    {
        CHECK_DATA(cmd | REPLY_FLAG, _data){};
 590:	8f 81       	ldd	r24, Y+7	; 0x07
 592:	80 68       	ori	r24, 0x80	; 128
 594:	9e 01       	movw	r18, r28
 596:	2a 5f       	subi	r18, 0xFA	; 250
 598:	3f 4f       	sbci	r19, 0xFF	; 255
 59a:	b9 01       	movw	r22, r18
 59c:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 5a0:	1b 86       	std	Y+11, r1	; 0x0b
 5a2:	00 97       	sbiw	r24, 0x00	; 0
 5a4:	01 f4       	brne	.+0      	; 0x5a6 <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x5c>
 5a6:	e1 e0       	ldi	r30, 0x01	; 1
 5a8:	eb 87       	std	Y+11, r30	; 0x0b
 5aa:	fb 85       	ldd	r31, Y+11	; 0x0b
 5ac:	ff 23       	and	r31, r31
 5ae:	01 f0       	breq	.+0      	; 0x5b0 <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x66>
 5b0:	1d 86       	std	Y+13, r1	; 0x0d
 5b2:	1c 86       	std	Y+12, r1	; 0x0c
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x6c>

        uint8_t _numParam = readChar();
 5b6:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 5ba:	89 83       	std	Y+1, r24	; 0x01
        if (_numParam != 0)
 5bc:	89 81       	ldd	r24, Y+1	; 0x01
 5be:	88 23       	and	r24, r24
 5c0:	01 f4       	brne	.+0      	; 0x5c2 <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x78>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x7a>
        {        
            for (i=0; i<_numParam; ++i)
 5c4:	1d 82       	std	Y+5, r1	; 0x05
 5c6:	1c 82       	std	Y+4, r1	; 0x04
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x80>
            {
                params[i].paramLen = readParamLen8();
 5ca:	2c 81       	ldd	r18, Y+4	; 0x04
 5cc:	3d 81       	ldd	r19, Y+5	; 0x05
 5ce:	c9 01       	movw	r24, r18
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	28 0f       	add	r18, r24
 5d6:	39 1f       	adc	r19, r25
 5d8:	89 85       	ldd	r24, Y+9	; 0x09
 5da:	9a 85       	ldd	r25, Y+10	; 0x0a
 5dc:	8c 01       	movw	r16, r24
 5de:	02 0f       	add	r16, r18
 5e0:	13 1f       	adc	r17, r19
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 5ea:	f8 01       	movw	r30, r16
 5ec:	80 83       	st	Z, r24
                for (ii=0; ii<params[i].paramLen; ++ii)
 5ee:	1b 82       	std	Y+3, r1	; 0x03
 5f0:	1a 82       	std	Y+2, r1	; 0x02
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0xaa>
                {
                    // Get Params data
                    params[i].param[ii] = spiTransfer(DUMMY_DATA);
 5f4:	2c 81       	ldd	r18, Y+4	; 0x04
 5f6:	3d 81       	ldd	r19, Y+5	; 0x05
 5f8:	c9 01       	movw	r24, r18
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	28 0f       	add	r18, r24
 600:	39 1f       	adc	r19, r25
 602:	89 85       	ldd	r24, Y+9	; 0x09
 604:	9a 85       	ldd	r25, Y+10	; 0x0a
 606:	fc 01       	movw	r30, r24
 608:	e2 0f       	add	r30, r18
 60a:	f3 1f       	adc	r31, r19
 60c:	21 81       	ldd	r18, Z+1	; 0x01
 60e:	32 81       	ldd	r19, Z+2	; 0x02
 610:	8a 81       	ldd	r24, Y+2	; 0x02
 612:	9b 81       	ldd	r25, Y+3	; 0x03
 614:	89 01       	movw	r16, r18
 616:	08 0f       	add	r16, r24
 618:	19 1f       	adc	r17, r25
 61a:	8f ef       	ldi	r24, 0xFF	; 255
 61c:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 620:	f8 01       	movw	r30, r16
 622:	80 83       	st	Z, r24
        if (_numParam != 0)
        {        
            for (i=0; i<_numParam; ++i)
            {
                params[i].paramLen = readParamLen8();
                for (ii=0; ii<params[i].paramLen; ++ii)
 624:	8a 81       	ldd	r24, Y+2	; 0x02
 626:	9b 81       	ldd	r25, Y+3	; 0x03
 628:	01 96       	adiw	r24, 0x01	; 1
 62a:	9b 83       	std	Y+3, r25	; 0x03
 62c:	8a 83       	std	Y+2, r24	; 0x02
 62e:	2c 81       	ldd	r18, Y+4	; 0x04
 630:	3d 81       	ldd	r19, Y+5	; 0x05
 632:	c9 01       	movw	r24, r18
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	28 0f       	add	r18, r24
 63a:	39 1f       	adc	r19, r25
 63c:	89 85       	ldd	r24, Y+9	; 0x09
 63e:	9a 85       	ldd	r25, Y+10	; 0x0a
 640:	fc 01       	movw	r30, r24
 642:	e2 0f       	add	r30, r18
 644:	f3 1f       	adc	r31, r19
 646:	80 81       	ld	r24, Z
 648:	28 2f       	mov	r18, r24
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	8a 81       	ldd	r24, Y+2	; 0x02
 64e:	9b 81       	ldd	r25, Y+3	; 0x03
 650:	82 17       	cp	r24, r18
 652:	93 07       	cpc	r25, r19
 654:	04 f0       	brlt	.+0      	; 0x656 <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x10c>
        CHECK_DATA(cmd | REPLY_FLAG, _data){};

        uint8_t _numParam = readChar();
        if (_numParam != 0)
        {        
            for (i=0; i<_numParam; ++i)
 656:	8c 81       	ldd	r24, Y+4	; 0x04
 658:	9d 81       	ldd	r25, Y+5	; 0x05
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	9d 83       	std	Y+5, r25	; 0x05
 65e:	8c 83       	std	Y+4, r24	; 0x04
 660:	89 81       	ldd	r24, Y+1	; 0x01
 662:	28 2f       	mov	r18, r24
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	8c 81       	ldd	r24, Y+4	; 0x04
 668:	9d 81       	ldd	r25, Y+5	; 0x05
 66a:	82 17       	cp	r24, r18
 66c:	93 07       	cpc	r25, r19
 66e:	04 f4       	brge	.+0      	; 0x670 <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x126>
 670:	00 c0       	rjmp	.+0      	; 0x672 <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x128>
        {
            WARN("Error numParam == 0");
            return 0;
        }

        if (numParam != _numParam)
 672:	98 85       	ldd	r25, Y+8	; 0x08
 674:	89 81       	ldd	r24, Y+1	; 0x01
 676:	98 17       	cp	r25, r24
 678:	01 f4       	brne	.+0      	; 0x67a <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x130>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x132>
                } 
            }
        } else
        {
            WARN("Error numParam == 0");
            return 0;
 67c:	1d 86       	std	Y+13, r1	; 0x0d
 67e:	1c 86       	std	Y+12, r1	; 0x0c
 680:	00 c0       	rjmp	.+0      	; 0x682 <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x138>
        }

        if (numParam != _numParam)
        {
            WARN("Mismatch numParam");
            return 0;
 682:	1d 86       	std	Y+13, r1	; 0x0d
 684:	1c 86       	std	Y+12, r1	; 0x0c
 686:	00 c0       	rjmp	.+0      	; 0x688 <_ZN6SpiDrv18waitResponseParamsEhhP6tParam+0x13e>
        }

        readAndCheckChar(END_CMD, &_data);
 688:	9e 01       	movw	r18, r28
 68a:	2a 5f       	subi	r18, 0xFA	; 250
 68c:	3f 4f       	sbci	r19, 0xFF	; 255
 68e:	8e ee       	ldi	r24, 0xEE	; 238
 690:	b9 01       	movw	r22, r18
 692:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
    }         
    return 1;
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	9d 87       	std	Y+13, r25	; 0x0d
 69c:	8c 87       	std	Y+12, r24	; 0x0c
 69e:	8c 85       	ldd	r24, Y+12	; 0x0c
 6a0:	9d 85       	ldd	r25, Y+13	; 0x0d
}
 6a2:	2e 96       	adiw	r28, 0x0e	; 14
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	f8 94       	cli
 6a8:	de bf       	out	0x3e, r29	; 62
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	cd bf       	out	0x3d, r28	; 61
 6ae:	cf 91       	pop	r28
 6b0:	df 91       	pop	r29
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	08 95       	ret

000006b8 <_ZN6SpiDrv17waitResponseData8EhPhS0_>:
    }     
    
    return 1;
}

int SpiDrv::waitResponseData8(uint8_t cmd, uint8_t* param, uint8_t* param_len)
 6b8:	0f 93       	push	r16
 6ba:	1f 93       	push	r17
 6bc:	df 93       	push	r29
 6be:	cf 93       	push	r28
 6c0:	cd b7       	in	r28, 0x3d	; 61
 6c2:	de b7       	in	r29, 0x3e	; 62
 6c4:	2d 97       	sbiw	r28, 0x0d	; 13
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	f8 94       	cli
 6ca:	de bf       	out	0x3e, r29	; 62
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	cd bf       	out	0x3d, r28	; 61
 6d0:	8d 83       	std	Y+5, r24	; 0x05
 6d2:	7f 83       	std	Y+7, r23	; 0x07
 6d4:	6e 83       	std	Y+6, r22	; 0x06
 6d6:	59 87       	std	Y+9, r21	; 0x09
 6d8:	48 87       	std	Y+8, r20	; 0x08
{
    char _data = 0;
 6da:	1c 82       	std	Y+4, r1	; 0x04
    int ii = 0;
 6dc:	1b 82       	std	Y+3, r1	; 0x03
 6de:	1a 82       	std	Y+2, r1	; 0x02

    IF_CHECK_START_CMD(_data)
 6e0:	80 ee       	ldi	r24, 0xE0	; 224
 6e2:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 6e6:	1d 86       	std	Y+13, r1	; 0x0d
 6e8:	00 97       	sbiw	r24, 0x00	; 0
 6ea:	01 f4       	brne	.+0      	; 0x6ec <_ZN6SpiDrv17waitResponseData8EhPhS0_+0x34>
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	8d 87       	std	Y+13, r24	; 0x0d
 6f0:	9d 85       	ldd	r25, Y+13	; 0x0d
 6f2:	99 23       	and	r25, r25
 6f4:	01 f0       	breq	.+0      	; 0x6f6 <_ZN6SpiDrv17waitResponseData8EhPhS0_+0x3e>
 6f6:	1c 86       	std	Y+12, r1	; 0x0c
 6f8:	1b 86       	std	Y+11, r1	; 0x0b
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <_ZN6SpiDrv17waitResponseData8EhPhS0_+0x44>
    {
        CHECK_DATA(cmd | REPLY_FLAG, _data){};
 6fc:	8d 81       	ldd	r24, Y+5	; 0x05
 6fe:	80 68       	ori	r24, 0x80	; 128
 700:	9e 01       	movw	r18, r28
 702:	2c 5f       	subi	r18, 0xFC	; 252
 704:	3f 4f       	sbci	r19, 0xFF	; 255
 706:	b9 01       	movw	r22, r18
 708:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 70c:	1a 86       	std	Y+10, r1	; 0x0a
 70e:	00 97       	sbiw	r24, 0x00	; 0
 710:	01 f4       	brne	.+0      	; 0x712 <_ZN6SpiDrv17waitResponseData8EhPhS0_+0x5a>
 712:	e1 e0       	ldi	r30, 0x01	; 1
 714:	ea 87       	std	Y+10, r30	; 0x0a
 716:	fa 85       	ldd	r31, Y+10	; 0x0a
 718:	ff 23       	and	r31, r31
 71a:	01 f0       	breq	.+0      	; 0x71c <_ZN6SpiDrv17waitResponseData8EhPhS0_+0x64>
 71c:	1c 86       	std	Y+12, r1	; 0x0c
 71e:	1b 86       	std	Y+11, r1	; 0x0b
 720:	00 c0       	rjmp	.+0      	; 0x722 <_ZN6SpiDrv17waitResponseData8EhPhS0_+0x6a>

        uint8_t numParam = readChar();
 722:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 726:	89 83       	std	Y+1, r24	; 0x01
        if (numParam != 0)
 728:	89 81       	ldd	r24, Y+1	; 0x01
 72a:	88 23       	and	r24, r24
 72c:	01 f0       	breq	.+0      	; 0x72e <_ZN6SpiDrv17waitResponseData8EhPhS0_+0x76>
        {        
            readParamLen8(param_len);
 72e:	88 85       	ldd	r24, Y+8	; 0x08
 730:	99 85       	ldd	r25, Y+9	; 0x09
 732:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
            for (ii=0; ii<(*param_len); ++ii)
 736:	1b 82       	std	Y+3, r1	; 0x03
 738:	1a 82       	std	Y+2, r1	; 0x02
 73a:	00 c0       	rjmp	.+0      	; 0x73c <_ZN6SpiDrv17waitResponseData8EhPhS0_+0x84>
            {
                // Get Params data
                param[ii] = spiTransfer(DUMMY_DATA);
 73c:	2a 81       	ldd	r18, Y+2	; 0x02
 73e:	3b 81       	ldd	r19, Y+3	; 0x03
 740:	8e 81       	ldd	r24, Y+6	; 0x06
 742:	9f 81       	ldd	r25, Y+7	; 0x07
 744:	8c 01       	movw	r16, r24
 746:	02 0f       	add	r16, r18
 748:	13 1f       	adc	r17, r19
 74a:	8f ef       	ldi	r24, 0xFF	; 255
 74c:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 750:	f8 01       	movw	r30, r16
 752:	80 83       	st	Z, r24

        uint8_t numParam = readChar();
        if (numParam != 0)
        {        
            readParamLen8(param_len);
            for (ii=0; ii<(*param_len); ++ii)
 754:	8a 81       	ldd	r24, Y+2	; 0x02
 756:	9b 81       	ldd	r25, Y+3	; 0x03
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	9b 83       	std	Y+3, r25	; 0x03
 75c:	8a 83       	std	Y+2, r24	; 0x02
 75e:	e8 85       	ldd	r30, Y+8	; 0x08
 760:	f9 85       	ldd	r31, Y+9	; 0x09
 762:	80 81       	ld	r24, Z
 764:	28 2f       	mov	r18, r24
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	8a 81       	ldd	r24, Y+2	; 0x02
 76a:	9b 81       	ldd	r25, Y+3	; 0x03
 76c:	82 17       	cp	r24, r18
 76e:	93 07       	cpc	r25, r19
 770:	04 f0       	brlt	.+0      	; 0x772 <_ZN6SpiDrv17waitResponseData8EhPhS0_+0xba>
                // Get Params data
                param[ii] = spiTransfer(DUMMY_DATA);
            } 
        }         

        readAndCheckChar(END_CMD, &_data);
 772:	9e 01       	movw	r18, r28
 774:	2c 5f       	subi	r18, 0xFC	; 252
 776:	3f 4f       	sbci	r19, 0xFF	; 255
 778:	8e ee       	ldi	r24, 0xEE	; 238
 77a:	b9 01       	movw	r22, r18
 77c:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
    }     
    
    return 1;
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	9c 87       	std	Y+12, r25	; 0x0c
 786:	8b 87       	std	Y+11, r24	; 0x0b
 788:	8b 85       	ldd	r24, Y+11	; 0x0b
 78a:	9c 85       	ldd	r25, Y+12	; 0x0c
}
 78c:	2d 96       	adiw	r28, 0x0d	; 13
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	f8 94       	cli
 792:	de bf       	out	0x3e, r29	; 62
 794:	0f be       	out	0x3f, r0	; 63
 796:	cd bf       	out	0x3d, r28	; 61
 798:	cf 91       	pop	r28
 79a:	df 91       	pop	r29
 79c:	1f 91       	pop	r17
 79e:	0f 91       	pop	r16
 7a0:	08 95       	ret

000007a2 <_ZN6SpiDrv15waitResponseCmdEhhPhS0_>:
    // Get Params data
    *param = spiTransfer(DUMMY_DATA);
    DELAY_TRANSFER();
}

int SpiDrv::waitResponseCmd(uint8_t cmd, uint8_t numParam, uint8_t* param, uint8_t* param_len)
 7a2:	df 93       	push	r29
 7a4:	cf 93       	push	r28
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	2e 97       	sbiw	r28, 0x0e	; 14
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	f8 94       	cli
 7b0:	de bf       	out	0x3e, r29	; 62
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	cd bf       	out	0x3d, r28	; 61
 7b6:	8c 83       	std	Y+4, r24	; 0x04
 7b8:	6d 83       	std	Y+5, r22	; 0x05
 7ba:	5f 83       	std	Y+7, r21	; 0x07
 7bc:	4e 83       	std	Y+6, r20	; 0x06
 7be:	39 87       	std	Y+9, r19	; 0x09
 7c0:	28 87       	std	Y+8, r18	; 0x08
{
    char _data = 0;
 7c2:	1b 82       	std	Y+3, r1	; 0x03
    int ii = 0;
 7c4:	1a 82       	std	Y+2, r1	; 0x02
 7c6:	19 82       	std	Y+1, r1	; 0x01

    IF_CHECK_START_CMD(_data)
 7c8:	80 ee       	ldi	r24, 0xE0	; 224
 7ca:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 7ce:	1e 86       	std	Y+14, r1	; 0x0e
 7d0:	00 97       	sbiw	r24, 0x00	; 0
 7d2:	01 f4       	brne	.+0      	; 0x7d4 <_ZN6SpiDrv15waitResponseCmdEhhPhS0_+0x32>
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	8e 87       	std	Y+14, r24	; 0x0e
 7d8:	9e 85       	ldd	r25, Y+14	; 0x0e
 7da:	99 23       	and	r25, r25
 7dc:	01 f0       	breq	.+0      	; 0x7de <_ZN6SpiDrv15waitResponseCmdEhhPhS0_+0x3c>
 7de:	1d 86       	std	Y+13, r1	; 0x0d
 7e0:	1c 86       	std	Y+12, r1	; 0x0c
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <_ZN6SpiDrv15waitResponseCmdEhhPhS0_+0x42>
    {
        CHECK_DATA(cmd | REPLY_FLAG, _data){};
 7e4:	8c 81       	ldd	r24, Y+4	; 0x04
 7e6:	80 68       	ori	r24, 0x80	; 128
 7e8:	9e 01       	movw	r18, r28
 7ea:	2d 5f       	subi	r18, 0xFD	; 253
 7ec:	3f 4f       	sbci	r19, 0xFF	; 255
 7ee:	b9 01       	movw	r22, r18
 7f0:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 7f4:	1b 86       	std	Y+11, r1	; 0x0b
 7f6:	00 97       	sbiw	r24, 0x00	; 0
 7f8:	01 f4       	brne	.+0      	; 0x7fa <_ZN6SpiDrv15waitResponseCmdEhhPhS0_+0x58>
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	8b 87       	std	Y+11, r24	; 0x0b
 7fe:	9b 85       	ldd	r25, Y+11	; 0x0b
 800:	99 23       	and	r25, r25
 802:	01 f0       	breq	.+0      	; 0x804 <_ZN6SpiDrv15waitResponseCmdEhhPhS0_+0x62>
 804:	1d 86       	std	Y+13, r1	; 0x0d
 806:	1c 86       	std	Y+12, r1	; 0x0c
 808:	00 c0       	rjmp	.+0      	; 0x80a <_ZN6SpiDrv15waitResponseCmdEhhPhS0_+0x68>

        CHECK_DATA(numParam, _data);
 80a:	9e 01       	movw	r18, r28
 80c:	2d 5f       	subi	r18, 0xFD	; 253
 80e:	3f 4f       	sbci	r19, 0xFF	; 255
 810:	8d 81       	ldd	r24, Y+5	; 0x05
 812:	b9 01       	movw	r22, r18
 814:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 818:	1a 86       	std	Y+10, r1	; 0x0a
 81a:	00 97       	sbiw	r24, 0x00	; 0
 81c:	01 f4       	brne	.+0      	; 0x81e <_ZN6SpiDrv15waitResponseCmdEhhPhS0_+0x7c>
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	8a 87       	std	Y+10, r24	; 0x0a
 822:	9a 85       	ldd	r25, Y+10	; 0x0a
 824:	99 23       	and	r25, r25
 826:	01 f0       	breq	.+0      	; 0x828 <_ZN6SpiDrv15waitResponseCmdEhhPhS0_+0x86>
 828:	1d 86       	std	Y+13, r1	; 0x0d
 82a:	1c 86       	std	Y+12, r1	; 0x0c
 82c:	00 c0       	rjmp	.+0      	; 0x82e <_ZN6SpiDrv15waitResponseCmdEhhPhS0_+0x8c>
        {
            readParamLen8(param_len);
 82e:	88 85       	ldd	r24, Y+8	; 0x08
 830:	99 85       	ldd	r25, Y+9	; 0x09
 832:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
            for (ii=0; ii<(*param_len); ++ii)
 836:	1a 82       	std	Y+2, r1	; 0x02
 838:	19 82       	std	Y+1, r1	; 0x01
 83a:	00 c0       	rjmp	.+0      	; 0x83c <_ZN6SpiDrv15waitResponseCmdEhhPhS0_+0x9a>
            {
                // Get Params data
                //param[ii] = spiTransfer(DUMMY_DATA);
                getParam(&param[ii]);
 83c:	29 81       	ldd	r18, Y+1	; 0x01
 83e:	3a 81       	ldd	r19, Y+2	; 0x02
 840:	8e 81       	ldd	r24, Y+6	; 0x06
 842:	9f 81       	ldd	r25, Y+7	; 0x07
 844:	82 0f       	add	r24, r18
 846:	93 1f       	adc	r25, r19
 848:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
        CHECK_DATA(cmd | REPLY_FLAG, _data){};

        CHECK_DATA(numParam, _data);
        {
            readParamLen8(param_len);
            for (ii=0; ii<(*param_len); ++ii)
 84c:	89 81       	ldd	r24, Y+1	; 0x01
 84e:	9a 81       	ldd	r25, Y+2	; 0x02
 850:	01 96       	adiw	r24, 0x01	; 1
 852:	9a 83       	std	Y+2, r25	; 0x02
 854:	89 83       	std	Y+1, r24	; 0x01
 856:	e8 85       	ldd	r30, Y+8	; 0x08
 858:	f9 85       	ldd	r31, Y+9	; 0x09
 85a:	80 81       	ld	r24, Z
 85c:	28 2f       	mov	r18, r24
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	89 81       	ldd	r24, Y+1	; 0x01
 862:	9a 81       	ldd	r25, Y+2	; 0x02
 864:	82 17       	cp	r24, r18
 866:	93 07       	cpc	r25, r19
 868:	04 f0       	brlt	.+0      	; 0x86a <_ZN6SpiDrv15waitResponseCmdEhhPhS0_+0xc8>
                //param[ii] = spiTransfer(DUMMY_DATA);
                getParam(&param[ii]);
            } 
        }         

        readAndCheckChar(END_CMD, &_data);
 86a:	9e 01       	movw	r18, r28
 86c:	2d 5f       	subi	r18, 0xFD	; 253
 86e:	3f 4f       	sbci	r19, 0xFF	; 255
 870:	8e ee       	ldi	r24, 0xEE	; 238
 872:	b9 01       	movw	r22, r18
 874:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
    }     
    
    return 1;
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	9d 87       	std	Y+13, r25	; 0x0d
 87e:	8c 87       	std	Y+12, r24	; 0x0c
 880:	8c 85       	ldd	r24, Y+12	; 0x0c
 882:	9d 85       	ldd	r25, Y+13	; 0x0d
}
 884:	2e 96       	adiw	r28, 0x0e	; 14
 886:	0f b6       	in	r0, 0x3f	; 63
 888:	f8 94       	cli
 88a:	de bf       	out	0x3e, r29	; 62
 88c:	0f be       	out	0x3f, r0	; 63
 88e:	cd bf       	out	0x3d, r28	; 61
 890:	cf 91       	pop	r28
 892:	df 91       	pop	r29
 894:	08 95       	ret

00000896 <_ZN6SpiDrv14readParamLen16EPj>:
        *param_len = _param_len;
    }
    return _param_len;
}

uint16_t SpiDrv::readParamLen16(uint16_t* param_len)
 896:	0f 93       	push	r16
 898:	1f 93       	push	r17
 89a:	df 93       	push	r29
 89c:	cf 93       	push	r28
 89e:	00 d0       	rcall	.+0      	; 0x8a0 <_ZN6SpiDrv14readParamLen16EPj+0xa>
 8a0:	00 d0       	rcall	.+0      	; 0x8a2 <_ZN6SpiDrv14readParamLen16EPj+0xc>
 8a2:	cd b7       	in	r28, 0x3d	; 61
 8a4:	de b7       	in	r29, 0x3e	; 62
 8a6:	9c 83       	std	Y+4, r25	; 0x04
 8a8:	8b 83       	std	Y+3, r24	; 0x03
{
    uint16_t _param_len = spiTransfer(DUMMY_DATA)<<8 | (spiTransfer(DUMMY_DATA)& 0xff);
 8aa:	8f ef       	ldi	r24, 0xFF	; 255
 8ac:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 8b0:	88 2f       	mov	r24, r24
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	18 2f       	mov	r17, r24
 8b6:	00 27       	eor	r16, r16
 8b8:	8f ef       	ldi	r24, 0xFF	; 255
 8ba:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 8be:	88 2f       	mov	r24, r24
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	80 2b       	or	r24, r16
 8c4:	91 2b       	or	r25, r17
 8c6:	9a 83       	std	Y+2, r25	; 0x02
 8c8:	89 83       	std	Y+1, r24	; 0x01
    if (param_len != NULL)
 8ca:	8b 81       	ldd	r24, Y+3	; 0x03
 8cc:	9c 81       	ldd	r25, Y+4	; 0x04
 8ce:	00 97       	sbiw	r24, 0x00	; 0
 8d0:	01 f0       	breq	.+0      	; 0x8d2 <_ZN6SpiDrv14readParamLen16EPj+0x3c>
    {
        *param_len = _param_len;
 8d2:	eb 81       	ldd	r30, Y+3	; 0x03
 8d4:	fc 81       	ldd	r31, Y+4	; 0x04
 8d6:	89 81       	ldd	r24, Y+1	; 0x01
 8d8:	9a 81       	ldd	r25, Y+2	; 0x02
 8da:	91 83       	std	Z+1, r25	; 0x01
 8dc:	80 83       	st	Z, r24
    }
    return _param_len;
 8de:	89 81       	ldd	r24, Y+1	; 0x01
 8e0:	9a 81       	ldd	r25, Y+2	; 0x02
}
 8e2:	0f 90       	pop	r0
 8e4:	0f 90       	pop	r0
 8e6:	0f 90       	pop	r0
 8e8:	0f 90       	pop	r0
 8ea:	cf 91       	pop	r28
 8ec:	df 91       	pop	r29
 8ee:	1f 91       	pop	r17
 8f0:	0f 91       	pop	r16
 8f2:	08 95       	ret

000008f4 <_ZN6SpiDrv18waitResponseData16EhPhPj>:
    
    return 1;
}
*/

int SpiDrv::waitResponseData16(uint8_t cmd, uint8_t* param, uint16_t* param_len)
 8f4:	0f 93       	push	r16
 8f6:	1f 93       	push	r17
 8f8:	df 93       	push	r29
 8fa:	cf 93       	push	r28
 8fc:	cd b7       	in	r28, 0x3d	; 61
 8fe:	de b7       	in	r29, 0x3e	; 62
 900:	2d 97       	sbiw	r28, 0x0d	; 13
 902:	0f b6       	in	r0, 0x3f	; 63
 904:	f8 94       	cli
 906:	de bf       	out	0x3e, r29	; 62
 908:	0f be       	out	0x3f, r0	; 63
 90a:	cd bf       	out	0x3d, r28	; 61
 90c:	8d 83       	std	Y+5, r24	; 0x05
 90e:	7f 83       	std	Y+7, r23	; 0x07
 910:	6e 83       	std	Y+6, r22	; 0x06
 912:	59 87       	std	Y+9, r21	; 0x09
 914:	48 87       	std	Y+8, r20	; 0x08
{
    char _data = 0;
 916:	1c 82       	std	Y+4, r1	; 0x04
    uint16_t ii = 0;
 918:	1b 82       	std	Y+3, r1	; 0x03
 91a:	1a 82       	std	Y+2, r1	; 0x02

    IF_CHECK_START_CMD(_data)
 91c:	80 ee       	ldi	r24, 0xE0	; 224
 91e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 922:	1d 86       	std	Y+13, r1	; 0x0d
 924:	00 97       	sbiw	r24, 0x00	; 0
 926:	01 f4       	brne	.+0      	; 0x928 <_ZN6SpiDrv18waitResponseData16EhPhPj+0x34>
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	8d 87       	std	Y+13, r24	; 0x0d
 92c:	9d 85       	ldd	r25, Y+13	; 0x0d
 92e:	99 23       	and	r25, r25
 930:	01 f0       	breq	.+0      	; 0x932 <_ZN6SpiDrv18waitResponseData16EhPhPj+0x3e>
 932:	1c 86       	std	Y+12, r1	; 0x0c
 934:	1b 86       	std	Y+11, r1	; 0x0b
 936:	00 c0       	rjmp	.+0      	; 0x938 <_ZN6SpiDrv18waitResponseData16EhPhPj+0x44>
    {
        CHECK_DATA(cmd | REPLY_FLAG, _data){};
 938:	8d 81       	ldd	r24, Y+5	; 0x05
 93a:	80 68       	ori	r24, 0x80	; 128
 93c:	9e 01       	movw	r18, r28
 93e:	2c 5f       	subi	r18, 0xFC	; 252
 940:	3f 4f       	sbci	r19, 0xFF	; 255
 942:	b9 01       	movw	r22, r18
 944:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 948:	1a 86       	std	Y+10, r1	; 0x0a
 94a:	00 97       	sbiw	r24, 0x00	; 0
 94c:	01 f4       	brne	.+0      	; 0x94e <_ZN6SpiDrv18waitResponseData16EhPhPj+0x5a>
 94e:	e1 e0       	ldi	r30, 0x01	; 1
 950:	ea 87       	std	Y+10, r30	; 0x0a
 952:	fa 85       	ldd	r31, Y+10	; 0x0a
 954:	ff 23       	and	r31, r31
 956:	01 f0       	breq	.+0      	; 0x958 <_ZN6SpiDrv18waitResponseData16EhPhPj+0x64>
 958:	1c 86       	std	Y+12, r1	; 0x0c
 95a:	1b 86       	std	Y+11, r1	; 0x0b
 95c:	00 c0       	rjmp	.+0      	; 0x95e <_ZN6SpiDrv18waitResponseData16EhPhPj+0x6a>

        uint8_t numParam = readChar();
 95e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 962:	89 83       	std	Y+1, r24	; 0x01
        if (numParam != 0)
 964:	89 81       	ldd	r24, Y+1	; 0x01
 966:	88 23       	and	r24, r24
 968:	01 f0       	breq	.+0      	; 0x96a <_ZN6SpiDrv18waitResponseData16EhPhPj+0x76>
        {        
            readParamLen16(param_len);
 96a:	88 85       	ldd	r24, Y+8	; 0x08
 96c:	99 85       	ldd	r25, Y+9	; 0x09
 96e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
            for (ii=0; ii<(*param_len); ++ii)
 972:	1b 82       	std	Y+3, r1	; 0x03
 974:	1a 82       	std	Y+2, r1	; 0x02
 976:	00 c0       	rjmp	.+0      	; 0x978 <_ZN6SpiDrv18waitResponseData16EhPhPj+0x84>
            {
                // Get Params data
                param[ii] = spiTransfer(DUMMY_DATA);
 978:	2e 81       	ldd	r18, Y+6	; 0x06
 97a:	3f 81       	ldd	r19, Y+7	; 0x07
 97c:	8a 81       	ldd	r24, Y+2	; 0x02
 97e:	9b 81       	ldd	r25, Y+3	; 0x03
 980:	89 01       	movw	r16, r18
 982:	08 0f       	add	r16, r24
 984:	19 1f       	adc	r17, r25
 986:	8f ef       	ldi	r24, 0xFF	; 255
 988:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 98c:	f8 01       	movw	r30, r16
 98e:	80 83       	st	Z, r24

        uint8_t numParam = readChar();
        if (numParam != 0)
        {        
            readParamLen16(param_len);
            for (ii=0; ii<(*param_len); ++ii)
 990:	8a 81       	ldd	r24, Y+2	; 0x02
 992:	9b 81       	ldd	r25, Y+3	; 0x03
 994:	01 96       	adiw	r24, 0x01	; 1
 996:	9b 83       	std	Y+3, r25	; 0x03
 998:	8a 83       	std	Y+2, r24	; 0x02
 99a:	e8 85       	ldd	r30, Y+8	; 0x08
 99c:	f9 85       	ldd	r31, Y+9	; 0x09
 99e:	20 81       	ld	r18, Z
 9a0:	31 81       	ldd	r19, Z+1	; 0x01
 9a2:	8a 81       	ldd	r24, Y+2	; 0x02
 9a4:	9b 81       	ldd	r25, Y+3	; 0x03
 9a6:	82 17       	cp	r24, r18
 9a8:	93 07       	cpc	r25, r19
 9aa:	00 f0       	brcs	.+0      	; 0x9ac <_ZN6SpiDrv18waitResponseData16EhPhPj+0xb8>
                // Get Params data
                param[ii] = spiTransfer(DUMMY_DATA);
            } 
        }         

        readAndCheckChar(END_CMD, &_data);
 9ac:	9e 01       	movw	r18, r28
 9ae:	2c 5f       	subi	r18, 0xFC	; 252
 9b0:	3f 4f       	sbci	r19, 0xFF	; 255
 9b2:	8e ee       	ldi	r24, 0xEE	; 238
 9b4:	b9 01       	movw	r22, r18
 9b6:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
    }     
    
    return 1;
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	9c 87       	std	Y+12, r25	; 0x0c
 9c0:	8b 87       	std	Y+11, r24	; 0x0b
 9c2:	8b 85       	ldd	r24, Y+11	; 0x0b
 9c4:	9c 85       	ldd	r25, Y+12	; 0x0c
}
 9c6:	2d 96       	adiw	r28, 0x0d	; 13
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	f8 94       	cli
 9cc:	de bf       	out	0x3e, r29	; 62
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	cd bf       	out	0x3d, r28	; 61
 9d2:	cf 91       	pop	r28
 9d4:	df 91       	pop	r29
 9d6:	1f 91       	pop	r17
 9d8:	0f 91       	pop	r16
 9da:	08 95       	ret

000009dc <_ZN6SpiDrv10sendBufferEPhjh>:
    }
    return _param_len;
}


void SpiDrv::sendBuffer(uint8_t* param, uint16_t param_len, uint8_t lastParam)
 9dc:	df 93       	push	r29
 9de:	cf 93       	push	r28
 9e0:	cd b7       	in	r28, 0x3d	; 61
 9e2:	de b7       	in	r29, 0x3e	; 62
 9e4:	27 97       	sbiw	r28, 0x07	; 7
 9e6:	0f b6       	in	r0, 0x3f	; 63
 9e8:	f8 94       	cli
 9ea:	de bf       	out	0x3e, r29	; 62
 9ec:	0f be       	out	0x3f, r0	; 63
 9ee:	cd bf       	out	0x3d, r28	; 61
 9f0:	9c 83       	std	Y+4, r25	; 0x04
 9f2:	8b 83       	std	Y+3, r24	; 0x03
 9f4:	7e 83       	std	Y+6, r23	; 0x06
 9f6:	6d 83       	std	Y+5, r22	; 0x05
 9f8:	4f 83       	std	Y+7, r20	; 0x07
{
    uint16_t i = 0;
 9fa:	1a 82       	std	Y+2, r1	; 0x02
 9fc:	19 82       	std	Y+1, r1	; 0x01

    // Send Spi paramLen
    sendParamLen16(param_len);
 9fe:	8d 81       	ldd	r24, Y+5	; 0x05
 a00:	9e 81       	ldd	r25, Y+6	; 0x06
 a02:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>

    // Send Spi param data
    for (i=0; i<param_len; ++i)
 a06:	1a 82       	std	Y+2, r1	; 0x02
 a08:	19 82       	std	Y+1, r1	; 0x01
 a0a:	00 c0       	rjmp	.+0      	; 0xa0c <_ZN6SpiDrv10sendBufferEPhjh+0x30>
    {
        spiTransfer(param[i]);
 a0c:	2b 81       	ldd	r18, Y+3	; 0x03
 a0e:	3c 81       	ldd	r19, Y+4	; 0x04
 a10:	89 81       	ldd	r24, Y+1	; 0x01
 a12:	9a 81       	ldd	r25, Y+2	; 0x02
 a14:	f9 01       	movw	r30, r18
 a16:	e8 0f       	add	r30, r24
 a18:	f9 1f       	adc	r31, r25
 a1a:	80 81       	ld	r24, Z
 a1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>

    // Send Spi paramLen
    sendParamLen16(param_len);

    // Send Spi param data
    for (i=0; i<param_len; ++i)
 a20:	89 81       	ldd	r24, Y+1	; 0x01
 a22:	9a 81       	ldd	r25, Y+2	; 0x02
 a24:	01 96       	adiw	r24, 0x01	; 1
 a26:	9a 83       	std	Y+2, r25	; 0x02
 a28:	89 83       	std	Y+1, r24	; 0x01
 a2a:	29 81       	ldd	r18, Y+1	; 0x01
 a2c:	3a 81       	ldd	r19, Y+2	; 0x02
 a2e:	8d 81       	ldd	r24, Y+5	; 0x05
 a30:	9e 81       	ldd	r25, Y+6	; 0x06
 a32:	28 17       	cp	r18, r24
 a34:	39 07       	cpc	r19, r25
 a36:	00 f0       	brcs	.+0      	; 0xa38 <_ZN6SpiDrv10sendBufferEPhjh+0x5c>
    {
        spiTransfer(param[i]);
    }

    // if lastParam==1 Send Spi END CMD
    if (lastParam == 1)
 a38:	8f 81       	ldd	r24, Y+7	; 0x07
 a3a:	81 30       	cpi	r24, 0x01	; 1
 a3c:	01 f4       	brne	.+0      	; 0xa3e <_ZN6SpiDrv10sendBufferEPhjh+0x62>
        spiTransfer(END_CMD);
 a3e:	8e ee       	ldi	r24, 0xEE	; 238
 a40:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
}
 a44:	27 96       	adiw	r28, 0x07	; 7
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	f8 94       	cli
 a4a:	de bf       	out	0x3e, r29	; 62
 a4c:	0f be       	out	0x3f, r0	; 63
 a4e:	cd bf       	out	0x3d, r28	; 61
 a50:	cf 91       	pop	r28
 a52:	df 91       	pop	r29
 a54:	08 95       	ret

00000a56 <_ZN6SpiDrv9sendParamEjh>:


void SpiDrv::sendParam(uint16_t param, uint8_t lastParam)
 a56:	df 93       	push	r29
 a58:	cf 93       	push	r28
 a5a:	00 d0       	rcall	.+0      	; 0xa5c <_ZN6SpiDrv9sendParamEjh+0x6>
 a5c:	0f 92       	push	r0
 a5e:	cd b7       	in	r28, 0x3d	; 61
 a60:	de b7       	in	r29, 0x3e	; 62
 a62:	9a 83       	std	Y+2, r25	; 0x02
 a64:	89 83       	std	Y+1, r24	; 0x01
 a66:	6b 83       	std	Y+3, r22	; 0x03
{
    // Send Spi paramLen
    sendParamLen8(2);
 a68:	82 e0       	ldi	r24, 0x02	; 2
 a6a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>

    spiTransfer((uint8_t)((param & 0xff00)>>8));
 a6e:	89 81       	ldd	r24, Y+1	; 0x01
 a70:	9a 81       	ldd	r25, Y+2	; 0x02
 a72:	89 2f       	mov	r24, r25
 a74:	99 27       	eor	r25, r25
 a76:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
    spiTransfer((uint8_t)(param & 0xff));
 a7a:	89 81       	ldd	r24, Y+1	; 0x01
 a7c:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>

    // if lastParam==1 Send Spi END CMD
    if (lastParam == 1)
 a80:	8b 81       	ldd	r24, Y+3	; 0x03
 a82:	81 30       	cpi	r24, 0x01	; 1
 a84:	01 f4       	brne	.+0      	; 0xa86 <_ZN6SpiDrv9sendParamEjh+0x30>
        spiTransfer(END_CMD);
 a86:	8e ee       	ldi	r24, 0xEE	; 238
 a88:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
}
 a8c:	0f 90       	pop	r0
 a8e:	0f 90       	pop	r0
 a90:	0f 90       	pop	r0
 a92:	cf 91       	pop	r28
 a94:	df 91       	pop	r29
 a96:	08 95       	ret

00000a98 <_ZN6SpiDrv7sendCmdEhh>:
/*| START CMD | C/R  | CMD  |[TOT LEN]| N.PARAM | PARAM LEN | PARAM  | .. | END CMD | */
/*|___________|______|______|_________|_________|___________|________|____|_________| */
/*|   8 bit   | 1bit | 7bit |  8bit   |  8bit   |   8bit    | nbytes | .. |   8bit  | */
/*|___________|______|______|_________|_________|___________|________|____|_________| */

void SpiDrv::sendCmd(uint8_t cmd, uint8_t numParam)
 a98:	df 93       	push	r29
 a9a:	cf 93       	push	r28
 a9c:	00 d0       	rcall	.+0      	; 0xa9e <_ZN6SpiDrv7sendCmdEhh+0x6>
 a9e:	cd b7       	in	r28, 0x3d	; 61
 aa0:	de b7       	in	r29, 0x3e	; 62
 aa2:	89 83       	std	Y+1, r24	; 0x01
 aa4:	6a 83       	std	Y+2, r22	; 0x02
{
    // Send Spi START CMD
    spiTransfer(START_CMD);
 aa6:	80 ee       	ldi	r24, 0xE0	; 224
 aa8:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>

    //waitForSlaveSign();
    //wait the interrupt trigger on slave
    delayMicroseconds(SPI_START_CMD_DELAY);
 aac:	8a e0       	ldi	r24, 0x0A	; 10
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>

    // Send Spi C + cmd
    spiTransfer(cmd & ~(REPLY_FLAG));
 ab4:	89 81       	ldd	r24, Y+1	; 0x01
 ab6:	8f 77       	andi	r24, 0x7F	; 127
 ab8:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>

    // Send Spi totLen
    //spiTransfer(totLen);

    // Send Spi numParam
    spiTransfer(numParam);
 abc:	8a 81       	ldd	r24, Y+2	; 0x02
 abe:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>

    // If numParam == 0 send END CMD
    if (numParam == 0)
 ac2:	8a 81       	ldd	r24, Y+2	; 0x02
 ac4:	88 23       	and	r24, r24
 ac6:	01 f4       	brne	.+0      	; 0xac8 <_ZN6SpiDrv7sendCmdEhh+0x30>
        spiTransfer(END_CMD);
 ac8:	8e ee       	ldi	r24, 0xEE	; 238
 aca:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>

}
 ace:	0f 90       	pop	r0
 ad0:	0f 90       	pop	r0
 ad2:	cf 91       	pop	r28
 ad4:	df 91       	pop	r29
 ad6:	08 95       	ret

00000ad8 <_ZN6SpiDrv17waitForSlaveReadyEv>:
void SpiDrv::waitForSlaveSign()
{
	while (!waitSlaveSign());
}

void SpiDrv::waitForSlaveReady()
 ad8:	df 93       	push	r29
 ada:	cf 93       	push	r28
 adc:	0f 92       	push	r0
 ade:	cd b7       	in	r28, 0x3d	; 61
 ae0:	de b7       	in	r29, 0x3e	; 62
{
	while (!waitSlaveReady());
 ae2:	87 e0       	ldi	r24, 0x07	; 7
 ae4:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 ae8:	19 82       	std	Y+1, r1	; 0x01
 aea:	00 97       	sbiw	r24, 0x00	; 0
 aec:	01 f0       	breq	.+0      	; 0xaee <_ZN6SpiDrv17waitForSlaveReadyEv+0x16>
 aee:	81 e0       	ldi	r24, 0x01	; 1
 af0:	89 83       	std	Y+1, r24	; 0x01
 af2:	89 81       	ldd	r24, Y+1	; 0x01
 af4:	88 23       	and	r24, r24
 af6:	01 f4       	brne	.+0      	; 0xaf8 <_ZN6SpiDrv17waitForSlaveReadyEv+0x20>
}
 af8:	0f 90       	pop	r0
 afa:	cf 91       	pop	r28
 afc:	df 91       	pop	r29
 afe:	08 95       	ret

00000b00 <_ZN6SpiDrv16waitForSlaveSignEv>:
#define waitSlaveReady() (digitalRead(SLAVEREADY) == LOW)
#define waitSlaveSign() (digitalRead(SLAVEREADY) == HIGH)
#define waitSlaveSignalH() while(digitalRead(SLAVEREADY) != HIGH){}
#define waitSlaveSignalL() while(digitalRead(SLAVEREADY) != LOW){}

void SpiDrv::waitForSlaveSign()
 b00:	df 93       	push	r29
 b02:	cf 93       	push	r28
 b04:	0f 92       	push	r0
 b06:	cd b7       	in	r28, 0x3d	; 61
 b08:	de b7       	in	r29, 0x3e	; 62
{
	while (!waitSlaveSign());
 b0a:	87 e0       	ldi	r24, 0x07	; 7
 b0c:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
 b10:	19 82       	std	Y+1, r1	; 0x01
 b12:	81 30       	cpi	r24, 0x01	; 1
 b14:	91 05       	cpc	r25, r1
 b16:	01 f0       	breq	.+0      	; 0xb18 <_ZN6SpiDrv16waitForSlaveSignEv+0x18>
 b18:	81 e0       	ldi	r24, 0x01	; 1
 b1a:	89 83       	std	Y+1, r24	; 0x01
 b1c:	89 81       	ldd	r24, Y+1	; 0x01
 b1e:	88 23       	and	r24, r24
 b20:	01 f4       	brne	.+0      	; 0xb22 <_ZN6SpiDrv16waitForSlaveSignEv+0x22>
}
 b22:	0f 90       	pop	r0
 b24:	cf 91       	pop	r28
 b26:	df 91       	pop	r29
 b28:	08 95       	ret

00000b2a <_ZN6SpiDrv16spiSlaveDeselectEv>:
{
    digitalWrite(SLAVESELECT,LOW);
}


void SpiDrv::spiSlaveDeselect()
 b2a:	df 93       	push	r29
 b2c:	cf 93       	push	r28
 b2e:	cd b7       	in	r28, 0x3d	; 61
 b30:	de b7       	in	r29, 0x3e	; 62
{
    digitalWrite(SLAVESELECT,HIGH);
 b32:	8a e0       	ldi	r24, 0x0A	; 10
 b34:	61 e0       	ldi	r22, 0x01	; 1
 b36:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
}
 b3a:	cf 91       	pop	r28
 b3c:	df 91       	pop	r29
 b3e:	08 95       	ret

00000b40 <_ZN6SpiDrv14spiSlaveSelectEv>:

void SpiDrv::end() {
  SPCR &= ~_BV(SPE);
}

void SpiDrv::spiSlaveSelect()
 b40:	df 93       	push	r29
 b42:	cf 93       	push	r28
 b44:	cd b7       	in	r28, 0x3d	; 61
 b46:	de b7       	in	r29, 0x3e	; 62
{
    digitalWrite(SLAVESELECT,LOW);
 b48:	8a e0       	ldi	r24, 0x0A	; 10
 b4a:	60 e0       	ldi	r22, 0x00	; 0
 b4c:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
}
 b50:	cf 91       	pop	r28
 b52:	df 91       	pop	r29
 b54:	08 95       	ret

00000b56 <_ZN6SpiDrv5beginEv>:

#define DELAY_100NS do { asm volatile("nop"); }while(0);
#define DELAY_SPI(X) { int ii=0; do {  asm volatile("nop"); }while(++ii<X);}
#define DELAY_TRANSFER() DELAY_SPI(10)

void SpiDrv::begin()
 b56:	df 93       	push	r29
 b58:	cf 93       	push	r28
 b5a:	cd b7       	in	r28, 0x3d	; 61
 b5c:	de b7       	in	r29, 0x3e	; 62
	  // MISO pin automatically overrides to INPUT.
	  // When the SS pin is set as OUTPUT, it can be used as
	  // a general purpose output port (it doesn't influence
	  // SPI operations).

	  pinMode(SCK, OUTPUT);
 b5e:	8d e0       	ldi	r24, 0x0D	; 13
 b60:	61 e0       	ldi	r22, 0x01	; 1
 b62:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
	  pinMode(MOSI, OUTPUT);
 b66:	8b e0       	ldi	r24, 0x0B	; 11
 b68:	61 e0       	ldi	r22, 0x01	; 1
 b6a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
	  pinMode(SS, OUTPUT);
 b6e:	8a e0       	ldi	r24, 0x0A	; 10
 b70:	61 e0       	ldi	r22, 0x01	; 1
 b72:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
	  pinMode(SLAVESELECT, OUTPUT);
 b76:	8a e0       	ldi	r24, 0x0A	; 10
 b78:	61 e0       	ldi	r22, 0x01	; 1
 b7a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
	  pinMode(SLAVEREADY, INPUT);
 b7e:	87 e0       	ldi	r24, 0x07	; 7
 b80:	60 e0       	ldi	r22, 0x00	; 0
 b82:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
	  pinMode(WIFILED, OUTPUT);
 b86:	89 e0       	ldi	r24, 0x09	; 9
 b88:	61 e0       	ldi	r22, 0x01	; 1
 b8a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>

	  digitalWrite(SCK, LOW);
 b8e:	8d e0       	ldi	r24, 0x0D	; 13
 b90:	60 e0       	ldi	r22, 0x00	; 0
 b92:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
	  digitalWrite(MOSI, LOW);
 b96:	8b e0       	ldi	r24, 0x0B	; 11
 b98:	60 e0       	ldi	r22, 0x00	; 0
 b9a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
	  digitalWrite(SS, HIGH);
 b9e:	8a e0       	ldi	r24, 0x0A	; 10
 ba0:	61 e0       	ldi	r22, 0x01	; 1
 ba2:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
	  digitalWrite(SLAVESELECT, HIGH);
 ba6:	8a e0       	ldi	r24, 0x0A	; 10
 ba8:	61 e0       	ldi	r22, 0x01	; 1
 baa:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
	  digitalWrite(WIFILED, LOW);
 bae:	89 e0       	ldi	r24, 0x09	; 9
 bb0:	60 e0       	ldi	r22, 0x00	; 0
 bb2:	0e 94 00 00 	call	0	; 0x0 <_ZN6SpiDrv3endEv>
#endif

	  // Warning: if the SS pin ever becomes a LOW INPUT then SPI
	  // automatically switches to Slave, so the data direction of
	  // the SS pin MUST be kept as OUTPUT.
	  SPCR |= _BV(MSTR);
 bb6:	ac e4       	ldi	r26, 0x4C	; 76
 bb8:	b0 e0       	ldi	r27, 0x00	; 0
 bba:	ec e4       	ldi	r30, 0x4C	; 76
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	80 81       	ld	r24, Z
 bc0:	80 61       	ori	r24, 0x10	; 16
 bc2:	8c 93       	st	X, r24
	  SPCR |= _BV(SPE);
 bc4:	ac e4       	ldi	r26, 0x4C	; 76
 bc6:	b0 e0       	ldi	r27, 0x00	; 0
 bc8:	ec e4       	ldi	r30, 0x4C	; 76
 bca:	f0 e0       	ldi	r31, 0x00	; 0
 bcc:	80 81       	ld	r24, Z
 bce:	80 64       	ori	r24, 0x40	; 64
 bd0:	8c 93       	st	X, r24
	  //SPSR |= _BV(SPI2X);
}
 bd2:	cf 91       	pop	r28
 bd4:	df 91       	pop	r29
 bd6:	08 95       	ret

wifi_drv.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c7c  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000140  00000000  00000000  00000cb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000077  00000000  00000000  00000df0  2**0
                  ALLOC
  3 .stab         00001c74  00000000  00000000  00000df0  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000240b  00000000  00000000  00002a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .dtors        00000002  00000000  00000000  00004e6f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  6 .ctors        00000002  00000000  00000000  00004e71  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text:

00000000 <_ZN9IPAddresscvmEv>:
    IPAddress(const uint8_t *address);
    virtual ~IPAddress();

    // Overloaded cast operator to allow IPAddress objects to be used where a pointer
    // to a four-byte uint8_t array is expected
    operator uint32_t() { return *((uint32_t*)_address); };
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddresscvmEv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	02 96       	adiw	r24, 0x02	; 2
  14:	fc 01       	movw	r30, r24
  16:	80 81       	ld	r24, Z
  18:	91 81       	ldd	r25, Z+1	; 0x01
  1a:	a2 81       	ldd	r26, Z+2	; 0x02
  1c:	b3 81       	ldd	r27, Z+3	; 0x03
  1e:	bc 01       	movw	r22, r24
  20:	cd 01       	movw	r24, r26
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

0000002c <_ZN7WiFiDrv16getSSIDNetoworksEh>:
    SpiDrv::spiSlaveDeselect();

    return ssidListNum;
}

char* WiFiDrv::getSSIDNetoworks(uint8_t networkItem)
  2c:	df 93       	push	r29
  2e:	cf 93       	push	r28
  30:	00 d0       	rcall	.+0      	; 0x32 <_ZN7WiFiDrv16getSSIDNetoworksEh+0x6>
  32:	0f 92       	push	r0
  34:	cd b7       	in	r28, 0x3d	; 61
  36:	de b7       	in	r29, 0x3e	; 62
  38:	89 83       	std	Y+1, r24	; 0x01
{
	if (networkItem >= WL_NETWORKS_LIST_MAXNUM)
  3a:	89 81       	ldd	r24, Y+1	; 0x01
  3c:	8a 30       	cpi	r24, 0x0A	; 10
  3e:	00 f0       	brcs	.+0      	; 0x40 <_ZN7WiFiDrv16getSSIDNetoworksEh+0x14>
		return NULL;
  40:	1b 82       	std	Y+3, r1	; 0x03
  42:	1a 82       	std	Y+2, r1	; 0x02
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN7WiFiDrv16getSSIDNetoworksEh+0x1a>

	return _networkSsid[networkItem];
  46:	89 81       	ldd	r24, Y+1	; 0x01
  48:	88 2f       	mov	r24, r24
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	88 0f       	add	r24, r24
  4e:	99 1f       	adc	r25, r25
  50:	82 95       	swap	r24
  52:	92 95       	swap	r25
  54:	90 7f       	andi	r25, 0xF0	; 240
  56:	98 27       	eor	r25, r24
  58:	80 7f       	andi	r24, 0xF0	; 240
  5a:	98 27       	eor	r25, r24
  5c:	80 50       	subi	r24, 0x00	; 0
  5e:	90 40       	sbci	r25, 0x00	; 0
  60:	9b 83       	std	Y+3, r25	; 0x03
  62:	8a 83       	std	Y+2, r24	; 0x02
  64:	8a 81       	ldd	r24, Y+2	; 0x02
  66:	9b 81       	ldd	r25, Y+3	; 0x03
}
  68:	0f 90       	pop	r0
  6a:	0f 90       	pop	r0
  6c:	0f 90       	pop	r0
  6e:	cf 91       	pop	r28
  70:	df 91       	pop	r29
  72:	08 95       	ret

00000074 <_Z41__static_initialization_and_destruction_0ii>:
    }
    SpiDrv::spiSlaveDeselect();
    return fwVersion;
}

WiFiDrv wiFiDrv;
  74:	0f 93       	push	r16
  76:	df 93       	push	r29
  78:	cf 93       	push	r28
  7a:	00 d0       	rcall	.+0      	; 0x7c <_Z41__static_initialization_and_destruction_0ii+0x8>
  7c:	00 d0       	rcall	.+0      	; 0x7e <_Z41__static_initialization_and_destruction_0ii+0xa>
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	de b7       	in	r29, 0x3e	; 62
  82:	9a 83       	std	Y+2, r25	; 0x02
  84:	89 83       	std	Y+1, r24	; 0x01
  86:	7c 83       	std	Y+4, r23	; 0x04
  88:	6b 83       	std	Y+3, r22	; 0x03
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	9a 81       	ldd	r25, Y+2	; 0x02
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	91 05       	cpc	r25, r1
  92:	01 f4       	brne	.+0      	; 0x94 <_Z41__static_initialization_and_destruction_0ii+0x20>
  94:	8b 81       	ldd	r24, Y+3	; 0x03
  96:	9c 81       	ldd	r25, Y+4	; 0x04
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	8f 3f       	cpi	r24, 0xFF	; 255
  9c:	92 07       	cpc	r25, r18
  9e:	01 f4       	brne	.+0      	; 0xa0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	9a 81       	ldd	r25, Y+2	; 0x02
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	01 f4       	brne	.+0      	; 0xb8 <_Z41__static_initialization_and_destruction_0ii+0x44>
  b8:	8b 81       	ldd	r24, Y+3	; 0x03
  ba:	9c 81       	ldd	r25, Y+4	; 0x04
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	8f 3f       	cpi	r24, 0xFF	; 255
  c0:	92 07       	cpc	r25, r18
  c2:	01 f4       	brne	.+0      	; 0xc4 <_Z41__static_initialization_and_destruction_0ii+0x50>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
  cc:	0f 90       	pop	r0
  ce:	0f 90       	pop	r0
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	cf 91       	pop	r28
  d6:	df 91       	pop	r29
  d8:	0f 91       	pop	r16
  da:	08 95       	ret

000000dc <_GLOBAL__D__ZN7WiFiDrv12_networkSsidE>:
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	6f ef       	ldi	r22, 0xFF	; 255
  ea:	7f ef       	ldi	r23, 0xFF	; 255
  ec:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
  f0:	cf 91       	pop	r28
  f2:	df 91       	pop	r29
  f4:	08 95       	ret

000000f6 <_GLOBAL__I__ZN7WiFiDrv12_networkSsidE>:
  f6:	df 93       	push	r29
  f8:	cf 93       	push	r28
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	6f ef       	ldi	r22, 0xFF	; 255
 104:	7f ef       	ldi	r23, 0xFF	; 255
 106:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 10a:	cf 91       	pop	r28
 10c:	df 91       	pop	r29
 10e:	08 95       	ret

00000110 <_ZN7WiFiDrv12getFwVersionEv>:
		return 0;
	}
	return (retry>0);
}

char*  WiFiDrv::getFwVersion()
 110:	df 93       	push	r29
 112:	cf 93       	push	r28
 114:	00 d0       	rcall	.+0      	; 0x116 <_ZN7WiFiDrv12getFwVersionEv+0x6>
 116:	0f 92       	push	r0
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
{
	WAIT_FOR_SLAVE_SELECT();
 11c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 120:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    // Send Command
    SpiDrv::sendCmd(GET_FW_VERSION_CMD, PARAM_NUMS_0);
 124:	87 e3       	ldi	r24, 0x37	; 55
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 12c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _dataLen = 0;
 130:	19 82       	std	Y+1, r1	; 0x01
    if (!SpiDrv::waitResponseCmd(GET_FW_VERSION_CMD, PARAM_NUMS_1, (uint8_t*)fwVersion, &_dataLen))
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	87 e3       	ldi	r24, 0x37	; 55
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	a9 01       	movw	r20, r18
 13c:	9e 01       	movw	r18, r28
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 146:	9b 83       	std	Y+3, r25	; 0x03
 148:	8a 83       	std	Y+2, r24	; 0x02
    {
        WARN("error waitResponse");
    }
    SpiDrv::spiSlaveDeselect();
 14a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    return fwVersion;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
}
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	cf 91       	pop	r28
 15a:	df 91       	pop	r29
 15c:	08 95       	ret

0000015e <_ZN7WiFiDrv17startScanNetworksEv>:
    SpiDrv::spiSlaveDeselect();

    return encType;
}

int8_t WiFiDrv::startScanNetworks()
 15e:	df 93       	push	r29
 160:	cf 93       	push	r28
 162:	00 d0       	rcall	.+0      	; 0x164 <_ZN7WiFiDrv17startScanNetworksEv+0x6>
 164:	0f 92       	push	r0
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
{
	WAIT_FOR_SLAVE_SELECT();
 16a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 16e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Send Command
    SpiDrv::sendCmd(START_SCAN_NETWORKS, PARAM_NUMS_0);
 172:	86 e3       	ldi	r24, 0x36	; 54
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 17a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _data = 0;
 17e:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
 180:	1a 82       	std	Y+2, r1	; 0x02

    if (!SpiDrv::waitResponseCmd(START_SCAN_NETWORKS, PARAM_NUMS_1, &_data, &_dataLen))
 182:	9e 01       	movw	r18, r28
 184:	2e 5f       	subi	r18, 0xFE	; 254
 186:	3f 4f       	sbci	r19, 0xFF	; 255
 188:	86 e3       	ldi	r24, 0x36	; 54
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	ae 01       	movw	r20, r28
 18e:	4f 5f       	subi	r20, 0xFF	; 255
 190:	5f 4f       	sbci	r21, 0xFF	; 255
 192:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 196:	1b 82       	std	Y+3, r1	; 0x03
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	01 f4       	brne	.+0      	; 0x19c <_ZN7WiFiDrv17startScanNetworksEv+0x3e>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	8b 83       	std	Y+3, r24	; 0x03
 1a0:	8b 81       	ldd	r24, Y+3	; 0x03
 1a2:	88 23       	and	r24, r24
 1a4:	01 f0       	breq	.+0      	; 0x1a6 <_ZN7WiFiDrv17startScanNetworksEv+0x48>
     {
         WARN("error waitResponse");
         _data = WL_FAILURE;
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	89 83       	std	Y+1, r24	; 0x01
     }

    SpiDrv::spiSlaveDeselect();
 1aa:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    return (_data == WL_FAILURE)? _data : WL_SUCCESS;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
}
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	cf 91       	pop	r28
 1b8:	df 91       	pop	r29
 1ba:	08 95       	ret

000001bc <_ZN7WiFiDrv19getConnectionStatusEv>:
    SpiDrv::spiSlaveDeselect();

    return result;
}

uint8_t WiFiDrv::getConnectionStatus()
 1bc:	df 93       	push	r29
 1be:	cf 93       	push	r28
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <_ZN7WiFiDrv19getConnectionStatusEv+0x6>
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
{
	WAIT_FOR_SLAVE_SELECT();
 1c6:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 1ca:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Send Command
    SpiDrv::sendCmd(GET_CONN_STATUS_CMD, PARAM_NUMS_0);
 1ce:	80 e2       	ldi	r24, 0x20	; 32
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 1d6:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _data = -1;
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	89 83       	std	Y+1, r24	; 0x01
    uint8_t _dataLen = 0;
 1de:	1a 82       	std	Y+2, r1	; 0x02
    SpiDrv::waitResponseCmd(GET_CONN_STATUS_CMD, PARAM_NUMS_1, &_data, &_dataLen);
 1e0:	fe 01       	movw	r30, r28
 1e2:	32 96       	adiw	r30, 0x02	; 2
 1e4:	80 e2       	ldi	r24, 0x20	; 32
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	9e 01       	movw	r18, r28
 1ea:	2f 5f       	subi	r18, 0xFF	; 255
 1ec:	3f 4f       	sbci	r19, 0xFF	; 255
 1ee:	a9 01       	movw	r20, r18
 1f0:	9f 01       	movw	r18, r30
 1f2:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    SpiDrv::spiSlaveDeselect();
 1f6:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    return _data;
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	cf 91       	pop	r28
 202:	df 91       	pop	r29
 204:	08 95       	ret

00000206 <_ZN7WiFiDrv13getHostByNameER9IPAddress>:
    SpiDrv::spiSlaveDeselect();

    return result;
}

int WiFiDrv::getHostByName(IPAddress& aResult)
 206:	ef 92       	push	r14
 208:	ff 92       	push	r15
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	df 93       	push	r29
 210:	cf 93       	push	r28
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	60 97       	sbiw	r28, 0x10	; 16
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
 222:	9f 87       	std	Y+15, r25	; 0x0f
 224:	8e 87       	std	Y+14, r24	; 0x0e
{
	uint8_t  _ipAddr[WL_IPV4_LENGTH];
	IPAddress dummy(0xFF,0xFF,0xFF,0xFF);
 226:	ce 01       	movw	r24, r28
 228:	07 96       	adiw	r24, 0x07	; 7
 22a:	6f ef       	ldi	r22, 0xFF	; 255
 22c:	4f ef       	ldi	r20, 0xFF	; 255
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	0f ef       	ldi	r16, 0xFF	; 255
 232:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	int result = 0;
 236:	1a 82       	std	Y+2, r1	; 0x02
 238:	19 82       	std	Y+1, r1	; 0x01

	WAIT_FOR_SLAVE_SELECT();
 23a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 23e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    // Send Command
    SpiDrv::sendCmd(GET_HOST_BY_NAME_CMD, PARAM_NUMS_0);
 242:	85 e3       	ldi	r24, 0x35	; 53
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 24a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _dataLen = 0;
 24e:	1d 86       	std	Y+13, r1	; 0x0d
    if (!SpiDrv::waitResponseCmd(GET_HOST_BY_NAME_CMD, PARAM_NUMS_1, _ipAddr, &_dataLen))
 250:	9e 01       	movw	r18, r28
 252:	2d 5f       	subi	r18, 0xFD	; 253
 254:	3f 4f       	sbci	r19, 0xFF	; 255
 256:	fe 01       	movw	r30, r28
 258:	3d 96       	adiw	r30, 0x0d	; 13
 25a:	85 e3       	ldi	r24, 0x35	; 53
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	a9 01       	movw	r20, r18
 260:	9f 01       	movw	r18, r30
 262:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 266:	18 8a       	std	Y+16, r1	; 0x10
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	01 f4       	brne	.+0      	; 0x26c <_ZN7WiFiDrv13getHostByNameER9IPAddress+0x66>
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	88 8b       	std	Y+16, r24	; 0x10
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	98 89       	ldd	r25, Y+16	; 0x10
 274:	89 27       	eor	r24, r25
 276:	88 23       	and	r24, r24
 278:	01 f0       	breq	.+0      	; 0x27a <_ZN7WiFiDrv13getHostByNameER9IPAddress+0x74>
    {
        WARN("error waitResponse");
    }else{
    	aResult = _ipAddr;
 27a:	8e 85       	ldd	r24, Y+14	; 0x0e
 27c:	9f 85       	ldd	r25, Y+15	; 0x0f
 27e:	9e 01       	movw	r18, r28
 280:	2d 5f       	subi	r18, 0xFD	; 253
 282:	3f 4f       	sbci	r19, 0xFF	; 255
 284:	b9 01       	movw	r22, r18
 286:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    	result = (aResult != dummy);
 28a:	8e 85       	ldd	r24, Y+14	; 0x0e
 28c:	9f 85       	ldd	r25, Y+15	; 0x0f
 28e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 292:	7b 01       	movw	r14, r22
 294:	8c 01       	movw	r16, r24
 296:	ce 01       	movw	r24, r28
 298:	07 96       	adiw	r24, 0x07	; 7
 29a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 29e:	dc 01       	movw	r26, r24
 2a0:	cb 01       	movw	r24, r22
 2a2:	1a 82       	std	Y+2, r1	; 0x02
 2a4:	19 82       	std	Y+1, r1	; 0x01
 2a6:	e8 16       	cp	r14, r24
 2a8:	f9 06       	cpc	r15, r25
 2aa:	0a 07       	cpc	r16, r26
 2ac:	1b 07       	cpc	r17, r27
 2ae:	01 f0       	breq	.+0      	; 0x2b0 <_ZN7WiFiDrv13getHostByNameER9IPAddress+0xaa>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	9a 83       	std	Y+2, r25	; 0x02
 2b6:	89 83       	std	Y+1, r24	; 0x01
    }
    SpiDrv::spiSlaveDeselect();
 2b8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    return result;
 2bc:	09 81       	ldd	r16, Y+1	; 0x01
 2be:	1a 81       	ldd	r17, Y+2	; 0x02
 2c0:	ce 01       	movw	r24, r28
 2c2:	07 96       	adiw	r24, 0x07	; 7
 2c4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 2c8:	c8 01       	movw	r24, r16
}
 2ca:	60 96       	adiw	r28, 0x10	; 16
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	cf 91       	pop	r28
 2d8:	df 91       	pop	r29
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	08 95       	ret

000002e4 <_ZN7WiFiDrv13reqHostByNameEPKc>:
    SpiDrv::spiSlaveDeselect();

	return networkRssi;
}

uint8_t WiFiDrv::reqHostByName(const char* aHostname)
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	df 93       	push	r29
 2ea:	cf 93       	push	r28
 2ec:	00 d0       	rcall	.+0      	; 0x2ee <_ZN7WiFiDrv13reqHostByNameEPKc+0xa>
 2ee:	00 d0       	rcall	.+0      	; 0x2f0 <_ZN7WiFiDrv13reqHostByNameEPKc+0xc>
 2f0:	0f 92       	push	r0
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	9d 83       	std	Y+5, r25	; 0x05
 2f8:	8c 83       	std	Y+4, r24	; 0x04
{
	WAIT_FOR_SLAVE_SELECT();
 2fa:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 2fe:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Send Command
    SpiDrv::sendCmd(REQ_HOST_BY_NAME_CMD, PARAM_NUMS_1);
 302:	84 e3       	ldi	r24, 0x34	; 52
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam((uint8_t*)aHostname, strlen(aHostname), LAST_PARAM);
 30a:	0c 81       	ldd	r16, Y+4	; 0x04
 30c:	1d 81       	ldd	r17, Y+5	; 0x05
 30e:	8c 81       	ldd	r24, Y+4	; 0x04
 310:	9d 81       	ldd	r25, Y+5	; 0x05
 312:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 316:	28 2f       	mov	r18, r24
 318:	c8 01       	movw	r24, r16
 31a:	62 2f       	mov	r22, r18
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 322:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _data = 0;
 326:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t _dataLen = 0;
 328:	1b 82       	std	Y+3, r1	; 0x03
    uint8_t result = SpiDrv::waitResponseCmd(REQ_HOST_BY_NAME_CMD, PARAM_NUMS_1, &_data, &_dataLen);
 32a:	9e 01       	movw	r18, r28
 32c:	2e 5f       	subi	r18, 0xFE	; 254
 32e:	3f 4f       	sbci	r19, 0xFF	; 255
 330:	fe 01       	movw	r30, r28
 332:	33 96       	adiw	r30, 0x03	; 3
 334:	84 e3       	ldi	r24, 0x34	; 52
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	a9 01       	movw	r20, r18
 33a:	9f 01       	movw	r18, r30
 33c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 340:	89 83       	std	Y+1, r24	; 0x01

    SpiDrv::spiSlaveDeselect();
 342:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    return result;
 346:	89 81       	ldd	r24, Y+1	; 0x01
}
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	cf 91       	pop	r28
 354:	df 91       	pop	r29
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <_ZN7WiFiDrv13getHostByNameEPKcR9IPAddress>:
    }
    SpiDrv::spiSlaveDeselect();
    return result;
}

int WiFiDrv::getHostByName(const char* aHostname, IPAddress& aResult)
 35c:	df 93       	push	r29
 35e:	cf 93       	push	r28
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	29 97       	sbiw	r28, 0x09	; 9
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	de bf       	out	0x3e, r29	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	cd bf       	out	0x3d, r28	; 61
 370:	9b 83       	std	Y+3, r25	; 0x03
 372:	8a 83       	std	Y+2, r24	; 0x02
 374:	7d 83       	std	Y+5, r23	; 0x05
 376:	6c 83       	std	Y+4, r22	; 0x04
{
	uint8_t retry = 10;
 378:	8a e0       	ldi	r24, 0x0A	; 10
 37a:	89 83       	std	Y+1, r24	; 0x01
	if (reqHostByName(aHostname))
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	9b 81       	ldd	r25, Y+3	; 0x03
 380:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 384:	89 87       	std	Y+9, r24	; 0x09
 386:	89 85       	ldd	r24, Y+9	; 0x09
 388:	88 23       	and	r24, r24
 38a:	01 f0       	breq	.+0      	; 0x38c <_ZN7WiFiDrv13getHostByNameEPKcR9IPAddress+0x30>
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	99 87       	std	Y+9, r25	; 0x09
 390:	89 85       	ldd	r24, Y+9	; 0x09
 392:	88 23       	and	r24, r24
 394:	01 f0       	breq	.+0      	; 0x396 <_ZN7WiFiDrv13getHostByNameEPKcR9IPAddress+0x3a>
 396:	00 c0       	rjmp	.+0      	; 0x398 <_ZN7WiFiDrv13getHostByNameEPKcR9IPAddress+0x3c>
	{
		while(!getHostByName(aResult) && --retry > 0)
		{
			delay(1000);
 398:	68 ee       	ldi	r22, 0xE8	; 232
 39a:	73 e0       	ldi	r23, 0x03	; 3
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
int WiFiDrv::getHostByName(const char* aHostname, IPAddress& aResult)
{
	uint8_t retry = 10;
	if (reqHostByName(aHostname))
	{
		while(!getHostByName(aResult) && --retry > 0)
 3a4:	8c 81       	ldd	r24, Y+4	; 0x04
 3a6:	9d 81       	ldd	r25, Y+5	; 0x05
 3a8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 3ac:	00 97       	sbiw	r24, 0x00	; 0
 3ae:	01 f4       	brne	.+0      	; 0x3b0 <_ZN7WiFiDrv13getHostByNameEPKcR9IPAddress+0x54>
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	81 50       	subi	r24, 0x01	; 1
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	88 23       	and	r24, r24
 3ba:	01 f0       	breq	.+0      	; 0x3bc <_ZN7WiFiDrv13getHostByNameEPKcR9IPAddress+0x60>
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	88 87       	std	Y+8, r24	; 0x08
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <_ZN7WiFiDrv13getHostByNameEPKcR9IPAddress+0x66>
 3c2:	18 86       	std	Y+8, r1	; 0x08
 3c4:	88 85       	ldd	r24, Y+8	; 0x08
 3c6:	88 23       	and	r24, r24
 3c8:	01 f4       	brne	.+0      	; 0x3ca <_ZN7WiFiDrv13getHostByNameEPKcR9IPAddress+0x6e>
			delay(1000);
		}
	}else{
		return 0;
	}
	return (retry>0);
 3ca:	1f 82       	std	Y+7, r1	; 0x07
 3cc:	1e 82       	std	Y+6, r1	; 0x06
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	88 23       	and	r24, r24
 3d2:	01 f0       	breq	.+0      	; 0x3d4 <_ZN7WiFiDrv13getHostByNameEPKcR9IPAddress+0x78>
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	9f 83       	std	Y+7, r25	; 0x07
 3da:	8e 83       	std	Y+6, r24	; 0x06
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <_ZN7WiFiDrv13getHostByNameEPKcR9IPAddress+0x82>
		while(!getHostByName(aResult) && --retry > 0)
		{
			delay(1000);
		}
	}else{
		return 0;
 3de:	1f 82       	std	Y+7, r1	; 0x07
 3e0:	1e 82       	std	Y+6, r1	; 0x06
 3e2:	8e 81       	ldd	r24, Y+6	; 0x06
 3e4:	9f 81       	ldd	r25, Y+7	; 0x07
	}
	return (retry>0);
}
 3e6:	29 96       	adiw	r28, 0x09	; 9
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
 3f2:	cf 91       	pop	r28
 3f4:	df 91       	pop	r29
 3f6:	08 95       	ret

000003f8 <_ZN7WiFiDrv16getRSSINetoworksEh>:
    SpiDrv::spiSlaveDeselect();

    return encType;
}

int32_t WiFiDrv::getRSSINetoworks(uint8_t networkItem)
 3f8:	df 93       	push	r29
 3fa:	cf 93       	push	r28
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	2a 97       	sbiw	r28, 0x0a	; 10
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
 40c:	8e 83       	std	Y+6, r24	; 0x06
{
	if (networkItem >= WL_NETWORKS_LIST_MAXNUM)
 40e:	8e 81       	ldd	r24, Y+6	; 0x06
 410:	8a 30       	cpi	r24, 0x0A	; 10
 412:	00 f0       	brcs	.+0      	; 0x414 <_ZN7WiFiDrv16getRSSINetoworksEh+0x1c>
		return NULL;
 414:	1f 82       	std	Y+7, r1	; 0x07
 416:	18 86       	std	Y+8, r1	; 0x08
 418:	19 86       	std	Y+9, r1	; 0x09
 41a:	1a 86       	std	Y+10, r1	; 0x0a
 41c:	00 c0       	rjmp	.+0      	; 0x41e <_ZN7WiFiDrv16getRSSINetoworksEh+0x26>
	int32_t	networkRssi = 0;
 41e:	19 82       	std	Y+1, r1	; 0x01
 420:	1a 82       	std	Y+2, r1	; 0x02
 422:	1b 82       	std	Y+3, r1	; 0x03
 424:	1c 82       	std	Y+4, r1	; 0x04

	WAIT_FOR_SLAVE_SELECT();
 426:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 42a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Send Command
    SpiDrv::sendCmd(GET_IDX_RSSI_CMD, PARAM_NUMS_1);
 42e:	82 e3       	ldi	r24, 0x32	; 50
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    SpiDrv::sendParam(&networkItem, 1, LAST_PARAM);
 436:	ce 01       	movw	r24, r28
 438:	06 96       	adiw	r24, 0x06	; 6
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	41 e0       	ldi	r20, 0x01	; 1
 43e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 442:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t dataLen = 0;
 446:	1d 82       	std	Y+5, r1	; 0x05
    SpiDrv::waitResponseCmd(GET_IDX_RSSI_CMD, PARAM_NUMS_1, (uint8_t*)&networkRssi, &dataLen);
 448:	9e 01       	movw	r18, r28
 44a:	2f 5f       	subi	r18, 0xFF	; 255
 44c:	3f 4f       	sbci	r19, 0xFF	; 255
 44e:	fe 01       	movw	r30, r28
 450:	35 96       	adiw	r30, 0x05	; 5
 452:	82 e3       	ldi	r24, 0x32	; 50
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	a9 01       	movw	r20, r18
 458:	9f 01       	movw	r18, r30
 45a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    SpiDrv::spiSlaveDeselect();
 45e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

	return networkRssi;
 462:	89 81       	ldd	r24, Y+1	; 0x01
 464:	9a 81       	ldd	r25, Y+2	; 0x02
 466:	ab 81       	ldd	r26, Y+3	; 0x03
 468:	bc 81       	ldd	r27, Y+4	; 0x04
 46a:	8f 83       	std	Y+7, r24	; 0x07
 46c:	98 87       	std	Y+8, r25	; 0x08
 46e:	a9 87       	std	Y+9, r26	; 0x09
 470:	ba 87       	std	Y+10, r27	; 0x0a
 472:	8f 81       	ldd	r24, Y+7	; 0x07
 474:	98 85       	ldd	r25, Y+8	; 0x08
 476:	a9 85       	ldd	r26, Y+9	; 0x09
 478:	ba 85       	ldd	r27, Y+10	; 0x0a
}
 47a:	bc 01       	movw	r22, r24
 47c:	cd 01       	movw	r24, r26
 47e:	2a 96       	adiw	r28, 0x0a	; 10
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	cf 91       	pop	r28
 48c:	df 91       	pop	r29
 48e:	08 95       	ret

00000490 <_ZN7WiFiDrv18getEncTypeNetowrksEh>:
		return NULL;

	return _networkSsid[networkItem];
}

uint8_t WiFiDrv::getEncTypeNetowrks(uint8_t networkItem)
 490:	df 93       	push	r29
 492:	cf 93       	push	r28
 494:	00 d0       	rcall	.+0      	; 0x496 <_ZN7WiFiDrv18getEncTypeNetowrksEh+0x6>
 496:	00 d0       	rcall	.+0      	; 0x498 <_ZN7WiFiDrv18getEncTypeNetowrksEh+0x8>
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
 49c:	8b 83       	std	Y+3, r24	; 0x03
{
	if (networkItem >= WL_NETWORKS_LIST_MAXNUM)
 49e:	8b 81       	ldd	r24, Y+3	; 0x03
 4a0:	8a 30       	cpi	r24, 0x0A	; 10
 4a2:	00 f0       	brcs	.+0      	; 0x4a4 <_ZN7WiFiDrv18getEncTypeNetowrksEh+0x14>
		return NULL;
 4a4:	1c 82       	std	Y+4, r1	; 0x04
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <_ZN7WiFiDrv18getEncTypeNetowrksEh+0x18>

	WAIT_FOR_SLAVE_SELECT();
 4a8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 4ac:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Send Command
    SpiDrv::sendCmd(GET_IDX_ENCT_CMD, PARAM_NUMS_1);
 4b0:	83 e3       	ldi	r24, 0x33	; 51
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    SpiDrv::sendParam(&networkItem, 1, LAST_PARAM);
 4b8:	ce 01       	movw	r24, r28
 4ba:	03 96       	adiw	r24, 0x03	; 3
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	41 e0       	ldi	r20, 0x01	; 1
 4c0:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 4c4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t dataLen = 0;
 4c8:	19 82       	std	Y+1, r1	; 0x01
    uint8_t encType = 0;
 4ca:	1a 82       	std	Y+2, r1	; 0x02
    SpiDrv::waitResponseCmd(GET_IDX_ENCT_CMD, PARAM_NUMS_1, (uint8_t*)&encType, &dataLen);
 4cc:	9e 01       	movw	r18, r28
 4ce:	2e 5f       	subi	r18, 0xFE	; 254
 4d0:	3f 4f       	sbci	r19, 0xFF	; 255
 4d2:	83 e3       	ldi	r24, 0x33	; 51
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	a9 01       	movw	r20, r18
 4d8:	9e 01       	movw	r18, r28
 4da:	2f 5f       	subi	r18, 0xFF	; 255
 4dc:	3f 4f       	sbci	r19, 0xFF	; 255
 4de:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    SpiDrv::spiSlaveDeselect();
 4e2:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    return encType;
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	8c 83       	std	Y+4, r24	; 0x04
 4ea:	8c 81       	ldd	r24, Y+4	; 0x04
}
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	cf 91       	pop	r28
 4f6:	df 91       	pop	r29
 4f8:	08 95       	ret

000004fa <_ZN7WiFiDrv24getCurrentEncryptionTypeEv>:
    SpiDrv::spiSlaveDeselect();

    return rssi;
}

uint8_t WiFiDrv::getCurrentEncryptionType()
 4fa:	df 93       	push	r29
 4fc:	cf 93       	push	r28
 4fe:	00 d0       	rcall	.+0      	; 0x500 <_ZN7WiFiDrv24getCurrentEncryptionTypeEv+0x6>
 500:	0f 92       	push	r0
 502:	cd b7       	in	r28, 0x3d	; 61
 504:	de b7       	in	r29, 0x3e	; 62
{
	WAIT_FOR_SLAVE_SELECT();
 506:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 50a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Send Command
    SpiDrv::sendCmd(GET_CURR_ENCT_CMD, PARAM_NUMS_1);
 50e:	86 e2       	ldi	r24, 0x26	; 38
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    uint8_t _dummy = DUMMY_DATA;
 516:	8f ef       	ldi	r24, 0xFF	; 255
 518:	89 83       	std	Y+1, r24	; 0x01
    SpiDrv::sendParam(&_dummy, 1, LAST_PARAM);
 51a:	ce 01       	movw	r24, r28
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	41 e0       	ldi	r20, 0x01	; 1
 522:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 526:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t dataLen = 0;
 52a:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t encType = 0;
 52c:	1b 82       	std	Y+3, r1	; 0x03
    SpiDrv::waitResponseCmd(GET_CURR_ENCT_CMD, PARAM_NUMS_1, (uint8_t*)&encType, &dataLen);
 52e:	9e 01       	movw	r18, r28
 530:	2d 5f       	subi	r18, 0xFD	; 253
 532:	3f 4f       	sbci	r19, 0xFF	; 255
 534:	fe 01       	movw	r30, r28
 536:	32 96       	adiw	r30, 0x02	; 2
 538:	86 e2       	ldi	r24, 0x26	; 38
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	a9 01       	movw	r20, r18
 53e:	9f 01       	movw	r18, r30
 540:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    SpiDrv::spiSlaveDeselect();
 544:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    return encType;
 548:	8b 81       	ldd	r24, Y+3	; 0x03
}
 54a:	0f 90       	pop	r0
 54c:	0f 90       	pop	r0
 54e:	0f 90       	pop	r0
 550:	cf 91       	pop	r28
 552:	df 91       	pop	r29
 554:	08 95       	ret

00000556 <_ZN7WiFiDrv14getCurrentRSSIEv>:
    SpiDrv::spiSlaveDeselect();

    return _bssid;
}

int32_t WiFiDrv::getCurrentRSSI()
 556:	df 93       	push	r29
 558:	cf 93       	push	r28
 55a:	00 d0       	rcall	.+0      	; 0x55c <_ZN7WiFiDrv14getCurrentRSSIEv+0x6>
 55c:	00 d0       	rcall	.+0      	; 0x55e <_ZN7WiFiDrv14getCurrentRSSIEv+0x8>
 55e:	00 d0       	rcall	.+0      	; 0x560 <_ZN7WiFiDrv14getCurrentRSSIEv+0xa>
 560:	cd b7       	in	r28, 0x3d	; 61
 562:	de b7       	in	r29, 0x3e	; 62
{
	WAIT_FOR_SLAVE_SELECT();
 564:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 568:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Send Command
    SpiDrv::sendCmd(GET_CURR_RSSI_CMD, PARAM_NUMS_1);
 56c:	85 e2       	ldi	r24, 0x25	; 37
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    uint8_t _dummy = DUMMY_DATA;
 574:	8f ef       	ldi	r24, 0xFF	; 255
 576:	89 83       	std	Y+1, r24	; 0x01
    SpiDrv::sendParam(&_dummy, 1, LAST_PARAM);
 578:	ce 01       	movw	r24, r28
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	41 e0       	ldi	r20, 0x01	; 1
 580:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 584:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _dataLen = 0;
 588:	1a 82       	std	Y+2, r1	; 0x02
    int32_t rssi = 0;
 58a:	1b 82       	std	Y+3, r1	; 0x03
 58c:	1c 82       	std	Y+4, r1	; 0x04
 58e:	1d 82       	std	Y+5, r1	; 0x05
 590:	1e 82       	std	Y+6, r1	; 0x06
    SpiDrv::waitResponseCmd(GET_CURR_RSSI_CMD, PARAM_NUMS_1, (uint8_t*)&rssi, &_dataLen);
 592:	9e 01       	movw	r18, r28
 594:	2d 5f       	subi	r18, 0xFD	; 253
 596:	3f 4f       	sbci	r19, 0xFF	; 255
 598:	fe 01       	movw	r30, r28
 59a:	32 96       	adiw	r30, 0x02	; 2
 59c:	85 e2       	ldi	r24, 0x25	; 37
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	a9 01       	movw	r20, r18
 5a2:	9f 01       	movw	r18, r30
 5a4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    SpiDrv::spiSlaveDeselect();
 5a8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    return rssi;
 5ac:	8b 81       	ldd	r24, Y+3	; 0x03
 5ae:	9c 81       	ldd	r25, Y+4	; 0x04
 5b0:	ad 81       	ldd	r26, Y+5	; 0x05
 5b2:	be 81       	ldd	r27, Y+6	; 0x06
}
 5b4:	bc 01       	movw	r22, r24
 5b6:	cd 01       	movw	r24, r26
 5b8:	26 96       	adiw	r28, 0x06	; 6
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	f8 94       	cli
 5be:	de bf       	out	0x3e, r29	; 62
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	cd bf       	out	0x3d, r28	; 61
 5c4:	cf 91       	pop	r28
 5c6:	df 91       	pop	r29
 5c8:	08 95       	ret

000005ca <_ZN7WiFiDrv15getCurrentBSSIDEv>:
    SpiDrv::spiSlaveDeselect();

    return _ssid;
}

uint8_t* WiFiDrv::getCurrentBSSID()
 5ca:	df 93       	push	r29
 5cc:	cf 93       	push	r28
 5ce:	00 d0       	rcall	.+0      	; 0x5d0 <_ZN7WiFiDrv15getCurrentBSSIDEv+0x6>
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
{
	WAIT_FOR_SLAVE_SELECT();
 5d4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 5d8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Send Command
    SpiDrv::sendCmd(GET_CURR_BSSID_CMD, PARAM_NUMS_1);
 5dc:	84 e2       	ldi	r24, 0x24	; 36
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    uint8_t _dummy = DUMMY_DATA;
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	89 83       	std	Y+1, r24	; 0x01
    SpiDrv::sendParam(&_dummy, 1, LAST_PARAM);
 5e8:	ce 01       	movw	r24, r28
 5ea:	01 96       	adiw	r24, 0x01	; 1
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	41 e0       	ldi	r20, 0x01	; 1
 5f0:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 5f4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _dataLen = 0;
 5f8:	1a 82       	std	Y+2, r1	; 0x02
    SpiDrv::waitResponseCmd(GET_CURR_BSSID_CMD, PARAM_NUMS_1, _bssid, &_dataLen);
 5fa:	20 e0       	ldi	r18, 0x00	; 0
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	fe 01       	movw	r30, r28
 600:	32 96       	adiw	r30, 0x02	; 2
 602:	84 e2       	ldi	r24, 0x24	; 36
 604:	61 e0       	ldi	r22, 0x01	; 1
 606:	a9 01       	movw	r20, r18
 608:	9f 01       	movw	r18, r30
 60a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    SpiDrv::spiSlaveDeselect();
 60e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    return _bssid;
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	90 e0       	ldi	r25, 0x00	; 0
}
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
 61a:	cf 91       	pop	r28
 61c:	df 91       	pop	r29
 61e:	08 95       	ret

00000620 <_ZN7WiFiDrv14getCurrentSSIDEv>:
 {
	getNetworkData(_localIp, _subnetMask, _gatewayIp);
	ip = _gatewayIp;
 }

char* WiFiDrv::getCurrentSSID()
 620:	df 93       	push	r29
 622:	cf 93       	push	r28
 624:	00 d0       	rcall	.+0      	; 0x626 <_ZN7WiFiDrv14getCurrentSSIDEv+0x6>
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
{
	WAIT_FOR_SLAVE_SELECT();
 62a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 62e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Send Command
    SpiDrv::sendCmd(GET_CURR_SSID_CMD, PARAM_NUMS_1);
 632:	83 e2       	ldi	r24, 0x23	; 35
 634:	61 e0       	ldi	r22, 0x01	; 1
 636:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    uint8_t _dummy = DUMMY_DATA;
 63a:	8f ef       	ldi	r24, 0xFF	; 255
 63c:	89 83       	std	Y+1, r24	; 0x01
    SpiDrv::sendParam(&_dummy, 1, LAST_PARAM);
 63e:	ce 01       	movw	r24, r28
 640:	01 96       	adiw	r24, 0x01	; 1
 642:	61 e0       	ldi	r22, 0x01	; 1
 644:	41 e0       	ldi	r20, 0x01	; 1
 646:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 64a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _dataLen = 0;
 64e:	1a 82       	std	Y+2, r1	; 0x02
    SpiDrv::waitResponseCmd(GET_CURR_SSID_CMD, PARAM_NUMS_1, (uint8_t*)_ssid, &_dataLen);
 650:	20 e0       	ldi	r18, 0x00	; 0
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	fe 01       	movw	r30, r28
 656:	32 96       	adiw	r30, 0x02	; 2
 658:	83 e2       	ldi	r24, 0x23	; 35
 65a:	61 e0       	ldi	r22, 0x01	; 1
 65c:	a9 01       	movw	r20, r18
 65e:	9f 01       	movw	r18, r30
 660:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    SpiDrv::spiSlaveDeselect();
 664:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    return _ssid;
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	90 e0       	ldi	r25, 0x00	; 0
}
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	cf 91       	pop	r28
 672:	df 91       	pop	r29
 674:	08 95       	ret

00000676 <_ZN7WiFiDrv13getMacAddressEv>:
    SpiDrv::spiSlaveDeselect();

    return _data;
}

uint8_t* WiFiDrv::getMacAddress()
 676:	df 93       	push	r29
 678:	cf 93       	push	r28
 67a:	00 d0       	rcall	.+0      	; 0x67c <_ZN7WiFiDrv13getMacAddressEv+0x6>
 67c:	cd b7       	in	r28, 0x3d	; 61
 67e:	de b7       	in	r29, 0x3e	; 62
{
	WAIT_FOR_SLAVE_SELECT();
 680:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 684:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Send Command
    SpiDrv::sendCmd(GET_MACADDR_CMD, PARAM_NUMS_1);
 688:	82 e2       	ldi	r24, 0x22	; 34
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    uint8_t _dummy = DUMMY_DATA;
 690:	8f ef       	ldi	r24, 0xFF	; 255
 692:	89 83       	std	Y+1, r24	; 0x01
    SpiDrv::sendParam(&_dummy, 1, LAST_PARAM);
 694:	ce 01       	movw	r24, r28
 696:	01 96       	adiw	r24, 0x01	; 1
 698:	61 e0       	ldi	r22, 0x01	; 1
 69a:	41 e0       	ldi	r20, 0x01	; 1
 69c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 6a0:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _dataLen = 0;
 6a4:	1a 82       	std	Y+2, r1	; 0x02
    SpiDrv::waitResponseCmd(GET_MACADDR_CMD, PARAM_NUMS_1, _mac, &_dataLen);
 6a6:	20 e0       	ldi	r18, 0x00	; 0
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	fe 01       	movw	r30, r28
 6ac:	32 96       	adiw	r30, 0x02	; 2
 6ae:	82 e2       	ldi	r24, 0x22	; 34
 6b0:	61 e0       	ldi	r22, 0x01	; 1
 6b2:	a9 01       	movw	r20, r18
 6b4:	9f 01       	movw	r18, r30
 6b6:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    SpiDrv::spiSlaveDeselect();
 6ba:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    return _mac;
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	90 e0       	ldi	r25, 0x00	; 0
}
 6c2:	0f 90       	pop	r0
 6c4:	0f 90       	pop	r0
 6c6:	cf 91       	pop	r28
 6c8:	df 91       	pop	r29
 6ca:	08 95       	ret

000006cc <_ZN7WiFiDrv10disconnectEv>:
    SpiDrv::spiSlaveDeselect();
}


                        
int8_t WiFiDrv::disconnect()
 6cc:	df 93       	push	r29
 6ce:	cf 93       	push	r28
 6d0:	00 d0       	rcall	.+0      	; 0x6d2 <_ZN7WiFiDrv10disconnectEv+0x6>
 6d2:	00 d0       	rcall	.+0      	; 0x6d4 <_ZN7WiFiDrv10disconnectEv+0x8>
 6d4:	cd b7       	in	r28, 0x3d	; 61
 6d6:	de b7       	in	r29, 0x3e	; 62
{
	WAIT_FOR_SLAVE_SELECT();
 6d8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 6dc:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    // Send Command
    SpiDrv::sendCmd(DISCONNECT_CMD, PARAM_NUMS_1);
 6e0:	80 e3       	ldi	r24, 0x30	; 48
 6e2:	61 e0       	ldi	r22, 0x01	; 1
 6e4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    uint8_t _dummy = DUMMY_DATA;
 6e8:	8f ef       	ldi	r24, 0xFF	; 255
 6ea:	8a 83       	std	Y+2, r24	; 0x02
    SpiDrv::sendParam(&_dummy, 1, LAST_PARAM);
 6ec:	ce 01       	movw	r24, r28
 6ee:	02 96       	adiw	r24, 0x02	; 2
 6f0:	61 e0       	ldi	r22, 0x01	; 1
 6f2:	41 e0       	ldi	r20, 0x01	; 1
 6f4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 6f8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _data = 0;
 6fc:	1b 82       	std	Y+3, r1	; 0x03
    uint8_t _dataLen = 0;
 6fe:	1c 82       	std	Y+4, r1	; 0x04
    int8_t result = SpiDrv::waitResponseCmd(DISCONNECT_CMD, PARAM_NUMS_1, &_data, &_dataLen);
 700:	9e 01       	movw	r18, r28
 702:	2d 5f       	subi	r18, 0xFD	; 253
 704:	3f 4f       	sbci	r19, 0xFF	; 255
 706:	fe 01       	movw	r30, r28
 708:	34 96       	adiw	r30, 0x04	; 4
 70a:	80 e3       	ldi	r24, 0x30	; 48
 70c:	61 e0       	ldi	r22, 0x01	; 1
 70e:	a9 01       	movw	r20, r18
 710:	9f 01       	movw	r18, r30
 712:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 716:	89 83       	std	Y+1, r24	; 0x01

    SpiDrv::spiSlaveDeselect();
 718:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    return result;
 71c:	89 81       	ldd	r24, Y+1	; 0x01
}
 71e:	0f 90       	pop	r0
 720:	0f 90       	pop	r0
 722:	0f 90       	pop	r0
 724:	0f 90       	pop	r0
 726:	cf 91       	pop	r28
 728:	df 91       	pop	r29
 72a:	08 95       	ret

0000072c <_ZN7WiFiDrv6setDNSEhmm>:
        _data = WL_FAILURE;
    }
    SpiDrv::spiSlaveDeselect();
}

void WiFiDrv::setDNS(uint8_t validParams, uint32_t dns_server1, uint32_t dns_server2)
 72c:	0f 93       	push	r16
 72e:	1f 93       	push	r17
 730:	df 93       	push	r29
 732:	cf 93       	push	r28
 734:	cd b7       	in	r28, 0x3d	; 61
 736:	de b7       	in	r29, 0x3e	; 62
 738:	2c 97       	sbiw	r28, 0x0c	; 12
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	f8 94       	cli
 73e:	de bf       	out	0x3e, r29	; 62
 740:	0f be       	out	0x3f, r0	; 63
 742:	cd bf       	out	0x3d, r28	; 61
 744:	8b 83       	std	Y+3, r24	; 0x03
 746:	4c 83       	std	Y+4, r20	; 0x04
 748:	5d 83       	std	Y+5, r21	; 0x05
 74a:	6e 83       	std	Y+6, r22	; 0x06
 74c:	7f 83       	std	Y+7, r23	; 0x07
 74e:	08 87       	std	Y+8, r16	; 0x08
 750:	19 87       	std	Y+9, r17	; 0x09
 752:	2a 87       	std	Y+10, r18	; 0x0a
 754:	3b 87       	std	Y+11, r19	; 0x0b
{
	WAIT_FOR_SLAVE_SELECT();
 756:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 75a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    // Send Command
    SpiDrv::sendCmd(SET_DNS_CONFIG_CMD, PARAM_NUMS_3);
 75e:	85 e1       	ldi	r24, 0x15	; 21
 760:	63 e0       	ldi	r22, 0x03	; 3
 762:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam((uint8_t*)&validParams, 1, NO_LAST_PARAM);
 766:	ce 01       	movw	r24, r28
 768:	03 96       	adiw	r24, 0x03	; 3
 76a:	61 e0       	ldi	r22, 0x01	; 1
 76c:	40 e0       	ldi	r20, 0x00	; 0
 76e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam((uint8_t*)&dns_server1, 4, NO_LAST_PARAM);
 772:	ce 01       	movw	r24, r28
 774:	04 96       	adiw	r24, 0x04	; 4
 776:	64 e0       	ldi	r22, 0x04	; 4
 778:	40 e0       	ldi	r20, 0x00	; 0
 77a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam((uint8_t*)&dns_server2, 4, LAST_PARAM);
 77e:	ce 01       	movw	r24, r28
 780:	08 96       	adiw	r24, 0x08	; 8
 782:	64 e0       	ldi	r22, 0x04	; 4
 784:	41 e0       	ldi	r20, 0x01	; 1
 786:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 78a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _data = 0;
 78e:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
 790:	1a 82       	std	Y+2, r1	; 0x02
    if (!SpiDrv::waitResponseCmd(SET_DNS_CONFIG_CMD, PARAM_NUMS_1, &_data, &_dataLen))
 792:	fe 01       	movw	r30, r28
 794:	32 96       	adiw	r30, 0x02	; 2
 796:	85 e1       	ldi	r24, 0x15	; 21
 798:	61 e0       	ldi	r22, 0x01	; 1
 79a:	9e 01       	movw	r18, r28
 79c:	2f 5f       	subi	r18, 0xFF	; 255
 79e:	3f 4f       	sbci	r19, 0xFF	; 255
 7a0:	a9 01       	movw	r20, r18
 7a2:	9f 01       	movw	r18, r30
 7a4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 7a8:	1c 86       	std	Y+12, r1	; 0x0c
 7aa:	00 97       	sbiw	r24, 0x00	; 0
 7ac:	01 f4       	brne	.+0      	; 0x7ae <_ZN7WiFiDrv6setDNSEhmm+0x82>
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	8c 87       	std	Y+12, r24	; 0x0c
 7b2:	8c 85       	ldd	r24, Y+12	; 0x0c
 7b4:	88 23       	and	r24, r24
 7b6:	01 f0       	breq	.+0      	; 0x7b8 <_ZN7WiFiDrv6setDNSEhmm+0x8c>
    {
        WARN("error waitResponse");
        _data = WL_FAILURE;
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
 7ba:	89 83       	std	Y+1, r24	; 0x01
    }
    SpiDrv::spiSlaveDeselect();
 7bc:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 7c0:	2c 96       	adiw	r28, 0x0c	; 12
 7c2:	0f b6       	in	r0, 0x3f	; 63
 7c4:	f8 94       	cli
 7c6:	de bf       	out	0x3e, r29	; 62
 7c8:	0f be       	out	0x3f, r0	; 63
 7ca:	cd bf       	out	0x3d, r28	; 61
 7cc:	cf 91       	pop	r28
 7ce:	df 91       	pop	r29
 7d0:	1f 91       	pop	r17
 7d2:	0f 91       	pop	r16
 7d4:	08 95       	ret

000007d6 <_ZN7WiFiDrv6configEhmmm>:
    }
    SpiDrv::spiSlaveDeselect();
    return _data;
}

void WiFiDrv::config(uint8_t validParams, uint32_t local_ip, uint32_t gateway, uint32_t subnet)
 7d6:	cf 92       	push	r12
 7d8:	df 92       	push	r13
 7da:	ef 92       	push	r14
 7dc:	ff 92       	push	r15
 7de:	0f 93       	push	r16
 7e0:	1f 93       	push	r17
 7e2:	df 93       	push	r29
 7e4:	cf 93       	push	r28
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
 7ea:	60 97       	sbiw	r28, 0x10	; 16
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	f8 94       	cli
 7f0:	de bf       	out	0x3e, r29	; 62
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	cd bf       	out	0x3d, r28	; 61
 7f6:	8b 83       	std	Y+3, r24	; 0x03
 7f8:	4c 83       	std	Y+4, r20	; 0x04
 7fa:	5d 83       	std	Y+5, r21	; 0x05
 7fc:	6e 83       	std	Y+6, r22	; 0x06
 7fe:	7f 83       	std	Y+7, r23	; 0x07
 800:	08 87       	std	Y+8, r16	; 0x08
 802:	19 87       	std	Y+9, r17	; 0x09
 804:	2a 87       	std	Y+10, r18	; 0x0a
 806:	3b 87       	std	Y+11, r19	; 0x0b
 808:	cc 86       	std	Y+12, r12	; 0x0c
 80a:	dd 86       	std	Y+13, r13	; 0x0d
 80c:	ee 86       	std	Y+14, r14	; 0x0e
 80e:	ff 86       	std	Y+15, r15	; 0x0f
{
	WAIT_FOR_SLAVE_SELECT();
 810:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 814:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    // Send Command
    SpiDrv::sendCmd(SET_IP_CONFIG_CMD, PARAM_NUMS_4);
 818:	84 e1       	ldi	r24, 0x14	; 20
 81a:	64 e0       	ldi	r22, 0x04	; 4
 81c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam((uint8_t*)&validParams, 1, NO_LAST_PARAM);
 820:	ce 01       	movw	r24, r28
 822:	03 96       	adiw	r24, 0x03	; 3
 824:	61 e0       	ldi	r22, 0x01	; 1
 826:	40 e0       	ldi	r20, 0x00	; 0
 828:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam((uint8_t*)&local_ip, 4, NO_LAST_PARAM);
 82c:	ce 01       	movw	r24, r28
 82e:	04 96       	adiw	r24, 0x04	; 4
 830:	64 e0       	ldi	r22, 0x04	; 4
 832:	40 e0       	ldi	r20, 0x00	; 0
 834:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam((uint8_t*)&gateway, 4, NO_LAST_PARAM);
 838:	ce 01       	movw	r24, r28
 83a:	08 96       	adiw	r24, 0x08	; 8
 83c:	64 e0       	ldi	r22, 0x04	; 4
 83e:	40 e0       	ldi	r20, 0x00	; 0
 840:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam((uint8_t*)&subnet, 4, LAST_PARAM);
 844:	ce 01       	movw	r24, r28
 846:	0c 96       	adiw	r24, 0x0c	; 12
 848:	64 e0       	ldi	r22, 0x04	; 4
 84a:	41 e0       	ldi	r20, 0x01	; 1
 84c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 850:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _data = 0;
 854:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
 856:	1a 82       	std	Y+2, r1	; 0x02
    if (!SpiDrv::waitResponseCmd(SET_IP_CONFIG_CMD, PARAM_NUMS_1, &_data, &_dataLen))
 858:	fe 01       	movw	r30, r28
 85a:	32 96       	adiw	r30, 0x02	; 2
 85c:	84 e1       	ldi	r24, 0x14	; 20
 85e:	61 e0       	ldi	r22, 0x01	; 1
 860:	9e 01       	movw	r18, r28
 862:	2f 5f       	subi	r18, 0xFF	; 255
 864:	3f 4f       	sbci	r19, 0xFF	; 255
 866:	a9 01       	movw	r20, r18
 868:	9f 01       	movw	r18, r30
 86a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 86e:	18 8a       	std	Y+16, r1	; 0x10
 870:	00 97       	sbiw	r24, 0x00	; 0
 872:	01 f4       	brne	.+0      	; 0x874 <_ZN7WiFiDrv6configEhmmm+0x9e>
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	88 8b       	std	Y+16, r24	; 0x10
 878:	88 89       	ldd	r24, Y+16	; 0x10
 87a:	88 23       	and	r24, r24
 87c:	01 f0       	breq	.+0      	; 0x87e <_ZN7WiFiDrv6configEhmmm+0xa8>
    {
        WARN("error waitResponse");
        _data = WL_FAILURE;
 87e:	8f ef       	ldi	r24, 0xFF	; 255
 880:	89 83       	std	Y+1, r24	; 0x01
    }
    SpiDrv::spiSlaveDeselect();
 882:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 886:	60 96       	adiw	r28, 0x10	; 16
 888:	0f b6       	in	r0, 0x3f	; 63
 88a:	f8 94       	cli
 88c:	de bf       	out	0x3e, r29	; 62
 88e:	0f be       	out	0x3f, r0	; 63
 890:	cd bf       	out	0x3d, r28	; 61
 892:	cf 91       	pop	r28
 894:	df 91       	pop	r29
 896:	1f 91       	pop	r17
 898:	0f 91       	pop	r16
 89a:	ff 90       	pop	r15
 89c:	ef 90       	pop	r14
 89e:	df 90       	pop	r13
 8a0:	cf 90       	pop	r12
 8a2:	08 95       	ret

000008a4 <_ZN7WiFiDrv10wifiSetKeyEPchhPKvh>:
    SpiDrv::spiSlaveDeselect();
    return _data;
}


int8_t WiFiDrv::wifiSetKey(char* ssid, uint8_t ssid_len, uint8_t key_idx, const void *key, const uint8_t len)
 8a4:	0f 93       	push	r16
 8a6:	df 93       	push	r29
 8a8:	cf 93       	push	r28
 8aa:	cd b7       	in	r28, 0x3d	; 61
 8ac:	de b7       	in	r29, 0x3e	; 62
 8ae:	2a 97       	sbiw	r28, 0x0a	; 10
 8b0:	0f b6       	in	r0, 0x3f	; 63
 8b2:	f8 94       	cli
 8b4:	de bf       	out	0x3e, r29	; 62
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	cd bf       	out	0x3d, r28	; 61
 8ba:	9c 83       	std	Y+4, r25	; 0x04
 8bc:	8b 83       	std	Y+3, r24	; 0x03
 8be:	6d 83       	std	Y+5, r22	; 0x05
 8c0:	4e 83       	std	Y+6, r20	; 0x06
 8c2:	38 87       	std	Y+8, r19	; 0x08
 8c4:	2f 83       	std	Y+7, r18	; 0x07
 8c6:	09 87       	std	Y+9, r16	; 0x09
{
	WAIT_FOR_SLAVE_SELECT();
 8c8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 8cc:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    // Send Command
    SpiDrv::sendCmd(SET_KEY_CMD, PARAM_NUMS_3);
 8d0:	82 e1       	ldi	r24, 0x12	; 18
 8d2:	63 e0       	ldi	r22, 0x03	; 3
 8d4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam((uint8_t*)ssid, ssid_len, NO_LAST_PARAM);
 8d8:	8b 81       	ldd	r24, Y+3	; 0x03
 8da:	9c 81       	ldd	r25, Y+4	; 0x04
 8dc:	6d 81       	ldd	r22, Y+5	; 0x05
 8de:	40 e0       	ldi	r20, 0x00	; 0
 8e0:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam(&key_idx, KEY_IDX_LEN, NO_LAST_PARAM);
 8e4:	ce 01       	movw	r24, r28
 8e6:	06 96       	adiw	r24, 0x06	; 6
 8e8:	61 e0       	ldi	r22, 0x01	; 1
 8ea:	40 e0       	ldi	r20, 0x00	; 0
 8ec:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam((uint8_t*)key, len, LAST_PARAM);
 8f0:	8f 81       	ldd	r24, Y+7	; 0x07
 8f2:	98 85       	ldd	r25, Y+8	; 0x08
 8f4:	69 85       	ldd	r22, Y+9	; 0x09
 8f6:	41 e0       	ldi	r20, 0x01	; 1
 8f8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    
    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 8fc:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _data = 0;
 900:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
 902:	1a 82       	std	Y+2, r1	; 0x02
    if (!SpiDrv::waitResponseCmd(SET_KEY_CMD, PARAM_NUMS_1, &_data, &_dataLen))
 904:	fe 01       	movw	r30, r28
 906:	32 96       	adiw	r30, 0x02	; 2
 908:	82 e1       	ldi	r24, 0x12	; 18
 90a:	61 e0       	ldi	r22, 0x01	; 1
 90c:	9e 01       	movw	r18, r28
 90e:	2f 5f       	subi	r18, 0xFF	; 255
 910:	3f 4f       	sbci	r19, 0xFF	; 255
 912:	a9 01       	movw	r20, r18
 914:	9f 01       	movw	r18, r30
 916:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 91a:	1a 86       	std	Y+10, r1	; 0x0a
 91c:	00 97       	sbiw	r24, 0x00	; 0
 91e:	01 f4       	brne	.+0      	; 0x920 <_ZN7WiFiDrv10wifiSetKeyEPchhPKvh+0x7c>
 920:	81 e0       	ldi	r24, 0x01	; 1
 922:	8a 87       	std	Y+10, r24	; 0x0a
 924:	8a 85       	ldd	r24, Y+10	; 0x0a
 926:	88 23       	and	r24, r24
 928:	01 f0       	breq	.+0      	; 0x92a <_ZN7WiFiDrv10wifiSetKeyEPchhPKvh+0x86>
    {
        WARN("error waitResponse");
        _data = WL_FAILURE;
 92a:	8f ef       	ldi	r24, 0xFF	; 255
 92c:	89 83       	std	Y+1, r24	; 0x01
    }
    SpiDrv::spiSlaveDeselect();
 92e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    return _data;
 932:	89 81       	ldd	r24, Y+1	; 0x01
}
 934:	2a 96       	adiw	r28, 0x0a	; 10
 936:	0f b6       	in	r0, 0x3f	; 63
 938:	f8 94       	cli
 93a:	de bf       	out	0x3e, r29	; 62
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	cd bf       	out	0x3d, r28	; 61
 940:	cf 91       	pop	r28
 942:	df 91       	pop	r29
 944:	0f 91       	pop	r16
 946:	08 95       	ret

00000948 <_ZN7WiFiDrv17wifiSetPassphraseEPchPKch>:
    SpiDrv::spiSlaveDeselect();

    return(_data == WIFI_SPI_ACK) ? WL_SUCCESS : WL_FAILURE;
}

int8_t WiFiDrv::wifiSetPassphrase(char* ssid, uint8_t ssid_len, const char *passphrase, const uint8_t len)
 948:	df 93       	push	r29
 94a:	cf 93       	push	r28
 94c:	cd b7       	in	r28, 0x3d	; 61
 94e:	de b7       	in	r29, 0x3e	; 62
 950:	29 97       	sbiw	r28, 0x09	; 9
 952:	0f b6       	in	r0, 0x3f	; 63
 954:	f8 94       	cli
 956:	de bf       	out	0x3e, r29	; 62
 958:	0f be       	out	0x3f, r0	; 63
 95a:	cd bf       	out	0x3d, r28	; 61
 95c:	9c 83       	std	Y+4, r25	; 0x04
 95e:	8b 83       	std	Y+3, r24	; 0x03
 960:	6d 83       	std	Y+5, r22	; 0x05
 962:	5f 83       	std	Y+7, r21	; 0x07
 964:	4e 83       	std	Y+6, r20	; 0x06
 966:	28 87       	std	Y+8, r18	; 0x08
{
	WAIT_FOR_SLAVE_SELECT();
 968:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 96c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    // Send Command
    SpiDrv::sendCmd(SET_PASSPHRASE_CMD, PARAM_NUMS_2);
 970:	81 e1       	ldi	r24, 0x11	; 17
 972:	62 e0       	ldi	r22, 0x02	; 2
 974:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam((uint8_t*)ssid, ssid_len, NO_LAST_PARAM);
 978:	8b 81       	ldd	r24, Y+3	; 0x03
 97a:	9c 81       	ldd	r25, Y+4	; 0x04
 97c:	6d 81       	ldd	r22, Y+5	; 0x05
 97e:	40 e0       	ldi	r20, 0x00	; 0
 980:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam((uint8_t*)passphrase, len, LAST_PARAM);
 984:	8e 81       	ldd	r24, Y+6	; 0x06
 986:	9f 81       	ldd	r25, Y+7	; 0x07
 988:	68 85       	ldd	r22, Y+8	; 0x08
 98a:	41 e0       	ldi	r20, 0x01	; 1
 98c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 990:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _data = 0;
 994:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
 996:	1a 82       	std	Y+2, r1	; 0x02
    if (!SpiDrv::waitResponseCmd(SET_PASSPHRASE_CMD, PARAM_NUMS_1, &_data, &_dataLen))
 998:	fe 01       	movw	r30, r28
 99a:	32 96       	adiw	r30, 0x02	; 2
 99c:	81 e1       	ldi	r24, 0x11	; 17
 99e:	61 e0       	ldi	r22, 0x01	; 1
 9a0:	9e 01       	movw	r18, r28
 9a2:	2f 5f       	subi	r18, 0xFF	; 255
 9a4:	3f 4f       	sbci	r19, 0xFF	; 255
 9a6:	a9 01       	movw	r20, r18
 9a8:	9f 01       	movw	r18, r30
 9aa:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 9ae:	19 86       	std	Y+9, r1	; 0x09
 9b0:	00 97       	sbiw	r24, 0x00	; 0
 9b2:	01 f4       	brne	.+0      	; 0x9b4 <_ZN7WiFiDrv17wifiSetPassphraseEPchPKch+0x6c>
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	89 87       	std	Y+9, r24	; 0x09
 9b8:	89 85       	ldd	r24, Y+9	; 0x09
 9ba:	88 23       	and	r24, r24
 9bc:	01 f0       	breq	.+0      	; 0x9be <_ZN7WiFiDrv17wifiSetPassphraseEPchPKch+0x76>
    {
        WARN("error waitResponse");
        _data = WL_FAILURE;
 9be:	8f ef       	ldi	r24, 0xFF	; 255
 9c0:	89 83       	std	Y+1, r24	; 0x01
    }
    SpiDrv::spiSlaveDeselect();
 9c2:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    return _data;
 9c6:	89 81       	ldd	r24, Y+1	; 0x01
}
 9c8:	29 96       	adiw	r28, 0x09	; 9
 9ca:	0f b6       	in	r0, 0x3f	; 63
 9cc:	f8 94       	cli
 9ce:	de bf       	out	0x3e, r29	; 62
 9d0:	0f be       	out	0x3f, r0	; 63
 9d2:	cd bf       	out	0x3d, r28	; 61
 9d4:	cf 91       	pop	r28
 9d6:	df 91       	pop	r29
 9d8:	08 95       	ret

000009da <_ZN7WiFiDrv14wifiSetNetworkEPch>:
void WiFiDrv::wifiDriverInit()
{
    SpiDrv::begin();
}

int8_t WiFiDrv::wifiSetNetwork(char* ssid, uint8_t ssid_len)
 9da:	df 93       	push	r29
 9dc:	cf 93       	push	r28
 9de:	cd b7       	in	r28, 0x3d	; 61
 9e0:	de b7       	in	r29, 0x3e	; 62
 9e2:	27 97       	sbiw	r28, 0x07	; 7
 9e4:	0f b6       	in	r0, 0x3f	; 63
 9e6:	f8 94       	cli
 9e8:	de bf       	out	0x3e, r29	; 62
 9ea:	0f be       	out	0x3f, r0	; 63
 9ec:	cd bf       	out	0x3d, r28	; 61
 9ee:	9c 83       	std	Y+4, r25	; 0x04
 9f0:	8b 83       	std	Y+3, r24	; 0x03
 9f2:	6d 83       	std	Y+5, r22	; 0x05
{
	WAIT_FOR_SLAVE_SELECT();
 9f4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 9f8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    // Send Command
    SpiDrv::sendCmd(SET_NET_CMD, PARAM_NUMS_1);
 9fc:	80 e1       	ldi	r24, 0x10	; 16
 9fe:	61 e0       	ldi	r22, 0x01	; 1
 a00:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam((uint8_t*)ssid, ssid_len, LAST_PARAM);
 a04:	8b 81       	ldd	r24, Y+3	; 0x03
 a06:	9c 81       	ldd	r25, Y+4	; 0x04
 a08:	6d 81       	ldd	r22, Y+5	; 0x05
 a0a:	41 e0       	ldi	r20, 0x01	; 1
 a0c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 a10:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t _data = 0;
 a14:	19 82       	std	Y+1, r1	; 0x01
    uint8_t _dataLen = 0;
 a16:	1a 82       	std	Y+2, r1	; 0x02
    if (!SpiDrv::waitResponseCmd(SET_NET_CMD, PARAM_NUMS_1, &_data, &_dataLen))
 a18:	fe 01       	movw	r30, r28
 a1a:	32 96       	adiw	r30, 0x02	; 2
 a1c:	80 e1       	ldi	r24, 0x10	; 16
 a1e:	61 e0       	ldi	r22, 0x01	; 1
 a20:	9e 01       	movw	r18, r28
 a22:	2f 5f       	subi	r18, 0xFF	; 255
 a24:	3f 4f       	sbci	r19, 0xFF	; 255
 a26:	a9 01       	movw	r20, r18
 a28:	9f 01       	movw	r18, r30
 a2a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 a2e:	1f 82       	std	Y+7, r1	; 0x07
 a30:	00 97       	sbiw	r24, 0x00	; 0
 a32:	01 f4       	brne	.+0      	; 0xa34 <_ZN7WiFiDrv14wifiSetNetworkEPch+0x5a>
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	8f 83       	std	Y+7, r24	; 0x07
 a38:	8f 81       	ldd	r24, Y+7	; 0x07
 a3a:	88 23       	and	r24, r24
 a3c:	01 f0       	breq	.+0      	; 0xa3e <_ZN7WiFiDrv14wifiSetNetworkEPch+0x64>
    {
        WARN("error waitResponse");
        _data = WL_FAILURE;
 a3e:	8f ef       	ldi	r24, 0xFF	; 255
 a40:	89 83       	std	Y+1, r24	; 0x01
    }
    SpiDrv::spiSlaveDeselect();
 a42:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    return(_data == WIFI_SPI_ACK) ? WL_SUCCESS : WL_FAILURE;
 a46:	89 81       	ldd	r24, Y+1	; 0x01
 a48:	81 30       	cpi	r24, 0x01	; 1
 a4a:	01 f4       	brne	.+0      	; 0xa4c <_ZN7WiFiDrv14wifiSetNetworkEPch+0x72>
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	8e 83       	std	Y+6, r24	; 0x06
 a50:	00 c0       	rjmp	.+0      	; 0xa52 <_ZN7WiFiDrv14wifiSetNetworkEPch+0x78>
 a52:	8f ef       	ldi	r24, 0xFF	; 255
 a54:	8e 83       	std	Y+6, r24	; 0x06
 a56:	8e 81       	ldd	r24, Y+6	; 0x06
}
 a58:	27 96       	adiw	r28, 0x07	; 7
 a5a:	0f b6       	in	r0, 0x3f	; 63
 a5c:	f8 94       	cli
 a5e:	de bf       	out	0x3e, r29	; 62
 a60:	0f be       	out	0x3f, r0	; 63
 a62:	cd bf       	out	0x3d, r28	; 61
 a64:	cf 91       	pop	r28
 a66:	df 91       	pop	r29
 a68:	08 95       	ret

00000a6a <_ZN7WiFiDrv15getScanNetworksEv>:

    return (_data == WL_FAILURE)? _data : WL_SUCCESS;
}


uint8_t WiFiDrv::getScanNetworks()
 a6a:	df 93       	push	r29
 a6c:	cf 93       	push	r28
 a6e:	0f 92       	push	r0
 a70:	cd b7       	in	r28, 0x3d	; 61
 a72:	de b7       	in	r29, 0x3e	; 62
{
	WAIT_FOR_SLAVE_SELECT();
 a74:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 a78:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Send Command
    SpiDrv::sendCmd(SCAN_NETWORKS, PARAM_NUMS_0);
 a7c:	87 e2       	ldi	r24, 0x27	; 39
 a7e:	60 e0       	ldi	r22, 0x00	; 0
 a80:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 a84:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    uint8_t ssidListNum = 0;
 a88:	19 82       	std	Y+1, r1	; 0x01
    SpiDrv::waitResponse(SCAN_NETWORKS, &ssidListNum, (uint8_t**)_networkSsid, WL_NETWORKS_LIST_MAXNUM);
 a8a:	40 e0       	ldi	r20, 0x00	; 0
 a8c:	50 e0       	ldi	r21, 0x00	; 0
 a8e:	87 e2       	ldi	r24, 0x27	; 39
 a90:	9e 01       	movw	r18, r28
 a92:	2f 5f       	subi	r18, 0xFF	; 255
 a94:	3f 4f       	sbci	r19, 0xFF	; 255
 a96:	b9 01       	movw	r22, r18
 a98:	2a e0       	ldi	r18, 0x0A	; 10
 a9a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    SpiDrv::spiSlaveDeselect();
 a9e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    return ssidListNum;
 aa2:	89 81       	ldd	r24, Y+1	; 0x01
}
 aa4:	0f 90       	pop	r0
 aa6:	cf 91       	pop	r28
 aa8:	df 91       	pop	r29
 aaa:	08 95       	ret

00000aac <_ZN7WiFiDrv14wifiDriverInitEv>:


// Public Methods


void WiFiDrv::wifiDriverInit()
 aac:	df 93       	push	r29
 aae:	cf 93       	push	r28
 ab0:	cd b7       	in	r28, 0x3d	; 61
 ab2:	de b7       	in	r29, 0x3e	; 62
{
    SpiDrv::begin();
 ab4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 ab8:	cf 91       	pop	r28
 aba:	df 91       	pop	r29
 abc:	08 95       	ret

00000abe <_ZN7WiFiDrv13getRemoteDataEhPhS0_>:
    SpiDrv::waitResponseParams(GET_IPADDR_CMD, PARAM_NUMS_3, params);

    SpiDrv::spiSlaveDeselect();
}

void WiFiDrv::getRemoteData(uint8_t sock, uint8_t *ip, uint8_t *port)
 abe:	df 93       	push	r29
 ac0:	cf 93       	push	r28
 ac2:	cd b7       	in	r28, 0x3d	; 61
 ac4:	de b7       	in	r29, 0x3e	; 62
 ac6:	2b 97       	sbiw	r28, 0x0b	; 11
 ac8:	0f b6       	in	r0, 0x3f	; 63
 aca:	f8 94       	cli
 acc:	de bf       	out	0x3e, r29	; 62
 ace:	0f be       	out	0x3f, r0	; 63
 ad0:	cd bf       	out	0x3d, r28	; 61
 ad2:	8f 83       	std	Y+7, r24	; 0x07
 ad4:	79 87       	std	Y+9, r23	; 0x09
 ad6:	68 87       	std	Y+8, r22	; 0x08
 ad8:	5b 87       	std	Y+11, r21	; 0x0b
 ada:	4a 87       	std	Y+10, r20	; 0x0a
{
    tParam params[PARAM_NUMS_2] = { {0, (char*)ip}, {0, (char*)port} };
 adc:	86 e0       	ldi	r24, 0x06	; 6
 ade:	fe 01       	movw	r30, r28
 ae0:	31 96       	adiw	r30, 0x01	; 1
 ae2:	df 01       	movw	r26, r30
 ae4:	98 2f       	mov	r25, r24
 ae6:	1d 92       	st	X+, r1
 ae8:	9a 95       	dec	r25
 aea:	01 f4       	brne	.+0      	; 0xaec <_ZN7WiFiDrv13getRemoteDataEhPhS0_+0x2e>
 aec:	88 85       	ldd	r24, Y+8	; 0x08
 aee:	99 85       	ldd	r25, Y+9	; 0x09
 af0:	9b 83       	std	Y+3, r25	; 0x03
 af2:	8a 83       	std	Y+2, r24	; 0x02
 af4:	8a 85       	ldd	r24, Y+10	; 0x0a
 af6:	9b 85       	ldd	r25, Y+11	; 0x0b
 af8:	9e 83       	std	Y+6, r25	; 0x06
 afa:	8d 83       	std	Y+5, r24	; 0x05

    WAIT_FOR_SLAVE_SELECT();
 afc:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 b00:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Send Command
    SpiDrv::sendCmd(GET_REMOTE_DATA_CMD, PARAM_NUMS_1);
 b04:	8a e3       	ldi	r24, 0x3A	; 58
 b06:	61 e0       	ldi	r22, 0x01	; 1
 b08:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    SpiDrv::sendParam(&sock, sizeof(sock), LAST_PARAM);
 b0c:	ce 01       	movw	r24, r28
 b0e:	07 96       	adiw	r24, 0x07	; 7
 b10:	61 e0       	ldi	r22, 0x01	; 1
 b12:	41 e0       	ldi	r20, 0x01	; 1
 b14:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 b18:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    SpiDrv::waitResponseParams(GET_REMOTE_DATA_CMD, PARAM_NUMS_2, params);
 b1c:	8a e3       	ldi	r24, 0x3A	; 58
 b1e:	62 e0       	ldi	r22, 0x02	; 2
 b20:	9e 01       	movw	r18, r28
 b22:	2f 5f       	subi	r18, 0xFF	; 255
 b24:	3f 4f       	sbci	r19, 0xFF	; 255
 b26:	a9 01       	movw	r20, r18
 b28:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    SpiDrv::spiSlaveDeselect();
 b2c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 b30:	2b 96       	adiw	r28, 0x0b	; 11
 b32:	0f b6       	in	r0, 0x3f	; 63
 b34:	f8 94       	cli
 b36:	de bf       	out	0x3e, r29	; 62
 b38:	0f be       	out	0x3f, r0	; 63
 b3a:	cd bf       	out	0x3d, r28	; 61
 b3c:	cf 91       	pop	r28
 b3e:	df 91       	pop	r29
 b40:	08 95       	ret

00000b42 <_ZN7WiFiDrv14getNetworkDataEPhS0_S0_>:
char    WiFiDrv::fwVersion[] = {0};


// Private Methods

void WiFiDrv::getNetworkData(uint8_t *ip, uint8_t *mask, uint8_t *gwip)
 b42:	df 93       	push	r29
 b44:	cf 93       	push	r28
 b46:	cd b7       	in	r28, 0x3d	; 61
 b48:	de b7       	in	r29, 0x3e	; 62
 b4a:	60 97       	sbiw	r28, 0x10	; 16
 b4c:	0f b6       	in	r0, 0x3f	; 63
 b4e:	f8 94       	cli
 b50:	de bf       	out	0x3e, r29	; 62
 b52:	0f be       	out	0x3f, r0	; 63
 b54:	cd bf       	out	0x3d, r28	; 61
 b56:	9c 87       	std	Y+12, r25	; 0x0c
 b58:	8b 87       	std	Y+11, r24	; 0x0b
 b5a:	7e 87       	std	Y+14, r23	; 0x0e
 b5c:	6d 87       	std	Y+13, r22	; 0x0d
 b5e:	58 8b       	std	Y+16, r21	; 0x10
 b60:	4f 87       	std	Y+15, r20	; 0x0f
{
    tParam params[PARAM_NUMS_3] = { {0, (char*)ip}, {0, (char*)mask}, {0, (char*)gwip}};
 b62:	89 e0       	ldi	r24, 0x09	; 9
 b64:	fe 01       	movw	r30, r28
 b66:	31 96       	adiw	r30, 0x01	; 1
 b68:	df 01       	movw	r26, r30
 b6a:	98 2f       	mov	r25, r24
 b6c:	1d 92       	st	X+, r1
 b6e:	9a 95       	dec	r25
 b70:	01 f4       	brne	.+0      	; 0xb72 <_ZN7WiFiDrv14getNetworkDataEPhS0_S0_+0x30>
 b72:	8b 85       	ldd	r24, Y+11	; 0x0b
 b74:	9c 85       	ldd	r25, Y+12	; 0x0c
 b76:	9b 83       	std	Y+3, r25	; 0x03
 b78:	8a 83       	std	Y+2, r24	; 0x02
 b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
 b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
 b7e:	9e 83       	std	Y+6, r25	; 0x06
 b80:	8d 83       	std	Y+5, r24	; 0x05
 b82:	8f 85       	ldd	r24, Y+15	; 0x0f
 b84:	98 89       	ldd	r25, Y+16	; 0x10
 b86:	99 87       	std	Y+9, r25	; 0x09
 b88:	88 87       	std	Y+8, r24	; 0x08

    WAIT_FOR_SLAVE_SELECT();
 b8a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 b8e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Send Command
    SpiDrv::sendCmd(GET_IPADDR_CMD, PARAM_NUMS_1);
 b92:	81 e2       	ldi	r24, 0x21	; 33
 b94:	61 e0       	ldi	r22, 0x01	; 1
 b96:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    uint8_t _dummy = DUMMY_DATA;
 b9a:	8f ef       	ldi	r24, 0xFF	; 255
 b9c:	8a 87       	std	Y+10, r24	; 0x0a
    SpiDrv::sendParam(&_dummy, sizeof(_dummy), LAST_PARAM);
 b9e:	ce 01       	movw	r24, r28
 ba0:	0a 96       	adiw	r24, 0x0a	; 10
 ba2:	61 e0       	ldi	r22, 0x01	; 1
 ba4:	41 e0       	ldi	r20, 0x01	; 1
 ba6:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    //Wait the reply elaboration
    SpiDrv::waitForSlaveReady();
 baa:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    // Wait for reply
    SpiDrv::waitResponseParams(GET_IPADDR_CMD, PARAM_NUMS_3, params);
 bae:	81 e2       	ldi	r24, 0x21	; 33
 bb0:	63 e0       	ldi	r22, 0x03	; 3
 bb2:	9e 01       	movw	r18, r28
 bb4:	2f 5f       	subi	r18, 0xFF	; 255
 bb6:	3f 4f       	sbci	r19, 0xFF	; 255
 bb8:	a9 01       	movw	r20, r18
 bba:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

    SpiDrv::spiSlaveDeselect();
 bbe:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 bc2:	60 96       	adiw	r28, 0x10	; 16
 bc4:	0f b6       	in	r0, 0x3f	; 63
 bc6:	f8 94       	cli
 bc8:	de bf       	out	0x3e, r29	; 62
 bca:	0f be       	out	0x3f, r0	; 63
 bcc:	cd bf       	out	0x3d, r28	; 61
 bce:	cf 91       	pop	r28
 bd0:	df 91       	pop	r29
 bd2:	08 95       	ret

00000bd4 <_ZN7WiFiDrv12getGatewayIPER9IPAddress>:
 {
	getNetworkData(_localIp, _subnetMask, _gatewayIp);
	mask = _subnetMask;
 }

 void WiFiDrv::getGatewayIP(IPAddress& ip)
 bd4:	df 93       	push	r29
 bd6:	cf 93       	push	r28
 bd8:	00 d0       	rcall	.+0      	; 0xbda <_ZN7WiFiDrv12getGatewayIPER9IPAddress+0x6>
 bda:	cd b7       	in	r28, 0x3d	; 61
 bdc:	de b7       	in	r29, 0x3e	; 62
 bde:	9a 83       	std	Y+2, r25	; 0x02
 be0:	89 83       	std	Y+1, r24	; 0x01
 {
	getNetworkData(_localIp, _subnetMask, _gatewayIp);
 be2:	80 e0       	ldi	r24, 0x00	; 0
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	20 e0       	ldi	r18, 0x00	; 0
 be8:	30 e0       	ldi	r19, 0x00	; 0
 bea:	40 e0       	ldi	r20, 0x00	; 0
 bec:	50 e0       	ldi	r21, 0x00	; 0
 bee:	b9 01       	movw	r22, r18
 bf0:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	ip = _gatewayIp;
 bf4:	89 81       	ldd	r24, Y+1	; 0x01
 bf6:	9a 81       	ldd	r25, Y+2	; 0x02
 bf8:	20 e0       	ldi	r18, 0x00	; 0
 bfa:	30 e0       	ldi	r19, 0x00	; 0
 bfc:	b9 01       	movw	r22, r18
 bfe:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 }
 c02:	0f 90       	pop	r0
 c04:	0f 90       	pop	r0
 c06:	cf 91       	pop	r28
 c08:	df 91       	pop	r29
 c0a:	08 95       	ret

00000c0c <_ZN7WiFiDrv13getSubnetMaskER9IPAddress>:
{
	getNetworkData(_localIp, _subnetMask, _gatewayIp);
	ip = _localIp;
}

 void WiFiDrv::getSubnetMask(IPAddress& mask)
 c0c:	df 93       	push	r29
 c0e:	cf 93       	push	r28
 c10:	00 d0       	rcall	.+0      	; 0xc12 <_ZN7WiFiDrv13getSubnetMaskER9IPAddress+0x6>
 c12:	cd b7       	in	r28, 0x3d	; 61
 c14:	de b7       	in	r29, 0x3e	; 62
 c16:	9a 83       	std	Y+2, r25	; 0x02
 c18:	89 83       	std	Y+1, r24	; 0x01
 {
	getNetworkData(_localIp, _subnetMask, _gatewayIp);
 c1a:	80 e0       	ldi	r24, 0x00	; 0
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	20 e0       	ldi	r18, 0x00	; 0
 c20:	30 e0       	ldi	r19, 0x00	; 0
 c22:	40 e0       	ldi	r20, 0x00	; 0
 c24:	50 e0       	ldi	r21, 0x00	; 0
 c26:	b9 01       	movw	r22, r18
 c28:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	mask = _subnetMask;
 c2c:	89 81       	ldd	r24, Y+1	; 0x01
 c2e:	9a 81       	ldd	r25, Y+2	; 0x02
 c30:	20 e0       	ldi	r18, 0x00	; 0
 c32:	30 e0       	ldi	r19, 0x00	; 0
 c34:	b9 01       	movw	r22, r18
 c36:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 }
 c3a:	0f 90       	pop	r0
 c3c:	0f 90       	pop	r0
 c3e:	cf 91       	pop	r28
 c40:	df 91       	pop	r29
 c42:	08 95       	ret

00000c44 <_ZN7WiFiDrv12getIpAddressER9IPAddress>:
    SpiDrv::spiSlaveDeselect();

    return _mac;
}

void WiFiDrv::getIpAddress(IPAddress& ip)
 c44:	df 93       	push	r29
 c46:	cf 93       	push	r28
 c48:	00 d0       	rcall	.+0      	; 0xc4a <_ZN7WiFiDrv12getIpAddressER9IPAddress+0x6>
 c4a:	cd b7       	in	r28, 0x3d	; 61
 c4c:	de b7       	in	r29, 0x3e	; 62
 c4e:	9a 83       	std	Y+2, r25	; 0x02
 c50:	89 83       	std	Y+1, r24	; 0x01
{
	getNetworkData(_localIp, _subnetMask, _gatewayIp);
 c52:	80 e0       	ldi	r24, 0x00	; 0
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	20 e0       	ldi	r18, 0x00	; 0
 c58:	30 e0       	ldi	r19, 0x00	; 0
 c5a:	40 e0       	ldi	r20, 0x00	; 0
 c5c:	50 e0       	ldi	r21, 0x00	; 0
 c5e:	b9 01       	movw	r22, r18
 c60:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	ip = _localIp;
 c64:	89 81       	ldd	r24, Y+1	; 0x01
 c66:	9a 81       	ldd	r25, Y+2	; 0x02
 c68:	20 e0       	ldi	r18, 0x00	; 0
 c6a:	30 e0       	ldi	r19, 0x00	; 0
 c6c:	b9 01       	movw	r22, r18
 c6e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 c72:	0f 90       	pop	r0
 c74:	0f 90       	pop	r0
 c76:	cf 91       	pop	r28
 c78:	df 91       	pop	r29
 c7a:	08 95       	ret

WiFi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000098c  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000008  00000000  00000000  000009c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00000000  00000000  000009c8  2**0
                  ALLOC
  3 .stab         00001404  00000000  00000000  000009c8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000224a  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .dtors        00000002  00000000  00000000  00004016  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  6 .ctors        00000002  00000000  00000000  00004018  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text:

00000000 <_ZN9IPAddresscvmEv>:
    IPAddress(const uint8_t *address);
    virtual ~IPAddress();

    // Overloaded cast operator to allow IPAddress objects to be used where a pointer
    // to a four-byte uint8_t array is expected
    operator uint32_t() { return *((uint32_t*)_address); };
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddresscvmEv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	02 96       	adiw	r24, 0x02	; 2
  14:	fc 01       	movw	r30, r24
  16:	80 81       	ld	r24, Z
  18:	91 81       	ldd	r25, Z+1	; 0x01
  1a:	a2 81       	ldd	r26, Z+2	; 0x02
  1c:	b3 81       	ldd	r27, Z+3	; 0x03
  1e:	bc 01       	movw	r22, r24
  20:	cd 01       	movw	r24, r26
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

0000002c <_ZN9WiFiClass9getSocketEv>:
void WiFiClass::init()
{
    WiFiDrv::wifiDriverInit();
}

uint8_t WiFiClass::getSocket()
  2c:	df 93       	push	r29
  2e:	cf 93       	push	r28
  30:	00 d0       	rcall	.+0      	; 0x32 <_ZN9WiFiClass9getSocketEv+0x6>
  32:	cd b7       	in	r28, 0x3d	; 61
  34:	de b7       	in	r29, 0x3e	; 62
{
    for (uint8_t i = 0; i < MAX_SOCK_NUM; ++i)
  36:	19 82       	std	Y+1, r1	; 0x01
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN9WiFiClass9getSocketEv+0xe>
    {
        if (WiFiClass::_server_port[i] == 0)
  3a:	89 81       	ldd	r24, Y+1	; 0x01
  3c:	88 2f       	mov	r24, r24
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	88 0f       	add	r24, r24
  42:	99 1f       	adc	r25, r25
  44:	fc 01       	movw	r30, r24
  46:	e0 50       	subi	r30, 0x00	; 0
  48:	f0 40       	sbci	r31, 0x00	; 0
  4a:	80 81       	ld	r24, Z
  4c:	91 81       	ldd	r25, Z+1	; 0x01
  4e:	00 97       	sbiw	r24, 0x00	; 0
  50:	01 f4       	brne	.+0      	; 0x52 <_ZN9WiFiClass9getSocketEv+0x26>
        {
             return i;
  52:	89 81       	ldd	r24, Y+1	; 0x01
  54:	8a 83       	std	Y+2, r24	; 0x02
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZN9WiFiClass9getSocketEv+0x2c>
    WiFiDrv::wifiDriverInit();
}

uint8_t WiFiClass::getSocket()
{
    for (uint8_t i = 0; i < MAX_SOCK_NUM; ++i)
  58:	89 81       	ldd	r24, Y+1	; 0x01
  5a:	8f 5f       	subi	r24, 0xFF	; 255
  5c:	89 83       	std	Y+1, r24	; 0x01
  5e:	89 81       	ldd	r24, Y+1	; 0x01
  60:	84 30       	cpi	r24, 0x04	; 4
  62:	00 f0       	brcs	.+0      	; 0x64 <_ZN9WiFiClass9getSocketEv+0x38>
        if (WiFiClass::_server_port[i] == 0)
        {
             return i;
        }
    }
    return NO_SOCKET_AVAIL;
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	8a 83       	std	Y+2, r24	; 0x02
  68:	8a 81       	ldd	r24, Y+2	; 0x02
}
  6a:	0f 90       	pop	r0
  6c:	0f 90       	pop	r0
  6e:	cf 91       	pop	r28
  70:	df 91       	pop	r29
  72:	08 95       	ret

00000074 <_ZN9WiFiClass10hostByNameEPKcR9IPAddress>:
uint8_t WiFiClass::status()
{
    return WiFiDrv::getConnectionStatus();
}

int WiFiClass::hostByName(const char* aHostname, IPAddress& aResult)
  74:	df 93       	push	r29
  76:	cf 93       	push	r28
  78:	00 d0       	rcall	.+0      	; 0x7a <_ZN9WiFiClass10hostByNameEPKcR9IPAddress+0x6>
  7a:	00 d0       	rcall	.+0      	; 0x7c <_ZN9WiFiClass10hostByNameEPKcR9IPAddress+0x8>
  7c:	00 d0       	rcall	.+0      	; 0x7e <_ZN9WiFiClass10hostByNameEPKcR9IPAddress+0xa>
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	de b7       	in	r29, 0x3e	; 62
  82:	9a 83       	std	Y+2, r25	; 0x02
  84:	89 83       	std	Y+1, r24	; 0x01
  86:	7c 83       	std	Y+4, r23	; 0x04
  88:	6b 83       	std	Y+3, r22	; 0x03
  8a:	5e 83       	std	Y+6, r21	; 0x06
  8c:	4d 83       	std	Y+5, r20	; 0x05
{
	return WiFiDrv::getHostByName(aHostname, aResult);
  8e:	8b 81       	ldd	r24, Y+3	; 0x03
  90:	9c 81       	ldd	r25, Y+4	; 0x04
  92:	2d 81       	ldd	r18, Y+5	; 0x05
  94:	3e 81       	ldd	r19, Y+6	; 0x06
  96:	b9 01       	movw	r22, r18
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
  9c:	26 96       	adiw	r28, 0x06	; 6
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <_ZN9WiFiClass6statusEv>:
uint8_t WiFiClass::encryptionType(uint8_t networkItem)
{
    return WiFiDrv::getEncTypeNetowrks(networkItem);
}

uint8_t WiFiClass::status()
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	00 d0       	rcall	.+0      	; 0xb4 <_ZN9WiFiClass6statusEv+0x6>
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	9a 83       	std	Y+2, r25	; 0x02
  ba:	89 83       	std	Y+1, r24	; 0x01
{
    return WiFiDrv::getConnectionStatus();
  bc:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
  c0:	0f 90       	pop	r0
  c2:	0f 90       	pop	r0
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <_ZN9WiFiClass14encryptionTypeEh>:
int32_t WiFiClass::RSSI(uint8_t networkItem)
{
	return WiFiDrv::getRSSINetoworks(networkItem);
}

uint8_t WiFiClass::encryptionType(uint8_t networkItem)
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	00 d0       	rcall	.+0      	; 0xd0 <_ZN9WiFiClass14encryptionTypeEh+0x6>
  d0:	0f 92       	push	r0
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	9a 83       	std	Y+2, r25	; 0x02
  d8:	89 83       	std	Y+1, r24	; 0x01
  da:	6b 83       	std	Y+3, r22	; 0x03
{
    return WiFiDrv::getEncTypeNetowrks(networkItem);
  dc:	8b 81       	ldd	r24, Y+3	; 0x03
  de:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	cf 91       	pop	r28
  ea:	df 91       	pop	r29
  ec:	08 95       	ret

000000ee <_ZN9WiFiClass4RSSIEh>:
char* WiFiClass::SSID(uint8_t networkItem)
{
	return WiFiDrv::getSSIDNetoworks(networkItem);
}

int32_t WiFiClass::RSSI(uint8_t networkItem)
  ee:	df 93       	push	r29
  f0:	cf 93       	push	r28
  f2:	00 d0       	rcall	.+0      	; 0xf4 <_ZN9WiFiClass4RSSIEh+0x6>
  f4:	0f 92       	push	r0
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	9a 83       	std	Y+2, r25	; 0x02
  fc:	89 83       	std	Y+1, r24	; 0x01
  fe:	6b 83       	std	Y+3, r22	; 0x03
{
	return WiFiDrv::getRSSINetoworks(networkItem);
 100:	8b 81       	ldd	r24, Y+3	; 0x03
 102:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 106:	dc 01       	movw	r26, r24
 108:	cb 01       	movw	r24, r22
}
 10a:	bc 01       	movw	r22, r24
 10c:	cd 01       	movw	r24, r26
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	cf 91       	pop	r28
 116:	df 91       	pop	r29
 118:	08 95       	ret

0000011a <_ZN9WiFiClass4SSIDEh>:
 	}
	while (( numOfNetworks == 0)&&(--attempts>0));
	return numOfNetworks;
}

char* WiFiClass::SSID(uint8_t networkItem)
 11a:	df 93       	push	r29
 11c:	cf 93       	push	r28
 11e:	00 d0       	rcall	.+0      	; 0x120 <_ZN9WiFiClass4SSIDEh+0x6>
 120:	0f 92       	push	r0
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	9a 83       	std	Y+2, r25	; 0x02
 128:	89 83       	std	Y+1, r24	; 0x01
 12a:	6b 83       	std	Y+3, r22	; 0x03
{
	return WiFiDrv::getSSIDNetoworks(networkItem);
 12c:	8b 81       	ldd	r24, Y+3	; 0x03
 12e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	08 95       	ret

0000013e <_ZN9WiFiClass12scanNetworksEv>:
{
    return WiFiDrv::getCurrentEncryptionType();
}


int8_t WiFiClass::scanNetworks()
 13e:	df 93       	push	r29
 140:	cf 93       	push	r28
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	27 97       	sbiw	r28, 0x07	; 7
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
 152:	9c 83       	std	Y+4, r25	; 0x04
 154:	8b 83       	std	Y+3, r24	; 0x03
{
	uint8_t attempts = 10;
 156:	8a e0       	ldi	r24, 0x0A	; 10
 158:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t numOfNetworks = 0;
 15a:	19 82       	std	Y+1, r1	; 0x01

	if (WiFiDrv::startScanNetworks() == WL_FAILURE)
 15c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 160:	1f 82       	std	Y+7, r1	; 0x07
 162:	8f 3f       	cpi	r24, 0xFF	; 255
 164:	01 f4       	brne	.+0      	; 0x166 <_ZN9WiFiClass12scanNetworksEv+0x28>
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	8f 83       	std	Y+7, r24	; 0x07
 16a:	8f 81       	ldd	r24, Y+7	; 0x07
 16c:	88 23       	and	r24, r24
 16e:	01 f0       	breq	.+0      	; 0x170 <_ZN9WiFiClass12scanNetworksEv+0x32>
		return WL_FAILURE;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	8e 83       	std	Y+6, r24	; 0x06
 174:	00 c0       	rjmp	.+0      	; 0x176 <_ZN9WiFiClass12scanNetworksEv+0x38>
 	do
 	{
 		delay(2000);
 176:	60 ed       	ldi	r22, 0xD0	; 208
 178:	77 e0       	ldi	r23, 0x07	; 7
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 		numOfNetworks = WiFiDrv::getScanNetworks();
 182:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 186:	89 83       	std	Y+1, r24	; 0x01
	uint8_t attempts = 10;
	uint8_t numOfNetworks = 0;

	if (WiFiDrv::startScanNetworks() == WL_FAILURE)
		return WL_FAILURE;
 	do
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	88 23       	and	r24, r24
 18c:	01 f4       	brne	.+0      	; 0x18e <_ZN9WiFiClass12scanNetworksEv+0x50>
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	81 50       	subi	r24, 0x01	; 1
 192:	8a 83       	std	Y+2, r24	; 0x02
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	88 23       	and	r24, r24
 198:	01 f0       	breq	.+0      	; 0x19a <_ZN9WiFiClass12scanNetworksEv+0x5c>
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	8d 83       	std	Y+5, r24	; 0x05
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <_ZN9WiFiClass12scanNetworksEv+0x62>
 1a0:	1d 82       	std	Y+5, r1	; 0x05
 1a2:	8d 81       	ldd	r24, Y+5	; 0x05
 1a4:	88 23       	and	r24, r24
 1a6:	01 f4       	brne	.+0      	; 0x1a8 <_ZN9WiFiClass12scanNetworksEv+0x6a>
 	{
 		delay(2000);
 		numOfNetworks = WiFiDrv::getScanNetworks();
 	}
	while (( numOfNetworks == 0)&&(--attempts>0));
	return numOfNetworks;
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	8e 83       	std	Y+6, r24	; 0x06
 1ac:	8e 81       	ldd	r24, Y+6	; 0x06
}
 1ae:	27 96       	adiw	r28, 0x07	; 7
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
 1ba:	cf 91       	pop	r28
 1bc:	df 91       	pop	r29
 1be:	08 95       	ret

000001c0 <_ZN9WiFiClass14encryptionTypeEv>:
int32_t WiFiClass::RSSI()
{
    return WiFiDrv::getCurrentRSSI();
}

uint8_t WiFiClass::encryptionType()
 1c0:	df 93       	push	r29
 1c2:	cf 93       	push	r28
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <_ZN9WiFiClass14encryptionTypeEv+0x6>
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
 1ca:	9a 83       	std	Y+2, r25	; 0x02
 1cc:	89 83       	std	Y+1, r24	; 0x01
{
    return WiFiDrv::getCurrentEncryptionType();
 1ce:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	cf 91       	pop	r28
 1d8:	df 91       	pop	r29
 1da:	08 95       	ret

000001dc <_ZN9WiFiClass4RSSIEv>:
	uint8_t* _bssid = WiFiDrv::getCurrentBSSID();
	memcpy(bssid, _bssid, WL_MAC_ADDR_LENGTH);
    return bssid;
}

int32_t WiFiClass::RSSI()
 1dc:	df 93       	push	r29
 1de:	cf 93       	push	r28
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <_ZN9WiFiClass4RSSIEv+0x6>
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	9a 83       	std	Y+2, r25	; 0x02
 1e8:	89 83       	std	Y+1, r24	; 0x01
{
    return WiFiDrv::getCurrentRSSI();
 1ea:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 1ee:	dc 01       	movw	r26, r24
 1f0:	cb 01       	movw	r24, r22
}
 1f2:	bc 01       	movw	r22, r24
 1f4:	cd 01       	movw	r24, r26
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	cf 91       	pop	r28
 1fc:	df 91       	pop	r29
 1fe:	08 95       	ret

00000200 <_ZN9WiFiClass5BSSIDEPh>:
char* WiFiClass::SSID()
{
    return WiFiDrv::getCurrentSSID();
}

uint8_t* WiFiClass::BSSID(uint8_t* bssid)
 200:	df 93       	push	r29
 202:	cf 93       	push	r28
 204:	00 d0       	rcall	.+0      	; 0x206 <_ZN9WiFiClass5BSSIDEPh+0x6>
 206:	00 d0       	rcall	.+0      	; 0x208 <_ZN9WiFiClass5BSSIDEPh+0x8>
 208:	00 d0       	rcall	.+0      	; 0x20a <_ZN9WiFiClass5BSSIDEPh+0xa>
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	9c 83       	std	Y+4, r25	; 0x04
 210:	8b 83       	std	Y+3, r24	; 0x03
 212:	7e 83       	std	Y+6, r23	; 0x06
 214:	6d 83       	std	Y+5, r22	; 0x05
{
	uint8_t* _bssid = WiFiDrv::getCurrentBSSID();
 216:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 21a:	9a 83       	std	Y+2, r25	; 0x02
 21c:	89 83       	std	Y+1, r24	; 0x01
	memcpy(bssid, _bssid, WL_MAC_ADDR_LENGTH);
 21e:	8d 81       	ldd	r24, Y+5	; 0x05
 220:	9e 81       	ldd	r25, Y+6	; 0x06
 222:	29 81       	ldd	r18, Y+1	; 0x01
 224:	3a 81       	ldd	r19, Y+2	; 0x02
 226:	b9 01       	movw	r22, r18
 228:	46 e0       	ldi	r20, 0x06	; 6
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    return bssid;
 230:	8d 81       	ldd	r24, Y+5	; 0x05
 232:	9e 81       	ldd	r25, Y+6	; 0x06
}
 234:	26 96       	adiw	r28, 0x06	; 6
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	cf 91       	pop	r28
 242:	df 91       	pop	r29
 244:	08 95       	ret

00000246 <_ZN9WiFiClass4SSIDEv>:
	IPAddress ret;
	WiFiDrv::getGatewayIP(ret);
	return ret;
}

char* WiFiClass::SSID()
 246:	df 93       	push	r29
 248:	cf 93       	push	r28
 24a:	00 d0       	rcall	.+0      	; 0x24c <_ZN9WiFiClass4SSIDEv+0x6>
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	9a 83       	std	Y+2, r25	; 0x02
 252:	89 83       	std	Y+1, r24	; 0x01
{
    return WiFiDrv::getCurrentSSID();
 254:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	cf 91       	pop	r28
 25e:	df 91       	pop	r29
 260:	08 95       	ret

00000262 <_ZN9WiFiClass9gatewayIPEv>:
	IPAddress ret;
	WiFiDrv::getSubnetMask(ret);
	return ret;
}

IPAddress WiFiClass::gatewayIP()
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	df 93       	push	r29
 268:	cf 93       	push	r28
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	28 97       	sbiw	r28, 0x08	; 8
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	8c 01       	movw	r16, r24
 27c:	78 87       	std	Y+8, r23	; 0x08
 27e:	6f 83       	std	Y+7, r22	; 0x07
{
	IPAddress ret;
 280:	c8 01       	movw	r24, r16
 282:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	WiFiDrv::getGatewayIP(ret);
 286:	c8 01       	movw	r24, r16
 288:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	return ret;
}
 28c:	c8 01       	movw	r24, r16
 28e:	c8 01       	movw	r24, r16
 290:	28 96       	adiw	r28, 0x08	; 8
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	cf 91       	pop	r28
 29e:	df 91       	pop	r29
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	08 95       	ret

000002a6 <_ZN9WiFiClass10subnetMaskEv>:
	IPAddress ret;
	WiFiDrv::getIpAddress(ret);
	return ret;
}

IPAddress WiFiClass::subnetMask()
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	df 93       	push	r29
 2ac:	cf 93       	push	r28
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	28 97       	sbiw	r28, 0x08	; 8
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
 2be:	8c 01       	movw	r16, r24
 2c0:	78 87       	std	Y+8, r23	; 0x08
 2c2:	6f 83       	std	Y+7, r22	; 0x07
{
	IPAddress ret;
 2c4:	c8 01       	movw	r24, r16
 2c6:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	WiFiDrv::getSubnetMask(ret);
 2ca:	c8 01       	movw	r24, r16
 2cc:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	return ret;
}
 2d0:	c8 01       	movw	r24, r16
 2d2:	c8 01       	movw	r24, r16
 2d4:	28 96       	adiw	r28, 0x08	; 8
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	cf 91       	pop	r28
 2e2:	df 91       	pop	r29
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <_ZN9WiFiClass7localIPEv>:
	uint8_t* _mac = WiFiDrv::getMacAddress();
	memcpy(mac, _mac, WL_MAC_ADDR_LENGTH);
    return mac;
}
   
IPAddress WiFiClass::localIP()
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	df 93       	push	r29
 2f0:	cf 93       	push	r28
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	28 97       	sbiw	r28, 0x08	; 8
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	8c 01       	movw	r16, r24
 304:	78 87       	std	Y+8, r23	; 0x08
 306:	6f 83       	std	Y+7, r22	; 0x07
{
	IPAddress ret;
 308:	c8 01       	movw	r24, r16
 30a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	WiFiDrv::getIpAddress(ret);
 30e:	c8 01       	movw	r24, r16
 310:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	return ret;
}
 314:	c8 01       	movw	r24, r16
 316:	c8 01       	movw	r24, r16
 318:	28 96       	adiw	r28, 0x08	; 8
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	f8 94       	cli
 31e:	de bf       	out	0x3e, r29	; 62
 320:	0f be       	out	0x3f, r0	; 63
 322:	cd bf       	out	0x3d, r28	; 61
 324:	cf 91       	pop	r28
 326:	df 91       	pop	r29
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	08 95       	ret

0000032e <_ZN9WiFiClass10macAddressEPh>:
int WiFiClass::disconnect()
{
    return WiFiDrv::disconnect();
}

uint8_t* WiFiClass::macAddress(uint8_t* mac)
 32e:	df 93       	push	r29
 330:	cf 93       	push	r28
 332:	00 d0       	rcall	.+0      	; 0x334 <_ZN9WiFiClass10macAddressEPh+0x6>
 334:	00 d0       	rcall	.+0      	; 0x336 <_ZN9WiFiClass10macAddressEPh+0x8>
 336:	00 d0       	rcall	.+0      	; 0x338 <_ZN9WiFiClass10macAddressEPh+0xa>
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
 33c:	9c 83       	std	Y+4, r25	; 0x04
 33e:	8b 83       	std	Y+3, r24	; 0x03
 340:	7e 83       	std	Y+6, r23	; 0x06
 342:	6d 83       	std	Y+5, r22	; 0x05
{
	uint8_t* _mac = WiFiDrv::getMacAddress();
 344:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 348:	9a 83       	std	Y+2, r25	; 0x02
 34a:	89 83       	std	Y+1, r24	; 0x01
	memcpy(mac, _mac, WL_MAC_ADDR_LENGTH);
 34c:	8d 81       	ldd	r24, Y+5	; 0x05
 34e:	9e 81       	ldd	r25, Y+6	; 0x06
 350:	29 81       	ldd	r18, Y+1	; 0x01
 352:	3a 81       	ldd	r19, Y+2	; 0x02
 354:	b9 01       	movw	r22, r18
 356:	46 e0       	ldi	r20, 0x06	; 6
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    return mac;
 35e:	8d 81       	ldd	r24, Y+5	; 0x05
 360:	9e 81       	ldd	r25, Y+6	; 0x06
}
 362:	26 96       	adiw	r28, 0x06	; 6
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
 36e:	cf 91       	pop	r28
 370:	df 91       	pop	r29
 372:	08 95       	ret

00000374 <_ZN9WiFiClass10disconnectEv>:
void WiFiClass::setDNS(IPAddress dns_server1, IPAddress dns_server2)
{
	WiFiDrv::setDNS(2, (uint32_t)dns_server1, (uint32_t)dns_server2);
}

int WiFiClass::disconnect()
 374:	df 93       	push	r29
 376:	cf 93       	push	r28
 378:	00 d0       	rcall	.+0      	; 0x37a <_ZN9WiFiClass10disconnectEv+0x6>
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	9a 83       	std	Y+2, r25	; 0x02
 380:	89 83       	std	Y+1, r24	; 0x01
{
    return WiFiDrv::disconnect();
 382:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 386:	99 27       	eor	r25, r25
 388:	87 fd       	sbrc	r24, 7
 38a:	90 95       	com	r25
}
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	cf 91       	pop	r28
 392:	df 91       	pop	r29
 394:	08 95       	ret

00000396 <_ZN9WiFiClass6setDNSE9IPAddressS0_>:
void WiFiClass::setDNS(IPAddress dns_server1)
{
	WiFiDrv::setDNS(1, (uint32_t)dns_server1, 0);
}

void WiFiClass::setDNS(IPAddress dns_server1, IPAddress dns_server2)
 396:	cf 92       	push	r12
 398:	df 92       	push	r13
 39a:	ef 92       	push	r14
 39c:	ff 92       	push	r15
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	df 93       	push	r29
 3a4:	cf 93       	push	r28
 3a6:	00 d0       	rcall	.+0      	; 0x3a8 <_ZN9WiFiClass6setDNSE9IPAddressS0_+0x12>
 3a8:	00 d0       	rcall	.+0      	; 0x3aa <_ZN9WiFiClass6setDNSE9IPAddressS0_+0x14>
 3aa:	00 d0       	rcall	.+0      	; 0x3ac <_ZN9WiFiClass6setDNSE9IPAddressS0_+0x16>
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	9a 83       	std	Y+2, r25	; 0x02
 3b2:	89 83       	std	Y+1, r24	; 0x01
 3b4:	7c 83       	std	Y+4, r23	; 0x04
 3b6:	6b 83       	std	Y+3, r22	; 0x03
 3b8:	5e 83       	std	Y+6, r21	; 0x06
 3ba:	4d 83       	std	Y+5, r20	; 0x05
{
	WiFiDrv::setDNS(2, (uint32_t)dns_server1, (uint32_t)dns_server2);
 3bc:	8b 81       	ldd	r24, Y+3	; 0x03
 3be:	9c 81       	ldd	r25, Y+4	; 0x04
 3c0:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 3c4:	6b 01       	movw	r12, r22
 3c6:	7c 01       	movw	r14, r24
 3c8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ca:	9e 81       	ldd	r25, Y+6	; 0x06
 3cc:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 3d0:	8b 01       	movw	r16, r22
 3d2:	9c 01       	movw	r18, r24
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	b7 01       	movw	r22, r14
 3d8:	a6 01       	movw	r20, r12
 3da:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 3de:	26 96       	adiw	r28, 0x06	; 6
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	f8 94       	cli
 3e4:	de bf       	out	0x3e, r29	; 62
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	cd bf       	out	0x3d, r28	; 61
 3ea:	cf 91       	pop	r28
 3ec:	df 91       	pop	r29
 3ee:	1f 91       	pop	r17
 3f0:	0f 91       	pop	r16
 3f2:	ff 90       	pop	r15
 3f4:	ef 90       	pop	r14
 3f6:	df 90       	pop	r13
 3f8:	cf 90       	pop	r12
 3fa:	08 95       	ret

000003fc <_ZN9WiFiClass6setDNSE9IPAddress>:
{
	WiFiDrv::config(3, (uint32_t)local_ip, (uint32_t)gateway, (uint32_t)subnet);
	WiFiDrv::setDNS(1, (uint32_t)dns_server, 0);
}

void WiFiClass::setDNS(IPAddress dns_server1)
 3fc:	0f 93       	push	r16
 3fe:	1f 93       	push	r17
 400:	df 93       	push	r29
 402:	cf 93       	push	r28
 404:	00 d0       	rcall	.+0      	; 0x406 <_ZN9WiFiClass6setDNSE9IPAddress+0xa>
 406:	00 d0       	rcall	.+0      	; 0x408 <_ZN9WiFiClass6setDNSE9IPAddress+0xc>
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	9a 83       	std	Y+2, r25	; 0x02
 40e:	89 83       	std	Y+1, r24	; 0x01
 410:	7c 83       	std	Y+4, r23	; 0x04
 412:	6b 83       	std	Y+3, r22	; 0x03
{
	WiFiDrv::setDNS(1, (uint32_t)dns_server1, 0);
 414:	8b 81       	ldd	r24, Y+3	; 0x03
 416:	9c 81       	ldd	r25, Y+4	; 0x04
 418:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 41c:	9b 01       	movw	r18, r22
 41e:	ac 01       	movw	r20, r24
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	ba 01       	movw	r22, r20
 424:	a9 01       	movw	r20, r18
 426:	00 e0       	ldi	r16, 0x00	; 0
 428:	10 e0       	ldi	r17, 0x00	; 0
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	cf 91       	pop	r28
 43c:	df 91       	pop	r29
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	08 95       	ret

00000444 <_ZN9WiFiClass6configE9IPAddressS0_S0_S0_>:
{
	WiFiDrv::config(2, (uint32_t)local_ip, (uint32_t)gateway, 0);
	WiFiDrv::setDNS(1, (uint32_t)dns_server, 0);
}

void WiFiClass::config(IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
 444:	4f 92       	push	r4
 446:	5f 92       	push	r5
 448:	6f 92       	push	r6
 44a:	7f 92       	push	r7
 44c:	8f 92       	push	r8
 44e:	9f 92       	push	r9
 450:	af 92       	push	r10
 452:	bf 92       	push	r11
 454:	cf 92       	push	r12
 456:	df 92       	push	r13
 458:	ef 92       	push	r14
 45a:	ff 92       	push	r15
 45c:	0f 93       	push	r16
 45e:	1f 93       	push	r17
 460:	df 93       	push	r29
 462:	cf 93       	push	r28
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	2a 97       	sbiw	r28, 0x0a	; 10
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	f8 94       	cli
 46e:	de bf       	out	0x3e, r29	; 62
 470:	0f be       	out	0x3f, r0	; 63
 472:	cd bf       	out	0x3d, r28	; 61
 474:	9a 83       	std	Y+2, r25	; 0x02
 476:	89 83       	std	Y+1, r24	; 0x01
 478:	7c 83       	std	Y+4, r23	; 0x04
 47a:	6b 83       	std	Y+3, r22	; 0x03
 47c:	5e 83       	std	Y+6, r21	; 0x06
 47e:	4d 83       	std	Y+5, r20	; 0x05
 480:	38 87       	std	Y+8, r19	; 0x08
 482:	2f 83       	std	Y+7, r18	; 0x07
 484:	1a 87       	std	Y+10, r17	; 0x0a
 486:	09 87       	std	Y+9, r16	; 0x09
{
	WiFiDrv::config(3, (uint32_t)local_ip, (uint32_t)gateway, (uint32_t)subnet);
 488:	8b 81       	ldd	r24, Y+3	; 0x03
 48a:	9c 81       	ldd	r25, Y+4	; 0x04
 48c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 490:	2b 01       	movw	r4, r22
 492:	3c 01       	movw	r6, r24
 494:	8f 81       	ldd	r24, Y+7	; 0x07
 496:	98 85       	ldd	r25, Y+8	; 0x08
 498:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 49c:	4b 01       	movw	r8, r22
 49e:	5c 01       	movw	r10, r24
 4a0:	89 85       	ldd	r24, Y+9	; 0x09
 4a2:	9a 85       	ldd	r25, Y+10	; 0x0a
 4a4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 4a8:	6b 01       	movw	r12, r22
 4aa:	7c 01       	movw	r14, r24
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	b3 01       	movw	r22, r6
 4b0:	a2 01       	movw	r20, r4
 4b2:	95 01       	movw	r18, r10
 4b4:	84 01       	movw	r16, r8
 4b6:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	WiFiDrv::setDNS(1, (uint32_t)dns_server, 0);
 4ba:	8d 81       	ldd	r24, Y+5	; 0x05
 4bc:	9e 81       	ldd	r25, Y+6	; 0x06
 4be:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 4c2:	9b 01       	movw	r18, r22
 4c4:	ac 01       	movw	r20, r24
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	ba 01       	movw	r22, r20
 4ca:	a9 01       	movw	r20, r18
 4cc:	00 e0       	ldi	r16, 0x00	; 0
 4ce:	10 e0       	ldi	r17, 0x00	; 0
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 4d8:	2a 96       	adiw	r28, 0x0a	; 10
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	cf 91       	pop	r28
 4e6:	df 91       	pop	r29
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	ff 90       	pop	r15
 4ee:	ef 90       	pop	r14
 4f0:	df 90       	pop	r13
 4f2:	cf 90       	pop	r12
 4f4:	bf 90       	pop	r11
 4f6:	af 90       	pop	r10
 4f8:	9f 90       	pop	r9
 4fa:	8f 90       	pop	r8
 4fc:	7f 90       	pop	r7
 4fe:	6f 90       	pop	r6
 500:	5f 90       	pop	r5
 502:	4f 90       	pop	r4
 504:	08 95       	ret

00000506 <_ZN9WiFiClass6configE9IPAddressS0_S0_>:
{
	WiFiDrv::config(1, (uint32_t)local_ip, 0, 0);
	WiFiDrv::setDNS(1, (uint32_t)dns_server, 0);
}

void WiFiClass::config(IPAddress local_ip, IPAddress dns_server, IPAddress gateway)
 506:	cf 92       	push	r12
 508:	df 92       	push	r13
 50a:	ef 92       	push	r14
 50c:	ff 92       	push	r15
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	df 93       	push	r29
 514:	cf 93       	push	r28
 516:	cd b7       	in	r28, 0x3d	; 61
 518:	de b7       	in	r29, 0x3e	; 62
 51a:	28 97       	sbiw	r28, 0x08	; 8
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	f8 94       	cli
 520:	de bf       	out	0x3e, r29	; 62
 522:	0f be       	out	0x3f, r0	; 63
 524:	cd bf       	out	0x3d, r28	; 61
 526:	9a 83       	std	Y+2, r25	; 0x02
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	7c 83       	std	Y+4, r23	; 0x04
 52c:	6b 83       	std	Y+3, r22	; 0x03
 52e:	5e 83       	std	Y+6, r21	; 0x06
 530:	4d 83       	std	Y+5, r20	; 0x05
 532:	38 87       	std	Y+8, r19	; 0x08
 534:	2f 83       	std	Y+7, r18	; 0x07
{
	WiFiDrv::config(2, (uint32_t)local_ip, (uint32_t)gateway, 0);
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	9c 81       	ldd	r25, Y+4	; 0x04
 53a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 53e:	6b 01       	movw	r12, r22
 540:	7c 01       	movw	r14, r24
 542:	8f 81       	ldd	r24, Y+7	; 0x07
 544:	98 85       	ldd	r25, Y+8	; 0x08
 546:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 54a:	8b 01       	movw	r16, r22
 54c:	9c 01       	movw	r18, r24
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	b7 01       	movw	r22, r14
 552:	a6 01       	movw	r20, r12
 554:	cc 24       	eor	r12, r12
 556:	dd 24       	eor	r13, r13
 558:	76 01       	movw	r14, r12
 55a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	WiFiDrv::setDNS(1, (uint32_t)dns_server, 0);
 55e:	8d 81       	ldd	r24, Y+5	; 0x05
 560:	9e 81       	ldd	r25, Y+6	; 0x06
 562:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 566:	9b 01       	movw	r18, r22
 568:	ac 01       	movw	r20, r24
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	ba 01       	movw	r22, r20
 56e:	a9 01       	movw	r20, r18
 570:	00 e0       	ldi	r16, 0x00	; 0
 572:	10 e0       	ldi	r17, 0x00	; 0
 574:	20 e0       	ldi	r18, 0x00	; 0
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 57c:	28 96       	adiw	r28, 0x08	; 8
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	f8 94       	cli
 582:	de bf       	out	0x3e, r29	; 62
 584:	0f be       	out	0x3f, r0	; 63
 586:	cd bf       	out	0x3d, r28	; 61
 588:	cf 91       	pop	r28
 58a:	df 91       	pop	r29
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	ff 90       	pop	r15
 592:	ef 90       	pop	r14
 594:	df 90       	pop	r13
 596:	cf 90       	pop	r12
 598:	08 95       	ret

0000059a <_ZN9WiFiClass6configE9IPAddressS0_>:
void WiFiClass::config(IPAddress local_ip)
{
	WiFiDrv::config(1, (uint32_t)local_ip, 0, 0);
}

void WiFiClass::config(IPAddress local_ip, IPAddress dns_server)
 59a:	cf 92       	push	r12
 59c:	df 92       	push	r13
 59e:	ef 92       	push	r14
 5a0:	ff 92       	push	r15
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	df 93       	push	r29
 5a8:	cf 93       	push	r28
 5aa:	00 d0       	rcall	.+0      	; 0x5ac <_ZN9WiFiClass6configE9IPAddressS0_+0x12>
 5ac:	00 d0       	rcall	.+0      	; 0x5ae <_ZN9WiFiClass6configE9IPAddressS0_+0x14>
 5ae:	00 d0       	rcall	.+0      	; 0x5b0 <_ZN9WiFiClass6configE9IPAddressS0_+0x16>
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
 5b4:	9a 83       	std	Y+2, r25	; 0x02
 5b6:	89 83       	std	Y+1, r24	; 0x01
 5b8:	7c 83       	std	Y+4, r23	; 0x04
 5ba:	6b 83       	std	Y+3, r22	; 0x03
 5bc:	5e 83       	std	Y+6, r21	; 0x06
 5be:	4d 83       	std	Y+5, r20	; 0x05
{
	WiFiDrv::config(1, (uint32_t)local_ip, 0, 0);
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	9c 81       	ldd	r25, Y+4	; 0x04
 5c4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 5c8:	9b 01       	movw	r18, r22
 5ca:	ac 01       	movw	r20, r24
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	ba 01       	movw	r22, r20
 5d0:	a9 01       	movw	r20, r18
 5d2:	00 e0       	ldi	r16, 0x00	; 0
 5d4:	10 e0       	ldi	r17, 0x00	; 0
 5d6:	20 e0       	ldi	r18, 0x00	; 0
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	cc 24       	eor	r12, r12
 5dc:	dd 24       	eor	r13, r13
 5de:	76 01       	movw	r14, r12
 5e0:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	WiFiDrv::setDNS(1, (uint32_t)dns_server, 0);
 5e4:	8d 81       	ldd	r24, Y+5	; 0x05
 5e6:	9e 81       	ldd	r25, Y+6	; 0x06
 5e8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 5ec:	9b 01       	movw	r18, r22
 5ee:	ac 01       	movw	r20, r24
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	ba 01       	movw	r22, r20
 5f4:	a9 01       	movw	r20, r18
 5f6:	00 e0       	ldi	r16, 0x00	; 0
 5f8:	10 e0       	ldi	r17, 0x00	; 0
 5fa:	20 e0       	ldi	r18, 0x00	; 0
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 602:	26 96       	adiw	r28, 0x06	; 6
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	f8 94       	cli
 608:	de bf       	out	0x3e, r29	; 62
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	cd bf       	out	0x3d, r28	; 61
 60e:	cf 91       	pop	r28
 610:	df 91       	pop	r29
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	ff 90       	pop	r15
 618:	ef 90       	pop	r14
 61a:	df 90       	pop	r13
 61c:	cf 90       	pop	r12
 61e:	08 95       	ret

00000620 <_ZN9WiFiClass6configE9IPAddress>:
    	status = WL_CONNECT_FAILED;
    }
    return status;
}

void WiFiClass::config(IPAddress local_ip)
 620:	cf 92       	push	r12
 622:	df 92       	push	r13
 624:	ef 92       	push	r14
 626:	ff 92       	push	r15
 628:	0f 93       	push	r16
 62a:	1f 93       	push	r17
 62c:	df 93       	push	r29
 62e:	cf 93       	push	r28
 630:	00 d0       	rcall	.+0      	; 0x632 <_ZN9WiFiClass6configE9IPAddress+0x12>
 632:	00 d0       	rcall	.+0      	; 0x634 <_ZN9WiFiClass6configE9IPAddress+0x14>
 634:	cd b7       	in	r28, 0x3d	; 61
 636:	de b7       	in	r29, 0x3e	; 62
 638:	9a 83       	std	Y+2, r25	; 0x02
 63a:	89 83       	std	Y+1, r24	; 0x01
 63c:	7c 83       	std	Y+4, r23	; 0x04
 63e:	6b 83       	std	Y+3, r22	; 0x03
{
	WiFiDrv::config(1, (uint32_t)local_ip, 0, 0);
 640:	8b 81       	ldd	r24, Y+3	; 0x03
 642:	9c 81       	ldd	r25, Y+4	; 0x04
 644:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 648:	9b 01       	movw	r18, r22
 64a:	ac 01       	movw	r20, r24
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	ba 01       	movw	r22, r20
 650:	a9 01       	movw	r20, r18
 652:	00 e0       	ldi	r16, 0x00	; 0
 654:	10 e0       	ldi	r17, 0x00	; 0
 656:	20 e0       	ldi	r18, 0x00	; 0
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	cc 24       	eor	r12, r12
 65c:	dd 24       	eor	r13, r13
 65e:	76 01       	movw	r14, r12
 660:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	cf 91       	pop	r28
 66e:	df 91       	pop	r29
 670:	1f 91       	pop	r17
 672:	0f 91       	pop	r16
 674:	ff 90       	pop	r15
 676:	ef 90       	pop	r14
 678:	df 90       	pop	r13
 67a:	cf 90       	pop	r12
 67c:	08 95       	ret

0000067e <_ZN9WiFiClass5beginEPcPKc>:
	   status = WL_CONNECT_FAILED;
   }
   return status;
}

int WiFiClass::begin(char* ssid, const char *passphrase)
 67e:	1f 93       	push	r17
 680:	df 93       	push	r29
 682:	cf 93       	push	r28
 684:	cd b7       	in	r28, 0x3d	; 61
 686:	de b7       	in	r29, 0x3e	; 62
 688:	2a 97       	sbiw	r28, 0x0a	; 10
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	f8 94       	cli
 68e:	de bf       	out	0x3e, r29	; 62
 690:	0f be       	out	0x3f, r0	; 63
 692:	cd bf       	out	0x3d, r28	; 61
 694:	9c 83       	std	Y+4, r25	; 0x04
 696:	8b 83       	std	Y+3, r24	; 0x03
 698:	7e 83       	std	Y+6, r23	; 0x06
 69a:	6d 83       	std	Y+5, r22	; 0x05
 69c:	58 87       	std	Y+8, r21	; 0x08
 69e:	4f 83       	std	Y+7, r20	; 0x07
{
	uint8_t status = WL_IDLE_STATUS;
 6a0:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t attempts = WL_MAX_ATTEMPT_CONNECTION;
 6a2:	8a e0       	ldi	r24, 0x0A	; 10
 6a4:	89 83       	std	Y+1, r24	; 0x01

    // set passphrase
    if (WiFiDrv::wifiSetPassphrase(ssid, strlen(ssid), passphrase, strlen(passphrase))!= WL_FAILURE)
 6a6:	8d 81       	ldd	r24, Y+5	; 0x05
 6a8:	9e 81       	ldd	r25, Y+6	; 0x06
 6aa:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 6ae:	18 2f       	mov	r17, r24
 6b0:	8f 81       	ldd	r24, Y+7	; 0x07
 6b2:	98 85       	ldd	r25, Y+8	; 0x08
 6b4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 6b8:	78 2f       	mov	r23, r24
 6ba:	8d 81       	ldd	r24, Y+5	; 0x05
 6bc:	9e 81       	ldd	r25, Y+6	; 0x06
 6be:	2f 81       	ldd	r18, Y+7	; 0x07
 6c0:	38 85       	ldd	r19, Y+8	; 0x08
 6c2:	61 2f       	mov	r22, r17
 6c4:	a9 01       	movw	r20, r18
 6c6:	27 2f       	mov	r18, r23
 6c8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 6cc:	1a 86       	std	Y+10, r1	; 0x0a
 6ce:	8f 3f       	cpi	r24, 0xFF	; 255
 6d0:	01 f0       	breq	.+0      	; 0x6d2 <_ZN9WiFiClass5beginEPcPKc+0x54>
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	8a 87       	std	Y+10, r24	; 0x0a
 6d6:	8a 85       	ldd	r24, Y+10	; 0x0a
 6d8:	88 23       	and	r24, r24
 6da:	01 f0       	breq	.+0      	; 0x6dc <_ZN9WiFiClass5beginEPcPKc+0x5e>
    {
 	   do
 	   {
 		   delay(WL_DELAY_START_CONNECTION);
 6dc:	68 e8       	ldi	r22, 0x88	; 136
 6de:	73 e1       	ldi	r23, 0x13	; 19
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 		   status = WiFiDrv::getConnectionStatus();
 6e8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 6ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t attempts = WL_MAX_ATTEMPT_CONNECTION;

    // set passphrase
    if (WiFiDrv::wifiSetPassphrase(ssid, strlen(ssid), passphrase, strlen(passphrase))!= WL_FAILURE)
    {
 	   do
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	88 23       	and	r24, r24
 6f2:	01 f0       	breq	.+0      	; 0x6f4 <_ZN9WiFiClass5beginEPcPKc+0x76>
 6f4:	8a 81       	ldd	r24, Y+2	; 0x02
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	01 f4       	brne	.+0      	; 0x6fa <_ZN9WiFiClass5beginEPcPKc+0x7c>
 6fa:	89 81       	ldd	r24, Y+1	; 0x01
 6fc:	81 50       	subi	r24, 0x01	; 1
 6fe:	89 83       	std	Y+1, r24	; 0x01
 700:	89 81       	ldd	r24, Y+1	; 0x01
 702:	88 23       	and	r24, r24
 704:	01 f0       	breq	.+0      	; 0x706 <_ZN9WiFiClass5beginEPcPKc+0x88>
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	89 87       	std	Y+9, r24	; 0x09
 70a:	00 c0       	rjmp	.+0      	; 0x70c <_ZN9WiFiClass5beginEPcPKc+0x8e>
 70c:	19 86       	std	Y+9, r1	; 0x09
 70e:	89 85       	ldd	r24, Y+9	; 0x09
 710:	88 23       	and	r24, r24
 712:	01 f4       	brne	.+0      	; 0x714 <_ZN9WiFiClass5beginEPcPKc+0x96>
 714:	00 c0       	rjmp	.+0      	; 0x716 <_ZN9WiFiClass5beginEPcPKc+0x98>
 		   delay(WL_DELAY_START_CONNECTION);
 		   status = WiFiDrv::getConnectionStatus();
 	   }
	   while ((( status == WL_IDLE_STATUS)||(status == WL_SCAN_COMPLETED))&&(--attempts>0));
    }else{
    	status = WL_CONNECT_FAILED;
 716:	84 e0       	ldi	r24, 0x04	; 4
 718:	8a 83       	std	Y+2, r24	; 0x02
    }
    return status;
 71a:	8a 81       	ldd	r24, Y+2	; 0x02
 71c:	88 2f       	mov	r24, r24
 71e:	90 e0       	ldi	r25, 0x00	; 0
}
 720:	2a 96       	adiw	r28, 0x0a	; 10
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	f8 94       	cli
 726:	de bf       	out	0x3e, r29	; 62
 728:	0f be       	out	0x3f, r0	; 63
 72a:	cd bf       	out	0x3d, r28	; 61
 72c:	cf 91       	pop	r28
 72e:	df 91       	pop	r29
 730:	1f 91       	pop	r17
 732:	08 95       	ret

00000734 <_ZN9WiFiClass5beginEPchPKc>:
	   status = WL_CONNECT_FAILED;
   }
   return status;
}

int WiFiClass::begin(char* ssid, uint8_t key_idx, const char *key)
 734:	0f 93       	push	r16
 736:	1f 93       	push	r17
 738:	df 93       	push	r29
 73a:	cf 93       	push	r28
 73c:	cd b7       	in	r28, 0x3d	; 61
 73e:	de b7       	in	r29, 0x3e	; 62
 740:	2b 97       	sbiw	r28, 0x0b	; 11
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	f8 94       	cli
 746:	de bf       	out	0x3e, r29	; 62
 748:	0f be       	out	0x3f, r0	; 63
 74a:	cd bf       	out	0x3d, r28	; 61
 74c:	9c 83       	std	Y+4, r25	; 0x04
 74e:	8b 83       	std	Y+3, r24	; 0x03
 750:	7e 83       	std	Y+6, r23	; 0x06
 752:	6d 83       	std	Y+5, r22	; 0x05
 754:	4f 83       	std	Y+7, r20	; 0x07
 756:	39 87       	std	Y+9, r19	; 0x09
 758:	28 87       	std	Y+8, r18	; 0x08
{
	uint8_t status = WL_IDLE_STATUS;
 75a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t attempts = WL_MAX_ATTEMPT_CONNECTION;
 75c:	8a e0       	ldi	r24, 0x0A	; 10
 75e:	89 83       	std	Y+1, r24	; 0x01

	// set encryption key
   if (WiFiDrv::wifiSetKey(ssid, strlen(ssid), key_idx, key, strlen(key)) != WL_FAILURE)
 760:	8d 81       	ldd	r24, Y+5	; 0x05
 762:	9e 81       	ldd	r25, Y+6	; 0x06
 764:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 768:	18 2f       	mov	r17, r24
 76a:	88 85       	ldd	r24, Y+8	; 0x08
 76c:	99 85       	ldd	r25, Y+9	; 0x09
 76e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 772:	58 2f       	mov	r21, r24
 774:	8d 81       	ldd	r24, Y+5	; 0x05
 776:	9e 81       	ldd	r25, Y+6	; 0x06
 778:	28 85       	ldd	r18, Y+8	; 0x08
 77a:	39 85       	ldd	r19, Y+9	; 0x09
 77c:	61 2f       	mov	r22, r17
 77e:	4f 81       	ldd	r20, Y+7	; 0x07
 780:	05 2f       	mov	r16, r21
 782:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 786:	1b 86       	std	Y+11, r1	; 0x0b
 788:	8f 3f       	cpi	r24, 0xFF	; 255
 78a:	01 f0       	breq	.+0      	; 0x78c <_ZN9WiFiClass5beginEPchPKc+0x58>
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	8b 87       	std	Y+11, r24	; 0x0b
 790:	8b 85       	ldd	r24, Y+11	; 0x0b
 792:	88 23       	and	r24, r24
 794:	01 f0       	breq	.+0      	; 0x796 <_ZN9WiFiClass5beginEPchPKc+0x62>
   {
	   do
	   {
		   delay(WL_DELAY_START_CONNECTION);
 796:	68 e8       	ldi	r22, 0x88	; 136
 798:	73 e1       	ldi	r23, 0x13	; 19
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
		   status = WiFiDrv::getConnectionStatus();
 7a2:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 7a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t attempts = WL_MAX_ATTEMPT_CONNECTION;

	// set encryption key
   if (WiFiDrv::wifiSetKey(ssid, strlen(ssid), key_idx, key, strlen(key)) != WL_FAILURE)
   {
	   do
 7a8:	8a 81       	ldd	r24, Y+2	; 0x02
 7aa:	88 23       	and	r24, r24
 7ac:	01 f0       	breq	.+0      	; 0x7ae <_ZN9WiFiClass5beginEPchPKc+0x7a>
 7ae:	8a 81       	ldd	r24, Y+2	; 0x02
 7b0:	82 30       	cpi	r24, 0x02	; 2
 7b2:	01 f4       	brne	.+0      	; 0x7b4 <_ZN9WiFiClass5beginEPchPKc+0x80>
 7b4:	89 81       	ldd	r24, Y+1	; 0x01
 7b6:	81 50       	subi	r24, 0x01	; 1
 7b8:	89 83       	std	Y+1, r24	; 0x01
 7ba:	89 81       	ldd	r24, Y+1	; 0x01
 7bc:	88 23       	and	r24, r24
 7be:	01 f0       	breq	.+0      	; 0x7c0 <_ZN9WiFiClass5beginEPchPKc+0x8c>
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	8a 87       	std	Y+10, r24	; 0x0a
 7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <_ZN9WiFiClass5beginEPchPKc+0x92>
 7c6:	1a 86       	std	Y+10, r1	; 0x0a
 7c8:	8a 85       	ldd	r24, Y+10	; 0x0a
 7ca:	88 23       	and	r24, r24
 7cc:	01 f4       	brne	.+0      	; 0x7ce <_ZN9WiFiClass5beginEPchPKc+0x9a>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <_ZN9WiFiClass5beginEPchPKc+0x9c>
	   {
		   delay(WL_DELAY_START_CONNECTION);
		   status = WiFiDrv::getConnectionStatus();
	   }while ((( status == WL_IDLE_STATUS)||(status == WL_SCAN_COMPLETED))&&(--attempts>0));
   }else{
	   status = WL_CONNECT_FAILED;
 7d0:	84 e0       	ldi	r24, 0x04	; 4
 7d2:	8a 83       	std	Y+2, r24	; 0x02
   }
   return status;
 7d4:	8a 81       	ldd	r24, Y+2	; 0x02
 7d6:	88 2f       	mov	r24, r24
 7d8:	90 e0       	ldi	r25, 0x00	; 0
}
 7da:	2b 96       	adiw	r28, 0x0b	; 11
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	f8 94       	cli
 7e0:	de bf       	out	0x3e, r29	; 62
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	cd bf       	out	0x3d, r28	; 61
 7e6:	cf 91       	pop	r28
 7e8:	df 91       	pop	r29
 7ea:	1f 91       	pop	r17
 7ec:	0f 91       	pop	r16
 7ee:	08 95       	ret

000007f0 <_ZN9WiFiClass5beginEPc>:
char* WiFiClass::firmwareVersion()
{
	return WiFiDrv::getFwVersion();
}

int WiFiClass::begin(char* ssid)
 7f0:	df 93       	push	r29
 7f2:	cf 93       	push	r28
 7f4:	cd b7       	in	r28, 0x3d	; 61
 7f6:	de b7       	in	r29, 0x3e	; 62
 7f8:	28 97       	sbiw	r28, 0x08	; 8
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	f8 94       	cli
 7fe:	de bf       	out	0x3e, r29	; 62
 800:	0f be       	out	0x3f, r0	; 63
 802:	cd bf       	out	0x3d, r28	; 61
 804:	9c 83       	std	Y+4, r25	; 0x04
 806:	8b 83       	std	Y+3, r24	; 0x03
 808:	7e 83       	std	Y+6, r23	; 0x06
 80a:	6d 83       	std	Y+5, r22	; 0x05
{
	uint8_t status = WL_IDLE_STATUS;
 80c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t attempts = WL_MAX_ATTEMPT_CONNECTION;
 80e:	8a e0       	ldi	r24, 0x0A	; 10
 810:	89 83       	std	Y+1, r24	; 0x01

   if (WiFiDrv::wifiSetNetwork(ssid, strlen(ssid)) != WL_FAILURE)
 812:	8d 81       	ldd	r24, Y+5	; 0x05
 814:	9e 81       	ldd	r25, Y+6	; 0x06
 816:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 81a:	28 2f       	mov	r18, r24
 81c:	8d 81       	ldd	r24, Y+5	; 0x05
 81e:	9e 81       	ldd	r25, Y+6	; 0x06
 820:	62 2f       	mov	r22, r18
 822:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 826:	18 86       	std	Y+8, r1	; 0x08
 828:	8f 3f       	cpi	r24, 0xFF	; 255
 82a:	01 f0       	breq	.+0      	; 0x82c <_ZN9WiFiClass5beginEPc+0x3c>
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	88 87       	std	Y+8, r24	; 0x08
 830:	88 85       	ldd	r24, Y+8	; 0x08
 832:	88 23       	and	r24, r24
 834:	01 f0       	breq	.+0      	; 0x836 <_ZN9WiFiClass5beginEPc+0x46>
   {
	   do
	   {
		   delay(WL_DELAY_START_CONNECTION);
 836:	68 e8       	ldi	r22, 0x88	; 136
 838:	73 e1       	ldi	r23, 0x13	; 19
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
		   status = WiFiDrv::getConnectionStatus();
 842:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 846:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status = WL_IDLE_STATUS;
	uint8_t attempts = WL_MAX_ATTEMPT_CONNECTION;

   if (WiFiDrv::wifiSetNetwork(ssid, strlen(ssid)) != WL_FAILURE)
   {
	   do
 848:	8a 81       	ldd	r24, Y+2	; 0x02
 84a:	88 23       	and	r24, r24
 84c:	01 f0       	breq	.+0      	; 0x84e <_ZN9WiFiClass5beginEPc+0x5e>
 84e:	8a 81       	ldd	r24, Y+2	; 0x02
 850:	82 30       	cpi	r24, 0x02	; 2
 852:	01 f4       	brne	.+0      	; 0x854 <_ZN9WiFiClass5beginEPc+0x64>
 854:	89 81       	ldd	r24, Y+1	; 0x01
 856:	81 50       	subi	r24, 0x01	; 1
 858:	89 83       	std	Y+1, r24	; 0x01
 85a:	89 81       	ldd	r24, Y+1	; 0x01
 85c:	88 23       	and	r24, r24
 85e:	01 f0       	breq	.+0      	; 0x860 <_ZN9WiFiClass5beginEPc+0x70>
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	8f 83       	std	Y+7, r24	; 0x07
 864:	00 c0       	rjmp	.+0      	; 0x866 <_ZN9WiFiClass5beginEPc+0x76>
 866:	1f 82       	std	Y+7, r1	; 0x07
 868:	8f 81       	ldd	r24, Y+7	; 0x07
 86a:	88 23       	and	r24, r24
 86c:	01 f4       	brne	.+0      	; 0x86e <_ZN9WiFiClass5beginEPc+0x7e>
 86e:	00 c0       	rjmp	.+0      	; 0x870 <_ZN9WiFiClass5beginEPc+0x80>
		   status = WiFiDrv::getConnectionStatus();
	   }
	   while ((( status == WL_IDLE_STATUS)||(status == WL_SCAN_COMPLETED))&&(--attempts>0));
   }else
   {
	   status = WL_CONNECT_FAILED;
 870:	84 e0       	ldi	r24, 0x04	; 4
 872:	8a 83       	std	Y+2, r24	; 0x02
   }
   return status;
 874:	8a 81       	ldd	r24, Y+2	; 0x02
 876:	88 2f       	mov	r24, r24
 878:	90 e0       	ldi	r25, 0x00	; 0
}
 87a:	28 96       	adiw	r28, 0x08	; 8
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	f8 94       	cli
 880:	de bf       	out	0x3e, r29	; 62
 882:	0f be       	out	0x3f, r0	; 63
 884:	cd bf       	out	0x3d, r28	; 61
 886:	cf 91       	pop	r28
 888:	df 91       	pop	r29
 88a:	08 95       	ret

0000088c <_ZN9WiFiClass15firmwareVersionEv>:
        }
    }
    return NO_SOCKET_AVAIL;
}

char* WiFiClass::firmwareVersion()
 88c:	df 93       	push	r29
 88e:	cf 93       	push	r28
 890:	cd b7       	in	r28, 0x3d	; 61
 892:	de b7       	in	r29, 0x3e	; 62
{
	return WiFiDrv::getFwVersion();
 894:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 898:	cf 91       	pop	r28
 89a:	df 91       	pop	r29
 89c:	08 95       	ret

0000089e <_ZN9WiFiClass4initEv>:
{
	// Driver initialization
	init();
}

void WiFiClass::init()
 89e:	df 93       	push	r29
 8a0:	cf 93       	push	r28
 8a2:	cd b7       	in	r28, 0x3d	; 61
 8a4:	de b7       	in	r29, 0x3e	; 62
{
    WiFiDrv::wifiDriverInit();
 8a6:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 8aa:	cf 91       	pop	r28
 8ac:	df 91       	pop	r29
 8ae:	08 95       	ret

000008b0 <_ZN9WiFiClassC1Ev>:

// XXX: don't make assumptions about the value of MAX_SOCK_NUM.
int16_t 	WiFiClass::_state[MAX_SOCK_NUM] = { NA_STATE, NA_STATE, NA_STATE, NA_STATE };
uint16_t 	WiFiClass::_server_port[MAX_SOCK_NUM] = { 0, 0, 0, 0 };

WiFiClass::WiFiClass()
 8b0:	df 93       	push	r29
 8b2:	cf 93       	push	r28
 8b4:	00 d0       	rcall	.+0      	; 0x8b6 <_ZN9WiFiClassC1Ev+0x6>
 8b6:	cd b7       	in	r28, 0x3d	; 61
 8b8:	de b7       	in	r29, 0x3e	; 62
 8ba:	9a 83       	std	Y+2, r25	; 0x02
 8bc:	89 83       	std	Y+1, r24	; 0x01
{
	// Driver initialization
	init();
 8be:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 8c2:	0f 90       	pop	r0
 8c4:	0f 90       	pop	r0
 8c6:	cf 91       	pop	r28
 8c8:	df 91       	pop	r29
 8ca:	08 95       	ret

000008cc <_Z41__static_initialization_and_destruction_0ii>:
int WiFiClass::hostByName(const char* aHostname, IPAddress& aResult)
{
	return WiFiDrv::getHostByName(aHostname, aResult);
}

WiFiClass WiFi;
 8cc:	0f 93       	push	r16
 8ce:	df 93       	push	r29
 8d0:	cf 93       	push	r28
 8d2:	00 d0       	rcall	.+0      	; 0x8d4 <_Z41__static_initialization_and_destruction_0ii+0x8>
 8d4:	00 d0       	rcall	.+0      	; 0x8d6 <_Z41__static_initialization_and_destruction_0ii+0xa>
 8d6:	cd b7       	in	r28, 0x3d	; 61
 8d8:	de b7       	in	r29, 0x3e	; 62
 8da:	9a 83       	std	Y+2, r25	; 0x02
 8dc:	89 83       	std	Y+1, r24	; 0x01
 8de:	7c 83       	std	Y+4, r23	; 0x04
 8e0:	6b 83       	std	Y+3, r22	; 0x03
 8e2:	89 81       	ldd	r24, Y+1	; 0x01
 8e4:	9a 81       	ldd	r25, Y+2	; 0x02
 8e6:	81 30       	cpi	r24, 0x01	; 1
 8e8:	91 05       	cpc	r25, r1
 8ea:	01 f4       	brne	.+0      	; 0x8ec <_Z41__static_initialization_and_destruction_0ii+0x20>
 8ec:	8b 81       	ldd	r24, Y+3	; 0x03
 8ee:	9c 81       	ldd	r25, Y+4	; 0x04
 8f0:	2f ef       	ldi	r18, 0xFF	; 255
 8f2:	8f 3f       	cpi	r24, 0xFF	; 255
 8f4:	92 07       	cpc	r25, r18
 8f6:	01 f4       	brne	.+0      	; 0x8f8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	60 e0       	ldi	r22, 0x00	; 0
 8fe:	40 e0       	ldi	r20, 0x00	; 0
 900:	20 e0       	ldi	r18, 0x00	; 0
 902:	00 e0       	ldi	r16, 0x00	; 0
 904:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 910:	89 81       	ldd	r24, Y+1	; 0x01
 912:	9a 81       	ldd	r25, Y+2	; 0x02
 914:	00 97       	sbiw	r24, 0x00	; 0
 916:	01 f4       	brne	.+0      	; 0x918 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 918:	8b 81       	ldd	r24, Y+3	; 0x03
 91a:	9c 81       	ldd	r25, Y+4	; 0x04
 91c:	2f ef       	ldi	r18, 0xFF	; 255
 91e:	8f 3f       	cpi	r24, 0xFF	; 255
 920:	92 07       	cpc	r25, r18
 922:	01 f4       	brne	.+0      	; 0x924 <_Z41__static_initialization_and_destruction_0ii+0x58>
 924:	80 e0       	ldi	r24, 0x00	; 0
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 92c:	0f 90       	pop	r0
 92e:	0f 90       	pop	r0
 930:	0f 90       	pop	r0
 932:	0f 90       	pop	r0
 934:	cf 91       	pop	r28
 936:	df 91       	pop	r29
 938:	0f 91       	pop	r16
 93a:	08 95       	ret

0000093c <_GLOBAL__D__ZN9WiFiClass6_stateE>:
 93c:	df 93       	push	r29
 93e:	cf 93       	push	r28
 940:	cd b7       	in	r28, 0x3d	; 61
 942:	de b7       	in	r29, 0x3e	; 62
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	6f ef       	ldi	r22, 0xFF	; 255
 94a:	7f ef       	ldi	r23, 0xFF	; 255
 94c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 950:	cf 91       	pop	r28
 952:	df 91       	pop	r29
 954:	08 95       	ret

00000956 <_GLOBAL__I__ZN9WiFiClass6_stateE>:
 956:	df 93       	push	r29
 958:	cf 93       	push	r28
 95a:	cd b7       	in	r28, 0x3d	; 61
 95c:	de b7       	in	r29, 0x3e	; 62
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	6f ef       	ldi	r22, 0xFF	; 255
 964:	7f ef       	ldi	r23, 0xFF	; 255
 966:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 96a:	cf 91       	pop	r28
 96c:	df 91       	pop	r29
 96e:	08 95       	ret

00000970 <_ZN9WiFiClassC2Ev>:

// XXX: don't make assumptions about the value of MAX_SOCK_NUM.
int16_t 	WiFiClass::_state[MAX_SOCK_NUM] = { NA_STATE, NA_STATE, NA_STATE, NA_STATE };
uint16_t 	WiFiClass::_server_port[MAX_SOCK_NUM] = { 0, 0, 0, 0 };

WiFiClass::WiFiClass()
 970:	df 93       	push	r29
 972:	cf 93       	push	r28
 974:	00 d0       	rcall	.+0      	; 0x976 <_ZN9WiFiClassC2Ev+0x6>
 976:	cd b7       	in	r28, 0x3d	; 61
 978:	de b7       	in	r29, 0x3e	; 62
 97a:	9a 83       	std	Y+2, r25	; 0x02
 97c:	89 83       	std	Y+1, r24	; 0x01
{
	// Driver initialization
	init();
 97e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
}
 982:	0f 90       	pop	r0
 984:	0f 90       	pop	r0
 986:	cf 91       	pop	r28
 988:	df 91       	pop	r29
 98a:	08 95       	ret

WiFiClient.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd8  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000074  00000000  00000000  00000c0c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          00000006  00000000  00000000  00000c80  2**0
                  ALLOC
  3 .stab         000014a0  00000000  00000000  00000c80  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002320  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .dtors        00000002  00000000  00000000  00004440  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  6 .ctors        00000002  00000000  00000000  00004442  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text:

00000000 <_ZN9IPAddresscvmEv>:
    IPAddress(const uint8_t *address);
    virtual ~IPAddress();

    // Overloaded cast operator to allow IPAddress objects to be used where a pointer
    // to a four-byte uint8_t array is expected
    operator uint32_t() { return *((uint32_t*)_address); };
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddresscvmEv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	02 96       	adiw	r24, 0x02	; 2
  14:	fc 01       	movw	r30, r24
  16:	80 81       	ld	r24, Z
  18:	91 81       	ldd	r25, Z+1	; 0x01
  1a:	a2 81       	ldd	r26, Z+2	; 0x02
  1c:	b3 81       	ldd	r27, Z+3	; 0x03
  1e:	bc 01       	movw	r22, r24
  20:	cd 01       	movw	r24, r26
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

0000002c <_ZN5Print13setWriteErrorEi>:
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  2c:	df 93       	push	r29
  2e:	cf 93       	push	r28
  30:	00 d0       	rcall	.+0      	; 0x32 <_ZN5Print13setWriteErrorEi+0x6>
  32:	00 d0       	rcall	.+0      	; 0x34 <_ZN5Print13setWriteErrorEi+0x8>
  34:	cd b7       	in	r28, 0x3d	; 61
  36:	de b7       	in	r29, 0x3e	; 62
  38:	9a 83       	std	Y+2, r25	; 0x02
  3a:	89 83       	std	Y+1, r24	; 0x01
  3c:	7c 83       	std	Y+4, r23	; 0x04
  3e:	6b 83       	std	Y+3, r22	; 0x03
  40:	e9 81       	ldd	r30, Y+1	; 0x01
  42:	fa 81       	ldd	r31, Y+2	; 0x02
  44:	8b 81       	ldd	r24, Y+3	; 0x03
  46:	9c 81       	ldd	r25, Y+4	; 0x04
  48:	93 83       	std	Z+3, r25	; 0x03
  4a:	82 83       	std	Z+2, r24	; 0x02
  4c:	0f 90       	pop	r0
  4e:	0f 90       	pop	r0
  50:	0f 90       	pop	r0
  52:	0f 90       	pop	r0
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	08 95       	ret

0000005a <_ZN5PrintC2Ev>:
  public:
    Print() : write_error(0) {}
  5a:	df 93       	push	r29
  5c:	cf 93       	push	r28
  5e:	00 d0       	rcall	.+0      	; 0x60 <_ZN5PrintC2Ev+0x6>
  60:	cd b7       	in	r28, 0x3d	; 61
  62:	de b7       	in	r29, 0x3e	; 62
  64:	9a 83       	std	Y+2, r25	; 0x02
  66:	89 83       	std	Y+1, r24	; 0x01
  68:	e9 81       	ldd	r30, Y+1	; 0x01
  6a:	fa 81       	ldd	r31, Y+2	; 0x02
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	91 83       	std	Z+1, r25	; 0x01
  72:	80 83       	st	Z, r24
  74:	e9 81       	ldd	r30, Y+1	; 0x01
  76:	fa 81       	ldd	r31, Y+2	; 0x02
  78:	13 82       	std	Z+3, r1	; 0x03
  7a:	12 82       	std	Z+2, r1	; 0x02
  7c:	0f 90       	pop	r0
  7e:	0f 90       	pop	r0
  80:	cf 91       	pop	r28
  82:	df 91       	pop	r29
  84:	08 95       	ret

00000086 <_ZN6StreamC2Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
  86:	df 93       	push	r29
  88:	cf 93       	push	r28
  8a:	00 d0       	rcall	.+0      	; 0x8c <_ZN6StreamC2Ev+0x6>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
  90:	9a 83       	std	Y+2, r25	; 0x02
  92:	89 83       	std	Y+1, r24	; 0x01
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	9a 81       	ldd	r25, Y+2	; 0x02
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
  9c:	e9 81       	ldd	r30, Y+1	; 0x01
  9e:	fa 81       	ldd	r31, Y+2	; 0x02
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	91 83       	std	Z+1, r25	; 0x01
  a6:	80 83       	st	Z, r24
  a8:	e9 81       	ldd	r30, Y+1	; 0x01
  aa:	fa 81       	ldd	r31, Y+2	; 0x02
  ac:	88 ee       	ldi	r24, 0xE8	; 232
  ae:	93 e0       	ldi	r25, 0x03	; 3
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	84 83       	std	Z+4, r24	; 0x04
  b6:	95 83       	std	Z+5, r25	; 0x05
  b8:	a6 83       	std	Z+6, r26	; 0x06
  ba:	b7 83       	std	Z+7, r27	; 0x07
  bc:	0f 90       	pop	r0
  be:	0f 90       	pop	r0
  c0:	cf 91       	pop	r28
  c2:	df 91       	pop	r29
  c4:	08 95       	ret

000000c6 <_ZN6ClientC2Ev>:
#define client_h
#include "Print.h"
#include "Stream.h"
#include "IPAddress.h"

class Client : public Stream {
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	00 d0       	rcall	.+0      	; 0xcc <_ZN6ClientC2Ev+0x6>
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	9a 83       	std	Y+2, r25	; 0x02
  d2:	89 83       	std	Y+1, r24	; 0x01
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	9a 81       	ldd	r25, Y+2	; 0x02
  d8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
  dc:	e9 81       	ldd	r30, Y+1	; 0x01
  de:	fa 81       	ldd	r31, Y+2	; 0x02
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	91 83       	std	Z+1, r25	; 0x01
  e6:	80 83       	st	Z, r24
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	cf 91       	pop	r28
  ee:	df 91       	pop	r29
  f0:	08 95       	ret

000000f2 <_ZN10WiFiClientC2Ev>:
#include "utility/server_drv.h"


uint16_t WiFiClient::_srcport = 1024;

WiFiClient::WiFiClient()
  f2:	df 93       	push	r29
  f4:	cf 93       	push	r28
  f6:	00 d0       	rcall	.+0      	; 0xf8 <_ZN10WiFiClientC2Ev+0x6>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	9a 83       	std	Y+2, r25	; 0x02
  fe:	89 83       	std	Y+1, r24	; 0x01
	: _sock(MAX_SOCK_NUM)
	, _socket(0)
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	9a 81       	ldd	r25, Y+2	; 0x02
 104:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 108:	e9 81       	ldd	r30, Y+1	; 0x01
 10a:	fa 81       	ldd	r31, Y+2	; 0x02
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	91 83       	std	Z+1, r25	; 0x01
 112:	80 83       	st	Z, r24
 114:	e9 81       	ldd	r30, Y+1	; 0x01
 116:	fa 81       	ldd	r31, Y+2	; 0x02
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	84 87       	std	Z+12, r24	; 0x0c
 11c:	e9 81       	ldd	r30, Y+1	; 0x01
 11e:	fa 81       	ldd	r31, Y+2	; 0x02
 120:	16 86       	std	Z+14, r1	; 0x0e
 122:	15 86       	std	Z+13, r1	; 0x0d
{}
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	cf 91       	pop	r28
 12a:	df 91       	pop	r29
 12c:	08 95       	ret

0000012e <_ZN10WiFiClientC1Ev>:
#include "utility/server_drv.h"


uint16_t WiFiClient::_srcport = 1024;

WiFiClient::WiFiClient()
 12e:	df 93       	push	r29
 130:	cf 93       	push	r28
 132:	00 d0       	rcall	.+0      	; 0x134 <_ZN10WiFiClientC1Ev+0x6>
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
	: _sock(MAX_SOCK_NUM)
	, _socket(0)
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	9a 81       	ldd	r25, Y+2	; 0x02
 140:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 144:	e9 81       	ldd	r30, Y+1	; 0x01
 146:	fa 81       	ldd	r31, Y+2	; 0x02
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	91 83       	std	Z+1, r25	; 0x01
 14e:	80 83       	st	Z, r24
 150:	e9 81       	ldd	r30, Y+1	; 0x01
 152:	fa 81       	ldd	r31, Y+2	; 0x02
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	84 87       	std	Z+12, r24	; 0x0c
 158:	e9 81       	ldd	r30, Y+1	; 0x01
 15a:	fa 81       	ldd	r31, Y+2	; 0x02
 15c:	16 86       	std	Z+14, r1	; 0x0e
 15e:	15 86       	std	Z+13, r1	; 0x0d
{}
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	cf 91       	pop	r28
 166:	df 91       	pop	r29
 168:	08 95       	ret

0000016a <_ZN10WiFiClientC2Eh>:

WiFiClient::WiFiClient(uint8_t sock)
 16a:	df 93       	push	r29
 16c:	cf 93       	push	r28
 16e:	00 d0       	rcall	.+0      	; 0x170 <_ZN10WiFiClientC2Eh+0x6>
 170:	0f 92       	push	r0
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
 176:	9a 83       	std	Y+2, r25	; 0x02
 178:	89 83       	std	Y+1, r24	; 0x01
 17a:	6b 83       	std	Y+3, r22	; 0x03
	: _sock(sock)
	, _socket(0)
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	9a 81       	ldd	r25, Y+2	; 0x02
 180:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 184:	e9 81       	ldd	r30, Y+1	; 0x01
 186:	fa 81       	ldd	r31, Y+2	; 0x02
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	91 83       	std	Z+1, r25	; 0x01
 18e:	80 83       	st	Z, r24
 190:	e9 81       	ldd	r30, Y+1	; 0x01
 192:	fa 81       	ldd	r31, Y+2	; 0x02
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	84 87       	std	Z+12, r24	; 0x0c
 198:	e9 81       	ldd	r30, Y+1	; 0x01
 19a:	fa 81       	ldd	r31, Y+2	; 0x02
 19c:	16 86       	std	Z+14, r1	; 0x0e
 19e:	15 86       	std	Z+13, r1	; 0x0d
{
}
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	cf 91       	pop	r28
 1a8:	df 91       	pop	r29
 1aa:	08 95       	ret

000001ac <_ZN10WiFiClientC1Eh>:
WiFiClient::WiFiClient()
	: _sock(MAX_SOCK_NUM)
	, _socket(0)
{}

WiFiClient::WiFiClient(uint8_t sock)
 1ac:	df 93       	push	r29
 1ae:	cf 93       	push	r28
 1b0:	00 d0       	rcall	.+0      	; 0x1b2 <_ZN10WiFiClientC1Eh+0x6>
 1b2:	0f 92       	push	r0
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	9a 83       	std	Y+2, r25	; 0x02
 1ba:	89 83       	std	Y+1, r24	; 0x01
 1bc:	6b 83       	std	Y+3, r22	; 0x03
	: _sock(sock)
	, _socket(0)
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	9a 81       	ldd	r25, Y+2	; 0x02
 1c2:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 1c6:	e9 81       	ldd	r30, Y+1	; 0x01
 1c8:	fa 81       	ldd	r31, Y+2	; 0x02
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	91 83       	std	Z+1, r25	; 0x01
 1d0:	80 83       	st	Z, r24
 1d2:	e9 81       	ldd	r30, Y+1	; 0x01
 1d4:	fa 81       	ldd	r31, Y+2	; 0x02
 1d6:	8b 81       	ldd	r24, Y+3	; 0x03
 1d8:	84 87       	std	Z+12, r24	; 0x0c
 1da:	e9 81       	ldd	r30, Y+1	; 0x01
 1dc:	fa 81       	ldd	r31, Y+2	; 0x02
 1de:	16 86       	std	Z+14, r1	; 0x0e
 1e0:	15 86       	std	Z+13, r1	; 0x0d
{
}
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	cf 91       	pop	r28
 1ea:	df 91       	pop	r29
 1ec:	08 95       	ret

000001ee <_ZN9PrintableC2ERKS_>:
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
*/

class Printable
{
 1ee:	df 93       	push	r29
 1f0:	cf 93       	push	r28
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <_ZN9PrintableC2ERKS_+0x6>
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <_ZN9PrintableC2ERKS_+0x8>
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	9a 83       	std	Y+2, r25	; 0x02
 1fc:	89 83       	std	Y+1, r24	; 0x01
 1fe:	7c 83       	std	Y+4, r23	; 0x04
 200:	6b 83       	std	Y+3, r22	; 0x03
 202:	e9 81       	ldd	r30, Y+1	; 0x01
 204:	fa 81       	ldd	r31, Y+2	; 0x02
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	91 83       	std	Z+1, r25	; 0x01
 20c:	80 83       	st	Z, r24
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	cf 91       	pop	r28
 218:	df 91       	pop	r29
 21a:	08 95       	ret

0000021c <_ZN9IPAddressC1ERKS_>:

#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
 21c:	df 93       	push	r29
 21e:	cf 93       	push	r28
 220:	00 d0       	rcall	.+0      	; 0x222 <_ZN9IPAddressC1ERKS_+0x6>
 222:	00 d0       	rcall	.+0      	; 0x224 <_ZN9IPAddressC1ERKS_+0x8>
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	9a 83       	std	Y+2, r25	; 0x02
 22a:	89 83       	std	Y+1, r24	; 0x01
 22c:	7c 83       	std	Y+4, r23	; 0x04
 22e:	6b 83       	std	Y+3, r22	; 0x03
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	9a 81       	ldd	r25, Y+2	; 0x02
 234:	2b 81       	ldd	r18, Y+3	; 0x03
 236:	3c 81       	ldd	r19, Y+4	; 0x04
 238:	b9 01       	movw	r22, r18
 23a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 23e:	e9 81       	ldd	r30, Y+1	; 0x01
 240:	fa 81       	ldd	r31, Y+2	; 0x02
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	91 83       	std	Z+1, r25	; 0x01
 248:	80 83       	st	Z, r24
 24a:	eb 81       	ldd	r30, Y+3	; 0x03
 24c:	fc 81       	ldd	r31, Y+4	; 0x04
 24e:	82 81       	ldd	r24, Z+2	; 0x02
 250:	93 81       	ldd	r25, Z+3	; 0x03
 252:	a4 81       	ldd	r26, Z+4	; 0x04
 254:	b5 81       	ldd	r27, Z+5	; 0x05
 256:	e9 81       	ldd	r30, Y+1	; 0x01
 258:	fa 81       	ldd	r31, Y+2	; 0x02
 25a:	82 83       	std	Z+2, r24	; 0x02
 25c:	93 83       	std	Z+3, r25	; 0x03
 25e:	a4 83       	std	Z+4, r26	; 0x04
 260:	b5 83       	std	Z+5, r27	; 0x05
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	08 95       	ret

00000270 <_ZN10WiFiClient5writeEh>:
    	return 0;
    }
    return 1;
}

size_t WiFiClient::write(uint8_t b) {
 270:	df 93       	push	r29
 272:	cf 93       	push	r28
 274:	00 d0       	rcall	.+0      	; 0x276 <_ZN10WiFiClient5writeEh+0x6>
 276:	0f 92       	push	r0
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	9a 83       	std	Y+2, r25	; 0x02
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	6b 83       	std	Y+3, r22	; 0x03
	  return write(&b, 1);
 282:	e9 81       	ldd	r30, Y+1	; 0x01
 284:	fa 81       	ldd	r31, Y+2	; 0x02
 286:	80 81       	ld	r24, Z
 288:	91 81       	ldd	r25, Z+1	; 0x01
 28a:	fc 01       	movw	r30, r24
 28c:	36 96       	adiw	r30, 0x06	; 6
 28e:	01 90       	ld	r0, Z+
 290:	f0 81       	ld	r31, Z
 292:	e0 2d       	mov	r30, r0
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	9a 81       	ldd	r25, Y+2	; 0x02
 298:	9e 01       	movw	r18, r28
 29a:	2d 5f       	subi	r18, 0xFD	; 253
 29c:	3f 4f       	sbci	r19, 0xFF	; 255
 29e:	b9 01       	movw	r22, r18
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	09 95       	icall
}
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	cf 91       	pop	r28
 2ae:	df 91       	pop	r29
 2b0:	08 95       	ret

000002b2 <_ZN10WiFiClient5flushEv>:

	  ServerDrv::getData(_sock, &b, 1);
	  return b;
}

void WiFiClient::flush() {
 2b2:	df 93       	push	r29
 2b4:	cf 93       	push	r28
 2b6:	00 d0       	rcall	.+0      	; 0x2b8 <_ZN10WiFiClient5flushEv+0x6>
 2b8:	0f 92       	push	r0
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	9a 83       	std	Y+2, r25	; 0x02
 2c0:	89 83       	std	Y+1, r24	; 0x01
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <_ZN10WiFiClient5flushEv+0x12>
  while (available())
    read();
 2c4:	e9 81       	ldd	r30, Y+1	; 0x01
 2c6:	fa 81       	ldd	r31, Y+2	; 0x02
 2c8:	80 81       	ld	r24, Z
 2ca:	91 81       	ldd	r25, Z+1	; 0x01
 2cc:	fc 01       	movw	r30, r24
 2ce:	3a 96       	adiw	r30, 0x0a	; 10
 2d0:	01 90       	ld	r0, Z+
 2d2:	f0 81       	ld	r31, Z
 2d4:	e0 2d       	mov	r30, r0
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	9a 81       	ldd	r25, Y+2	; 0x02
 2da:	09 95       	icall
	  ServerDrv::getData(_sock, &b, 1);
	  return b;
}

void WiFiClient::flush() {
  while (available())
 2dc:	e9 81       	ldd	r30, Y+1	; 0x01
 2de:	fa 81       	ldd	r31, Y+2	; 0x02
 2e0:	80 81       	ld	r24, Z
 2e2:	91 81       	ldd	r25, Z+1	; 0x01
 2e4:	fc 01       	movw	r30, r24
 2e6:	38 96       	adiw	r30, 0x08	; 8
 2e8:	01 90       	ld	r0, Z+
 2ea:	f0 81       	ld	r31, Z
 2ec:	e0 2d       	mov	r30, r0
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	9a 81       	ldd	r25, Y+2	; 0x02
 2f2:	09 95       	icall
 2f4:	1b 82       	std	Y+3, r1	; 0x03
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	01 f0       	breq	.+0      	; 0x2fa <_ZN10WiFiClient5flushEv+0x48>
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	8b 83       	std	Y+3, r24	; 0x03
 2fe:	8b 81       	ldd	r24, Y+3	; 0x03
 300:	88 23       	and	r24, r24
 302:	01 f4       	brne	.+0      	; 0x304 <_ZN10WiFiClient5flushEv+0x52>
    read();
}
 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	cf 91       	pop	r28
 30c:	df 91       	pop	r29
 30e:	08 95       	ret

00000310 <_ZN10WiFiClientcvbEv>:
  } else {
    return ServerDrv::getClientState(_sock);
  }
}

WiFiClient::operator bool() {
 310:	df 93       	push	r29
 312:	cf 93       	push	r28
 314:	00 d0       	rcall	.+0      	; 0x316 <_ZN10WiFiClientcvbEv+0x6>
 316:	0f 92       	push	r0
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	9a 83       	std	Y+2, r25	; 0x02
 31e:	89 83       	std	Y+1, r24	; 0x01
  return _sock != 255;
 320:	e9 81       	ldd	r30, Y+1	; 0x01
 322:	fa 81       	ldd	r31, Y+2	; 0x02
 324:	84 85       	ldd	r24, Z+12	; 0x0c
 326:	1b 82       	std	Y+3, r1	; 0x03
 328:	8f 3f       	cpi	r24, 0xFF	; 255
 32a:	01 f0       	breq	.+0      	; 0x32c <_ZN10WiFiClientcvbEv+0x1c>
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	8b 83       	std	Y+3, r24	; 0x03
 330:	8b 81       	ldd	r24, Y+3	; 0x03
}
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	cf 91       	pop	r28
 33a:	df 91       	pop	r29
 33c:	08 95       	ret

0000033e <_ZN10WiFiClient14getFirstSocketEv>:

// Private Methods
uint8_t WiFiClient::getFirstSocket()
 33e:	df 93       	push	r29
 340:	cf 93       	push	r28
 342:	00 d0       	rcall	.+0      	; 0x344 <_ZN10WiFiClient14getFirstSocketEv+0x6>
 344:	00 d0       	rcall	.+0      	; 0x346 <_ZN10WiFiClient14getFirstSocketEv+0x8>
 346:	0f 92       	push	r0
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	9c 83       	std	Y+4, r25	; 0x04
 34e:	8b 83       	std	Y+3, r24	; 0x03
{
    for (int i = 0; i < MAX_SOCK_NUM; i++) {
 350:	1a 82       	std	Y+2, r1	; 0x02
 352:	19 82       	std	Y+1, r1	; 0x01
 354:	00 c0       	rjmp	.+0      	; 0x356 <_ZN10WiFiClient14getFirstSocketEv+0x18>
      if (WiFiClass::_state[i] == NA_STATE)
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	9a 81       	ldd	r25, Y+2	; 0x02
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	fc 01       	movw	r30, r24
 360:	e0 50       	subi	r30, 0x00	; 0
 362:	f0 40       	sbci	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	91 81       	ldd	r25, Z+1	; 0x01
 368:	2f ef       	ldi	r18, 0xFF	; 255
 36a:	8f 3f       	cpi	r24, 0xFF	; 255
 36c:	92 07       	cpc	r25, r18
 36e:	01 f4       	brne	.+0      	; 0x370 <_ZN10WiFiClient14getFirstSocketEv+0x32>
      {
          return i;
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	8d 83       	std	Y+5, r24	; 0x05
 374:	00 c0       	rjmp	.+0      	; 0x376 <_ZN10WiFiClient14getFirstSocketEv+0x38>
}

// Private Methods
uint8_t WiFiClient::getFirstSocket()
{
    for (int i = 0; i < MAX_SOCK_NUM; i++) {
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	9a 81       	ldd	r25, Y+2	; 0x02
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	9a 83       	std	Y+2, r25	; 0x02
 37e:	89 83       	std	Y+1, r24	; 0x01
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	9a 81       	ldd	r25, Y+2	; 0x02
 384:	84 30       	cpi	r24, 0x04	; 4
 386:	91 05       	cpc	r25, r1
 388:	04 f0       	brlt	.+0      	; 0x38a <_ZN10WiFiClient14getFirstSocketEv+0x4c>
      if (WiFiClass::_state[i] == NA_STATE)
      {
          return i;
      }
    }
    return SOCK_NOT_AVAIL;
 38a:	2f ef       	ldi	r18, 0xFF	; 255
 38c:	2d 83       	std	Y+5, r18	; 0x05
 38e:	8d 81       	ldd	r24, Y+5	; 0x05
}
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	cf 91       	pop	r28
 39c:	df 91       	pop	r29
 39e:	08 95       	ret

000003a0 <_ZN6StreamD2Ev>:
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
{
 3a0:	df 93       	push	r29
 3a2:	cf 93       	push	r28
 3a4:	00 d0       	rcall	.+0      	; 0x3a6 <_ZN6StreamD2Ev+0x6>
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	9a 83       	std	Y+2, r25	; 0x02
 3ac:	89 83       	std	Y+1, r24	; 0x01
 3ae:	e9 81       	ldd	r30, Y+1	; 0x01
 3b0:	fa 81       	ldd	r31, Y+2	; 0x02
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	91 83       	std	Z+1, r25	; 0x01
 3b8:	80 83       	st	Z, r24
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	9a 81       	ldd	r25, Y+2	; 0x02
 3be:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	88 23       	and	r24, r24
 3c8:	01 f0       	breq	.+0      	; 0x3ca <_ZN6StreamD2Ev+0x2a>
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	9a 81       	ldd	r25, Y+2	; 0x02
 3ce:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	cf 91       	pop	r28
 3d8:	df 91       	pop	r29
 3da:	08 95       	ret

000003dc <_ZN6ClientD2Ev>:
 3dc:	df 93       	push	r29
 3de:	cf 93       	push	r28
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <_ZN6ClientD2Ev+0x6>
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	9a 83       	std	Y+2, r25	; 0x02
 3e8:	89 83       	std	Y+1, r24	; 0x01
 3ea:	e9 81       	ldd	r30, Y+1	; 0x01
 3ec:	fa 81       	ldd	r31, Y+2	; 0x02
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	91 83       	std	Z+1, r25	; 0x01
 3f4:	80 83       	st	Z, r24
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	9a 81       	ldd	r25, Y+2	; 0x02
 3fa:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	88 23       	and	r24, r24
 404:	01 f0       	breq	.+0      	; 0x406 <_ZN6ClientD2Ev+0x2a>
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	9a 81       	ldd	r25, Y+2	; 0x02
 40a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 40e:	0f 90       	pop	r0
 410:	0f 90       	pop	r0
 412:	cf 91       	pop	r28
 414:	df 91       	pop	r29
 416:	08 95       	ret

00000418 <_ZN10WiFiClientD0Ev>:
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class WiFiClient : public Client {
 418:	df 93       	push	r29
 41a:	cf 93       	push	r28
 41c:	00 d0       	rcall	.+0      	; 0x41e <_ZN10WiFiClientD0Ev+0x6>
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
 422:	9a 83       	std	Y+2, r25	; 0x02
 424:	89 83       	std	Y+1, r24	; 0x01
 426:	e9 81       	ldd	r30, Y+1	; 0x01
 428:	fa 81       	ldd	r31, Y+2	; 0x02
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	91 83       	std	Z+1, r25	; 0x01
 430:	80 83       	st	Z, r24
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	9a 81       	ldd	r25, Y+2	; 0x02
 436:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	88 23       	and	r24, r24
 440:	01 f0       	breq	.+0      	; 0x442 <_ZN10WiFiClientD0Ev+0x2a>
 442:	89 81       	ldd	r24, Y+1	; 0x01
 444:	9a 81       	ldd	r25, Y+2	; 0x02
 446:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 44a:	0f 90       	pop	r0
 44c:	0f 90       	pop	r0
 44e:	cf 91       	pop	r28
 450:	df 91       	pop	r29
 452:	08 95       	ret

00000454 <_ZN10WiFiClientD1Ev>:
 454:	df 93       	push	r29
 456:	cf 93       	push	r28
 458:	00 d0       	rcall	.+0      	; 0x45a <_ZN10WiFiClientD1Ev+0x6>
 45a:	cd b7       	in	r28, 0x3d	; 61
 45c:	de b7       	in	r29, 0x3e	; 62
 45e:	9a 83       	std	Y+2, r25	; 0x02
 460:	89 83       	std	Y+1, r24	; 0x01
 462:	e9 81       	ldd	r30, Y+1	; 0x01
 464:	fa 81       	ldd	r31, Y+2	; 0x02
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	91 83       	std	Z+1, r25	; 0x01
 46c:	80 83       	st	Z, r24
 46e:	89 81       	ldd	r24, Y+1	; 0x01
 470:	9a 81       	ldd	r25, Y+2	; 0x02
 472:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	88 23       	and	r24, r24
 47c:	01 f0       	breq	.+0      	; 0x47e <_ZN10WiFiClientD1Ev+0x2a>
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	9a 81       	ldd	r25, Y+2	; 0x02
 482:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 486:	0f 90       	pop	r0
 488:	0f 90       	pop	r0
 48a:	cf 91       	pop	r28
 48c:	df 91       	pop	r29
 48e:	08 95       	ret

00000490 <_ZN6ClientD0Ev>:
 490:	df 93       	push	r29
 492:	cf 93       	push	r28
 494:	00 d0       	rcall	.+0      	; 0x496 <_ZN6ClientD0Ev+0x6>
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	9a 83       	std	Y+2, r25	; 0x02
 49c:	89 83       	std	Y+1, r24	; 0x01
 49e:	e9 81       	ldd	r30, Y+1	; 0x01
 4a0:	fa 81       	ldd	r31, Y+2	; 0x02
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	91 83       	std	Z+1, r25	; 0x01
 4a8:	80 83       	st	Z, r24
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
 4ac:	9a 81       	ldd	r25, Y+2	; 0x02
 4ae:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	88 23       	and	r24, r24
 4b8:	01 f0       	breq	.+0      	; 0x4ba <_ZN6ClientD0Ev+0x2a>
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	9a 81       	ldd	r25, Y+2	; 0x02
 4be:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	cf 91       	pop	r28
 4c8:	df 91       	pop	r29
 4ca:	08 95       	ret

000004cc <_ZN6ClientD1Ev>:
 4cc:	df 93       	push	r29
 4ce:	cf 93       	push	r28
 4d0:	00 d0       	rcall	.+0      	; 0x4d2 <_ZN6ClientD1Ev+0x6>
 4d2:	cd b7       	in	r28, 0x3d	; 61
 4d4:	de b7       	in	r29, 0x3e	; 62
 4d6:	9a 83       	std	Y+2, r25	; 0x02
 4d8:	89 83       	std	Y+1, r24	; 0x01
 4da:	e9 81       	ldd	r30, Y+1	; 0x01
 4dc:	fa 81       	ldd	r31, Y+2	; 0x02
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	91 83       	std	Z+1, r25	; 0x01
 4e4:	80 83       	st	Z, r24
 4e6:	89 81       	ldd	r24, Y+1	; 0x01
 4e8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ea:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	88 23       	and	r24, r24
 4f4:	01 f0       	breq	.+0      	; 0x4f6 <_ZN6ClientD1Ev+0x2a>
 4f6:	89 81       	ldd	r24, Y+1	; 0x01
 4f8:	9a 81       	ldd	r25, Y+2	; 0x02
 4fa:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	cf 91       	pop	r28
 504:	df 91       	pop	r29
 506:	08 95       	ret

00000508 <_ZN6StreamD0Ev>:
 508:	df 93       	push	r29
 50a:	cf 93       	push	r28
 50c:	00 d0       	rcall	.+0      	; 0x50e <_ZN6StreamD0Ev+0x6>
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
 512:	9a 83       	std	Y+2, r25	; 0x02
 514:	89 83       	std	Y+1, r24	; 0x01
 516:	e9 81       	ldd	r30, Y+1	; 0x01
 518:	fa 81       	ldd	r31, Y+2	; 0x02
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	91 83       	std	Z+1, r25	; 0x01
 520:	80 83       	st	Z, r24
 522:	89 81       	ldd	r24, Y+1	; 0x01
 524:	9a 81       	ldd	r25, Y+2	; 0x02
 526:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	88 23       	and	r24, r24
 530:	01 f0       	breq	.+0      	; 0x532 <_ZN6StreamD0Ev+0x2a>
 532:	89 81       	ldd	r24, Y+1	; 0x01
 534:	9a 81       	ldd	r25, Y+2	; 0x02
 536:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 53a:	0f 90       	pop	r0
 53c:	0f 90       	pop	r0
 53e:	cf 91       	pop	r28
 540:	df 91       	pop	r29
 542:	08 95       	ret

00000544 <_ZN6StreamD1Ev>:
 544:	df 93       	push	r29
 546:	cf 93       	push	r28
 548:	00 d0       	rcall	.+0      	; 0x54a <_ZN6StreamD1Ev+0x6>
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62
 54e:	9a 83       	std	Y+2, r25	; 0x02
 550:	89 83       	std	Y+1, r24	; 0x01
 552:	e9 81       	ldd	r30, Y+1	; 0x01
 554:	fa 81       	ldd	r31, Y+2	; 0x02
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	91 83       	std	Z+1, r25	; 0x01
 55c:	80 83       	st	Z, r24
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	9a 81       	ldd	r25, Y+2	; 0x02
 562:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	88 23       	and	r24, r24
 56c:	01 f0       	breq	.+0      	; 0x56e <_ZN6StreamD1Ev+0x2a>
 56e:	89 81       	ldd	r24, Y+1	; 0x01
 570:	9a 81       	ldd	r25, Y+2	; 0x02
 572:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	cf 91       	pop	r28
 57c:	df 91       	pop	r29
 57e:	08 95       	ret

00000580 <_Z41__static_initialization_and_destruction_0ii>:
 580:	0f 93       	push	r16
 582:	df 93       	push	r29
 584:	cf 93       	push	r28
 586:	00 d0       	rcall	.+0      	; 0x588 <_Z41__static_initialization_and_destruction_0ii+0x8>
 588:	00 d0       	rcall	.+0      	; 0x58a <_Z41__static_initialization_and_destruction_0ii+0xa>
 58a:	cd b7       	in	r28, 0x3d	; 61
 58c:	de b7       	in	r29, 0x3e	; 62
 58e:	9a 83       	std	Y+2, r25	; 0x02
 590:	89 83       	std	Y+1, r24	; 0x01
 592:	7c 83       	std	Y+4, r23	; 0x04
 594:	6b 83       	std	Y+3, r22	; 0x03
 596:	89 81       	ldd	r24, Y+1	; 0x01
 598:	9a 81       	ldd	r25, Y+2	; 0x02
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	91 05       	cpc	r25, r1
 59e:	01 f4       	brne	.+0      	; 0x5a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 5a0:	8b 81       	ldd	r24, Y+3	; 0x03
 5a2:	9c 81       	ldd	r25, Y+4	; 0x04
 5a4:	2f ef       	ldi	r18, 0xFF	; 255
 5a6:	8f 3f       	cpi	r24, 0xFF	; 255
 5a8:	92 07       	cpc	r25, r18
 5aa:	01 f4       	brne	.+0      	; 0x5ac <_Z41__static_initialization_and_destruction_0ii+0x2c>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	40 e0       	ldi	r20, 0x00	; 0
 5b4:	20 e0       	ldi	r18, 0x00	; 0
 5b6:	00 e0       	ldi	r16, 0x00	; 0
 5b8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 5bc:	89 81       	ldd	r24, Y+1	; 0x01
 5be:	9a 81       	ldd	r25, Y+2	; 0x02
 5c0:	00 97       	sbiw	r24, 0x00	; 0
 5c2:	01 f4       	brne	.+0      	; 0x5c4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 5c4:	8b 81       	ldd	r24, Y+3	; 0x03
 5c6:	9c 81       	ldd	r25, Y+4	; 0x04
 5c8:	2f ef       	ldi	r18, 0xFF	; 255
 5ca:	8f 3f       	cpi	r24, 0xFF	; 255
 5cc:	92 07       	cpc	r25, r18
 5ce:	01 f4       	brne	.+0      	; 0x5d0 <_Z41__static_initialization_and_destruction_0ii+0x50>
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	cf 91       	pop	r28
 5e2:	df 91       	pop	r29
 5e4:	0f 91       	pop	r16
 5e6:	08 95       	ret

000005e8 <_GLOBAL__D__ZN10WiFiClient8_srcportE>:
 5e8:	df 93       	push	r29
 5ea:	cf 93       	push	r28
 5ec:	cd b7       	in	r28, 0x3d	; 61
 5ee:	de b7       	in	r29, 0x3e	; 62
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	6f ef       	ldi	r22, 0xFF	; 255
 5f6:	7f ef       	ldi	r23, 0xFF	; 255
 5f8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 5fc:	cf 91       	pop	r28
 5fe:	df 91       	pop	r29
 600:	08 95       	ret

00000602 <_GLOBAL__I__ZN10WiFiClient8_srcportE>:
 602:	df 93       	push	r29
 604:	cf 93       	push	r28
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	6f ef       	ldi	r22, 0xFF	; 255
 610:	7f ef       	ldi	r23, 0xFF	; 255
 612:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 616:	cf 91       	pop	r28
 618:	df 91       	pop	r29
 61a:	08 95       	ret

0000061c <_ZN10WiFiClient6statusEv>:
    		s == SYN_SENT || s== SYN_RCVD ||
    		(s == CLOSE_WAIT));
  }
}

uint8_t WiFiClient::status() {
 61c:	df 93       	push	r29
 61e:	cf 93       	push	r28
 620:	00 d0       	rcall	.+0      	; 0x622 <_ZN10WiFiClient6statusEv+0x6>
 622:	0f 92       	push	r0
 624:	cd b7       	in	r28, 0x3d	; 61
 626:	de b7       	in	r29, 0x3e	; 62
 628:	9a 83       	std	Y+2, r25	; 0x02
 62a:	89 83       	std	Y+1, r24	; 0x01
    if (_sock == 255) {
 62c:	e9 81       	ldd	r30, Y+1	; 0x01
 62e:	fa 81       	ldd	r31, Y+2	; 0x02
 630:	84 85       	ldd	r24, Z+12	; 0x0c
 632:	8f 3f       	cpi	r24, 0xFF	; 255
 634:	01 f4       	brne	.+0      	; 0x636 <_ZN10WiFiClient6statusEv+0x1a>
    return CLOSED;
 636:	1b 82       	std	Y+3, r1	; 0x03
 638:	00 c0       	rjmp	.+0      	; 0x63a <_ZN10WiFiClient6statusEv+0x1e>
  } else {
    return ServerDrv::getClientState(_sock);
 63a:	e9 81       	ldd	r30, Y+1	; 0x01
 63c:	fa 81       	ldd	r31, Y+2	; 0x02
 63e:	84 85       	ldd	r24, Z+12	; 0x0c
 640:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 644:	8b 83       	std	Y+3, r24	; 0x03
 646:	8b 81       	ldd	r24, Y+3	; 0x03
  }
}
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	cf 91       	pop	r28
 650:	df 91       	pop	r29
 652:	08 95       	ret

00000654 <_ZN10WiFiClient9connectedEv>:
    delay(100);

  _sock = 255;
}

uint8_t WiFiClient::connected() {
 654:	df 93       	push	r29
 656:	cf 93       	push	r28
 658:	00 d0       	rcall	.+0      	; 0x65a <_ZN10WiFiClient9connectedEv+0x6>
 65a:	00 d0       	rcall	.+0      	; 0x65c <_ZN10WiFiClient9connectedEv+0x8>
 65c:	0f 92       	push	r0
 65e:	cd b7       	in	r28, 0x3d	; 61
 660:	de b7       	in	r29, 0x3e	; 62
 662:	9b 83       	std	Y+3, r25	; 0x03
 664:	8a 83       	std	Y+2, r24	; 0x02

  if (_sock == 255) {
 666:	ea 81       	ldd	r30, Y+2	; 0x02
 668:	fb 81       	ldd	r31, Y+3	; 0x03
 66a:	84 85       	ldd	r24, Z+12	; 0x0c
 66c:	8f 3f       	cpi	r24, 0xFF	; 255
 66e:	01 f4       	brne	.+0      	; 0x670 <_ZN10WiFiClient9connectedEv+0x1c>
    return 0;
 670:	1d 82       	std	Y+5, r1	; 0x05
 672:	00 c0       	rjmp	.+0      	; 0x674 <_ZN10WiFiClient9connectedEv+0x20>
  } else {
    uint8_t s = status();
 674:	8a 81       	ldd	r24, Y+2	; 0x02
 676:	9b 81       	ldd	r25, Y+3	; 0x03
 678:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 67c:	89 83       	std	Y+1, r24	; 0x01

    return !(s == LISTEN || s == CLOSED || s == FIN_WAIT_1 ||
    		s == FIN_WAIT_2 || s == TIME_WAIT ||
    		s == SYN_SENT || s== SYN_RCVD ||
    		(s == CLOSE_WAIT));
 67e:	89 81       	ldd	r24, Y+1	; 0x01
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	01 f0       	breq	.+0      	; 0x684 <_ZN10WiFiClient9connectedEv+0x30>
 684:	89 81       	ldd	r24, Y+1	; 0x01
 686:	88 23       	and	r24, r24
 688:	01 f0       	breq	.+0      	; 0x68a <_ZN10WiFiClient9connectedEv+0x36>
 68a:	89 81       	ldd	r24, Y+1	; 0x01
 68c:	85 30       	cpi	r24, 0x05	; 5
 68e:	01 f0       	breq	.+0      	; 0x690 <_ZN10WiFiClient9connectedEv+0x3c>
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	86 30       	cpi	r24, 0x06	; 6
 694:	01 f0       	breq	.+0      	; 0x696 <_ZN10WiFiClient9connectedEv+0x42>
 696:	89 81       	ldd	r24, Y+1	; 0x01
 698:	8a 30       	cpi	r24, 0x0A	; 10
 69a:	01 f0       	breq	.+0      	; 0x69c <_ZN10WiFiClient9connectedEv+0x48>
 69c:	89 81       	ldd	r24, Y+1	; 0x01
 69e:	82 30       	cpi	r24, 0x02	; 2
 6a0:	01 f0       	breq	.+0      	; 0x6a2 <_ZN10WiFiClient9connectedEv+0x4e>
 6a2:	89 81       	ldd	r24, Y+1	; 0x01
 6a4:	83 30       	cpi	r24, 0x03	; 3
 6a6:	01 f0       	breq	.+0      	; 0x6a8 <_ZN10WiFiClient9connectedEv+0x54>
 6a8:	89 81       	ldd	r24, Y+1	; 0x01
 6aa:	87 30       	cpi	r24, 0x07	; 7
 6ac:	01 f0       	breq	.+0      	; 0x6ae <_ZN10WiFiClient9connectedEv+0x5a>
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	8c 83       	std	Y+4, r24	; 0x04
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <_ZN10WiFiClient9connectedEv+0x60>
 6b4:	1c 82       	std	Y+4, r1	; 0x04
 6b6:	8c 81       	ldd	r24, Y+4	; 0x04
 6b8:	8d 83       	std	Y+5, r24	; 0x05
 6ba:	8d 81       	ldd	r24, Y+5	; 0x05
  }
}
 6bc:	0f 90       	pop	r0
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	0f 90       	pop	r0
 6c4:	0f 90       	pop	r0
 6c6:	cf 91       	pop	r28
 6c8:	df 91       	pop	r29
 6ca:	08 95       	ret

000006cc <_ZN10WiFiClient4stopEv>:
void WiFiClient::flush() {
  while (available())
    read();
}

void WiFiClient::stop() {
 6cc:	df 93       	push	r29
 6ce:	cf 93       	push	r28
 6d0:	00 d0       	rcall	.+0      	; 0x6d2 <_ZN10WiFiClient4stopEv+0x6>
 6d2:	00 d0       	rcall	.+0      	; 0x6d4 <_ZN10WiFiClient4stopEv+0x8>
 6d4:	0f 92       	push	r0
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
 6da:	9c 83       	std	Y+4, r25	; 0x04
 6dc:	8b 83       	std	Y+3, r24	; 0x03

  if (_sock == 255)
 6de:	eb 81       	ldd	r30, Y+3	; 0x03
 6e0:	fc 81       	ldd	r31, Y+4	; 0x04
 6e2:	84 85       	ldd	r24, Z+12	; 0x0c
 6e4:	8f 3f       	cpi	r24, 0xFF	; 255
 6e6:	01 f0       	breq	.+0      	; 0x6e8 <_ZN10WiFiClient4stopEv+0x1c>
    return;

  ServerDrv::stopClient(_sock);
 6e8:	eb 81       	ldd	r30, Y+3	; 0x03
 6ea:	fc 81       	ldd	r31, Y+4	; 0x04
 6ec:	84 85       	ldd	r24, Z+12	; 0x0c
 6ee:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
  WiFiClass::_state[_sock] = NA_STATE;
 6f2:	eb 81       	ldd	r30, Y+3	; 0x03
 6f4:	fc 81       	ldd	r31, Y+4	; 0x04
 6f6:	84 85       	ldd	r24, Z+12	; 0x0c
 6f8:	88 2f       	mov	r24, r24
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	fc 01       	movw	r30, r24
 702:	e0 50       	subi	r30, 0x00	; 0
 704:	f0 40       	sbci	r31, 0x00	; 0
 706:	8f ef       	ldi	r24, 0xFF	; 255
 708:	9f ef       	ldi	r25, 0xFF	; 255
 70a:	91 83       	std	Z+1, r25	; 0x01
 70c:	80 83       	st	Z, r24

  int count = 0;
 70e:	1a 82       	std	Y+2, r1	; 0x02
 710:	19 82       	std	Y+1, r1	; 0x01
 712:	00 c0       	rjmp	.+0      	; 0x714 <_ZN10WiFiClient4stopEv+0x48>
  // wait maximum 5 secs for the connection to close
  while (status() != CLOSED && ++count < 50)
    delay(100);
 714:	64 e6       	ldi	r22, 0x64	; 100
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
  ServerDrv::stopClient(_sock);
  WiFiClass::_state[_sock] = NA_STATE;

  int count = 0;
  // wait maximum 5 secs for the connection to close
  while (status() != CLOSED && ++count < 50)
 720:	8b 81       	ldd	r24, Y+3	; 0x03
 722:	9c 81       	ldd	r25, Y+4	; 0x04
 724:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 728:	88 23       	and	r24, r24
 72a:	01 f0       	breq	.+0      	; 0x72c <_ZN10WiFiClient4stopEv+0x60>
 72c:	89 81       	ldd	r24, Y+1	; 0x01
 72e:	9a 81       	ldd	r25, Y+2	; 0x02
 730:	01 96       	adiw	r24, 0x01	; 1
 732:	9a 83       	std	Y+2, r25	; 0x02
 734:	89 83       	std	Y+1, r24	; 0x01
 736:	89 81       	ldd	r24, Y+1	; 0x01
 738:	9a 81       	ldd	r25, Y+2	; 0x02
 73a:	82 33       	cpi	r24, 0x32	; 50
 73c:	91 05       	cpc	r25, r1
 73e:	04 f4       	brge	.+0      	; 0x740 <_ZN10WiFiClient4stopEv+0x74>
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	8d 83       	std	Y+5, r24	; 0x05
 744:	00 c0       	rjmp	.+0      	; 0x746 <_ZN10WiFiClient4stopEv+0x7a>
 746:	1d 82       	std	Y+5, r1	; 0x05
 748:	8d 81       	ldd	r24, Y+5	; 0x05
 74a:	88 23       	and	r24, r24
 74c:	01 f4       	brne	.+0      	; 0x74e <_ZN10WiFiClient4stopEv+0x82>
    delay(100);

  _sock = 255;
 74e:	eb 81       	ldd	r30, Y+3	; 0x03
 750:	fc 81       	ldd	r31, Y+4	; 0x04
 752:	8f ef       	ldi	r24, 0xFF	; 255
 754:	84 87       	std	Z+12, r24	; 0x0c
}
 756:	0f 90       	pop	r0
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	cf 91       	pop	r28
 762:	df 91       	pop	r29
 764:	08 95       	ret

00000766 <_ZN10WiFiClient4peekEv>:
  if (!ServerDrv::getDataBuf(_sock, buf, &size))
      return -1;
  return 0;
}

int WiFiClient::peek() {
 766:	df 93       	push	r29
 768:	cf 93       	push	r28
 76a:	00 d0       	rcall	.+0      	; 0x76c <_ZN10WiFiClient4peekEv+0x6>
 76c:	00 d0       	rcall	.+0      	; 0x76e <_ZN10WiFiClient4peekEv+0x8>
 76e:	00 d0       	rcall	.+0      	; 0x770 <_ZN10WiFiClient4peekEv+0xa>
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
 774:	9b 83       	std	Y+3, r25	; 0x03
 776:	8a 83       	std	Y+2, r24	; 0x02
	  uint8_t b;
	  if (!available())
 778:	ea 81       	ldd	r30, Y+2	; 0x02
 77a:	fb 81       	ldd	r31, Y+3	; 0x03
 77c:	80 81       	ld	r24, Z
 77e:	91 81       	ldd	r25, Z+1	; 0x01
 780:	fc 01       	movw	r30, r24
 782:	38 96       	adiw	r30, 0x08	; 8
 784:	01 90       	ld	r0, Z+
 786:	f0 81       	ld	r31, Z
 788:	e0 2d       	mov	r30, r0
 78a:	8a 81       	ldd	r24, Y+2	; 0x02
 78c:	9b 81       	ldd	r25, Y+3	; 0x03
 78e:	09 95       	icall
 790:	1e 82       	std	Y+6, r1	; 0x06
 792:	00 97       	sbiw	r24, 0x00	; 0
 794:	01 f4       	brne	.+0      	; 0x796 <_ZN10WiFiClient4peekEv+0x30>
 796:	21 e0       	ldi	r18, 0x01	; 1
 798:	2e 83       	std	Y+6, r18	; 0x06
 79a:	3e 81       	ldd	r19, Y+6	; 0x06
 79c:	33 23       	and	r19, r19
 79e:	01 f0       	breq	.+0      	; 0x7a0 <_ZN10WiFiClient4peekEv+0x3a>
	    return -1;
 7a0:	8f ef       	ldi	r24, 0xFF	; 255
 7a2:	9f ef       	ldi	r25, 0xFF	; 255
 7a4:	9d 83       	std	Y+5, r25	; 0x05
 7a6:	8c 83       	std	Y+4, r24	; 0x04
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <_ZN10WiFiClient4peekEv+0x44>

	  ServerDrv::getData(_sock, &b, 1);
 7aa:	ea 81       	ldd	r30, Y+2	; 0x02
 7ac:	fb 81       	ldd	r31, Y+3	; 0x03
 7ae:	84 85       	ldd	r24, Z+12	; 0x0c
 7b0:	9e 01       	movw	r18, r28
 7b2:	2f 5f       	subi	r18, 0xFF	; 255
 7b4:	3f 4f       	sbci	r19, 0xFF	; 255
 7b6:	b9 01       	movw	r22, r18
 7b8:	41 e0       	ldi	r20, 0x01	; 1
 7ba:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	  return b;
 7be:	89 81       	ldd	r24, Y+1	; 0x01
 7c0:	28 2f       	mov	r18, r24
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	3d 83       	std	Y+5, r19	; 0x05
 7c6:	2c 83       	std	Y+4, r18	; 0x04
 7c8:	8c 81       	ldd	r24, Y+4	; 0x04
 7ca:	9d 81       	ldd	r25, Y+5	; 0x05
}
 7cc:	26 96       	adiw	r28, 0x06	; 6
 7ce:	0f b6       	in	r0, 0x3f	; 63
 7d0:	f8 94       	cli
 7d2:	de bf       	out	0x3e, r29	; 62
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	cd bf       	out	0x3d, r28	; 61
 7d8:	cf 91       	pop	r28
 7da:	df 91       	pop	r29
 7dc:	08 95       	ret

000007de <_ZN10WiFiClient4readEv>:
  }
   
  return 0;
}

int WiFiClient::read() {
 7de:	df 93       	push	r29
 7e0:	cf 93       	push	r28
 7e2:	00 d0       	rcall	.+0      	; 0x7e4 <_ZN10WiFiClient4readEv+0x6>
 7e4:	00 d0       	rcall	.+0      	; 0x7e6 <_ZN10WiFiClient4readEv+0x8>
 7e6:	00 d0       	rcall	.+0      	; 0x7e8 <_ZN10WiFiClient4readEv+0xa>
 7e8:	cd b7       	in	r28, 0x3d	; 61
 7ea:	de b7       	in	r29, 0x3e	; 62
 7ec:	9b 83       	std	Y+3, r25	; 0x03
 7ee:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t b;
  if (!available())
 7f0:	ea 81       	ldd	r30, Y+2	; 0x02
 7f2:	fb 81       	ldd	r31, Y+3	; 0x03
 7f4:	80 81       	ld	r24, Z
 7f6:	91 81       	ldd	r25, Z+1	; 0x01
 7f8:	fc 01       	movw	r30, r24
 7fa:	38 96       	adiw	r30, 0x08	; 8
 7fc:	01 90       	ld	r0, Z+
 7fe:	f0 81       	ld	r31, Z
 800:	e0 2d       	mov	r30, r0
 802:	8a 81       	ldd	r24, Y+2	; 0x02
 804:	9b 81       	ldd	r25, Y+3	; 0x03
 806:	09 95       	icall
 808:	1e 82       	std	Y+6, r1	; 0x06
 80a:	00 97       	sbiw	r24, 0x00	; 0
 80c:	01 f4       	brne	.+0      	; 0x80e <_ZN10WiFiClient4readEv+0x30>
 80e:	21 e0       	ldi	r18, 0x01	; 1
 810:	2e 83       	std	Y+6, r18	; 0x06
 812:	3e 81       	ldd	r19, Y+6	; 0x06
 814:	33 23       	and	r19, r19
 816:	01 f0       	breq	.+0      	; 0x818 <_ZN10WiFiClient4readEv+0x3a>
    return -1;
 818:	8f ef       	ldi	r24, 0xFF	; 255
 81a:	9f ef       	ldi	r25, 0xFF	; 255
 81c:	9d 83       	std	Y+5, r25	; 0x05
 81e:	8c 83       	std	Y+4, r24	; 0x04
 820:	00 c0       	rjmp	.+0      	; 0x822 <_ZN10WiFiClient4readEv+0x44>

  ServerDrv::getData(_sock, &b);
 822:	ea 81       	ldd	r30, Y+2	; 0x02
 824:	fb 81       	ldd	r31, Y+3	; 0x03
 826:	84 85       	ldd	r24, Z+12	; 0x0c
 828:	9e 01       	movw	r18, r28
 82a:	2f 5f       	subi	r18, 0xFF	; 255
 82c:	3f 4f       	sbci	r19, 0xFF	; 255
 82e:	b9 01       	movw	r22, r18
 830:	40 e0       	ldi	r20, 0x00	; 0
 832:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
  return b;
 836:	89 81       	ldd	r24, Y+1	; 0x01
 838:	28 2f       	mov	r18, r24
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	3d 83       	std	Y+5, r19	; 0x05
 83e:	2c 83       	std	Y+4, r18	; 0x04
 840:	8c 81       	ldd	r24, Y+4	; 0x04
 842:	9d 81       	ldd	r25, Y+5	; 0x05
}
 844:	26 96       	adiw	r28, 0x06	; 6
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	f8 94       	cli
 84a:	de bf       	out	0x3e, r29	; 62
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	cd bf       	out	0x3d, r28	; 61
 850:	cf 91       	pop	r28
 852:	df 91       	pop	r29
 854:	08 95       	ret

00000856 <_ZN10WiFiClient4readEPhj>:


int WiFiClient::read(uint8_t* buf, size_t size) {
 856:	df 93       	push	r29
 858:	cf 93       	push	r28
 85a:	cd b7       	in	r28, 0x3d	; 61
 85c:	de b7       	in	r29, 0x3e	; 62
 85e:	28 97       	sbiw	r28, 0x08	; 8
 860:	0f b6       	in	r0, 0x3f	; 63
 862:	f8 94       	cli
 864:	de bf       	out	0x3e, r29	; 62
 866:	0f be       	out	0x3f, r0	; 63
 868:	cd bf       	out	0x3d, r28	; 61
 86a:	9a 83       	std	Y+2, r25	; 0x02
 86c:	89 83       	std	Y+1, r24	; 0x01
 86e:	7c 83       	std	Y+4, r23	; 0x04
 870:	6b 83       	std	Y+3, r22	; 0x03
 872:	5e 83       	std	Y+6, r21	; 0x06
 874:	4d 83       	std	Y+5, r20	; 0x05
  if (!ServerDrv::getDataBuf(_sock, buf, &size))
 876:	e9 81       	ldd	r30, Y+1	; 0x01
 878:	fa 81       	ldd	r31, Y+2	; 0x02
 87a:	84 85       	ldd	r24, Z+12	; 0x0c
 87c:	2b 81       	ldd	r18, Y+3	; 0x03
 87e:	3c 81       	ldd	r19, Y+4	; 0x04
 880:	ae 01       	movw	r20, r28
 882:	4b 5f       	subi	r20, 0xFB	; 251
 884:	5f 4f       	sbci	r21, 0xFF	; 255
 886:	b9 01       	movw	r22, r18
 888:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 88c:	98 2f       	mov	r25, r24
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	89 27       	eor	r24, r25
 892:	88 23       	and	r24, r24
 894:	01 f0       	breq	.+0      	; 0x896 <_ZN10WiFiClient4readEPhj+0x40>
      return -1;
 896:	8f ef       	ldi	r24, 0xFF	; 255
 898:	9f ef       	ldi	r25, 0xFF	; 255
 89a:	98 87       	std	Y+8, r25	; 0x08
 89c:	8f 83       	std	Y+7, r24	; 0x07
 89e:	00 c0       	rjmp	.+0      	; 0x8a0 <_ZN10WiFiClient4readEPhj+0x4a>
  return 0;
 8a0:	18 86       	std	Y+8, r1	; 0x08
 8a2:	1f 82       	std	Y+7, r1	; 0x07
 8a4:	8f 81       	ldd	r24, Y+7	; 0x07
 8a6:	98 85       	ldd	r25, Y+8	; 0x08
}
 8a8:	28 96       	adiw	r28, 0x08	; 8
 8aa:	0f b6       	in	r0, 0x3f	; 63
 8ac:	f8 94       	cli
 8ae:	de bf       	out	0x3e, r29	; 62
 8b0:	0f be       	out	0x3f, r0	; 63
 8b2:	cd bf       	out	0x3d, r28	; 61
 8b4:	cf 91       	pop	r28
 8b6:	df 91       	pop	r29
 8b8:	08 95       	ret

000008ba <_ZN10WiFiClient9availableEv>:
  }

  return size;
}

int WiFiClient::available() {
 8ba:	df 93       	push	r29
 8bc:	cf 93       	push	r28
 8be:	00 d0       	rcall	.+0      	; 0x8c0 <_ZN10WiFiClient9availableEv+0x6>
 8c0:	00 d0       	rcall	.+0      	; 0x8c2 <_ZN10WiFiClient9availableEv+0x8>
 8c2:	cd b7       	in	r28, 0x3d	; 61
 8c4:	de b7       	in	r29, 0x3e	; 62
 8c6:	9a 83       	std	Y+2, r25	; 0x02
 8c8:	89 83       	std	Y+1, r24	; 0x01
  if (_sock != 255)
 8ca:	e9 81       	ldd	r30, Y+1	; 0x01
 8cc:	fa 81       	ldd	r31, Y+2	; 0x02
 8ce:	84 85       	ldd	r24, Z+12	; 0x0c
 8d0:	8f 3f       	cpi	r24, 0xFF	; 255
 8d2:	01 f0       	breq	.+0      	; 0x8d4 <_ZN10WiFiClient9availableEv+0x1a>
  {
      return ServerDrv::availData(_sock);
 8d4:	e9 81       	ldd	r30, Y+1	; 0x01
 8d6:	fa 81       	ldd	r31, Y+2	; 0x02
 8d8:	84 85       	ldd	r24, Z+12	; 0x0c
 8da:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 8de:	9c 83       	std	Y+4, r25	; 0x04
 8e0:	8b 83       	std	Y+3, r24	; 0x03
 8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <_ZN10WiFiClient9availableEv+0x2a>
  }
   
  return 0;
 8e4:	1c 82       	std	Y+4, r1	; 0x04
 8e6:	1b 82       	std	Y+3, r1	; 0x03
 8e8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ea:	9c 81       	ldd	r25, Y+4	; 0x04
}
 8ec:	0f 90       	pop	r0
 8ee:	0f 90       	pop	r0
 8f0:	0f 90       	pop	r0
 8f2:	0f 90       	pop	r0
 8f4:	cf 91       	pop	r28
 8f6:	df 91       	pop	r29
 8f8:	08 95       	ret

000008fa <_ZN10WiFiClient5writeEPKhj>:

size_t WiFiClient::write(uint8_t b) {
	  return write(&b, 1);
}

size_t WiFiClient::write(const uint8_t *buf, size_t size) {
 8fa:	df 93       	push	r29
 8fc:	cf 93       	push	r28
 8fe:	cd b7       	in	r28, 0x3d	; 61
 900:	de b7       	in	r29, 0x3e	; 62
 902:	29 97       	sbiw	r28, 0x09	; 9
 904:	0f b6       	in	r0, 0x3f	; 63
 906:	f8 94       	cli
 908:	de bf       	out	0x3e, r29	; 62
 90a:	0f be       	out	0x3f, r0	; 63
 90c:	cd bf       	out	0x3d, r28	; 61
 90e:	9a 83       	std	Y+2, r25	; 0x02
 910:	89 83       	std	Y+1, r24	; 0x01
 912:	7c 83       	std	Y+4, r23	; 0x04
 914:	6b 83       	std	Y+3, r22	; 0x03
 916:	5e 83       	std	Y+6, r21	; 0x06
 918:	4d 83       	std	Y+5, r20	; 0x05
  if (_sock >= MAX_SOCK_NUM)
 91a:	e9 81       	ldd	r30, Y+1	; 0x01
 91c:	fa 81       	ldd	r31, Y+2	; 0x02
 91e:	84 85       	ldd	r24, Z+12	; 0x0c
 920:	84 30       	cpi	r24, 0x04	; 4
 922:	00 f0       	brcs	.+0      	; 0x924 <_ZN10WiFiClient5writeEPKhj+0x2a>
  {
	  setWriteError();
 924:	89 81       	ldd	r24, Y+1	; 0x01
 926:	9a 81       	ldd	r25, Y+2	; 0x02
 928:	61 e0       	ldi	r22, 0x01	; 1
 92a:	70 e0       	ldi	r23, 0x00	; 0
 92c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	  return 0;
 930:	19 86       	std	Y+9, r1	; 0x09
 932:	18 86       	std	Y+8, r1	; 0x08
 934:	00 c0       	rjmp	.+0      	; 0x936 <_ZN10WiFiClient5writeEPKhj+0x3c>
  }
  if (size==0)
 936:	8d 81       	ldd	r24, Y+5	; 0x05
 938:	9e 81       	ldd	r25, Y+6	; 0x06
 93a:	00 97       	sbiw	r24, 0x00	; 0
 93c:	01 f4       	brne	.+0      	; 0x93e <_ZN10WiFiClient5writeEPKhj+0x44>
  {
	  setWriteError();
 93e:	89 81       	ldd	r24, Y+1	; 0x01
 940:	9a 81       	ldd	r25, Y+2	; 0x02
 942:	61 e0       	ldi	r22, 0x01	; 1
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
      return 0;
 94a:	19 86       	std	Y+9, r1	; 0x09
 94c:	18 86       	std	Y+8, r1	; 0x08
 94e:	00 c0       	rjmp	.+0      	; 0x950 <_ZN10WiFiClient5writeEPKhj+0x56>
  }


  if (!ServerDrv::sendData(_sock, buf, size))
 950:	e9 81       	ldd	r30, Y+1	; 0x01
 952:	fa 81       	ldd	r31, Y+2	; 0x02
 954:	84 85       	ldd	r24, Z+12	; 0x0c
 956:	2b 81       	ldd	r18, Y+3	; 0x03
 958:	3c 81       	ldd	r19, Y+4	; 0x04
 95a:	4d 81       	ldd	r20, Y+5	; 0x05
 95c:	5e 81       	ldd	r21, Y+6	; 0x06
 95e:	b9 01       	movw	r22, r18
 960:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 964:	98 2f       	mov	r25, r24
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	89 27       	eor	r24, r25
 96a:	88 23       	and	r24, r24
 96c:	01 f0       	breq	.+0      	; 0x96e <_ZN10WiFiClient5writeEPKhj+0x74>
  {
	  setWriteError();
 96e:	89 81       	ldd	r24, Y+1	; 0x01
 970:	9a 81       	ldd	r25, Y+2	; 0x02
 972:	61 e0       	ldi	r22, 0x01	; 1
 974:	70 e0       	ldi	r23, 0x00	; 0
 976:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
      return 0;
 97a:	19 86       	std	Y+9, r1	; 0x09
 97c:	18 86       	std	Y+8, r1	; 0x08
 97e:	00 c0       	rjmp	.+0      	; 0x980 <_ZN10WiFiClient5writeEPKhj+0x86>
  }
  if (!ServerDrv::checkDataSent(_sock))
 980:	e9 81       	ldd	r30, Y+1	; 0x01
 982:	fa 81       	ldd	r31, Y+2	; 0x02
 984:	84 85       	ldd	r24, Z+12	; 0x0c
 986:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 98a:	1f 82       	std	Y+7, r1	; 0x07
 98c:	88 23       	and	r24, r24
 98e:	01 f4       	brne	.+0      	; 0x990 <_ZN10WiFiClient5writeEPKhj+0x96>
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	8f 83       	std	Y+7, r24	; 0x07
 994:	9f 81       	ldd	r25, Y+7	; 0x07
 996:	99 23       	and	r25, r25
 998:	01 f0       	breq	.+0      	; 0x99a <_ZN10WiFiClient5writeEPKhj+0xa0>
  {
	  setWriteError();
 99a:	89 81       	ldd	r24, Y+1	; 0x01
 99c:	9a 81       	ldd	r25, Y+2	; 0x02
 99e:	61 e0       	ldi	r22, 0x01	; 1
 9a0:	70 e0       	ldi	r23, 0x00	; 0
 9a2:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
      return 0;
 9a6:	19 86       	std	Y+9, r1	; 0x09
 9a8:	18 86       	std	Y+8, r1	; 0x08
 9aa:	00 c0       	rjmp	.+0      	; 0x9ac <_ZN10WiFiClient5writeEPKhj+0xb2>
  }

  return size;
 9ac:	8d 81       	ldd	r24, Y+5	; 0x05
 9ae:	9e 81       	ldd	r25, Y+6	; 0x06
 9b0:	99 87       	std	Y+9, r25	; 0x09
 9b2:	88 87       	std	Y+8, r24	; 0x08
 9b4:	88 85       	ldd	r24, Y+8	; 0x08
 9b6:	99 85       	ldd	r25, Y+9	; 0x09
}
 9b8:	29 96       	adiw	r28, 0x09	; 9
 9ba:	0f b6       	in	r0, 0x3f	; 63
 9bc:	f8 94       	cli
 9be:	de bf       	out	0x3e, r29	; 62
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	cd bf       	out	0x3d, r28	; 61
 9c4:	cf 91       	pop	r28
 9c6:	df 91       	pop	r29
 9c8:	08 95       	ret

000009ca <_ZN10WiFiClient7connectE9IPAddressj>:
		return connect(remote_addr, port);
	}
	return 0;
}

int WiFiClient::connect(IPAddress ip, uint16_t port) {
 9ca:	0f 93       	push	r16
 9cc:	df 93       	push	r29
 9ce:	cf 93       	push	r28
 9d0:	cd b7       	in	r28, 0x3d	; 61
 9d2:	de b7       	in	r29, 0x3e	; 62
 9d4:	2e 97       	sbiw	r28, 0x0e	; 14
 9d6:	0f b6       	in	r0, 0x3f	; 63
 9d8:	f8 94       	cli
 9da:	de bf       	out	0x3e, r29	; 62
 9dc:	0f be       	out	0x3f, r0	; 63
 9de:	cd bf       	out	0x3d, r28	; 61
 9e0:	9e 83       	std	Y+6, r25	; 0x06
 9e2:	8d 83       	std	Y+5, r24	; 0x05
 9e4:	78 87       	std	Y+8, r23	; 0x08
 9e6:	6f 83       	std	Y+7, r22	; 0x07
 9e8:	5a 87       	std	Y+10, r21	; 0x0a
 9ea:	49 87       	std	Y+9, r20	; 0x09
    _sock = getFirstSocket();
 9ec:	8d 81       	ldd	r24, Y+5	; 0x05
 9ee:	9e 81       	ldd	r25, Y+6	; 0x06
 9f0:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 9f4:	ed 81       	ldd	r30, Y+5	; 0x05
 9f6:	fe 81       	ldd	r31, Y+6	; 0x06
 9f8:	84 87       	std	Z+12, r24	; 0x0c
    if (_sock != NO_SOCKET_AVAIL)
 9fa:	ed 81       	ldd	r30, Y+5	; 0x05
 9fc:	fe 81       	ldd	r31, Y+6	; 0x06
 9fe:	84 85       	ldd	r24, Z+12	; 0x0c
 a00:	8f 3f       	cpi	r24, 0xFF	; 255
 a02:	01 f4       	brne	.+0      	; 0xa04 <_ZN10WiFiClient7connectE9IPAddressj+0x3a>
 a04:	00 c0       	rjmp	.+0      	; 0xa06 <_ZN10WiFiClient7connectE9IPAddressj+0x3c>
    {
    	ServerDrv::startClient(uint32_t(ip), port, _sock);
 a06:	8f 81       	ldd	r24, Y+7	; 0x07
 a08:	98 85       	ldd	r25, Y+8	; 0x08
 a0a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 a0e:	dc 01       	movw	r26, r24
 a10:	cb 01       	movw	r24, r22
 a12:	ed 81       	ldd	r30, Y+5	; 0x05
 a14:	fe 81       	ldd	r31, Y+6	; 0x06
 a16:	e4 85       	ldd	r30, Z+12	; 0x0c
 a18:	29 85       	ldd	r18, Y+9	; 0x09
 a1a:	3a 85       	ldd	r19, Y+10	; 0x0a
 a1c:	bc 01       	movw	r22, r24
 a1e:	cd 01       	movw	r24, r26
 a20:	a9 01       	movw	r20, r18
 a22:	2e 2f       	mov	r18, r30
 a24:	00 e0       	ldi	r16, 0x00	; 0
 a26:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    	WiFiClass::_state[_sock] = _sock;
 a2a:	ed 81       	ldd	r30, Y+5	; 0x05
 a2c:	fe 81       	ldd	r31, Y+6	; 0x06
 a2e:	84 85       	ldd	r24, Z+12	; 0x0c
 a30:	48 2f       	mov	r20, r24
 a32:	50 e0       	ldi	r21, 0x00	; 0
 a34:	ed 81       	ldd	r30, Y+5	; 0x05
 a36:	fe 81       	ldd	r31, Y+6	; 0x06
 a38:	84 85       	ldd	r24, Z+12	; 0x0c
 a3a:	28 2f       	mov	r18, r24
 a3c:	30 e0       	ldi	r19, 0x00	; 0
 a3e:	ca 01       	movw	r24, r20
 a40:	88 0f       	add	r24, r24
 a42:	99 1f       	adc	r25, r25
 a44:	fc 01       	movw	r30, r24
 a46:	e0 50       	subi	r30, 0x00	; 0
 a48:	f0 40       	sbci	r31, 0x00	; 0
 a4a:	31 83       	std	Z+1, r19	; 0x01
 a4c:	20 83       	st	Z, r18

    	unsigned long start = millis();
 a4e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 a52:	dc 01       	movw	r26, r24
 a54:	cb 01       	movw	r24, r22
 a56:	89 83       	std	Y+1, r24	; 0x01
 a58:	9a 83       	std	Y+2, r25	; 0x02
 a5a:	ab 83       	std	Y+3, r26	; 0x03
 a5c:	bc 83       	std	Y+4, r27	; 0x04
 a5e:	00 c0       	rjmp	.+0      	; 0xa60 <_ZN10WiFiClient7connectE9IPAddressj+0x96>

    	// wait 4 second for the connection to close
    	while (!connected() && millis() - start < 10000)
    		delay(1);
 a60:	61 e0       	ldi	r22, 0x01	; 1
 a62:	70 e0       	ldi	r23, 0x00	; 0
 a64:	80 e0       	ldi	r24, 0x00	; 0
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    	WiFiClass::_state[_sock] = _sock;

    	unsigned long start = millis();

    	// wait 4 second for the connection to close
    	while (!connected() && millis() - start < 10000)
 a6c:	ed 81       	ldd	r30, Y+5	; 0x05
 a6e:	fe 81       	ldd	r31, Y+6	; 0x06
 a70:	80 81       	ld	r24, Z
 a72:	91 81       	ldd	r25, Z+1	; 0x01
 a74:	fc 01       	movw	r30, r24
 a76:	78 96       	adiw	r30, 0x18	; 24
 a78:	01 90       	ld	r0, Z+
 a7a:	f0 81       	ld	r31, Z
 a7c:	e0 2d       	mov	r30, r0
 a7e:	8d 81       	ldd	r24, Y+5	; 0x05
 a80:	9e 81       	ldd	r25, Y+6	; 0x06
 a82:	09 95       	icall
 a84:	88 23       	and	r24, r24
 a86:	01 f4       	brne	.+0      	; 0xa88 <_ZN10WiFiClient7connectE9IPAddressj+0xbe>
 a88:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 a8c:	dc 01       	movw	r26, r24
 a8e:	cb 01       	movw	r24, r22
 a90:	29 81       	ldd	r18, Y+1	; 0x01
 a92:	3a 81       	ldd	r19, Y+2	; 0x02
 a94:	4b 81       	ldd	r20, Y+3	; 0x03
 a96:	5c 81       	ldd	r21, Y+4	; 0x04
 a98:	82 1b       	sub	r24, r18
 a9a:	93 0b       	sbc	r25, r19
 a9c:	a4 0b       	sbc	r26, r20
 a9e:	b5 0b       	sbc	r27, r21
 aa0:	80 31       	cpi	r24, 0x10	; 16
 aa2:	27 e2       	ldi	r18, 0x27	; 39
 aa4:	92 07       	cpc	r25, r18
 aa6:	20 e0       	ldi	r18, 0x00	; 0
 aa8:	a2 07       	cpc	r26, r18
 aaa:	20 e0       	ldi	r18, 0x00	; 0
 aac:	b2 07       	cpc	r27, r18
 aae:	00 f4       	brcc	.+0      	; 0xab0 <_ZN10WiFiClient7connectE9IPAddressj+0xe6>
 ab0:	81 e0       	ldi	r24, 0x01	; 1
 ab2:	8e 87       	std	Y+14, r24	; 0x0e
 ab4:	00 c0       	rjmp	.+0      	; 0xab6 <_ZN10WiFiClient7connectE9IPAddressj+0xec>
 ab6:	1e 86       	std	Y+14, r1	; 0x0e
 ab8:	8e 85       	ldd	r24, Y+14	; 0x0e
 aba:	88 23       	and	r24, r24
 abc:	01 f4       	brne	.+0      	; 0xabe <_ZN10WiFiClient7connectE9IPAddressj+0xf4>
    		delay(1);

    	if (!connected())
 abe:	ed 81       	ldd	r30, Y+5	; 0x05
 ac0:	fe 81       	ldd	r31, Y+6	; 0x06
 ac2:	80 81       	ld	r24, Z
 ac4:	91 81       	ldd	r25, Z+1	; 0x01
 ac6:	fc 01       	movw	r30, r24
 ac8:	78 96       	adiw	r30, 0x18	; 24
 aca:	01 90       	ld	r0, Z+
 acc:	f0 81       	ld	r31, Z
 ace:	e0 2d       	mov	r30, r0
 ad0:	8d 81       	ldd	r24, Y+5	; 0x05
 ad2:	9e 81       	ldd	r25, Y+6	; 0x06
 ad4:	09 95       	icall
 ad6:	1d 86       	std	Y+13, r1	; 0x0d
 ad8:	88 23       	and	r24, r24
 ada:	01 f4       	brne	.+0      	; 0xadc <_ZN10WiFiClient7connectE9IPAddressj+0x112>
 adc:	91 e0       	ldi	r25, 0x01	; 1
 ade:	9d 87       	std	Y+13, r25	; 0x0d
 ae0:	2d 85       	ldd	r18, Y+13	; 0x0d
 ae2:	22 23       	and	r18, r18
 ae4:	01 f0       	breq	.+0      	; 0xae6 <_ZN10WiFiClient7connectE9IPAddressj+0x11c>
       	{
    		return 0;
 ae6:	1c 86       	std	Y+12, r1	; 0x0c
 ae8:	1b 86       	std	Y+11, r1	; 0x0b
 aea:	00 c0       	rjmp	.+0      	; 0xaec <_ZN10WiFiClient7connectE9IPAddressj+0x122>
    	}
    }else{
    	Serial.println("No Socket available");
    	return 0;
    }
    return 1;
 aec:	81 e0       	ldi	r24, 0x01	; 1
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	9c 87       	std	Y+12, r25	; 0x0c
 af2:	8b 87       	std	Y+11, r24	; 0x0b
 af4:	00 c0       	rjmp	.+0      	; 0xaf6 <_ZN10WiFiClient7connectE9IPAddressj+0x12c>
    	if (!connected())
       	{
    		return 0;
    	}
    }else{
    	Serial.println("No Socket available");
 af6:	80 e0       	ldi	r24, 0x00	; 0
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	20 e0       	ldi	r18, 0x00	; 0
 afc:	30 e0       	ldi	r19, 0x00	; 0
 afe:	b9 01       	movw	r22, r18
 b00:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
    	return 0;
 b04:	1c 86       	std	Y+12, r1	; 0x0c
 b06:	1b 86       	std	Y+11, r1	; 0x0b
 b08:	8b 85       	ldd	r24, Y+11	; 0x0b
 b0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    }
    return 1;
}
 b0c:	2e 96       	adiw	r28, 0x0e	; 14
 b0e:	0f b6       	in	r0, 0x3f	; 63
 b10:	f8 94       	cli
 b12:	de bf       	out	0x3e, r29	; 62
 b14:	0f be       	out	0x3f, r0	; 63
 b16:	cd bf       	out	0x3d, r28	; 61
 b18:	cf 91       	pop	r28
 b1a:	df 91       	pop	r29
 b1c:	0f 91       	pop	r16
 b1e:	08 95       	ret

00000b20 <_ZN10WiFiClient7connectEPKcj>:
	: _sock(sock)
	, _socket(0)
{
}

int WiFiClient::connect(const char* host, uint16_t port) {
 b20:	0f 93       	push	r16
 b22:	1f 93       	push	r17
 b24:	df 93       	push	r29
 b26:	cf 93       	push	r28
 b28:	cd b7       	in	r28, 0x3d	; 61
 b2a:	de b7       	in	r29, 0x3e	; 62
 b2c:	65 97       	sbiw	r28, 0x15	; 21
 b2e:	0f b6       	in	r0, 0x3f	; 63
 b30:	f8 94       	cli
 b32:	de bf       	out	0x3e, r29	; 62
 b34:	0f be       	out	0x3f, r0	; 63
 b36:	cd bf       	out	0x3d, r28	; 61
 b38:	9e 87       	std	Y+14, r25	; 0x0e
 b3a:	8d 87       	std	Y+13, r24	; 0x0d
 b3c:	78 8b       	std	Y+16, r23	; 0x10
 b3e:	6f 87       	std	Y+15, r22	; 0x0f
 b40:	5a 8b       	std	Y+18, r21	; 0x12
 b42:	49 8b       	std	Y+17, r20	; 0x11
	IPAddress remote_addr;
 b44:	ce 01       	movw	r24, r28
 b46:	07 96       	adiw	r24, 0x07	; 7
 b48:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	if (WiFi.hostByName(host, remote_addr))
 b4c:	80 e0       	ldi	r24, 0x00	; 0
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	2f 85       	ldd	r18, Y+15	; 0x0f
 b52:	38 89       	ldd	r19, Y+16	; 0x10
 b54:	ae 01       	movw	r20, r28
 b56:	49 5f       	subi	r20, 0xF9	; 249
 b58:	5f 4f       	sbci	r21, 0xFF	; 255
 b5a:	b9 01       	movw	r22, r18
 b5c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 b60:	1d 8a       	std	Y+21, r1	; 0x15
 b62:	00 97       	sbiw	r24, 0x00	; 0
 b64:	01 f0       	breq	.+0      	; 0xb66 <_ZN10WiFiClient7connectEPKcj+0x46>
 b66:	81 e0       	ldi	r24, 0x01	; 1
 b68:	8d 8b       	std	Y+21, r24	; 0x15
 b6a:	8d 89       	ldd	r24, Y+21	; 0x15
 b6c:	88 23       	and	r24, r24
 b6e:	01 f0       	breq	.+0      	; 0xb70 <_ZN10WiFiClient7connectEPKcj+0x50>
	{
		return connect(remote_addr, port);
 b70:	ed 85       	ldd	r30, Y+13	; 0x0d
 b72:	fe 85       	ldd	r31, Y+14	; 0x0e
 b74:	80 81       	ld	r24, Z
 b76:	91 81       	ldd	r25, Z+1	; 0x01
 b78:	fc 01       	movw	r30, r24
 b7a:	70 96       	adiw	r30, 0x10	; 16
 b7c:	00 81       	ld	r16, Z
 b7e:	11 81       	ldd	r17, Z+1	; 0x01
 b80:	9e 01       	movw	r18, r28
 b82:	29 5f       	subi	r18, 0xF9	; 249
 b84:	3f 4f       	sbci	r19, 0xFF	; 255
 b86:	ce 01       	movw	r24, r28
 b88:	01 96       	adiw	r24, 0x01	; 1
 b8a:	b9 01       	movw	r22, r18
 b8c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 b90:	8d 85       	ldd	r24, Y+13	; 0x0d
 b92:	9e 85       	ldd	r25, Y+14	; 0x0e
 b94:	49 89       	ldd	r20, Y+17	; 0x11
 b96:	5a 89       	ldd	r21, Y+18	; 0x12
 b98:	9e 01       	movw	r18, r28
 b9a:	2f 5f       	subi	r18, 0xFF	; 255
 b9c:	3f 4f       	sbci	r19, 0xFF	; 255
 b9e:	b9 01       	movw	r22, r18
 ba0:	f8 01       	movw	r30, r16
 ba2:	09 95       	icall
 ba4:	9c 8b       	std	Y+20, r25	; 0x14
 ba6:	8b 8b       	std	Y+19, r24	; 0x13
 ba8:	ce 01       	movw	r24, r28
 baa:	01 96       	adiw	r24, 0x01	; 1
 bac:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <_ZN10WiFiClient7connectEPKcj+0x92>
	}
	return 0;
 bb2:	1c 8a       	std	Y+20, r1	; 0x14
 bb4:	1b 8a       	std	Y+19, r1	; 0x13
 bb6:	ce 01       	movw	r24, r28
 bb8:	07 96       	adiw	r24, 0x07	; 7
 bba:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 bbe:	8b 89       	ldd	r24, Y+19	; 0x13
 bc0:	9c 89       	ldd	r25, Y+20	; 0x14
}
 bc2:	65 96       	adiw	r28, 0x15	; 21
 bc4:	0f b6       	in	r0, 0x3f	; 63
 bc6:	f8 94       	cli
 bc8:	de bf       	out	0x3e, r29	; 62
 bca:	0f be       	out	0x3f, r0	; 63
 bcc:	cd bf       	out	0x3d, r28	; 61
 bce:	cf 91       	pop	r28
 bd0:	df 91       	pop	r29
 bd2:	1f 91       	pop	r17
 bd4:	0f 91       	pop	r16
 bd6:	08 95       	ret

WiFiServer.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000882  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000050  00000000  00000000  000008b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          00000008  00000000  00000000  00000906  2**0
                  ALLOC
  3 .stab         000010d4  00000000  00000000  00000908  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000203c  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .dtors        00000002  00000000  00000000  00003a18  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  6 .ctors        00000002  00000000  00000000  00003a1a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text:

00000000 <_ZN5PrintC2Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5PrintC2Ev+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	80 e0       	ldi	r24, 0x00	; 0
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	91 83       	std	Z+1, r25	; 0x01
  18:	80 83       	st	Z, r24
  1a:	e9 81       	ldd	r30, Y+1	; 0x01
  1c:	fa 81       	ldd	r31, Y+2	; 0x02
  1e:	13 82       	std	Z+3, r1	; 0x03
  20:	12 82       	std	Z+2, r1	; 0x02
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

0000002c <_ZN6ServerC2Ev>:
#ifndef server_h
#define server_h

class Server : public Print {
  2c:	df 93       	push	r29
  2e:	cf 93       	push	r28
  30:	00 d0       	rcall	.+0      	; 0x32 <_ZN6ServerC2Ev+0x6>
  32:	cd b7       	in	r28, 0x3d	; 61
  34:	de b7       	in	r29, 0x3e	; 62
  36:	9a 83       	std	Y+2, r25	; 0x02
  38:	89 83       	std	Y+1, r24	; 0x01
  3a:	89 81       	ldd	r24, Y+1	; 0x01
  3c:	9a 81       	ldd	r25, Y+2	; 0x02
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  42:	e9 81       	ldd	r30, Y+1	; 0x01
  44:	fa 81       	ldd	r31, Y+2	; 0x02
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	91 83       	std	Z+1, r25	; 0x01
  4c:	80 83       	st	Z, r24
  4e:	0f 90       	pop	r0
  50:	0f 90       	pop	r0
  52:	cf 91       	pop	r28
  54:	df 91       	pop	r29
  56:	08 95       	ret

00000058 <_ZN10WiFiServerC2Ej>:

#include "WiFi.h"
#include "WiFiClient.h"
#include "WiFiServer.h"

WiFiServer::WiFiServer(uint16_t port)
  58:	df 93       	push	r29
  5a:	cf 93       	push	r28
  5c:	00 d0       	rcall	.+0      	; 0x5e <_ZN10WiFiServerC2Ej+0x6>
  5e:	00 d0       	rcall	.+0      	; 0x60 <_ZN10WiFiServerC2Ej+0x8>
  60:	cd b7       	in	r28, 0x3d	; 61
  62:	de b7       	in	r29, 0x3e	; 62
  64:	9a 83       	std	Y+2, r25	; 0x02
  66:	89 83       	std	Y+1, r24	; 0x01
  68:	7c 83       	std	Y+4, r23	; 0x04
  6a:	6b 83       	std	Y+3, r22	; 0x03
  6c:	89 81       	ldd	r24, Y+1	; 0x01
  6e:	9a 81       	ldd	r25, Y+2	; 0x02
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  74:	e9 81       	ldd	r30, Y+1	; 0x01
  76:	fa 81       	ldd	r31, Y+2	; 0x02
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	91 83       	std	Z+1, r25	; 0x01
  7e:	80 83       	st	Z, r24
{
    _port = port;
  80:	e9 81       	ldd	r30, Y+1	; 0x01
  82:	fa 81       	ldd	r31, Y+2	; 0x02
  84:	8b 81       	ldd	r24, Y+3	; 0x03
  86:	9c 81       	ldd	r25, Y+4	; 0x04
  88:	95 83       	std	Z+5, r25	; 0x05
  8a:	84 83       	std	Z+4, r24	; 0x04
}
  8c:	0f 90       	pop	r0
  8e:	0f 90       	pop	r0
  90:	0f 90       	pop	r0
  92:	0f 90       	pop	r0
  94:	cf 91       	pop	r28
  96:	df 91       	pop	r29
  98:	08 95       	ret

0000009a <_ZN10WiFiServerC1Ej>:

#include "WiFi.h"
#include "WiFiClient.h"
#include "WiFiServer.h"

WiFiServer::WiFiServer(uint16_t port)
  9a:	df 93       	push	r29
  9c:	cf 93       	push	r28
  9e:	00 d0       	rcall	.+0      	; 0xa0 <_ZN10WiFiServerC1Ej+0x6>
  a0:	00 d0       	rcall	.+0      	; 0xa2 <_ZN10WiFiServerC1Ej+0x8>
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	9a 83       	std	Y+2, r25	; 0x02
  a8:	89 83       	std	Y+1, r24	; 0x01
  aa:	7c 83       	std	Y+4, r23	; 0x04
  ac:	6b 83       	std	Y+3, r22	; 0x03
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	9a 81       	ldd	r25, Y+2	; 0x02
  b2:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  b6:	e9 81       	ldd	r30, Y+1	; 0x01
  b8:	fa 81       	ldd	r31, Y+2	; 0x02
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	91 83       	std	Z+1, r25	; 0x01
  c0:	80 83       	st	Z, r24
{
    _port = port;
  c2:	e9 81       	ldd	r30, Y+1	; 0x01
  c4:	fa 81       	ldd	r31, Y+2	; 0x02
  c6:	8b 81       	ldd	r24, Y+3	; 0x03
  c8:	9c 81       	ldd	r25, Y+4	; 0x04
  ca:	95 83       	std	Z+5, r25	; 0x05
  cc:	84 83       	std	Z+4, r24	; 0x04
}
  ce:	0f 90       	pop	r0
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <_ZN5PrintC2ERKS_>:
#define HEX 16
#define OCT 8
#define BIN 2

class Print
{
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	00 d0       	rcall	.+0      	; 0xe2 <_ZN5PrintC2ERKS_+0x6>
  e2:	00 d0       	rcall	.+0      	; 0xe4 <_ZN5PrintC2ERKS_+0x8>
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	9a 83       	std	Y+2, r25	; 0x02
  ea:	89 83       	std	Y+1, r24	; 0x01
  ec:	7c 83       	std	Y+4, r23	; 0x04
  ee:	6b 83       	std	Y+3, r22	; 0x03
  f0:	e9 81       	ldd	r30, Y+1	; 0x01
  f2:	fa 81       	ldd	r31, Y+2	; 0x02
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	91 83       	std	Z+1, r25	; 0x01
  fa:	80 83       	st	Z, r24
  fc:	eb 81       	ldd	r30, Y+3	; 0x03
  fe:	fc 81       	ldd	r31, Y+4	; 0x04
 100:	82 81       	ldd	r24, Z+2	; 0x02
 102:	93 81       	ldd	r25, Z+3	; 0x03
 104:	e9 81       	ldd	r30, Y+1	; 0x01
 106:	fa 81       	ldd	r31, Y+2	; 0x02
 108:	93 83       	std	Z+3, r25	; 0x03
 10a:	82 83       	std	Z+2, r24	; 0x02
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	cf 91       	pop	r28
 116:	df 91       	pop	r29
 118:	08 95       	ret

0000011a <_ZN6StreamC2ERKS_>:
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
{
 11a:	df 93       	push	r29
 11c:	cf 93       	push	r28
 11e:	00 d0       	rcall	.+0      	; 0x120 <_ZN6StreamC2ERKS_+0x6>
 120:	00 d0       	rcall	.+0      	; 0x122 <_ZN6StreamC2ERKS_+0x8>
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	9a 83       	std	Y+2, r25	; 0x02
 128:	89 83       	std	Y+1, r24	; 0x01
 12a:	7c 83       	std	Y+4, r23	; 0x04
 12c:	6b 83       	std	Y+3, r22	; 0x03
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	9a 81       	ldd	r25, Y+2	; 0x02
 132:	2b 81       	ldd	r18, Y+3	; 0x03
 134:	3c 81       	ldd	r19, Y+4	; 0x04
 136:	b9 01       	movw	r22, r18
 138:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 13c:	e9 81       	ldd	r30, Y+1	; 0x01
 13e:	fa 81       	ldd	r31, Y+2	; 0x02
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	91 83       	std	Z+1, r25	; 0x01
 146:	80 83       	st	Z, r24
 148:	eb 81       	ldd	r30, Y+3	; 0x03
 14a:	fc 81       	ldd	r31, Y+4	; 0x04
 14c:	84 81       	ldd	r24, Z+4	; 0x04
 14e:	95 81       	ldd	r25, Z+5	; 0x05
 150:	a6 81       	ldd	r26, Z+6	; 0x06
 152:	b7 81       	ldd	r27, Z+7	; 0x07
 154:	e9 81       	ldd	r30, Y+1	; 0x01
 156:	fa 81       	ldd	r31, Y+2	; 0x02
 158:	84 83       	std	Z+4, r24	; 0x04
 15a:	95 83       	std	Z+5, r25	; 0x05
 15c:	a6 83       	std	Z+6, r26	; 0x06
 15e:	b7 83       	std	Z+7, r27	; 0x07
 160:	eb 81       	ldd	r30, Y+3	; 0x03
 162:	fc 81       	ldd	r31, Y+4	; 0x04
 164:	80 85       	ldd	r24, Z+8	; 0x08
 166:	91 85       	ldd	r25, Z+9	; 0x09
 168:	a2 85       	ldd	r26, Z+10	; 0x0a
 16a:	b3 85       	ldd	r27, Z+11	; 0x0b
 16c:	e9 81       	ldd	r30, Y+1	; 0x01
 16e:	fa 81       	ldd	r31, Y+2	; 0x02
 170:	80 87       	std	Z+8, r24	; 0x08
 172:	91 87       	std	Z+9, r25	; 0x09
 174:	a2 87       	std	Z+10, r26	; 0x0a
 176:	b3 87       	std	Z+11, r27	; 0x0b
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	cf 91       	pop	r28
 182:	df 91       	pop	r29
 184:	08 95       	ret

00000186 <_ZN6ClientC2ERKS_>:
#define client_h
#include "Print.h"
#include "Stream.h"
#include "IPAddress.h"

class Client : public Stream {
 186:	df 93       	push	r29
 188:	cf 93       	push	r28
 18a:	00 d0       	rcall	.+0      	; 0x18c <_ZN6ClientC2ERKS_+0x6>
 18c:	00 d0       	rcall	.+0      	; 0x18e <_ZN6ClientC2ERKS_+0x8>
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	9a 83       	std	Y+2, r25	; 0x02
 194:	89 83       	std	Y+1, r24	; 0x01
 196:	7c 83       	std	Y+4, r23	; 0x04
 198:	6b 83       	std	Y+3, r22	; 0x03
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	9a 81       	ldd	r25, Y+2	; 0x02
 19e:	2b 81       	ldd	r18, Y+3	; 0x03
 1a0:	3c 81       	ldd	r19, Y+4	; 0x04
 1a2:	b9 01       	movw	r22, r18
 1a4:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 1a8:	e9 81       	ldd	r30, Y+1	; 0x01
 1aa:	fa 81       	ldd	r31, Y+2	; 0x02
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	91 83       	std	Z+1, r25	; 0x01
 1b2:	80 83       	st	Z, r24
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	cf 91       	pop	r28
 1be:	df 91       	pop	r29
 1c0:	08 95       	ret

000001c2 <_ZN10WiFiClientC1ERKS_>:
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class WiFiClient : public Client {
 1c2:	df 93       	push	r29
 1c4:	cf 93       	push	r28
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <_ZN10WiFiClientC1ERKS_+0x6>
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <_ZN10WiFiClientC1ERKS_+0x8>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	9a 83       	std	Y+2, r25	; 0x02
 1d0:	89 83       	std	Y+1, r24	; 0x01
 1d2:	7c 83       	std	Y+4, r23	; 0x04
 1d4:	6b 83       	std	Y+3, r22	; 0x03
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	9a 81       	ldd	r25, Y+2	; 0x02
 1da:	2b 81       	ldd	r18, Y+3	; 0x03
 1dc:	3c 81       	ldd	r19, Y+4	; 0x04
 1de:	b9 01       	movw	r22, r18
 1e0:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 1e4:	e9 81       	ldd	r30, Y+1	; 0x01
 1e6:	fa 81       	ldd	r31, Y+2	; 0x02
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	91 83       	std	Z+1, r25	; 0x01
 1ee:	80 83       	st	Z, r24
 1f0:	eb 81       	ldd	r30, Y+3	; 0x03
 1f2:	fc 81       	ldd	r31, Y+4	; 0x04
 1f4:	84 85       	ldd	r24, Z+12	; 0x0c
 1f6:	e9 81       	ldd	r30, Y+1	; 0x01
 1f8:	fa 81       	ldd	r31, Y+2	; 0x02
 1fa:	84 87       	std	Z+12, r24	; 0x0c
 1fc:	eb 81       	ldd	r30, Y+3	; 0x03
 1fe:	fc 81       	ldd	r31, Y+4	; 0x04
 200:	85 85       	ldd	r24, Z+13	; 0x0d
 202:	96 85       	ldd	r25, Z+14	; 0x0e
 204:	e9 81       	ldd	r30, Y+1	; 0x01
 206:	fa 81       	ldd	r31, Y+2	; 0x02
 208:	96 87       	std	Z+14, r25	; 0x0e
 20a:	85 87       	std	Z+13, r24	; 0x0d
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	cf 91       	pop	r28
 216:	df 91       	pop	r29
 218:	08 95       	ret

0000021a <_ZN10WiFiServer5writeEh>:
uint8_t WiFiServer::status() {
    return ServerDrv::getServerState(0);
}


size_t WiFiServer::write(uint8_t b)
 21a:	df 93       	push	r29
 21c:	cf 93       	push	r28
 21e:	00 d0       	rcall	.+0      	; 0x220 <_ZN10WiFiServer5writeEh+0x6>
 220:	0f 92       	push	r0
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	9a 83       	std	Y+2, r25	; 0x02
 228:	89 83       	std	Y+1, r24	; 0x01
 22a:	6b 83       	std	Y+3, r22	; 0x03
{
    return write(&b, 1);
 22c:	e9 81       	ldd	r30, Y+1	; 0x01
 22e:	fa 81       	ldd	r31, Y+2	; 0x02
 230:	80 81       	ld	r24, Z
 232:	91 81       	ldd	r25, Z+1	; 0x01
 234:	fc 01       	movw	r30, r24
 236:	36 96       	adiw	r30, 0x06	; 6
 238:	01 90       	ld	r0, Z+
 23a:	f0 81       	ld	r31, Z
 23c:	e0 2d       	mov	r30, r0
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	9a 81       	ldd	r25, Y+2	; 0x02
 242:	9e 01       	movw	r18, r28
 244:	2d 5f       	subi	r18, 0xFD	; 253
 246:	3f 4f       	sbci	r19, 0xFF	; 255
 248:	b9 01       	movw	r22, r18
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	09 95       	icall
}
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	cf 91       	pop	r28
 258:	df 91       	pop	r29
 25a:	08 95       	ret

0000025c <_ZN6ServerD2Ev>:
 25c:	df 93       	push	r29
 25e:	cf 93       	push	r28
 260:	00 d0       	rcall	.+0      	; 0x262 <_ZN6ServerD2Ev+0x6>
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
 266:	9a 83       	std	Y+2, r25	; 0x02
 268:	89 83       	std	Y+1, r24	; 0x01
 26a:	e9 81       	ldd	r30, Y+1	; 0x01
 26c:	fa 81       	ldd	r31, Y+2	; 0x02
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	91 83       	std	Z+1, r25	; 0x01
 274:	80 83       	st	Z, r24
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	9a 81       	ldd	r25, Y+2	; 0x02
 27a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	88 23       	and	r24, r24
 284:	01 f0       	breq	.+0      	; 0x286 <_ZN6ServerD2Ev+0x2a>
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	9a 81       	ldd	r25, Y+2	; 0x02
 28a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	cf 91       	pop	r28
 294:	df 91       	pop	r29
 296:	08 95       	ret

00000298 <_ZN10WiFiServerD0Ev>:

#include "Server.h"

class WiFiClient;

class WiFiServer : public Server {
 298:	df 93       	push	r29
 29a:	cf 93       	push	r28
 29c:	00 d0       	rcall	.+0      	; 0x29e <_ZN10WiFiServerD0Ev+0x6>
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
 2a2:	9a 83       	std	Y+2, r25	; 0x02
 2a4:	89 83       	std	Y+1, r24	; 0x01
 2a6:	e9 81       	ldd	r30, Y+1	; 0x01
 2a8:	fa 81       	ldd	r31, Y+2	; 0x02
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	91 83       	std	Z+1, r25	; 0x01
 2b0:	80 83       	st	Z, r24
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	9a 81       	ldd	r25, Y+2	; 0x02
 2b6:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	88 23       	and	r24, r24
 2c0:	01 f0       	breq	.+0      	; 0x2c2 <_ZN10WiFiServerD0Ev+0x2a>
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	9a 81       	ldd	r25, Y+2	; 0x02
 2c6:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	cf 91       	pop	r28
 2d0:	df 91       	pop	r29
 2d2:	08 95       	ret

000002d4 <_ZN10WiFiServerD1Ev>:
 2d4:	df 93       	push	r29
 2d6:	cf 93       	push	r28
 2d8:	00 d0       	rcall	.+0      	; 0x2da <_ZN10WiFiServerD1Ev+0x6>
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	9a 83       	std	Y+2, r25	; 0x02
 2e0:	89 83       	std	Y+1, r24	; 0x01
 2e2:	e9 81       	ldd	r30, Y+1	; 0x01
 2e4:	fa 81       	ldd	r31, Y+2	; 0x02
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	91 83       	std	Z+1, r25	; 0x01
 2ec:	80 83       	st	Z, r24
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	9a 81       	ldd	r25, Y+2	; 0x02
 2f2:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	88 23       	and	r24, r24
 2fc:	01 f0       	breq	.+0      	; 0x2fe <_ZN10WiFiServerD1Ev+0x2a>
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	9a 81       	ldd	r25, Y+2	; 0x02
 302:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	cf 91       	pop	r28
 30c:	df 91       	pop	r29
 30e:	08 95       	ret

00000310 <_ZN6ServerD0Ev>:
 310:	df 93       	push	r29
 312:	cf 93       	push	r28
 314:	00 d0       	rcall	.+0      	; 0x316 <_ZN6ServerD0Ev+0x6>
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
 31a:	9a 83       	std	Y+2, r25	; 0x02
 31c:	89 83       	std	Y+1, r24	; 0x01
 31e:	e9 81       	ldd	r30, Y+1	; 0x01
 320:	fa 81       	ldd	r31, Y+2	; 0x02
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	91 83       	std	Z+1, r25	; 0x01
 328:	80 83       	st	Z, r24
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	9a 81       	ldd	r25, Y+2	; 0x02
 32e:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	88 23       	and	r24, r24
 338:	01 f0       	breq	.+0      	; 0x33a <_ZN6ServerD0Ev+0x2a>
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	9a 81       	ldd	r25, Y+2	; 0x02
 33e:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	cf 91       	pop	r28
 348:	df 91       	pop	r29
 34a:	08 95       	ret

0000034c <_ZN6ServerD1Ev>:
 34c:	df 93       	push	r29
 34e:	cf 93       	push	r28
 350:	00 d0       	rcall	.+0      	; 0x352 <_ZN6ServerD1Ev+0x6>
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	9a 83       	std	Y+2, r25	; 0x02
 358:	89 83       	std	Y+1, r24	; 0x01
 35a:	e9 81       	ldd	r30, Y+1	; 0x01
 35c:	fa 81       	ldd	r31, Y+2	; 0x02
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	91 83       	std	Z+1, r25	; 0x01
 364:	80 83       	st	Z, r24
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	9a 81       	ldd	r25, Y+2	; 0x02
 36a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	88 23       	and	r24, r24
 374:	01 f0       	breq	.+0      	; 0x376 <_ZN6ServerD1Ev+0x2a>
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	9a 81       	ldd	r25, Y+2	; 0x02
 37a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	cf 91       	pop	r28
 384:	df 91       	pop	r29
 386:	08 95       	ret

00000388 <_ZN6StreamD2Ev>:
 388:	df 93       	push	r29
 38a:	cf 93       	push	r28
 38c:	00 d0       	rcall	.+0      	; 0x38e <_ZN6StreamD2Ev+0x6>
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	9a 83       	std	Y+2, r25	; 0x02
 394:	89 83       	std	Y+1, r24	; 0x01
 396:	e9 81       	ldd	r30, Y+1	; 0x01
 398:	fa 81       	ldd	r31, Y+2	; 0x02
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	91 83       	std	Z+1, r25	; 0x01
 3a0:	80 83       	st	Z, r24
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	9a 81       	ldd	r25, Y+2	; 0x02
 3a6:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	88 23       	and	r24, r24
 3b0:	01 f0       	breq	.+0      	; 0x3b2 <_ZN6StreamD2Ev+0x2a>
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	9a 81       	ldd	r25, Y+2	; 0x02
 3b6:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	cf 91       	pop	r28
 3c0:	df 91       	pop	r29
 3c2:	08 95       	ret

000003c4 <_ZN6ClientD2Ev>:
 3c4:	df 93       	push	r29
 3c6:	cf 93       	push	r28
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <_ZN6ClientD2Ev+0x6>
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	9a 83       	std	Y+2, r25	; 0x02
 3d0:	89 83       	std	Y+1, r24	; 0x01
 3d2:	e9 81       	ldd	r30, Y+1	; 0x01
 3d4:	fa 81       	ldd	r31, Y+2	; 0x02
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	91 83       	std	Z+1, r25	; 0x01
 3dc:	80 83       	st	Z, r24
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	9a 81       	ldd	r25, Y+2	; 0x02
 3e2:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	88 23       	and	r24, r24
 3ec:	01 f0       	breq	.+0      	; 0x3ee <_ZN6ClientD2Ev+0x2a>
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	9a 81       	ldd	r25, Y+2	; 0x02
 3f2:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	cf 91       	pop	r28
 3fc:	df 91       	pop	r29
 3fe:	08 95       	ret

00000400 <_ZN10WiFiClientD1Ev>:
 400:	df 93       	push	r29
 402:	cf 93       	push	r28
 404:	00 d0       	rcall	.+0      	; 0x406 <_ZN10WiFiClientD1Ev+0x6>
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	9a 83       	std	Y+2, r25	; 0x02
 40c:	89 83       	std	Y+1, r24	; 0x01
 40e:	e9 81       	ldd	r30, Y+1	; 0x01
 410:	fa 81       	ldd	r31, Y+2	; 0x02
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	91 83       	std	Z+1, r25	; 0x01
 418:	80 83       	st	Z, r24
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	9a 81       	ldd	r25, Y+2	; 0x02
 41e:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	88 23       	and	r24, r24
 428:	01 f0       	breq	.+0      	; 0x42a <_ZN10WiFiClientD1Ev+0x2a>
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	9a 81       	ldd	r25, Y+2	; 0x02
 42e:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	cf 91       	pop	r28
 438:	df 91       	pop	r29
 43a:	08 95       	ret

0000043c <_ZN6ClientD0Ev>:
 43c:	df 93       	push	r29
 43e:	cf 93       	push	r28
 440:	00 d0       	rcall	.+0      	; 0x442 <_ZN6ClientD0Ev+0x6>
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
 446:	9a 83       	std	Y+2, r25	; 0x02
 448:	89 83       	std	Y+1, r24	; 0x01
 44a:	e9 81       	ldd	r30, Y+1	; 0x01
 44c:	fa 81       	ldd	r31, Y+2	; 0x02
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	91 83       	std	Z+1, r25	; 0x01
 454:	80 83       	st	Z, r24
 456:	89 81       	ldd	r24, Y+1	; 0x01
 458:	9a 81       	ldd	r25, Y+2	; 0x02
 45a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	88 23       	and	r24, r24
 464:	01 f0       	breq	.+0      	; 0x466 <_ZN6ClientD0Ev+0x2a>
 466:	89 81       	ldd	r24, Y+1	; 0x01
 468:	9a 81       	ldd	r25, Y+2	; 0x02
 46a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	cf 91       	pop	r28
 474:	df 91       	pop	r29
 476:	08 95       	ret

00000478 <_ZN6ClientD1Ev>:
 478:	df 93       	push	r29
 47a:	cf 93       	push	r28
 47c:	00 d0       	rcall	.+0      	; 0x47e <_ZN6ClientD1Ev+0x6>
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	9a 83       	std	Y+2, r25	; 0x02
 484:	89 83       	std	Y+1, r24	; 0x01
 486:	e9 81       	ldd	r30, Y+1	; 0x01
 488:	fa 81       	ldd	r31, Y+2	; 0x02
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	91 83       	std	Z+1, r25	; 0x01
 490:	80 83       	st	Z, r24
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	9a 81       	ldd	r25, Y+2	; 0x02
 496:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	88 23       	and	r24, r24
 4a0:	01 f0       	breq	.+0      	; 0x4a2 <_ZN6ClientD1Ev+0x2a>
 4a2:	89 81       	ldd	r24, Y+1	; 0x01
 4a4:	9a 81       	ldd	r25, Y+2	; 0x02
 4a6:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	cf 91       	pop	r28
 4b0:	df 91       	pop	r29
 4b2:	08 95       	ret

000004b4 <_ZN6StreamD0Ev>:
 4b4:	df 93       	push	r29
 4b6:	cf 93       	push	r28
 4b8:	00 d0       	rcall	.+0      	; 0x4ba <_ZN6StreamD0Ev+0x6>
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
 4be:	9a 83       	std	Y+2, r25	; 0x02
 4c0:	89 83       	std	Y+1, r24	; 0x01
 4c2:	e9 81       	ldd	r30, Y+1	; 0x01
 4c4:	fa 81       	ldd	r31, Y+2	; 0x02
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	91 83       	std	Z+1, r25	; 0x01
 4cc:	80 83       	st	Z, r24
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	9a 81       	ldd	r25, Y+2	; 0x02
 4d2:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	88 23       	and	r24, r24
 4dc:	01 f0       	breq	.+0      	; 0x4de <_ZN6StreamD0Ev+0x2a>
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	9a 81       	ldd	r25, Y+2	; 0x02
 4e2:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	cf 91       	pop	r28
 4ec:	df 91       	pop	r29
 4ee:	08 95       	ret

000004f0 <_ZN6StreamD1Ev>:
 4f0:	df 93       	push	r29
 4f2:	cf 93       	push	r28
 4f4:	00 d0       	rcall	.+0      	; 0x4f6 <_ZN6StreamD1Ev+0x6>
 4f6:	cd b7       	in	r28, 0x3d	; 61
 4f8:	de b7       	in	r29, 0x3e	; 62
 4fa:	9a 83       	std	Y+2, r25	; 0x02
 4fc:	89 83       	std	Y+1, r24	; 0x01
 4fe:	e9 81       	ldd	r30, Y+1	; 0x01
 500:	fa 81       	ldd	r31, Y+2	; 0x02
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	91 83       	std	Z+1, r25	; 0x01
 508:	80 83       	st	Z, r24
 50a:	89 81       	ldd	r24, Y+1	; 0x01
 50c:	9a 81       	ldd	r25, Y+2	; 0x02
 50e:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	88 23       	and	r24, r24
 518:	01 f0       	breq	.+0      	; 0x51a <_ZN6StreamD1Ev+0x2a>
 51a:	89 81       	ldd	r24, Y+1	; 0x01
 51c:	9a 81       	ldd	r25, Y+2	; 0x02
 51e:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	cf 91       	pop	r28
 528:	df 91       	pop	r29
 52a:	08 95       	ret

0000052c <_Z41__static_initialization_and_destruction_0ii>:
                n+=client.write(buffer, size);
            }
        }
    }
    return n;
}
 52c:	0f 93       	push	r16
 52e:	df 93       	push	r29
 530:	cf 93       	push	r28
 532:	00 d0       	rcall	.+0      	; 0x534 <_Z41__static_initialization_and_destruction_0ii+0x8>
 534:	00 d0       	rcall	.+0      	; 0x536 <_Z41__static_initialization_and_destruction_0ii+0xa>
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
 53a:	9a 83       	std	Y+2, r25	; 0x02
 53c:	89 83       	std	Y+1, r24	; 0x01
 53e:	7c 83       	std	Y+4, r23	; 0x04
 540:	6b 83       	std	Y+3, r22	; 0x03
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	9a 81       	ldd	r25, Y+2	; 0x02
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	91 05       	cpc	r25, r1
 54a:	01 f4       	brne	.+0      	; 0x54c <_Z41__static_initialization_and_destruction_0ii+0x20>
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	9c 81       	ldd	r25, Y+4	; 0x04
 550:	2f ef       	ldi	r18, 0xFF	; 255
 552:	8f 3f       	cpi	r24, 0xFF	; 255
 554:	92 07       	cpc	r25, r18
 556:	01 f4       	brne	.+0      	; 0x558 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	00 e0       	ldi	r16, 0x00	; 0
 564:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	9a 81       	ldd	r25, Y+2	; 0x02
 56c:	00 97       	sbiw	r24, 0x00	; 0
 56e:	01 f4       	brne	.+0      	; 0x570 <_Z41__static_initialization_and_destruction_0ii+0x44>
 570:	8b 81       	ldd	r24, Y+3	; 0x03
 572:	9c 81       	ldd	r25, Y+4	; 0x04
 574:	2f ef       	ldi	r18, 0xFF	; 255
 576:	8f 3f       	cpi	r24, 0xFF	; 255
 578:	92 07       	cpc	r25, r18
 57a:	01 f4       	brne	.+0      	; 0x57c <_Z41__static_initialization_and_destruction_0ii+0x50>
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	cf 91       	pop	r28
 58e:	df 91       	pop	r29
 590:	0f 91       	pop	r16
 592:	08 95       	ret

00000594 <_GLOBAL__D__ZN10WiFiServerC2Ej>:
 594:	df 93       	push	r29
 596:	cf 93       	push	r28
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	6f ef       	ldi	r22, 0xFF	; 255
 5a2:	7f ef       	ldi	r23, 0xFF	; 255
 5a4:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 5a8:	cf 91       	pop	r28
 5aa:	df 91       	pop	r29
 5ac:	08 95       	ret

000005ae <_GLOBAL__I__ZN10WiFiServerC2Ej>:
 5ae:	df 93       	push	r29
 5b0:	cf 93       	push	r28
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	6f ef       	ldi	r22, 0xFF	; 255
 5bc:	7f ef       	ldi	r23, 0xFF	; 255
 5be:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 5c2:	cf 91       	pop	r28
 5c4:	df 91       	pop	r29
 5c6:	08 95       	ret

000005c8 <_ZN10WiFiServer5writeEPKhj>:
size_t WiFiServer::write(uint8_t b)
{
    return write(&b, 1);
}

size_t WiFiServer::write(const uint8_t *buffer, size_t size)
 5c8:	df 93       	push	r29
 5ca:	cf 93       	push	r28
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
 5d0:	6a 97       	sbiw	r28, 0x1a	; 26
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	f8 94       	cli
 5d6:	de bf       	out	0x3e, r29	; 62
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	cd bf       	out	0x3d, r28	; 61
 5dc:	9d 8b       	std	Y+21, r25	; 0x15
 5de:	8c 8b       	std	Y+20, r24	; 0x14
 5e0:	7f 8b       	std	Y+23, r23	; 0x17
 5e2:	6e 8b       	std	Y+22, r22	; 0x16
 5e4:	59 8f       	std	Y+25, r21	; 0x19
 5e6:	48 8f       	std	Y+24, r20	; 0x18
{
	size_t n = 0;
 5e8:	1c 82       	std	Y+4, r1	; 0x04
 5ea:	1b 82       	std	Y+3, r1	; 0x03

    for (int sock = 0; sock < MAX_SOCK_NUM; sock++)
 5ec:	1a 82       	std	Y+2, r1	; 0x02
 5ee:	19 82       	std	Y+1, r1	; 0x01
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <_ZN10WiFiServer5writeEPKhj+0x2a>
    {
        if (WiFiClass::_server_port[sock] != 0)
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
 5f4:	9a 81       	ldd	r25, Y+2	; 0x02
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	fc 01       	movw	r30, r24
 5fc:	e0 50       	subi	r30, 0x00	; 0
 5fe:	f0 40       	sbci	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	91 81       	ldd	r25, Z+1	; 0x01
 604:	00 97       	sbiw	r24, 0x00	; 0
 606:	01 f0       	breq	.+0      	; 0x608 <_ZN10WiFiServer5writeEPKhj+0x40>
        {
        	WiFiClient client(sock);
 608:	29 81       	ldd	r18, Y+1	; 0x01
 60a:	ce 01       	movw	r24, r28
 60c:	05 96       	adiw	r24, 0x05	; 5
 60e:	62 2f       	mov	r22, r18
 610:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>

            if (WiFiClass::_server_port[sock] == _port &&
 614:	89 81       	ldd	r24, Y+1	; 0x01
 616:	9a 81       	ldd	r25, Y+2	; 0x02
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	fc 01       	movw	r30, r24
 61e:	e0 50       	subi	r30, 0x00	; 0
 620:	f0 40       	sbci	r31, 0x00	; 0
 622:	20 81       	ld	r18, Z
 624:	31 81       	ldd	r19, Z+1	; 0x01
 626:	ec 89       	ldd	r30, Y+20	; 0x14
 628:	fd 89       	ldd	r31, Y+21	; 0x15
 62a:	84 81       	ldd	r24, Z+4	; 0x04
 62c:	95 81       	ldd	r25, Z+5	; 0x05
 62e:	28 17       	cp	r18, r24
 630:	39 07       	cpc	r19, r25
 632:	01 f4       	brne	.+0      	; 0x634 <_ZN10WiFiServer5writeEPKhj+0x6c>
 634:	ce 01       	movw	r24, r28
 636:	05 96       	adiw	r24, 0x05	; 5
 638:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 63c:	84 30       	cpi	r24, 0x04	; 4
 63e:	01 f4       	brne	.+0      	; 0x640 <_ZN10WiFiServer5writeEPKhj+0x78>
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	8a 8f       	std	Y+26, r24	; 0x1a
 644:	00 c0       	rjmp	.+0      	; 0x646 <_ZN10WiFiServer5writeEPKhj+0x7e>
 646:	1a 8e       	std	Y+26, r1	; 0x1a
 648:	8a 8d       	ldd	r24, Y+26	; 0x1a
 64a:	88 23       	and	r24, r24
 64c:	01 f0       	breq	.+0      	; 0x64e <_ZN10WiFiServer5writeEPKhj+0x86>
                client.status() == ESTABLISHED)
            {                
                n+=client.write(buffer, size);
 64e:	ce 01       	movw	r24, r28
 650:	05 96       	adiw	r24, 0x05	; 5
 652:	2e 89       	ldd	r18, Y+22	; 0x16
 654:	3f 89       	ldd	r19, Y+23	; 0x17
 656:	48 8d       	ldd	r20, Y+24	; 0x18
 658:	59 8d       	ldd	r21, Y+25	; 0x19
 65a:	b9 01       	movw	r22, r18
 65c:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 660:	9c 01       	movw	r18, r24
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	9c 81       	ldd	r25, Y+4	; 0x04
 666:	82 0f       	add	r24, r18
 668:	93 1f       	adc	r25, r19
 66a:	9c 83       	std	Y+4, r25	; 0x04
 66c:	8b 83       	std	Y+3, r24	; 0x03
            }
 66e:	ce 01       	movw	r24, r28
 670:	05 96       	adiw	r24, 0x05	; 5
 672:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>

size_t WiFiServer::write(const uint8_t *buffer, size_t size)
{
	size_t n = 0;

    for (int sock = 0; sock < MAX_SOCK_NUM; sock++)
 676:	89 81       	ldd	r24, Y+1	; 0x01
 678:	9a 81       	ldd	r25, Y+2	; 0x02
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	9a 83       	std	Y+2, r25	; 0x02
 67e:	89 83       	std	Y+1, r24	; 0x01
 680:	89 81       	ldd	r24, Y+1	; 0x01
 682:	9a 81       	ldd	r25, Y+2	; 0x02
 684:	84 30       	cpi	r24, 0x04	; 4
 686:	91 05       	cpc	r25, r1
 688:	04 f4       	brge	.+0      	; 0x68a <_ZN10WiFiServer5writeEPKhj+0xc2>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <_ZN10WiFiServer5writeEPKhj+0xc4>
            {                
                n+=client.write(buffer, size);
            }
        }
    }
    return n;
 68c:	8b 81       	ldd	r24, Y+3	; 0x03
 68e:	9c 81       	ldd	r25, Y+4	; 0x04
}
 690:	6a 96       	adiw	r28, 0x1a	; 26
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	f8 94       	cli
 696:	de bf       	out	0x3e, r29	; 62
 698:	0f be       	out	0x3f, r0	; 63
 69a:	cd bf       	out	0x3d, r28	; 61
 69c:	cf 91       	pop	r28
 69e:	df 91       	pop	r29
 6a0:	08 95       	ret

000006a2 <_ZN10WiFiServer6statusEv>:
    }

    return WiFiClient(255);
}

uint8_t WiFiServer::status() {
 6a2:	df 93       	push	r29
 6a4:	cf 93       	push	r28
 6a6:	00 d0       	rcall	.+0      	; 0x6a8 <_ZN10WiFiServer6statusEv+0x6>
 6a8:	cd b7       	in	r28, 0x3d	; 61
 6aa:	de b7       	in	r29, 0x3e	; 62
 6ac:	9a 83       	std	Y+2, r25	; 0x02
 6ae:	89 83       	std	Y+1, r24	; 0x01
    return ServerDrv::getServerState(0);
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	cf 91       	pop	r28
 6bc:	df 91       	pop	r29
 6be:	08 95       	ret

000006c0 <_ZN10WiFiServer9availableEPh>:
        WiFiClass::_server_port[_sock] = _port;
        WiFiClass::_state[_sock] = _sock;
    }
}

WiFiClient WiFiServer::available(byte* status)
 6c0:	df 93       	push	r29
 6c2:	cf 93       	push	r28
 6c4:	cd b7       	in	r28, 0x3d	; 61
 6c6:	de b7       	in	r29, 0x3e	; 62
 6c8:	a1 97       	sbiw	r28, 0x21	; 33
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	f8 94       	cli
 6ce:	de bf       	out	0x3e, r29	; 62
 6d0:	0f be       	out	0x3f, r0	; 63
 6d2:	cd bf       	out	0x3d, r28	; 61
 6d4:	99 a3       	std	Y+33, r25	; 0x21
 6d6:	88 a3       	std	Y+32, r24	; 0x20
 6d8:	7f 8b       	std	Y+23, r23	; 0x17
 6da:	6e 8b       	std	Y+22, r22	; 0x16
 6dc:	59 8f       	std	Y+25, r21	; 0x19
 6de:	48 8f       	std	Y+24, r20	; 0x18
{
	static int cycle_server_down = 0;
	const int TH_SERVER_DOWN = 50;
 6e0:	82 e3       	ldi	r24, 0x32	; 50
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	9e 83       	std	Y+6, r25	; 0x06
 6e6:	8d 83       	std	Y+5, r24	; 0x05

    for (int sock = 0; sock < MAX_SOCK_NUM; sock++)
 6e8:	1c 82       	std	Y+4, r1	; 0x04
 6ea:	1b 82       	std	Y+3, r1	; 0x03
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <_ZN10WiFiServer9availableEPh+0x2e>
    {
        if (WiFiClass::_server_port[sock] == _port)
 6ee:	8b 81       	ldd	r24, Y+3	; 0x03
 6f0:	9c 81       	ldd	r25, Y+4	; 0x04
 6f2:	88 0f       	add	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	fc 01       	movw	r30, r24
 6f8:	e0 50       	subi	r30, 0x00	; 0
 6fa:	f0 40       	sbci	r31, 0x00	; 0
 6fc:	20 81       	ld	r18, Z
 6fe:	31 81       	ldd	r19, Z+1	; 0x01
 700:	ee 89       	ldd	r30, Y+22	; 0x16
 702:	ff 89       	ldd	r31, Y+23	; 0x17
 704:	84 81       	ldd	r24, Z+4	; 0x04
 706:	95 81       	ldd	r25, Z+5	; 0x05
 708:	28 17       	cp	r18, r24
 70a:	39 07       	cpc	r19, r25
 70c:	01 f0       	breq	.+0      	; 0x70e <_ZN10WiFiServer9availableEPh+0x4e>
 70e:	00 c0       	rjmp	.+0      	; 0x710 <_ZN10WiFiServer9availableEPh+0x50>
        {
        	WiFiClient client(sock);
 710:	2b 81       	ldd	r18, Y+3	; 0x03
 712:	ce 01       	movw	r24, r28
 714:	07 96       	adiw	r24, 0x07	; 7
 716:	62 2f       	mov	r22, r18
 718:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
            uint8_t _status = client.status();
 71c:	ce 01       	movw	r24, r28
 71e:	07 96       	adiw	r24, 0x07	; 7
 720:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 724:	8a 83       	std	Y+2, r24	; 0x02
            uint8_t _ser_status = this->status();
 726:	8e 89       	ldd	r24, Y+22	; 0x16
 728:	9f 89       	ldd	r25, Y+23	; 0x17
 72a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 72e:	89 83       	std	Y+1, r24	; 0x01

            if (status != NULL)
 730:	88 8d       	ldd	r24, Y+24	; 0x18
 732:	99 8d       	ldd	r25, Y+25	; 0x19
 734:	00 97       	sbiw	r24, 0x00	; 0
 736:	01 f0       	breq	.+0      	; 0x738 <_ZN10WiFiServer9availableEPh+0x78>
            	*status = _status;
 738:	e8 8d       	ldd	r30, Y+24	; 0x18
 73a:	f9 8d       	ldd	r31, Y+25	; 0x19
 73c:	8a 81       	ldd	r24, Y+2	; 0x02
 73e:	80 83       	st	Z, r24

            //server not in listen state, restart it
            if ((_ser_status == 0)&&(cycle_server_down++ > TH_SERVER_DOWN))
 740:	89 81       	ldd	r24, Y+1	; 0x01
 742:	88 23       	and	r24, r24
 744:	01 f4       	brne	.+0      	; 0x746 <_ZN10WiFiServer9availableEPh+0x86>
 746:	80 91 00 00 	lds	r24, 0x0000
 74a:	90 91 00 00 	lds	r25, 0x0000
 74e:	9e 8f       	std	Y+30, r25	; 0x1e
 750:	8d 8f       	std	Y+29, r24	; 0x1d
 752:	1c 8e       	std	Y+28, r1	; 0x1c
 754:	8d 8d       	ldd	r24, Y+29	; 0x1d
 756:	9e 8d       	ldd	r25, Y+30	; 0x1e
 758:	83 33       	cpi	r24, 0x33	; 51
 75a:	91 05       	cpc	r25, r1
 75c:	04 f0       	brlt	.+0      	; 0x75e <_ZN10WiFiServer9availableEPh+0x9e>
 75e:	91 e0       	ldi	r25, 0x01	; 1
 760:	9c 8f       	std	Y+28, r25	; 0x1c
 762:	8d 8d       	ldd	r24, Y+29	; 0x1d
 764:	9e 8d       	ldd	r25, Y+30	; 0x1e
 766:	01 96       	adiw	r24, 0x01	; 1
 768:	90 93 00 00 	sts	0x0000, r25
 76c:	80 93 00 00 	sts	0x0000, r24
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	9c 8d       	ldd	r25, Y+28	; 0x1c
 774:	89 27       	eor	r24, r25
 776:	88 23       	and	r24, r24
 778:	01 f4       	brne	.+0      	; 0x77a <_ZN10WiFiServer9availableEPh+0xba>
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	8f 8f       	std	Y+31, r24	; 0x1f
 77e:	00 c0       	rjmp	.+0      	; 0x780 <_ZN10WiFiServer9availableEPh+0xc0>
 780:	1f 8e       	std	Y+31, r1	; 0x1f
 782:	8f 8d       	ldd	r24, Y+31	; 0x1f
 784:	88 23       	and	r24, r24
 786:	01 f0       	breq	.+0      	; 0x788 <_ZN10WiFiServer9availableEPh+0xc8>
            {
            	ServerDrv::startServer(_port, sock);
 788:	ee 89       	ldd	r30, Y+22	; 0x16
 78a:	ff 89       	ldd	r31, Y+23	; 0x17
 78c:	84 81       	ldd	r24, Z+4	; 0x04
 78e:	95 81       	ldd	r25, Z+5	; 0x05
 790:	2b 81       	ldd	r18, Y+3	; 0x03
 792:	62 2f       	mov	r22, r18
 794:	40 e0       	ldi	r20, 0x00	; 0
 796:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
            	cycle_server_down = 0;
 79a:	10 92 00 00 	sts	0x0000, r1
 79e:	10 92 00 00 	sts	0x0000, r1
            }

            if (_status == ESTABLISHED)
 7a2:	8a 81       	ldd	r24, Y+2	; 0x02
 7a4:	84 30       	cpi	r24, 0x04	; 4
 7a6:	01 f4       	brne	.+0      	; 0x7a8 <_ZN10WiFiServer9availableEPh+0xe8>
            {                
                return client;  //TODO 
 7a8:	88 a1       	ldd	r24, Y+32	; 0x20
 7aa:	99 a1       	ldd	r25, Y+33	; 0x21
 7ac:	9e 01       	movw	r18, r28
 7ae:	29 5f       	subi	r18, 0xF9	; 249
 7b0:	3f 4f       	sbci	r19, 0xFF	; 255
 7b2:	b9 01       	movw	r22, r18
 7b4:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 7b8:	1b 8e       	std	Y+27, r1	; 0x1b
 7ba:	1a 8e       	std	Y+26, r1	; 0x1a
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <_ZN10WiFiServer9availableEPh+0xfe>
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	9b 8f       	std	Y+27, r25	; 0x1b
 7c4:	8a 8f       	std	Y+26, r24	; 0x1a
            }
 7c6:	ce 01       	movw	r24, r28
 7c8:	07 96       	adiw	r24, 0x07	; 7
 7ca:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 7ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
 7d0:	9b 8d       	ldd	r25, Y+27	; 0x1b
 7d2:	81 30       	cpi	r24, 0x01	; 1
 7d4:	91 05       	cpc	r25, r1
 7d6:	01 f4       	brne	.+0      	; 0x7d8 <_ZN10WiFiServer9availableEPh+0x118>
WiFiClient WiFiServer::available(byte* status)
{
	static int cycle_server_down = 0;
	const int TH_SERVER_DOWN = 50;

    for (int sock = 0; sock < MAX_SOCK_NUM; sock++)
 7d8:	8b 81       	ldd	r24, Y+3	; 0x03
 7da:	9c 81       	ldd	r25, Y+4	; 0x04
 7dc:	01 96       	adiw	r24, 0x01	; 1
 7de:	9c 83       	std	Y+4, r25	; 0x04
 7e0:	8b 83       	std	Y+3, r24	; 0x03
 7e2:	8b 81       	ldd	r24, Y+3	; 0x03
 7e4:	9c 81       	ldd	r25, Y+4	; 0x04
 7e6:	84 30       	cpi	r24, 0x04	; 4
 7e8:	91 05       	cpc	r25, r1
 7ea:	04 f4       	brge	.+0      	; 0x7ec <_ZN10WiFiServer9availableEPh+0x12c>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <_ZN10WiFiServer9availableEPh+0x12e>
                return client;  //TODO 
            }
        }
    }

    return WiFiClient(255);
 7ee:	88 a1       	ldd	r24, Y+32	; 0x20
 7f0:	99 a1       	ldd	r25, Y+33	; 0x21
 7f2:	6f ef       	ldi	r22, 0xFF	; 255
 7f4:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 7f8:	88 a1       	ldd	r24, Y+32	; 0x20
 7fa:	99 a1       	ldd	r25, Y+33	; 0x21
 7fc:	88 a1       	ldd	r24, Y+32	; 0x20
 7fe:	99 a1       	ldd	r25, Y+33	; 0x21
 800:	a1 96       	adiw	r28, 0x21	; 33
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	f8 94       	cli
 806:	de bf       	out	0x3e, r29	; 62
 808:	0f be       	out	0x3f, r0	; 63
 80a:	cd bf       	out	0x3d, r28	; 61
 80c:	cf 91       	pop	r28
 80e:	df 91       	pop	r29
 810:	08 95       	ret

00000812 <_ZN10WiFiServer5beginEv>:
WiFiServer::WiFiServer(uint16_t port)
{
    _port = port;
}

void WiFiServer::begin()
 812:	df 93       	push	r29
 814:	cf 93       	push	r28
 816:	00 d0       	rcall	.+0      	; 0x818 <_ZN10WiFiServer5beginEv+0x6>
 818:	0f 92       	push	r0
 81a:	cd b7       	in	r28, 0x3d	; 61
 81c:	de b7       	in	r29, 0x3e	; 62
 81e:	9b 83       	std	Y+3, r25	; 0x03
 820:	8a 83       	std	Y+2, r24	; 0x02
{
    uint8_t _sock = WiFiClass::getSocket();
 822:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 826:	89 83       	std	Y+1, r24	; 0x01
    if (_sock != NO_SOCKET_AVAIL)
 828:	89 81       	ldd	r24, Y+1	; 0x01
 82a:	8f 3f       	cpi	r24, 0xFF	; 255
 82c:	01 f0       	breq	.+0      	; 0x82e <_ZN10WiFiServer5beginEv+0x1c>
    {
        ServerDrv::startServer(_port, _sock);
 82e:	ea 81       	ldd	r30, Y+2	; 0x02
 830:	fb 81       	ldd	r31, Y+3	; 0x03
 832:	84 81       	ldd	r24, Z+4	; 0x04
 834:	95 81       	ldd	r25, Z+5	; 0x05
 836:	69 81       	ldd	r22, Y+1	; 0x01
 838:	40 e0       	ldi	r20, 0x00	; 0
 83a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
        WiFiClass::_server_port[_sock] = _port;
 83e:	89 81       	ldd	r24, Y+1	; 0x01
 840:	88 2f       	mov	r24, r24
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	ea 81       	ldd	r30, Y+2	; 0x02
 846:	fb 81       	ldd	r31, Y+3	; 0x03
 848:	24 81       	ldd	r18, Z+4	; 0x04
 84a:	35 81       	ldd	r19, Z+5	; 0x05
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	fc 01       	movw	r30, r24
 852:	e0 50       	subi	r30, 0x00	; 0
 854:	f0 40       	sbci	r31, 0x00	; 0
 856:	31 83       	std	Z+1, r19	; 0x01
 858:	20 83       	st	Z, r18
        WiFiClass::_state[_sock] = _sock;
 85a:	89 81       	ldd	r24, Y+1	; 0x01
 85c:	28 2f       	mov	r18, r24
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	89 81       	ldd	r24, Y+1	; 0x01
 862:	48 2f       	mov	r20, r24
 864:	50 e0       	ldi	r21, 0x00	; 0
 866:	c9 01       	movw	r24, r18
 868:	88 0f       	add	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	fc 01       	movw	r30, r24
 86e:	e0 50       	subi	r30, 0x00	; 0
 870:	f0 40       	sbci	r31, 0x00	; 0
 872:	51 83       	std	Z+1, r21	; 0x01
 874:	40 83       	st	Z, r20
    }
}
 876:	0f 90       	pop	r0
 878:	0f 90       	pop	r0
 87a:	0f 90       	pop	r0
 87c:	cf 91       	pop	r28
 87e:	df 91       	pop	r29
 880:	08 95       	ret

WiFiUdp.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a7e  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000006e  00000000  00000000  00000ab2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          00000006  00000000  00000000  00000b20  2**0
                  ALLOC
  3 .stab         00001374  00000000  00000000  00000b20  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000022da  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .dtors        00000002  00000000  00000000  0000416e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  6 .ctors        00000002  00000000  00000000  00004170  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text:

00000000 <_ZN9IPAddresscvmEv>:
    IPAddress(const uint8_t *address);
    virtual ~IPAddress();

    // Overloaded cast operator to allow IPAddress objects to be used where a pointer
    // to a four-byte uint8_t array is expected
    operator uint32_t() { return *((uint32_t*)_address); };
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddresscvmEv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	02 96       	adiw	r24, 0x02	; 2
  14:	fc 01       	movw	r30, r24
  16:	80 81       	ld	r24, Z
  18:	91 81       	ldd	r25, Z+1	; 0x01
  1a:	a2 81       	ldd	r26, Z+2	; 0x02
  1c:	b3 81       	ldd	r27, Z+3	; 0x03
  1e:	bc 01       	movw	r22, r24
  20:	cd 01       	movw	r24, r26
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

0000002c <_ZN5PrintC2Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
  2c:	df 93       	push	r29
  2e:	cf 93       	push	r28
  30:	00 d0       	rcall	.+0      	; 0x32 <_ZN5PrintC2Ev+0x6>
  32:	cd b7       	in	r28, 0x3d	; 61
  34:	de b7       	in	r29, 0x3e	; 62
  36:	9a 83       	std	Y+2, r25	; 0x02
  38:	89 83       	std	Y+1, r24	; 0x01
  3a:	e9 81       	ldd	r30, Y+1	; 0x01
  3c:	fa 81       	ldd	r31, Y+2	; 0x02
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	91 83       	std	Z+1, r25	; 0x01
  44:	80 83       	st	Z, r24
  46:	e9 81       	ldd	r30, Y+1	; 0x01
  48:	fa 81       	ldd	r31, Y+2	; 0x02
  4a:	13 82       	std	Z+3, r1	; 0x03
  4c:	12 82       	std	Z+2, r1	; 0x02
  4e:	0f 90       	pop	r0
  50:	0f 90       	pop	r0
  52:	cf 91       	pop	r28
  54:	df 91       	pop	r29
  56:	08 95       	ret

00000058 <_ZN6StreamC2Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
  58:	df 93       	push	r29
  5a:	cf 93       	push	r28
  5c:	00 d0       	rcall	.+0      	; 0x5e <_ZN6StreamC2Ev+0x6>
  5e:	cd b7       	in	r28, 0x3d	; 61
  60:	de b7       	in	r29, 0x3e	; 62
  62:	9a 83       	std	Y+2, r25	; 0x02
  64:	89 83       	std	Y+1, r24	; 0x01
  66:	89 81       	ldd	r24, Y+1	; 0x01
  68:	9a 81       	ldd	r25, Y+2	; 0x02
  6a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
  6e:	e9 81       	ldd	r30, Y+1	; 0x01
  70:	fa 81       	ldd	r31, Y+2	; 0x02
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	91 83       	std	Z+1, r25	; 0x01
  78:	80 83       	st	Z, r24
  7a:	e9 81       	ldd	r30, Y+1	; 0x01
  7c:	fa 81       	ldd	r31, Y+2	; 0x02
  7e:	88 ee       	ldi	r24, 0xE8	; 232
  80:	93 e0       	ldi	r25, 0x03	; 3
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	84 83       	std	Z+4, r24	; 0x04
  88:	95 83       	std	Z+5, r25	; 0x05
  8a:	a6 83       	std	Z+6, r26	; 0x06
  8c:	b7 83       	std	Z+7, r27	; 0x07
  8e:	0f 90       	pop	r0
  90:	0f 90       	pop	r0
  92:	cf 91       	pop	r28
  94:	df 91       	pop	r29
  96:	08 95       	ret

00000098 <_ZN7WiFiUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
  98:	df 93       	push	r29
  9a:	cf 93       	push	r28
  9c:	00 d0       	rcall	.+0      	; 0x9e <_ZN7WiFiUDP4readEPcj+0x6>
  9e:	00 d0       	rcall	.+0      	; 0xa0 <_ZN7WiFiUDP4readEPcj+0x8>
  a0:	00 d0       	rcall	.+0      	; 0xa2 <_ZN7WiFiUDP4readEPcj+0xa>
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	9a 83       	std	Y+2, r25	; 0x02
  a8:	89 83       	std	Y+1, r24	; 0x01
  aa:	7c 83       	std	Y+4, r23	; 0x04
  ac:	6b 83       	std	Y+3, r22	; 0x03
  ae:	5e 83       	std	Y+6, r21	; 0x06
  b0:	4d 83       	std	Y+5, r20	; 0x05
  b2:	e9 81       	ldd	r30, Y+1	; 0x01
  b4:	fa 81       	ldd	r31, Y+2	; 0x02
  b6:	80 81       	ld	r24, Z
  b8:	91 81       	ldd	r25, Z+1	; 0x01
  ba:	fc 01       	movw	r30, r24
  bc:	7c 96       	adiw	r30, 0x1c	; 28
  be:	01 90       	ld	r0, Z+
  c0:	f0 81       	ld	r31, Z
  c2:	e0 2d       	mov	r30, r0
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	9a 81       	ldd	r25, Y+2	; 0x02
  c8:	2b 81       	ldd	r18, Y+3	; 0x03
  ca:	3c 81       	ldd	r19, Y+4	; 0x04
  cc:	4d 81       	ldd	r20, Y+5	; 0x05
  ce:	5e 81       	ldd	r21, Y+6	; 0x06
  d0:	b9 01       	movw	r22, r18
  d2:	09 95       	icall
  d4:	26 96       	adiw	r28, 0x06	; 6
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	de bf       	out	0x3e, r29	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	cd bf       	out	0x3d, r28	; 61
  e0:	cf 91       	pop	r28
  e2:	df 91       	pop	r29
  e4:	08 95       	ret

000000e6 <_ZN3UDPC2Ev>:
#define udp_h

#include <Stream.h>
#include <IPAddress.h>

class UDP : public Stream {
  e6:	df 93       	push	r29
  e8:	cf 93       	push	r28
  ea:	00 d0       	rcall	.+0      	; 0xec <_ZN3UDPC2Ev+0x6>
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
  f0:	9a 83       	std	Y+2, r25	; 0x02
  f2:	89 83       	std	Y+1, r24	; 0x01
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	9a 81       	ldd	r25, Y+2	; 0x02
  f8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
  fc:	e9 81       	ldd	r30, Y+1	; 0x01
  fe:	fa 81       	ldd	r31, Y+2	; 0x02
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	91 83       	std	Z+1, r25	; 0x01
 106:	80 83       	st	Z, r24
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	cf 91       	pop	r28
 10e:	df 91       	pop	r29
 110:	08 95       	ret

00000112 <_ZN7WiFiUDPC2Ev>:
#include "WiFiClient.h"
#include "WiFiServer.h"


/* Constructor */
WiFiUDP::WiFiUDP()
 112:	df 93       	push	r29
 114:	cf 93       	push	r28
 116:	00 d0       	rcall	.+0      	; 0x118 <_ZN7WiFiUDPC2Ev+0x6>
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	9a 83       	std	Y+2, r25	; 0x02
 11e:	89 83       	std	Y+1, r24	; 0x01
	: _sock(NO_SOCKET_AVAIL)
	, _port(0)
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	9a 81       	ldd	r25, Y+2	; 0x02
 124:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 128:	e9 81       	ldd	r30, Y+1	; 0x01
 12a:	fa 81       	ldd	r31, Y+2	; 0x02
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	91 83       	std	Z+1, r25	; 0x01
 132:	80 83       	st	Z, r24
 134:	e9 81       	ldd	r30, Y+1	; 0x01
 136:	fa 81       	ldd	r31, Y+2	; 0x02
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	84 87       	std	Z+12, r24	; 0x0c
 13c:	e9 81       	ldd	r30, Y+1	; 0x01
 13e:	fa 81       	ldd	r31, Y+2	; 0x02
 140:	16 86       	std	Z+14, r1	; 0x0e
 142:	15 86       	std	Z+13, r1	; 0x0d
{}
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	cf 91       	pop	r28
 14a:	df 91       	pop	r29
 14c:	08 95       	ret

0000014e <_ZN7WiFiUDPC1Ev>:
#include "WiFiClient.h"
#include "WiFiServer.h"


/* Constructor */
WiFiUDP::WiFiUDP()
 14e:	df 93       	push	r29
 150:	cf 93       	push	r28
 152:	00 d0       	rcall	.+0      	; 0x154 <_ZN7WiFiUDPC1Ev+0x6>
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	9a 83       	std	Y+2, r25	; 0x02
 15a:	89 83       	std	Y+1, r24	; 0x01
	: _sock(NO_SOCKET_AVAIL)
	, _port(0)
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	9a 81       	ldd	r25, Y+2	; 0x02
 160:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 164:	e9 81       	ldd	r30, Y+1	; 0x01
 166:	fa 81       	ldd	r31, Y+2	; 0x02
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	91 83       	std	Z+1, r25	; 0x01
 16e:	80 83       	st	Z, r24
 170:	e9 81       	ldd	r30, Y+1	; 0x01
 172:	fa 81       	ldd	r31, Y+2	; 0x02
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	84 87       	std	Z+12, r24	; 0x0c
 178:	e9 81       	ldd	r30, Y+1	; 0x01
 17a:	fa 81       	ldd	r31, Y+2	; 0x02
 17c:	16 86       	std	Z+14, r1	; 0x0e
 17e:	15 86       	std	Z+13, r1	; 0x0d
{}
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	cf 91       	pop	r28
 186:	df 91       	pop	r29
 188:	08 95       	ret

0000018a <_ZN9PrintableC2ERKS_>:
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
*/

class Printable
{
 18a:	df 93       	push	r29
 18c:	cf 93       	push	r28
 18e:	00 d0       	rcall	.+0      	; 0x190 <_ZN9PrintableC2ERKS_+0x6>
 190:	00 d0       	rcall	.+0      	; 0x192 <_ZN9PrintableC2ERKS_+0x8>
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	9a 83       	std	Y+2, r25	; 0x02
 198:	89 83       	std	Y+1, r24	; 0x01
 19a:	7c 83       	std	Y+4, r23	; 0x04
 19c:	6b 83       	std	Y+3, r22	; 0x03
 19e:	e9 81       	ldd	r30, Y+1	; 0x01
 1a0:	fa 81       	ldd	r31, Y+2	; 0x02
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	91 83       	std	Z+1, r25	; 0x01
 1a8:	80 83       	st	Z, r24
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	cf 91       	pop	r28
 1b4:	df 91       	pop	r29
 1b6:	08 95       	ret

000001b8 <_ZN9IPAddressC1ERKS_>:

#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
 1b8:	df 93       	push	r29
 1ba:	cf 93       	push	r28
 1bc:	00 d0       	rcall	.+0      	; 0x1be <_ZN9IPAddressC1ERKS_+0x6>
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <_ZN9IPAddressC1ERKS_+0x8>
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 1c4:	9a 83       	std	Y+2, r25	; 0x02
 1c6:	89 83       	std	Y+1, r24	; 0x01
 1c8:	7c 83       	std	Y+4, r23	; 0x04
 1ca:	6b 83       	std	Y+3, r22	; 0x03
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	9a 81       	ldd	r25, Y+2	; 0x02
 1d0:	2b 81       	ldd	r18, Y+3	; 0x03
 1d2:	3c 81       	ldd	r19, Y+4	; 0x04
 1d4:	b9 01       	movw	r22, r18
 1d6:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 1da:	e9 81       	ldd	r30, Y+1	; 0x01
 1dc:	fa 81       	ldd	r31, Y+2	; 0x02
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	91 83       	std	Z+1, r25	; 0x01
 1e4:	80 83       	st	Z, r24
 1e6:	eb 81       	ldd	r30, Y+3	; 0x03
 1e8:	fc 81       	ldd	r31, Y+4	; 0x04
 1ea:	82 81       	ldd	r24, Z+2	; 0x02
 1ec:	93 81       	ldd	r25, Z+3	; 0x03
 1ee:	a4 81       	ldd	r26, Z+4	; 0x04
 1f0:	b5 81       	ldd	r27, Z+5	; 0x05
 1f2:	e9 81       	ldd	r30, Y+1	; 0x01
 1f4:	fa 81       	ldd	r31, Y+2	; 0x02
 1f6:	82 83       	std	Z+2, r24	; 0x02
 1f8:	93 83       	std	Z+3, r25	; 0x03
 1fa:	a4 83       	std	Z+4, r26	; 0x04
 1fc:	b5 83       	std	Z+5, r27	; 0x05
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	cf 91       	pop	r28
 208:	df 91       	pop	r29
 20a:	08 95       	ret

0000020c <_ZN7WiFiUDP5writeEh>:
int WiFiUDP::endPacket()
{
	return ServerDrv::sendUdpData(_sock);
}

size_t WiFiUDP::write(uint8_t byte)
 20c:	df 93       	push	r29
 20e:	cf 93       	push	r28
 210:	00 d0       	rcall	.+0      	; 0x212 <_ZN7WiFiUDP5writeEh+0x6>
 212:	0f 92       	push	r0
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	9a 83       	std	Y+2, r25	; 0x02
 21a:	89 83       	std	Y+1, r24	; 0x01
 21c:	6b 83       	std	Y+3, r22	; 0x03
{
  return write(&byte, 1);
 21e:	e9 81       	ldd	r30, Y+1	; 0x01
 220:	fa 81       	ldd	r31, Y+2	; 0x02
 222:	80 81       	ld	r24, Z
 224:	91 81       	ldd	r25, Z+1	; 0x01
 226:	fc 01       	movw	r30, r24
 228:	36 96       	adiw	r30, 0x06	; 6
 22a:	01 90       	ld	r0, Z+
 22c:	f0 81       	ld	r31, Z
 22e:	e0 2d       	mov	r30, r0
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	9a 81       	ldd	r25, Y+2	; 0x02
 234:	9e 01       	movw	r18, r28
 236:	2d 5f       	subi	r18, 0xFD	; 253
 238:	3f 4f       	sbci	r19, 0xFF	; 255
 23a:	b9 01       	movw	r22, r18
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	09 95       	icall
}
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	cf 91       	pop	r28
 24a:	df 91       	pop	r29
 24c:	08 95       	ret

0000024e <_ZN7WiFiUDP11parsePacketEv>:
{
	ServerDrv::insertDataBuf(_sock, buffer, size);
	return size;
}

int WiFiUDP::parsePacket()
 24e:	df 93       	push	r29
 250:	cf 93       	push	r28
 252:	00 d0       	rcall	.+0      	; 0x254 <_ZN7WiFiUDP11parsePacketEv+0x6>
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
 258:	9a 83       	std	Y+2, r25	; 0x02
 25a:	89 83       	std	Y+1, r24	; 0x01
{
	return available();
 25c:	e9 81       	ldd	r30, Y+1	; 0x01
 25e:	fa 81       	ldd	r31, Y+2	; 0x02
 260:	80 81       	ld	r24, Z
 262:	91 81       	ldd	r25, Z+1	; 0x01
 264:	fc 01       	movw	r30, r24
 266:	38 96       	adiw	r30, 0x08	; 8
 268:	01 90       	ld	r0, Z+
 26a:	f0 81       	ld	r31, Z
 26c:	e0 2d       	mov	r30, r0
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	9a 81       	ldd	r25, Y+2	; 0x02
 272:	09 95       	icall
}
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	cf 91       	pop	r28
 27a:	df 91       	pop	r29
 27c:	08 95       	ret

0000027e <_ZN7WiFiUDP5flushEv>:

  ServerDrv::getData(_sock, &b, 1);
  return b;
}

void WiFiUDP::flush()
 27e:	df 93       	push	r29
 280:	cf 93       	push	r28
 282:	00 d0       	rcall	.+0      	; 0x284 <_ZN7WiFiUDP5flushEv+0x6>
 284:	0f 92       	push	r0
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	9a 83       	std	Y+2, r25	; 0x02
 28c:	89 83       	std	Y+1, r24	; 0x01
 28e:	00 c0       	rjmp	.+0      	; 0x290 <_ZN7WiFiUDP5flushEv+0x12>
{
  while (available())
    read();
 290:	e9 81       	ldd	r30, Y+1	; 0x01
 292:	fa 81       	ldd	r31, Y+2	; 0x02
 294:	80 81       	ld	r24, Z
 296:	91 81       	ldd	r25, Z+1	; 0x01
 298:	fc 01       	movw	r30, r24
 29a:	3a 96       	adiw	r30, 0x0a	; 10
 29c:	01 90       	ld	r0, Z+
 29e:	f0 81       	ld	r31, Z
 2a0:	e0 2d       	mov	r30, r0
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	9a 81       	ldd	r25, Y+2	; 0x02
 2a6:	09 95       	icall
  return b;
}

void WiFiUDP::flush()
{
  while (available())
 2a8:	e9 81       	ldd	r30, Y+1	; 0x01
 2aa:	fa 81       	ldd	r31, Y+2	; 0x02
 2ac:	80 81       	ld	r24, Z
 2ae:	91 81       	ldd	r25, Z+1	; 0x01
 2b0:	fc 01       	movw	r30, r24
 2b2:	38 96       	adiw	r30, 0x08	; 8
 2b4:	01 90       	ld	r0, Z+
 2b6:	f0 81       	ld	r31, Z
 2b8:	e0 2d       	mov	r30, r0
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	9a 81       	ldd	r25, Y+2	; 0x02
 2be:	09 95       	icall
 2c0:	1b 82       	std	Y+3, r1	; 0x03
 2c2:	00 97       	sbiw	r24, 0x00	; 0
 2c4:	01 f0       	breq	.+0      	; 0x2c6 <_ZN7WiFiUDP5flushEv+0x48>
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	8b 83       	std	Y+3, r24	; 0x03
 2ca:	8b 81       	ldd	r24, Y+3	; 0x03
 2cc:	88 23       	and	r24, r24
 2ce:	01 f4       	brne	.+0      	; 0x2d0 <_ZN7WiFiUDP5flushEv+0x52>
    read();
}
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	cf 91       	pop	r28
 2d8:	df 91       	pop	r29
 2da:	08 95       	ret

000002dc <_ZN6StreamD2Ev>:
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
{
 2dc:	df 93       	push	r29
 2de:	cf 93       	push	r28
 2e0:	00 d0       	rcall	.+0      	; 0x2e2 <_ZN6StreamD2Ev+0x6>
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
 2e6:	9a 83       	std	Y+2, r25	; 0x02
 2e8:	89 83       	std	Y+1, r24	; 0x01
 2ea:	e9 81       	ldd	r30, Y+1	; 0x01
 2ec:	fa 81       	ldd	r31, Y+2	; 0x02
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	91 83       	std	Z+1, r25	; 0x01
 2f4:	80 83       	st	Z, r24
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	9a 81       	ldd	r25, Y+2	; 0x02
 2fa:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	88 23       	and	r24, r24
 304:	01 f0       	breq	.+0      	; 0x306 <_ZN6StreamD2Ev+0x2a>
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	9a 81       	ldd	r25, Y+2	; 0x02
 30a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	cf 91       	pop	r28
 314:	df 91       	pop	r29
 316:	08 95       	ret

00000318 <_ZN3UDPD2Ev>:
 318:	df 93       	push	r29
 31a:	cf 93       	push	r28
 31c:	00 d0       	rcall	.+0      	; 0x31e <_ZN3UDPD2Ev+0x6>
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	9a 83       	std	Y+2, r25	; 0x02
 324:	89 83       	std	Y+1, r24	; 0x01
 326:	e9 81       	ldd	r30, Y+1	; 0x01
 328:	fa 81       	ldd	r31, Y+2	; 0x02
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	91 83       	std	Z+1, r25	; 0x01
 330:	80 83       	st	Z, r24
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	9a 81       	ldd	r25, Y+2	; 0x02
 336:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	88 23       	and	r24, r24
 340:	01 f0       	breq	.+0      	; 0x342 <_ZN3UDPD2Ev+0x2a>
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	9a 81       	ldd	r25, Y+2	; 0x02
 346:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	cf 91       	pop	r28
 350:	df 91       	pop	r29
 352:	08 95       	ret

00000354 <_ZN7WiFiUDPD0Ev>:

#include <Udp.h>

#define UDP_TX_PACKET_MAX_SIZE 24

class WiFiUDP : public UDP {
 354:	df 93       	push	r29
 356:	cf 93       	push	r28
 358:	00 d0       	rcall	.+0      	; 0x35a <_ZN7WiFiUDPD0Ev+0x6>
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	9a 83       	std	Y+2, r25	; 0x02
 360:	89 83       	std	Y+1, r24	; 0x01
 362:	e9 81       	ldd	r30, Y+1	; 0x01
 364:	fa 81       	ldd	r31, Y+2	; 0x02
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	91 83       	std	Z+1, r25	; 0x01
 36c:	80 83       	st	Z, r24
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	9a 81       	ldd	r25, Y+2	; 0x02
 372:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	88 23       	and	r24, r24
 37c:	01 f0       	breq	.+0      	; 0x37e <_ZN7WiFiUDPD0Ev+0x2a>
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	9a 81       	ldd	r25, Y+2	; 0x02
 382:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	cf 91       	pop	r28
 38c:	df 91       	pop	r29
 38e:	08 95       	ret

00000390 <_ZN7WiFiUDPD1Ev>:
 390:	df 93       	push	r29
 392:	cf 93       	push	r28
 394:	00 d0       	rcall	.+0      	; 0x396 <_ZN7WiFiUDPD1Ev+0x6>
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	9a 83       	std	Y+2, r25	; 0x02
 39c:	89 83       	std	Y+1, r24	; 0x01
 39e:	e9 81       	ldd	r30, Y+1	; 0x01
 3a0:	fa 81       	ldd	r31, Y+2	; 0x02
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	91 83       	std	Z+1, r25	; 0x01
 3a8:	80 83       	st	Z, r24
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	9a 81       	ldd	r25, Y+2	; 0x02
 3ae:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	88 23       	and	r24, r24
 3b8:	01 f0       	breq	.+0      	; 0x3ba <_ZN7WiFiUDPD1Ev+0x2a>
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	9a 81       	ldd	r25, Y+2	; 0x02
 3be:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	cf 91       	pop	r28
 3c8:	df 91       	pop	r29
 3ca:	08 95       	ret

000003cc <_ZN3UDPD0Ev>:
 3cc:	df 93       	push	r29
 3ce:	cf 93       	push	r28
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <_ZN3UDPD0Ev+0x6>
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	9a 83       	std	Y+2, r25	; 0x02
 3d8:	89 83       	std	Y+1, r24	; 0x01
 3da:	e9 81       	ldd	r30, Y+1	; 0x01
 3dc:	fa 81       	ldd	r31, Y+2	; 0x02
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	91 83       	std	Z+1, r25	; 0x01
 3e4:	80 83       	st	Z, r24
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ea:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	88 23       	and	r24, r24
 3f4:	01 f0       	breq	.+0      	; 0x3f6 <_ZN3UDPD0Ev+0x2a>
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	9a 81       	ldd	r25, Y+2	; 0x02
 3fa:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	cf 91       	pop	r28
 404:	df 91       	pop	r29
 406:	08 95       	ret

00000408 <_ZN3UDPD1Ev>:
 408:	df 93       	push	r29
 40a:	cf 93       	push	r28
 40c:	00 d0       	rcall	.+0      	; 0x40e <_ZN3UDPD1Ev+0x6>
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	9a 83       	std	Y+2, r25	; 0x02
 414:	89 83       	std	Y+1, r24	; 0x01
 416:	e9 81       	ldd	r30, Y+1	; 0x01
 418:	fa 81       	ldd	r31, Y+2	; 0x02
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	91 83       	std	Z+1, r25	; 0x01
 420:	80 83       	st	Z, r24
 422:	89 81       	ldd	r24, Y+1	; 0x01
 424:	9a 81       	ldd	r25, Y+2	; 0x02
 426:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	88 23       	and	r24, r24
 430:	01 f0       	breq	.+0      	; 0x432 <_ZN3UDPD1Ev+0x2a>
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	9a 81       	ldd	r25, Y+2	; 0x02
 436:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	cf 91       	pop	r28
 440:	df 91       	pop	r29
 442:	08 95       	ret

00000444 <_ZN6StreamD0Ev>:
 444:	df 93       	push	r29
 446:	cf 93       	push	r28
 448:	00 d0       	rcall	.+0      	; 0x44a <_ZN6StreamD0Ev+0x6>
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
 44e:	9a 83       	std	Y+2, r25	; 0x02
 450:	89 83       	std	Y+1, r24	; 0x01
 452:	e9 81       	ldd	r30, Y+1	; 0x01
 454:	fa 81       	ldd	r31, Y+2	; 0x02
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	91 83       	std	Z+1, r25	; 0x01
 45c:	80 83       	st	Z, r24
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	9a 81       	ldd	r25, Y+2	; 0x02
 462:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	88 23       	and	r24, r24
 46c:	01 f0       	breq	.+0      	; 0x46e <_ZN6StreamD0Ev+0x2a>
 46e:	89 81       	ldd	r24, Y+1	; 0x01
 470:	9a 81       	ldd	r25, Y+2	; 0x02
 472:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	cf 91       	pop	r28
 47c:	df 91       	pop	r29
 47e:	08 95       	ret

00000480 <_ZN6StreamD1Ev>:
 480:	df 93       	push	r29
 482:	cf 93       	push	r28
 484:	00 d0       	rcall	.+0      	; 0x486 <_ZN6StreamD1Ev+0x6>
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	9a 83       	std	Y+2, r25	; 0x02
 48c:	89 83       	std	Y+1, r24	; 0x01
 48e:	e9 81       	ldd	r30, Y+1	; 0x01
 490:	fa 81       	ldd	r31, Y+2	; 0x02
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	91 83       	std	Z+1, r25	; 0x01
 498:	80 83       	st	Z, r24
 49a:	89 81       	ldd	r24, Y+1	; 0x01
 49c:	9a 81       	ldd	r25, Y+2	; 0x02
 49e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	88 23       	and	r24, r24
 4a8:	01 f0       	breq	.+0      	; 0x4aa <_ZN6StreamD1Ev+0x2a>
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
 4ac:	9a 81       	ldd	r25, Y+2	; 0x02
 4ae:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	cf 91       	pop	r28
 4b8:	df 91       	pop	r29
 4ba:	08 95       	ret

000004bc <_Z41__static_initialization_and_destruction_0ii>:
	uint8_t _remotePort[2] = {0};

	WiFiDrv::getRemoteData(_sock, _remoteIp, _remotePort);
	uint16_t port = (_remotePort[0]<<8)+_remotePort[1];
	return port;
}
 4bc:	0f 93       	push	r16
 4be:	df 93       	push	r29
 4c0:	cf 93       	push	r28
 4c2:	00 d0       	rcall	.+0      	; 0x4c4 <_Z41__static_initialization_and_destruction_0ii+0x8>
 4c4:	00 d0       	rcall	.+0      	; 0x4c6 <_Z41__static_initialization_and_destruction_0ii+0xa>
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	9a 83       	std	Y+2, r25	; 0x02
 4cc:	89 83       	std	Y+1, r24	; 0x01
 4ce:	7c 83       	std	Y+4, r23	; 0x04
 4d0:	6b 83       	std	Y+3, r22	; 0x03
 4d2:	89 81       	ldd	r24, Y+1	; 0x01
 4d4:	9a 81       	ldd	r25, Y+2	; 0x02
 4d6:	81 30       	cpi	r24, 0x01	; 1
 4d8:	91 05       	cpc	r25, r1
 4da:	01 f4       	brne	.+0      	; 0x4dc <_Z41__static_initialization_and_destruction_0ii+0x20>
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	9c 81       	ldd	r25, Y+4	; 0x04
 4e0:	2f ef       	ldi	r18, 0xFF	; 255
 4e2:	8f 3f       	cpi	r24, 0xFF	; 255
 4e4:	92 07       	cpc	r25, r18
 4e6:	01 f4       	brne	.+0      	; 0x4e8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	00 e0       	ldi	r16, 0x00	; 0
 4f4:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	9a 81       	ldd	r25, Y+2	; 0x02
 4fc:	00 97       	sbiw	r24, 0x00	; 0
 4fe:	01 f4       	brne	.+0      	; 0x500 <_Z41__static_initialization_and_destruction_0ii+0x44>
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	9c 81       	ldd	r25, Y+4	; 0x04
 504:	2f ef       	ldi	r18, 0xFF	; 255
 506:	8f 3f       	cpi	r24, 0xFF	; 255
 508:	92 07       	cpc	r25, r18
 50a:	01 f4       	brne	.+0      	; 0x50c <_Z41__static_initialization_and_destruction_0ii+0x50>
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
 518:	0f 90       	pop	r0
 51a:	0f 90       	pop	r0
 51c:	cf 91       	pop	r28
 51e:	df 91       	pop	r29
 520:	0f 91       	pop	r16
 522:	08 95       	ret

00000524 <_GLOBAL__D__ZN7WiFiUDPC2Ev>:
 524:	df 93       	push	r29
 526:	cf 93       	push	r28
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	6f ef       	ldi	r22, 0xFF	; 255
 532:	7f ef       	ldi	r23, 0xFF	; 255
 534:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 538:	cf 91       	pop	r28
 53a:	df 91       	pop	r29
 53c:	08 95       	ret

0000053e <_GLOBAL__I__ZN7WiFiUDPC2Ev>:
 53e:	df 93       	push	r29
 540:	cf 93       	push	r28
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	6f ef       	ldi	r22, 0xFF	; 255
 54c:	7f ef       	ldi	r23, 0xFF	; 255
 54e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 552:	cf 91       	pop	r28
 554:	df 91       	pop	r29
 556:	08 95       	ret

00000558 <_ZN7WiFiUDP10remotePortEv>:
	WiFiDrv::getRemoteData(_sock, _remoteIp, _remotePort);
	IPAddress ip(_remoteIp);
	return ip;
}

uint16_t  WiFiUDP::remotePort()
 558:	df 93       	push	r29
 55a:	cf 93       	push	r28
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
 560:	2a 97       	sbiw	r28, 0x0a	; 10
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	f8 94       	cli
 566:	de bf       	out	0x3e, r29	; 62
 568:	0f be       	out	0x3f, r0	; 63
 56a:	cd bf       	out	0x3d, r28	; 61
 56c:	9a 87       	std	Y+10, r25	; 0x0a
 56e:	89 87       	std	Y+9, r24	; 0x09
{
	uint8_t _remoteIp[4] = {0};
 570:	1b 82       	std	Y+3, r1	; 0x03
 572:	1c 82       	std	Y+4, r1	; 0x04
 574:	1d 82       	std	Y+5, r1	; 0x05
 576:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t _remotePort[2] = {0};
 578:	18 86       	std	Y+8, r1	; 0x08
 57a:	1f 82       	std	Y+7, r1	; 0x07

	WiFiDrv::getRemoteData(_sock, _remoteIp, _remotePort);
 57c:	e9 85       	ldd	r30, Y+9	; 0x09
 57e:	fa 85       	ldd	r31, Y+10	; 0x0a
 580:	84 85       	ldd	r24, Z+12	; 0x0c
 582:	9e 01       	movw	r18, r28
 584:	2d 5f       	subi	r18, 0xFD	; 253
 586:	3f 4f       	sbci	r19, 0xFF	; 255
 588:	ae 01       	movw	r20, r28
 58a:	49 5f       	subi	r20, 0xF9	; 249
 58c:	5f 4f       	sbci	r21, 0xFF	; 255
 58e:	b9 01       	movw	r22, r18
 590:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	uint16_t port = (_remotePort[0]<<8)+_remotePort[1];
 594:	8f 81       	ldd	r24, Y+7	; 0x07
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	38 2f       	mov	r19, r24
 59c:	22 27       	eor	r18, r18
 59e:	88 85       	ldd	r24, Y+8	; 0x08
 5a0:	88 2f       	mov	r24, r24
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	82 0f       	add	r24, r18
 5a6:	93 1f       	adc	r25, r19
 5a8:	9a 83       	std	Y+2, r25	; 0x02
 5aa:	89 83       	std	Y+1, r24	; 0x01
	return port;
 5ac:	89 81       	ldd	r24, Y+1	; 0x01
 5ae:	9a 81       	ldd	r25, Y+2	; 0x02
}
 5b0:	2a 96       	adiw	r28, 0x0a	; 10
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	f8 94       	cli
 5b6:	de bf       	out	0x3e, r29	; 62
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	cd bf       	out	0x3d, r28	; 61
 5bc:	cf 91       	pop	r28
 5be:	df 91       	pop	r29
 5c0:	08 95       	ret

000005c2 <_ZN7WiFiUDP8remoteIPEv>:
{
  while (available())
    read();
}

IPAddress  WiFiUDP::remoteIP()
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	df 93       	push	r29
 5c8:	cf 93       	push	r28
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62
 5ce:	2e 97       	sbiw	r28, 0x0e	; 14
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	f8 94       	cli
 5d4:	de bf       	out	0x3e, r29	; 62
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	cd bf       	out	0x3d, r28	; 61
 5da:	8c 01       	movw	r16, r24
 5dc:	7e 87       	std	Y+14, r23	; 0x0e
 5de:	6d 87       	std	Y+13, r22	; 0x0d
{
	uint8_t _remoteIp[4] = {0};
 5e0:	19 82       	std	Y+1, r1	; 0x01
 5e2:	1a 82       	std	Y+2, r1	; 0x02
 5e4:	1b 82       	std	Y+3, r1	; 0x03
 5e6:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t _remotePort[2] = {0};
 5e8:	1e 82       	std	Y+6, r1	; 0x06
 5ea:	1d 82       	std	Y+5, r1	; 0x05

	WiFiDrv::getRemoteData(_sock, _remoteIp, _remotePort);
 5ec:	ed 85       	ldd	r30, Y+13	; 0x0d
 5ee:	fe 85       	ldd	r31, Y+14	; 0x0e
 5f0:	84 85       	ldd	r24, Z+12	; 0x0c
 5f2:	ae 01       	movw	r20, r28
 5f4:	4b 5f       	subi	r20, 0xFB	; 251
 5f6:	5f 4f       	sbci	r21, 0xFF	; 255
 5f8:	9e 01       	movw	r18, r28
 5fa:	2f 5f       	subi	r18, 0xFF	; 255
 5fc:	3f 4f       	sbci	r19, 0xFF	; 255
 5fe:	b9 01       	movw	r22, r18
 600:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	IPAddress ip(_remoteIp);
 604:	c8 01       	movw	r24, r16
 606:	9e 01       	movw	r18, r28
 608:	2f 5f       	subi	r18, 0xFF	; 255
 60a:	3f 4f       	sbci	r19, 0xFF	; 255
 60c:	b9 01       	movw	r22, r18
 60e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	return ip;
}
 612:	c8 01       	movw	r24, r16
 614:	c8 01       	movw	r24, r16
 616:	2e 96       	adiw	r28, 0x0e	; 14
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	f8 94       	cli
 61c:	de bf       	out	0x3e, r29	; 62
 61e:	0f be       	out	0x3f, r0	; 63
 620:	cd bf       	out	0x3d, r28	; 61
 622:	cf 91       	pop	r28
 624:	df 91       	pop	r29
 626:	1f 91       	pop	r17
 628:	0f 91       	pop	r16
 62a:	08 95       	ret

0000062c <_ZN7WiFiUDP4peekEv>:
  }else{
	  return -1;
  }
}

int WiFiUDP::peek()
 62c:	df 93       	push	r29
 62e:	cf 93       	push	r28
 630:	00 d0       	rcall	.+0      	; 0x632 <_ZN7WiFiUDP4peekEv+0x6>
 632:	00 d0       	rcall	.+0      	; 0x634 <_ZN7WiFiUDP4peekEv+0x8>
 634:	00 d0       	rcall	.+0      	; 0x636 <_ZN7WiFiUDP4peekEv+0xa>
 636:	cd b7       	in	r28, 0x3d	; 61
 638:	de b7       	in	r29, 0x3e	; 62
 63a:	9b 83       	std	Y+3, r25	; 0x03
 63c:	8a 83       	std	Y+2, r24	; 0x02
{
  uint8_t b;
  if (!available())
 63e:	ea 81       	ldd	r30, Y+2	; 0x02
 640:	fb 81       	ldd	r31, Y+3	; 0x03
 642:	80 81       	ld	r24, Z
 644:	91 81       	ldd	r25, Z+1	; 0x01
 646:	fc 01       	movw	r30, r24
 648:	38 96       	adiw	r30, 0x08	; 8
 64a:	01 90       	ld	r0, Z+
 64c:	f0 81       	ld	r31, Z
 64e:	e0 2d       	mov	r30, r0
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	9b 81       	ldd	r25, Y+3	; 0x03
 654:	09 95       	icall
 656:	1e 82       	std	Y+6, r1	; 0x06
 658:	00 97       	sbiw	r24, 0x00	; 0
 65a:	01 f4       	brne	.+0      	; 0x65c <_ZN7WiFiUDP4peekEv+0x30>
 65c:	21 e0       	ldi	r18, 0x01	; 1
 65e:	2e 83       	std	Y+6, r18	; 0x06
 660:	3e 81       	ldd	r19, Y+6	; 0x06
 662:	33 23       	and	r19, r19
 664:	01 f0       	breq	.+0      	; 0x666 <_ZN7WiFiUDP4peekEv+0x3a>
    return -1;
 666:	8f ef       	ldi	r24, 0xFF	; 255
 668:	9f ef       	ldi	r25, 0xFF	; 255
 66a:	9d 83       	std	Y+5, r25	; 0x05
 66c:	8c 83       	std	Y+4, r24	; 0x04
 66e:	00 c0       	rjmp	.+0      	; 0x670 <_ZN7WiFiUDP4peekEv+0x44>

  ServerDrv::getData(_sock, &b, 1);
 670:	ea 81       	ldd	r30, Y+2	; 0x02
 672:	fb 81       	ldd	r31, Y+3	; 0x03
 674:	84 85       	ldd	r24, Z+12	; 0x0c
 676:	9e 01       	movw	r18, r28
 678:	2f 5f       	subi	r18, 0xFF	; 255
 67a:	3f 4f       	sbci	r19, 0xFF	; 255
 67c:	b9 01       	movw	r22, r18
 67e:	41 e0       	ldi	r20, 0x01	; 1
 680:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
  return b;
 684:	89 81       	ldd	r24, Y+1	; 0x01
 686:	28 2f       	mov	r18, r24
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	3d 83       	std	Y+5, r19	; 0x05
 68c:	2c 83       	std	Y+4, r18	; 0x04
 68e:	8c 81       	ldd	r24, Y+4	; 0x04
 690:	9d 81       	ldd	r25, Y+5	; 0x05
}
 692:	26 96       	adiw	r28, 0x06	; 6
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	f8 94       	cli
 698:	de bf       	out	0x3e, r29	; 62
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	cd bf       	out	0x3d, r28	; 61
 69e:	cf 91       	pop	r28
 6a0:	df 91       	pop	r29
 6a2:	08 95       	ret

000006a4 <_ZN7WiFiUDP4readEv>:
int WiFiUDP::parsePacket()
{
	return available();
}

int WiFiUDP::read()
 6a4:	df 93       	push	r29
 6a6:	cf 93       	push	r28
 6a8:	00 d0       	rcall	.+0      	; 0x6aa <_ZN7WiFiUDP4readEv+0x6>
 6aa:	00 d0       	rcall	.+0      	; 0x6ac <_ZN7WiFiUDP4readEv+0x8>
 6ac:	00 d0       	rcall	.+0      	; 0x6ae <_ZN7WiFiUDP4readEv+0xa>
 6ae:	cd b7       	in	r28, 0x3d	; 61
 6b0:	de b7       	in	r29, 0x3e	; 62
 6b2:	9b 83       	std	Y+3, r25	; 0x03
 6b4:	8a 83       	std	Y+2, r24	; 0x02
{
  uint8_t b;
  if (available())
 6b6:	ea 81       	ldd	r30, Y+2	; 0x02
 6b8:	fb 81       	ldd	r31, Y+3	; 0x03
 6ba:	80 81       	ld	r24, Z
 6bc:	91 81       	ldd	r25, Z+1	; 0x01
 6be:	fc 01       	movw	r30, r24
 6c0:	38 96       	adiw	r30, 0x08	; 8
 6c2:	01 90       	ld	r0, Z+
 6c4:	f0 81       	ld	r31, Z
 6c6:	e0 2d       	mov	r30, r0
 6c8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ca:	9b 81       	ldd	r25, Y+3	; 0x03
 6cc:	09 95       	icall
 6ce:	1e 82       	std	Y+6, r1	; 0x06
 6d0:	00 97       	sbiw	r24, 0x00	; 0
 6d2:	01 f0       	breq	.+0      	; 0x6d4 <_ZN7WiFiUDP4readEv+0x30>
 6d4:	21 e0       	ldi	r18, 0x01	; 1
 6d6:	2e 83       	std	Y+6, r18	; 0x06
 6d8:	3e 81       	ldd	r19, Y+6	; 0x06
 6da:	33 23       	and	r19, r19
 6dc:	01 f0       	breq	.+0      	; 0x6de <_ZN7WiFiUDP4readEv+0x3a>
  {
	  ServerDrv::getData(_sock, &b);
 6de:	ea 81       	ldd	r30, Y+2	; 0x02
 6e0:	fb 81       	ldd	r31, Y+3	; 0x03
 6e2:	84 85       	ldd	r24, Z+12	; 0x0c
 6e4:	9e 01       	movw	r18, r28
 6e6:	2f 5f       	subi	r18, 0xFF	; 255
 6e8:	3f 4f       	sbci	r19, 0xFF	; 255
 6ea:	b9 01       	movw	r22, r18
 6ec:	40 e0       	ldi	r20, 0x00	; 0
 6ee:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
  	  return b;
 6f2:	89 81       	ldd	r24, Y+1	; 0x01
 6f4:	28 2f       	mov	r18, r24
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	3d 83       	std	Y+5, r19	; 0x05
 6fa:	2c 83       	std	Y+4, r18	; 0x04
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <_ZN7WiFiUDP4readEv+0x5a>
  }else{
	  return -1;
 6fe:	8f ef       	ldi	r24, 0xFF	; 255
 700:	9f ef       	ldi	r25, 0xFF	; 255
 702:	9d 83       	std	Y+5, r25	; 0x05
 704:	8c 83       	std	Y+4, r24	; 0x04
 706:	8c 81       	ldd	r24, Y+4	; 0x04
 708:	9d 81       	ldd	r25, Y+5	; 0x05
  }
}
 70a:	26 96       	adiw	r28, 0x06	; 6
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	f8 94       	cli
 710:	de bf       	out	0x3e, r29	; 62
 712:	0f be       	out	0x3f, r0	; 63
 714:	cd bf       	out	0x3d, r28	; 61
 716:	cf 91       	pop	r28
 718:	df 91       	pop	r29
 71a:	08 95       	ret

0000071c <_ZN7WiFiUDP4readEPhj>:

int WiFiUDP::read(unsigned char* buffer, size_t len)
 71c:	df 93       	push	r29
 71e:	cf 93       	push	r28
 720:	cd b7       	in	r28, 0x3d	; 61
 722:	de b7       	in	r29, 0x3e	; 62
 724:	2b 97       	sbiw	r28, 0x0b	; 11
 726:	0f b6       	in	r0, 0x3f	; 63
 728:	f8 94       	cli
 72a:	de bf       	out	0x3e, r29	; 62
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	cd bf       	out	0x3d, r28	; 61
 730:	9c 83       	std	Y+4, r25	; 0x04
 732:	8b 83       	std	Y+3, r24	; 0x03
 734:	7e 83       	std	Y+6, r23	; 0x06
 736:	6d 83       	std	Y+5, r22	; 0x05
 738:	58 87       	std	Y+8, r21	; 0x08
 73a:	4f 83       	std	Y+7, r20	; 0x07
{
  if (available())
 73c:	eb 81       	ldd	r30, Y+3	; 0x03
 73e:	fc 81       	ldd	r31, Y+4	; 0x04
 740:	80 81       	ld	r24, Z
 742:	91 81       	ldd	r25, Z+1	; 0x01
 744:	fc 01       	movw	r30, r24
 746:	38 96       	adiw	r30, 0x08	; 8
 748:	01 90       	ld	r0, Z+
 74a:	f0 81       	ld	r31, Z
 74c:	e0 2d       	mov	r30, r0
 74e:	8b 81       	ldd	r24, Y+3	; 0x03
 750:	9c 81       	ldd	r25, Y+4	; 0x04
 752:	09 95       	icall
 754:	1b 86       	std	Y+11, r1	; 0x0b
 756:	00 97       	sbiw	r24, 0x00	; 0
 758:	01 f0       	breq	.+0      	; 0x75a <_ZN7WiFiUDP4readEPhj+0x3e>
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	8b 87       	std	Y+11, r24	; 0x0b
 75e:	9b 85       	ldd	r25, Y+11	; 0x0b
 760:	99 23       	and	r25, r25
 762:	01 f0       	breq	.+0      	; 0x764 <_ZN7WiFiUDP4readEPhj+0x48>
  {
	  size_t size = 0;
 764:	1a 82       	std	Y+2, r1	; 0x02
 766:	19 82       	std	Y+1, r1	; 0x01
	  if (!ServerDrv::getDataBuf(_sock, buffer, &size))
 768:	eb 81       	ldd	r30, Y+3	; 0x03
 76a:	fc 81       	ldd	r31, Y+4	; 0x04
 76c:	84 85       	ldd	r24, Z+12	; 0x0c
 76e:	2d 81       	ldd	r18, Y+5	; 0x05
 770:	3e 81       	ldd	r19, Y+6	; 0x06
 772:	b9 01       	movw	r22, r18
 774:	9e 01       	movw	r18, r28
 776:	2f 5f       	subi	r18, 0xFF	; 255
 778:	3f 4f       	sbci	r19, 0xFF	; 255
 77a:	a9 01       	movw	r20, r18
 77c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 780:	98 2f       	mov	r25, r24
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	89 27       	eor	r24, r25
 786:	88 23       	and	r24, r24
 788:	01 f0       	breq	.+0      	; 0x78a <_ZN7WiFiUDP4readEPhj+0x6e>
		  return -1;
 78a:	8f ef       	ldi	r24, 0xFF	; 255
 78c:	9f ef       	ldi	r25, 0xFF	; 255
 78e:	9a 87       	std	Y+10, r25	; 0x0a
 790:	89 87       	std	Y+9, r24	; 0x09
 792:	00 c0       	rjmp	.+0      	; 0x794 <_ZN7WiFiUDP4readEPhj+0x78>
	  // TODO check if the buffer is too smal respect to buffer size
	  return size;
 794:	89 81       	ldd	r24, Y+1	; 0x01
 796:	9a 81       	ldd	r25, Y+2	; 0x02
 798:	9a 87       	std	Y+10, r25	; 0x0a
 79a:	89 87       	std	Y+9, r24	; 0x09
 79c:	00 c0       	rjmp	.+0      	; 0x79e <_ZN7WiFiUDP4readEPhj+0x82>
  }else{
	  return -1;
 79e:	8f ef       	ldi	r24, 0xFF	; 255
 7a0:	9f ef       	ldi	r25, 0xFF	; 255
 7a2:	9a 87       	std	Y+10, r25	; 0x0a
 7a4:	89 87       	std	Y+9, r24	; 0x09
 7a6:	89 85       	ldd	r24, Y+9	; 0x09
 7a8:	9a 85       	ldd	r25, Y+10	; 0x0a
  }
}
 7aa:	2b 96       	adiw	r28, 0x0b	; 11
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	f8 94       	cli
 7b0:	de bf       	out	0x3e, r29	; 62
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	cd bf       	out	0x3d, r28	; 61
 7b6:	cf 91       	pop	r28
 7b8:	df 91       	pop	r29
 7ba:	08 95       	ret

000007bc <_ZN7WiFiUDP5writeEPKhj>:
size_t WiFiUDP::write(uint8_t byte)
{
  return write(&byte, 1);
}

size_t WiFiUDP::write(const uint8_t *buffer, size_t size)
 7bc:	df 93       	push	r29
 7be:	cf 93       	push	r28
 7c0:	00 d0       	rcall	.+0      	; 0x7c2 <_ZN7WiFiUDP5writeEPKhj+0x6>
 7c2:	00 d0       	rcall	.+0      	; 0x7c4 <_ZN7WiFiUDP5writeEPKhj+0x8>
 7c4:	00 d0       	rcall	.+0      	; 0x7c6 <_ZN7WiFiUDP5writeEPKhj+0xa>
 7c6:	cd b7       	in	r28, 0x3d	; 61
 7c8:	de b7       	in	r29, 0x3e	; 62
 7ca:	9a 83       	std	Y+2, r25	; 0x02
 7cc:	89 83       	std	Y+1, r24	; 0x01
 7ce:	7c 83       	std	Y+4, r23	; 0x04
 7d0:	6b 83       	std	Y+3, r22	; 0x03
 7d2:	5e 83       	std	Y+6, r21	; 0x06
 7d4:	4d 83       	std	Y+5, r20	; 0x05
{
	ServerDrv::insertDataBuf(_sock, buffer, size);
 7d6:	e9 81       	ldd	r30, Y+1	; 0x01
 7d8:	fa 81       	ldd	r31, Y+2	; 0x02
 7da:	84 85       	ldd	r24, Z+12	; 0x0c
 7dc:	2b 81       	ldd	r18, Y+3	; 0x03
 7de:	3c 81       	ldd	r19, Y+4	; 0x04
 7e0:	4d 81       	ldd	r20, Y+5	; 0x05
 7e2:	5e 81       	ldd	r21, Y+6	; 0x06
 7e4:	b9 01       	movw	r22, r18
 7e6:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	return size;
 7ea:	8d 81       	ldd	r24, Y+5	; 0x05
 7ec:	9e 81       	ldd	r25, Y+6	; 0x06
}
 7ee:	26 96       	adiw	r28, 0x06	; 6
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	f8 94       	cli
 7f4:	de bf       	out	0x3e, r29	; 62
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	cd bf       	out	0x3d, r28	; 61
 7fa:	cf 91       	pop	r28
 7fc:	df 91       	pop	r29
 7fe:	08 95       	ret

00000800 <_ZN7WiFiUDP9endPacketEv>:
	  return 1;
  }
  return 0;
}

int WiFiUDP::endPacket()
 800:	df 93       	push	r29
 802:	cf 93       	push	r28
 804:	00 d0       	rcall	.+0      	; 0x806 <_ZN7WiFiUDP9endPacketEv+0x6>
 806:	cd b7       	in	r28, 0x3d	; 61
 808:	de b7       	in	r29, 0x3e	; 62
 80a:	9a 83       	std	Y+2, r25	; 0x02
 80c:	89 83       	std	Y+1, r24	; 0x01
{
	return ServerDrv::sendUdpData(_sock);
 80e:	e9 81       	ldd	r30, Y+1	; 0x01
 810:	fa 81       	ldd	r31, Y+2	; 0x02
 812:	84 85       	ldd	r24, Z+12	; 0x0c
 814:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 818:	88 2f       	mov	r24, r24
 81a:	90 e0       	ldi	r25, 0x00	; 0
}
 81c:	0f 90       	pop	r0
 81e:	0f 90       	pop	r0
 820:	cf 91       	pop	r28
 822:	df 91       	pop	r29
 824:	08 95       	ret

00000826 <_ZN7WiFiUDP11beginPacketE9IPAddressj>:
		return beginPacket(remote_addr, port);
	}
	return ret;
}

int WiFiUDP::beginPacket(IPAddress ip, uint16_t port)
 826:	0f 93       	push	r16
 828:	df 93       	push	r29
 82a:	cf 93       	push	r28
 82c:	cd b7       	in	r28, 0x3d	; 61
 82e:	de b7       	in	r29, 0x3e	; 62
 830:	28 97       	sbiw	r28, 0x08	; 8
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	f8 94       	cli
 836:	de bf       	out	0x3e, r29	; 62
 838:	0f be       	out	0x3f, r0	; 63
 83a:	cd bf       	out	0x3d, r28	; 61
 83c:	9a 83       	std	Y+2, r25	; 0x02
 83e:	89 83       	std	Y+1, r24	; 0x01
 840:	7c 83       	std	Y+4, r23	; 0x04
 842:	6b 83       	std	Y+3, r22	; 0x03
 844:	5e 83       	std	Y+6, r21	; 0x06
 846:	4d 83       	std	Y+5, r20	; 0x05
{
  if (_sock == NO_SOCKET_AVAIL)
 848:	e9 81       	ldd	r30, Y+1	; 0x01
 84a:	fa 81       	ldd	r31, Y+2	; 0x02
 84c:	84 85       	ldd	r24, Z+12	; 0x0c
 84e:	8f 3f       	cpi	r24, 0xFF	; 255
 850:	01 f4       	brne	.+0      	; 0x852 <_ZN7WiFiUDP11beginPacketE9IPAddressj+0x2c>
	  _sock = WiFiClass::getSocket();
 852:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 856:	e9 81       	ldd	r30, Y+1	; 0x01
 858:	fa 81       	ldd	r31, Y+2	; 0x02
 85a:	84 87       	std	Z+12, r24	; 0x0c
  if (_sock != NO_SOCKET_AVAIL)
 85c:	e9 81       	ldd	r30, Y+1	; 0x01
 85e:	fa 81       	ldd	r31, Y+2	; 0x02
 860:	84 85       	ldd	r24, Z+12	; 0x0c
 862:	8f 3f       	cpi	r24, 0xFF	; 255
 864:	01 f0       	breq	.+0      	; 0x866 <_ZN7WiFiUDP11beginPacketE9IPAddressj+0x40>
  {
	  ServerDrv::startClient(uint32_t(ip), port, _sock, UDP_MODE);
 866:	8b 81       	ldd	r24, Y+3	; 0x03
 868:	9c 81       	ldd	r25, Y+4	; 0x04
 86a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 86e:	dc 01       	movw	r26, r24
 870:	cb 01       	movw	r24, r22
 872:	e9 81       	ldd	r30, Y+1	; 0x01
 874:	fa 81       	ldd	r31, Y+2	; 0x02
 876:	e4 85       	ldd	r30, Z+12	; 0x0c
 878:	2d 81       	ldd	r18, Y+5	; 0x05
 87a:	3e 81       	ldd	r19, Y+6	; 0x06
 87c:	bc 01       	movw	r22, r24
 87e:	cd 01       	movw	r24, r26
 880:	a9 01       	movw	r20, r18
 882:	2e 2f       	mov	r18, r30
 884:	01 e0       	ldi	r16, 0x01	; 1
 886:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	  WiFiClass::_state[_sock] = _sock;
 88a:	e9 81       	ldd	r30, Y+1	; 0x01
 88c:	fa 81       	ldd	r31, Y+2	; 0x02
 88e:	84 85       	ldd	r24, Z+12	; 0x0c
 890:	48 2f       	mov	r20, r24
 892:	50 e0       	ldi	r21, 0x00	; 0
 894:	e9 81       	ldd	r30, Y+1	; 0x01
 896:	fa 81       	ldd	r31, Y+2	; 0x02
 898:	84 85       	ldd	r24, Z+12	; 0x0c
 89a:	28 2f       	mov	r18, r24
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	ca 01       	movw	r24, r20
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	fc 01       	movw	r30, r24
 8a6:	e0 50       	subi	r30, 0x00	; 0
 8a8:	f0 40       	sbci	r31, 0x00	; 0
 8aa:	31 83       	std	Z+1, r19	; 0x01
 8ac:	20 83       	st	Z, r18
	  return 1;
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	98 87       	std	Y+8, r25	; 0x08
 8b4:	8f 83       	std	Y+7, r24	; 0x07
 8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <_ZN7WiFiUDP11beginPacketE9IPAddressj+0x92>
  }
  return 0;
 8b8:	18 86       	std	Y+8, r1	; 0x08
 8ba:	1f 82       	std	Y+7, r1	; 0x07
 8bc:	8f 81       	ldd	r24, Y+7	; 0x07
 8be:	98 85       	ldd	r25, Y+8	; 0x08
}
 8c0:	28 96       	adiw	r28, 0x08	; 8
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	f8 94       	cli
 8c6:	de bf       	out	0x3e, r29	; 62
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	cd bf       	out	0x3d, r28	; 61
 8cc:	cf 91       	pop	r28
 8ce:	df 91       	pop	r29
 8d0:	0f 91       	pop	r16
 8d2:	08 95       	ret

000008d4 <_ZN7WiFiUDP11beginPacketEPKcj>:
	  ServerDrv::stopClient(_sock);

	  _sock = NO_SOCKET_AVAIL;
}

int WiFiUDP::beginPacket(const char *host, uint16_t port)
 8d4:	0f 93       	push	r16
 8d6:	1f 93       	push	r17
 8d8:	df 93       	push	r29
 8da:	cf 93       	push	r28
 8dc:	cd b7       	in	r28, 0x3d	; 61
 8de:	de b7       	in	r29, 0x3e	; 62
 8e0:	67 97       	sbiw	r28, 0x17	; 23
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	f8 94       	cli
 8e6:	de bf       	out	0x3e, r29	; 62
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	cd bf       	out	0x3d, r28	; 61
 8ec:	98 8b       	std	Y+16, r25	; 0x10
 8ee:	8f 87       	std	Y+15, r24	; 0x0f
 8f0:	7a 8b       	std	Y+18, r23	; 0x12
 8f2:	69 8b       	std	Y+17, r22	; 0x11
 8f4:	5c 8b       	std	Y+20, r21	; 0x14
 8f6:	4b 8b       	std	Y+19, r20	; 0x13
{
	// Look up the host first
	int ret = 0;
 8f8:	1a 82       	std	Y+2, r1	; 0x02
 8fa:	19 82       	std	Y+1, r1	; 0x01
	IPAddress remote_addr;
 8fc:	ce 01       	movw	r24, r28
 8fe:	09 96       	adiw	r24, 0x09	; 9
 900:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
	if (WiFi.hostByName(host, remote_addr))
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	29 89       	ldd	r18, Y+17	; 0x11
 90a:	3a 89       	ldd	r19, Y+18	; 0x12
 90c:	ae 01       	movw	r20, r28
 90e:	47 5f       	subi	r20, 0xF7	; 247
 910:	5f 4f       	sbci	r21, 0xFF	; 255
 912:	b9 01       	movw	r22, r18
 914:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 918:	1f 8a       	std	Y+23, r1	; 0x17
 91a:	00 97       	sbiw	r24, 0x00	; 0
 91c:	01 f0       	breq	.+0      	; 0x91e <_ZN7WiFiUDP11beginPacketEPKcj+0x4a>
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	8f 8b       	std	Y+23, r24	; 0x17
 922:	9f 89       	ldd	r25, Y+23	; 0x17
 924:	99 23       	and	r25, r25
 926:	01 f0       	breq	.+0      	; 0x928 <_ZN7WiFiUDP11beginPacketEPKcj+0x54>
	{
		return beginPacket(remote_addr, port);
 928:	ef 85       	ldd	r30, Y+15	; 0x0f
 92a:	f8 89       	ldd	r31, Y+16	; 0x10
 92c:	80 81       	ld	r24, Z
 92e:	91 81       	ldd	r25, Z+1	; 0x01
 930:	fc 01       	movw	r30, r24
 932:	74 96       	adiw	r30, 0x14	; 20
 934:	00 81       	ld	r16, Z
 936:	11 81       	ldd	r17, Z+1	; 0x01
 938:	ce 01       	movw	r24, r28
 93a:	03 96       	adiw	r24, 0x03	; 3
 93c:	9e 01       	movw	r18, r28
 93e:	27 5f       	subi	r18, 0xF7	; 247
 940:	3f 4f       	sbci	r19, 0xFF	; 255
 942:	b9 01       	movw	r22, r18
 944:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 948:	8f 85       	ldd	r24, Y+15	; 0x0f
 94a:	98 89       	ldd	r25, Y+16	; 0x10
 94c:	9e 01       	movw	r18, r28
 94e:	2d 5f       	subi	r18, 0xFD	; 253
 950:	3f 4f       	sbci	r19, 0xFF	; 255
 952:	4b 89       	ldd	r20, Y+19	; 0x13
 954:	5c 89       	ldd	r21, Y+20	; 0x14
 956:	b9 01       	movw	r22, r18
 958:	f8 01       	movw	r30, r16
 95a:	09 95       	icall
 95c:	9e 8b       	std	Y+22, r25	; 0x16
 95e:	8d 8b       	std	Y+21, r24	; 0x15
 960:	ce 01       	movw	r24, r28
 962:	03 96       	adiw	r24, 0x03	; 3
 964:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 968:	00 c0       	rjmp	.+0      	; 0x96a <_ZN7WiFiUDP11beginPacketEPKcj+0x96>
	}
	return ret;
 96a:	89 81       	ldd	r24, Y+1	; 0x01
 96c:	9a 81       	ldd	r25, Y+2	; 0x02
 96e:	9e 8b       	std	Y+22, r25	; 0x16
 970:	8d 8b       	std	Y+21, r24	; 0x15
 972:	ce 01       	movw	r24, r28
 974:	09 96       	adiw	r24, 0x09	; 9
 976:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 97a:	8d 89       	ldd	r24, Y+21	; 0x15
 97c:	9e 89       	ldd	r25, Y+22	; 0x16
}
 97e:	67 96       	adiw	r28, 0x17	; 23
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	f8 94       	cli
 984:	de bf       	out	0x3e, r29	; 62
 986:	0f be       	out	0x3f, r0	; 63
 988:	cd bf       	out	0x3d, r28	; 61
 98a:	cf 91       	pop	r28
 98c:	df 91       	pop	r29
 98e:	1f 91       	pop	r17
 990:	0f 91       	pop	r16
 992:	08 95       	ret

00000994 <_ZN7WiFiUDP4stopEv>:
	 }
	 return 0;
}

/* Release any resources being used by this WiFiUDP instance */
void WiFiUDP::stop()
 994:	df 93       	push	r29
 996:	cf 93       	push	r28
 998:	00 d0       	rcall	.+0      	; 0x99a <_ZN7WiFiUDP4stopEv+0x6>
 99a:	cd b7       	in	r28, 0x3d	; 61
 99c:	de b7       	in	r29, 0x3e	; 62
 99e:	9a 83       	std	Y+2, r25	; 0x02
 9a0:	89 83       	std	Y+1, r24	; 0x01
{
	  if (_sock == NO_SOCKET_AVAIL)
 9a2:	e9 81       	ldd	r30, Y+1	; 0x01
 9a4:	fa 81       	ldd	r31, Y+2	; 0x02
 9a6:	84 85       	ldd	r24, Z+12	; 0x0c
 9a8:	8f 3f       	cpi	r24, 0xFF	; 255
 9aa:	01 f0       	breq	.+0      	; 0x9ac <_ZN7WiFiUDP4stopEv+0x18>
	    return;

	  ServerDrv::stopClient(_sock);
 9ac:	e9 81       	ldd	r30, Y+1	; 0x01
 9ae:	fa 81       	ldd	r31, Y+2	; 0x02
 9b0:	84 85       	ldd	r24, Z+12	; 0x0c
 9b2:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>

	  _sock = NO_SOCKET_AVAIL;
 9b6:	e9 81       	ldd	r30, Y+1	; 0x01
 9b8:	fa 81       	ldd	r31, Y+2	; 0x02
 9ba:	8f ef       	ldi	r24, 0xFF	; 255
 9bc:	84 87       	std	Z+12, r24	; 0x0c
}
 9be:	0f 90       	pop	r0
 9c0:	0f 90       	pop	r0
 9c2:	cf 91       	pop	r28
 9c4:	df 91       	pop	r29
 9c6:	08 95       	ret

000009c8 <_ZN7WiFiUDP9availableEv>:

}

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int WiFiUDP::available() {
 9c8:	df 93       	push	r29
 9ca:	cf 93       	push	r28
 9cc:	00 d0       	rcall	.+0      	; 0x9ce <_ZN7WiFiUDP9availableEv+0x6>
 9ce:	00 d0       	rcall	.+0      	; 0x9d0 <_ZN7WiFiUDP9availableEv+0x8>
 9d0:	cd b7       	in	r28, 0x3d	; 61
 9d2:	de b7       	in	r29, 0x3e	; 62
 9d4:	9a 83       	std	Y+2, r25	; 0x02
 9d6:	89 83       	std	Y+1, r24	; 0x01
	 if (_sock != NO_SOCKET_AVAIL)
 9d8:	e9 81       	ldd	r30, Y+1	; 0x01
 9da:	fa 81       	ldd	r31, Y+2	; 0x02
 9dc:	84 85       	ldd	r24, Z+12	; 0x0c
 9de:	8f 3f       	cpi	r24, 0xFF	; 255
 9e0:	01 f0       	breq	.+0      	; 0x9e2 <_ZN7WiFiUDP9availableEv+0x1a>
	 {
	      return ServerDrv::availData(_sock);
 9e2:	e9 81       	ldd	r30, Y+1	; 0x01
 9e4:	fa 81       	ldd	r31, Y+2	; 0x02
 9e6:	84 85       	ldd	r24, Z+12	; 0x0c
 9e8:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 9ec:	9c 83       	std	Y+4, r25	; 0x04
 9ee:	8b 83       	std	Y+3, r24	; 0x03
 9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <_ZN7WiFiUDP9availableEv+0x2a>
	 }
	 return 0;
 9f2:	1c 82       	std	Y+4, r1	; 0x04
 9f4:	1b 82       	std	Y+3, r1	; 0x03
 9f6:	8b 81       	ldd	r24, Y+3	; 0x03
 9f8:	9c 81       	ldd	r25, Y+4	; 0x04
}
 9fa:	0f 90       	pop	r0
 9fc:	0f 90       	pop	r0
 9fe:	0f 90       	pop	r0
 a00:	0f 90       	pop	r0
 a02:	cf 91       	pop	r28
 a04:	df 91       	pop	r29
 a06:	08 95       	ret

00000a08 <_ZN7WiFiUDP5beginEj>:
	: _sock(NO_SOCKET_AVAIL)
	, _port(0)
{}

/* Start WiFiUDP socket, listening at local port PORT */
uint8_t WiFiUDP::begin(uint16_t port) {
 a08:	df 93       	push	r29
 a0a:	cf 93       	push	r28
 a0c:	00 d0       	rcall	.+0      	; 0xa0e <_ZN7WiFiUDP5beginEj+0x6>
 a0e:	00 d0       	rcall	.+0      	; 0xa10 <_ZN7WiFiUDP5beginEj+0x8>
 a10:	00 d0       	rcall	.+0      	; 0xa12 <_ZN7WiFiUDP5beginEj+0xa>
 a12:	cd b7       	in	r28, 0x3d	; 61
 a14:	de b7       	in	r29, 0x3e	; 62
 a16:	9b 83       	std	Y+3, r25	; 0x03
 a18:	8a 83       	std	Y+2, r24	; 0x02
 a1a:	7d 83       	std	Y+5, r23	; 0x05
 a1c:	6c 83       	std	Y+4, r22	; 0x04

    uint8_t sock = WiFiClass::getSocket();
 a1e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
 a22:	89 83       	std	Y+1, r24	; 0x01
    if (sock != NO_SOCKET_AVAIL)
 a24:	89 81       	ldd	r24, Y+1	; 0x01
 a26:	8f 3f       	cpi	r24, 0xFF	; 255
 a28:	01 f0       	breq	.+0      	; 0xa2a <_ZN7WiFiUDP5beginEj+0x22>
    {
        ServerDrv::startServer(port, sock, UDP_MODE);
 a2a:	8c 81       	ldd	r24, Y+4	; 0x04
 a2c:	9d 81       	ldd	r25, Y+5	; 0x05
 a2e:	69 81       	ldd	r22, Y+1	; 0x01
 a30:	41 e0       	ldi	r20, 0x01	; 1
 a32:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresscvmEv>
        WiFiClass::_server_port[sock] = port;
 a36:	89 81       	ldd	r24, Y+1	; 0x01
 a38:	88 2f       	mov	r24, r24
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	88 0f       	add	r24, r24
 a3e:	99 1f       	adc	r25, r25
 a40:	fc 01       	movw	r30, r24
 a42:	e0 50       	subi	r30, 0x00	; 0
 a44:	f0 40       	sbci	r31, 0x00	; 0
 a46:	8c 81       	ldd	r24, Y+4	; 0x04
 a48:	9d 81       	ldd	r25, Y+5	; 0x05
 a4a:	91 83       	std	Z+1, r25	; 0x01
 a4c:	80 83       	st	Z, r24
        _sock = sock;
 a4e:	ea 81       	ldd	r30, Y+2	; 0x02
 a50:	fb 81       	ldd	r31, Y+3	; 0x03
 a52:	89 81       	ldd	r24, Y+1	; 0x01
 a54:	84 87       	std	Z+12, r24	; 0x0c
        _port = port;
 a56:	ea 81       	ldd	r30, Y+2	; 0x02
 a58:	fb 81       	ldd	r31, Y+3	; 0x03
 a5a:	8c 81       	ldd	r24, Y+4	; 0x04
 a5c:	9d 81       	ldd	r25, Y+5	; 0x05
 a5e:	96 87       	std	Z+14, r25	; 0x0e
 a60:	85 87       	std	Z+13, r24	; 0x0d
        return 1;
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	8e 83       	std	Y+6, r24	; 0x06
 a66:	00 c0       	rjmp	.+0      	; 0xa68 <_ZN7WiFiUDP5beginEj+0x60>
    }
    return 0;
 a68:	1e 82       	std	Y+6, r1	; 0x06
 a6a:	8e 81       	ldd	r24, Y+6	; 0x06

}
 a6c:	26 96       	adiw	r28, 0x06	; 6
 a6e:	0f b6       	in	r0, 0x3f	; 63
 a70:	f8 94       	cli
 a72:	de bf       	out	0x3e, r29	; 62
 a74:	0f be       	out	0x3f, r0	; 63
 a76:	cd bf       	out	0x3d, r28	; 61
 a78:	cf 91       	pop	r28
 a7a:	df 91       	pop	r29
 a7c:	08 95       	ret

CDC.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000588  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000cdd  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING

CRTMisc.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000000a  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  0000003e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000003e  2**0
                  ALLOC
  3 .stab         0000018c  00000000  00000000  00000040  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000003c9  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__cxa_pure_virtual>:
extern "C" void __cxa_pure_virtual()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	00 c0       	rjmp	.+0      	; 0xa <__zero_reg__+0x9>

HID.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000588  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000cdd  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING

HardwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000eda  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000028  00000000  00000000  00000f0e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          000000aa  00000000  00000000  00000f36  2**0
                  ALLOC
  3 .stab         0000108c  00000000  00000000  00000f38  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000164a  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .dtors        00000002  00000000  00000000  0000360e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  6 .ctors        00000002  00000000  00000000  00003610  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text:

00000000 <_ZN5PrintC2Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5PrintC2Ev+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	80 e0       	ldi	r24, 0x00	; 0
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	91 83       	std	Z+1, r25	; 0x01
  18:	80 83       	st	Z, r24
  1a:	e9 81       	ldd	r30, Y+1	; 0x01
  1c:	fa 81       	ldd	r31, Y+2	; 0x02
  1e:	13 82       	std	Z+3, r1	; 0x03
  20:	12 82       	std	Z+2, r1	; 0x02
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

0000002c <_ZN6StreamC2Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
  2c:	df 93       	push	r29
  2e:	cf 93       	push	r28
  30:	00 d0       	rcall	.+0      	; 0x32 <_ZN6StreamC2Ev+0x6>
  32:	cd b7       	in	r28, 0x3d	; 61
  34:	de b7       	in	r29, 0x3e	; 62
  36:	9a 83       	std	Y+2, r25	; 0x02
  38:	89 83       	std	Y+1, r24	; 0x01
  3a:	89 81       	ldd	r24, Y+1	; 0x01
  3c:	9a 81       	ldd	r25, Y+2	; 0x02
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  42:	e9 81       	ldd	r30, Y+1	; 0x01
  44:	fa 81       	ldd	r31, Y+2	; 0x02
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	91 83       	std	Z+1, r25	; 0x01
  4c:	80 83       	st	Z, r24
  4e:	e9 81       	ldd	r30, Y+1	; 0x01
  50:	fa 81       	ldd	r31, Y+2	; 0x02
  52:	88 ee       	ldi	r24, 0xE8	; 232
  54:	93 e0       	ldi	r25, 0x03	; 3
  56:	a0 e0       	ldi	r26, 0x00	; 0
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	84 83       	std	Z+4, r24	; 0x04
  5c:	95 83       	std	Z+5, r25	; 0x05
  5e:	a6 83       	std	Z+6, r26	; 0x06
  60:	b7 83       	std	Z+7, r27	; 0x07
  62:	0f 90       	pop	r0
  64:	0f 90       	pop	r0
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	08 95       	ret

0000006c <_Z10store_charhP11ring_buffer>:
#if defined(UBRR3H)
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <_Z10store_charhP11ring_buffer+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <_Z10store_charhP11ring_buffer+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <_Z10store_charhP11ring_buffer+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	8b 83       	std	Y+3, r24	; 0x03
  7c:	7d 83       	std	Y+5, r23	; 0x05
  7e:	6c 83       	std	Y+4, r22	; 0x04
{
  unsigned int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
  80:	8c 81       	ldd	r24, Y+4	; 0x04
  82:	9d 81       	ldd	r25, Y+5	; 0x05
  84:	fc 01       	movw	r30, r24
  86:	e0 5c       	subi	r30, 0xC0	; 192
  88:	ff 4f       	sbci	r31, 0xFF	; 255
  8a:	80 81       	ld	r24, Z
  8c:	91 81       	ldd	r25, Z+1	; 0x01
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	8f 73       	andi	r24, 0x3F	; 63
  92:	90 70       	andi	r25, 0x00	; 0
  94:	9a 83       	std	Y+2, r25	; 0x02
  96:	89 83       	std	Y+1, r24	; 0x01

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
  98:	8c 81       	ldd	r24, Y+4	; 0x04
  9a:	9d 81       	ldd	r25, Y+5	; 0x05
  9c:	fc 01       	movw	r30, r24
  9e:	ee 5b       	subi	r30, 0xBE	; 190
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	20 81       	ld	r18, Z
  a4:	31 81       	ldd	r19, Z+1	; 0x01
  a6:	1e 82       	std	Y+6, r1	; 0x06
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	9a 81       	ldd	r25, Y+2	; 0x02
  ac:	28 17       	cp	r18, r24
  ae:	39 07       	cpc	r19, r25
  b0:	01 f0       	breq	.+0      	; 0xb2 <_Z10store_charhP11ring_buffer+0x46>
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	8e 83       	std	Y+6, r24	; 0x06
  b6:	8e 81       	ldd	r24, Y+6	; 0x06
  b8:	88 23       	and	r24, r24
  ba:	01 f0       	breq	.+0      	; 0xbc <_Z10store_charhP11ring_buffer+0x50>
    buffer->buffer[buffer->head] = c;
  bc:	8c 81       	ldd	r24, Y+4	; 0x04
  be:	9d 81       	ldd	r25, Y+5	; 0x05
  c0:	fc 01       	movw	r30, r24
  c2:	e0 5c       	subi	r30, 0xC0	; 192
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	20 81       	ld	r18, Z
  c8:	31 81       	ldd	r19, Z+1	; 0x01
  ca:	8c 81       	ldd	r24, Y+4	; 0x04
  cc:	9d 81       	ldd	r25, Y+5	; 0x05
  ce:	fc 01       	movw	r30, r24
  d0:	e2 0f       	add	r30, r18
  d2:	f3 1f       	adc	r31, r19
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	80 83       	st	Z, r24
    buffer->head = i;
  d8:	8c 81       	ldd	r24, Y+4	; 0x04
  da:	9d 81       	ldd	r25, Y+5	; 0x05
  dc:	fc 01       	movw	r30, r24
  de:	e0 5c       	subi	r30, 0xC0	; 192
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	9a 81       	ldd	r25, Y+2	; 0x02
  e6:	91 83       	std	Z+1, r25	; 0x01
  e8:	80 83       	st	Z, r24
  }
}
  ea:	26 96       	adiw	r28, 0x06	; 6
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	cf 91       	pop	r28
 106:	df 91       	pop	r29
 108:	08 95       	ret

0000010a <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
 12c:	df 93       	push	r29
 12e:	cf 93       	push	r28
 130:	00 d0       	rcall	.+0      	; 0x132 <__vector_18+0x28>
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
 136:	e0 ec       	ldi	r30, 0xC0	; 192
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 2f       	mov	r24, r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	84 70       	andi	r24, 0x04	; 4
 142:	90 70       	andi	r25, 0x00	; 0
 144:	1a 82       	std	Y+2, r1	; 0x02
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	01 f4       	brne	.+0      	; 0x14a <__vector_18+0x40>
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	8a 83       	std	Y+2, r24	; 0x02
 14e:	8a 81       	ldd	r24, Y+2	; 0x02
 150:	88 23       	and	r24, r24
 152:	01 f0       	breq	.+0      	; 0x154 <__vector_18+0x4a>
      unsigned char c = UDR0;
 154:	e6 ec       	ldi	r30, 0xC6	; 198
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	89 83       	std	Y+1, r24	; 0x01
      store_char(c, &rx_buffer);
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	b9 01       	movw	r22, r18
 164:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
 1ac:	df 93       	push	r29
 1ae:	cf 93       	push	r28
 1b0:	00 d0       	rcall	.+0      	; 0x1b2 <__vector_19+0x20>
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
 1b6:	20 91 00 00 	lds	r18, 0x0000
 1ba:	30 91 00 00 	lds	r19, 0x0000
 1be:	80 91 00 00 	lds	r24, 0x0000
 1c2:	90 91 00 00 	lds	r25, 0x0000
 1c6:	1a 82       	std	Y+2, r1	; 0x02
 1c8:	28 17       	cp	r18, r24
 1ca:	39 07       	cpc	r19, r25
 1cc:	01 f4       	brne	.+0      	; 0x1ce <__vector_19+0x3c>
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	8a 83       	std	Y+2, r24	; 0x02
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	88 23       	and	r24, r24
 1d6:	01 f0       	breq	.+0      	; 0x1d8 <__vector_19+0x46>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
 1d8:	a1 ec       	ldi	r26, 0xC1	; 193
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	e1 ec       	ldi	r30, 0xC1	; 193
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8f 7d       	andi	r24, 0xDF	; 223
 1e4:	8c 93       	st	X, r24
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <__vector_19+0x56>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 1e8:	80 91 00 00 	lds	r24, 0x0000
 1ec:	90 91 00 00 	lds	r25, 0x0000
 1f0:	fc 01       	movw	r30, r24
 1f2:	e0 50       	subi	r30, 0x00	; 0
 1f4:	f0 40       	sbci	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	89 83       	std	Y+1, r24	; 0x01
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
 1fa:	80 91 00 00 	lds	r24, 0x0000
 1fe:	90 91 00 00 	lds	r25, 0x0000
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	8f 73       	andi	r24, 0x3F	; 63
 206:	90 70       	andi	r25, 0x00	; 0
 208:	90 93 00 00 	sts	0x0000, r25
 20c:	80 93 00 00 	sts	0x0000, r24
	
  #if defined(UDR0)
    UDR0 = c;
 210:	e6 ec       	ldi	r30, 0xC6	; 198
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	80 83       	st	Z, r24
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	cf 91       	pop	r28
 21e:	df 91       	pop	r29
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <_ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 23a:	8f 92       	push	r8
 23c:	9f 92       	push	r9
 23e:	af 92       	push	r10
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	df 93       	push	r29
 250:	cf 93       	push	r28
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	62 97       	sbiw	r28, 0x12	; 18
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	f8 94       	cli
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	0f be       	out	0x3f, r0	; 63
 260:	cd bf       	out	0x3d, r28	; 61
 262:	9a 83       	std	Y+2, r25	; 0x02
 264:	89 83       	std	Y+1, r24	; 0x01
 266:	7c 83       	std	Y+4, r23	; 0x04
 268:	6b 83       	std	Y+3, r22	; 0x03
 26a:	5e 83       	std	Y+6, r21	; 0x06
 26c:	4d 83       	std	Y+5, r20	; 0x05
 26e:	38 87       	std	Y+8, r19	; 0x08
 270:	2f 83       	std	Y+7, r18	; 0x07
 272:	1a 87       	std	Y+10, r17	; 0x0a
 274:	09 87       	std	Y+9, r16	; 0x09
 276:	fc 86       	std	Y+12, r15	; 0x0c
 278:	eb 86       	std	Y+11, r14	; 0x0b
 27a:	de 86       	std	Y+14, r13	; 0x0e
 27c:	cd 86       	std	Y+13, r12	; 0x0d
 27e:	b8 8a       	std	Y+16, r11	; 0x10
 280:	af 86       	std	Y+15, r10	; 0x0f
 282:	9a 8a       	std	Y+18, r9	; 0x12
 284:	89 8a       	std	Y+17, r8	; 0x11
	, _rxen(rxen)
	, _txen(txen)
	, _rxcie(rxcie)
	, _udrie(udrie)
	, _u2x(u2x)
	, transmitting(false)
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	9a 81       	ldd	r25, Y+2	; 0x02
 28a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 28e:	e9 81       	ldd	r30, Y+1	; 0x01
 290:	fa 81       	ldd	r31, Y+2	; 0x02
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	91 83       	std	Z+1, r25	; 0x01
 298:	80 83       	st	Z, r24
 29a:	e9 81       	ldd	r30, Y+1	; 0x01
 29c:	fa 81       	ldd	r31, Y+2	; 0x02
 29e:	8b 81       	ldd	r24, Y+3	; 0x03
 2a0:	9c 81       	ldd	r25, Y+4	; 0x04
 2a2:	95 87       	std	Z+13, r25	; 0x0d
 2a4:	84 87       	std	Z+12, r24	; 0x0c
 2a6:	e9 81       	ldd	r30, Y+1	; 0x01
 2a8:	fa 81       	ldd	r31, Y+2	; 0x02
 2aa:	8d 81       	ldd	r24, Y+5	; 0x05
 2ac:	9e 81       	ldd	r25, Y+6	; 0x06
 2ae:	97 87       	std	Z+15, r25	; 0x0f
 2b0:	86 87       	std	Z+14, r24	; 0x0e
 2b2:	e9 81       	ldd	r30, Y+1	; 0x01
 2b4:	fa 81       	ldd	r31, Y+2	; 0x02
 2b6:	8f 81       	ldd	r24, Y+7	; 0x07
 2b8:	98 85       	ldd	r25, Y+8	; 0x08
 2ba:	91 8b       	std	Z+17, r25	; 0x11
 2bc:	80 8b       	std	Z+16, r24	; 0x10
 2be:	e9 81       	ldd	r30, Y+1	; 0x01
 2c0:	fa 81       	ldd	r31, Y+2	; 0x02
 2c2:	89 85       	ldd	r24, Y+9	; 0x09
 2c4:	9a 85       	ldd	r25, Y+10	; 0x0a
 2c6:	93 8b       	std	Z+19, r25	; 0x13
 2c8:	82 8b       	std	Z+18, r24	; 0x12
 2ca:	e9 81       	ldd	r30, Y+1	; 0x01
 2cc:	fa 81       	ldd	r31, Y+2	; 0x02
 2ce:	8b 85       	ldd	r24, Y+11	; 0x0b
 2d0:	9c 85       	ldd	r25, Y+12	; 0x0c
 2d2:	95 8b       	std	Z+21, r25	; 0x15
 2d4:	84 8b       	std	Z+20, r24	; 0x14
 2d6:	e9 81       	ldd	r30, Y+1	; 0x01
 2d8:	fa 81       	ldd	r31, Y+2	; 0x02
 2da:	8d 85       	ldd	r24, Y+13	; 0x0d
 2dc:	9e 85       	ldd	r25, Y+14	; 0x0e
 2de:	97 8b       	std	Z+23, r25	; 0x17
 2e0:	86 8b       	std	Z+22, r24	; 0x16
 2e2:	e9 81       	ldd	r30, Y+1	; 0x01
 2e4:	fa 81       	ldd	r31, Y+2	; 0x02
 2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
 2e8:	98 89       	ldd	r25, Y+16	; 0x10
 2ea:	91 8f       	std	Z+25, r25	; 0x19
 2ec:	80 8f       	std	Z+24, r24	; 0x18
 2ee:	e9 81       	ldd	r30, Y+1	; 0x01
 2f0:	fa 81       	ldd	r31, Y+2	; 0x02
 2f2:	89 89       	ldd	r24, Y+17	; 0x11
 2f4:	9a 89       	ldd	r25, Y+18	; 0x12
 2f6:	93 8f       	std	Z+27, r25	; 0x1b
 2f8:	82 8f       	std	Z+26, r24	; 0x1a
 2fa:	e9 81       	ldd	r30, Y+1	; 0x01
 2fc:	fa 81       	ldd	r31, Y+2	; 0x02
 2fe:	89 a1       	ldd	r24, Y+33	; 0x21
 300:	84 8f       	std	Z+28, r24	; 0x1c
 302:	e9 81       	ldd	r30, Y+1	; 0x01
 304:	fa 81       	ldd	r31, Y+2	; 0x02
 306:	8a a1       	ldd	r24, Y+34	; 0x22
 308:	85 8f       	std	Z+29, r24	; 0x1d
 30a:	e9 81       	ldd	r30, Y+1	; 0x01
 30c:	fa 81       	ldd	r31, Y+2	; 0x02
 30e:	8b a1       	ldd	r24, Y+35	; 0x23
 310:	86 8f       	std	Z+30, r24	; 0x1e
 312:	e9 81       	ldd	r30, Y+1	; 0x01
 314:	fa 81       	ldd	r31, Y+2	; 0x02
 316:	8c a1       	ldd	r24, Y+36	; 0x24
 318:	87 8f       	std	Z+31, r24	; 0x1f
 31a:	e9 81       	ldd	r30, Y+1	; 0x01
 31c:	fa 81       	ldd	r31, Y+2	; 0x02
 31e:	8d a1       	ldd	r24, Y+37	; 0x25
 320:	80 a3       	std	Z+32, r24	; 0x20
 322:	e9 81       	ldd	r30, Y+1	; 0x01
 324:	fa 81       	ldd	r31, Y+2	; 0x02
 326:	11 a2       	std	Z+33, r1	; 0x21
{
}
 328:	62 96       	adiw	r28, 0x12	; 18
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	cf 91       	pop	r28
 336:	df 91       	pop	r29
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	df 90       	pop	r13
 342:	cf 90       	pop	r12
 344:	bf 90       	pop	r11
 346:	af 90       	pop	r10
 348:	9f 90       	pop	r9
 34a:	8f 90       	pop	r8
 34c:	08 95       	ret

0000034e <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 34e:	8f 92       	push	r8
 350:	9f 92       	push	r9
 352:	af 92       	push	r10
 354:	bf 92       	push	r11
 356:	cf 92       	push	r12
 358:	df 92       	push	r13
 35a:	ef 92       	push	r14
 35c:	ff 92       	push	r15
 35e:	0f 93       	push	r16
 360:	1f 93       	push	r17
 362:	df 93       	push	r29
 364:	cf 93       	push	r28
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	62 97       	sbiw	r28, 0x12	; 18
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
 376:	9a 83       	std	Y+2, r25	; 0x02
 378:	89 83       	std	Y+1, r24	; 0x01
 37a:	7c 83       	std	Y+4, r23	; 0x04
 37c:	6b 83       	std	Y+3, r22	; 0x03
 37e:	5e 83       	std	Y+6, r21	; 0x06
 380:	4d 83       	std	Y+5, r20	; 0x05
 382:	38 87       	std	Y+8, r19	; 0x08
 384:	2f 83       	std	Y+7, r18	; 0x07
 386:	1a 87       	std	Y+10, r17	; 0x0a
 388:	09 87       	std	Y+9, r16	; 0x09
 38a:	fc 86       	std	Y+12, r15	; 0x0c
 38c:	eb 86       	std	Y+11, r14	; 0x0b
 38e:	de 86       	std	Y+14, r13	; 0x0e
 390:	cd 86       	std	Y+13, r12	; 0x0d
 392:	b8 8a       	std	Y+16, r11	; 0x10
 394:	af 86       	std	Y+15, r10	; 0x0f
 396:	9a 8a       	std	Y+18, r9	; 0x12
 398:	89 8a       	std	Y+17, r8	; 0x11
	, _rxen(rxen)
	, _txen(txen)
	, _rxcie(rxcie)
	, _udrie(udrie)
	, _u2x(u2x)
	, transmitting(false)
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	9a 81       	ldd	r25, Y+2	; 0x02
 39e:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 3a2:	e9 81       	ldd	r30, Y+1	; 0x01
 3a4:	fa 81       	ldd	r31, Y+2	; 0x02
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	91 83       	std	Z+1, r25	; 0x01
 3ac:	80 83       	st	Z, r24
 3ae:	e9 81       	ldd	r30, Y+1	; 0x01
 3b0:	fa 81       	ldd	r31, Y+2	; 0x02
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	9c 81       	ldd	r25, Y+4	; 0x04
 3b6:	95 87       	std	Z+13, r25	; 0x0d
 3b8:	84 87       	std	Z+12, r24	; 0x0c
 3ba:	e9 81       	ldd	r30, Y+1	; 0x01
 3bc:	fa 81       	ldd	r31, Y+2	; 0x02
 3be:	8d 81       	ldd	r24, Y+5	; 0x05
 3c0:	9e 81       	ldd	r25, Y+6	; 0x06
 3c2:	97 87       	std	Z+15, r25	; 0x0f
 3c4:	86 87       	std	Z+14, r24	; 0x0e
 3c6:	e9 81       	ldd	r30, Y+1	; 0x01
 3c8:	fa 81       	ldd	r31, Y+2	; 0x02
 3ca:	8f 81       	ldd	r24, Y+7	; 0x07
 3cc:	98 85       	ldd	r25, Y+8	; 0x08
 3ce:	91 8b       	std	Z+17, r25	; 0x11
 3d0:	80 8b       	std	Z+16, r24	; 0x10
 3d2:	e9 81       	ldd	r30, Y+1	; 0x01
 3d4:	fa 81       	ldd	r31, Y+2	; 0x02
 3d6:	89 85       	ldd	r24, Y+9	; 0x09
 3d8:	9a 85       	ldd	r25, Y+10	; 0x0a
 3da:	93 8b       	std	Z+19, r25	; 0x13
 3dc:	82 8b       	std	Z+18, r24	; 0x12
 3de:	e9 81       	ldd	r30, Y+1	; 0x01
 3e0:	fa 81       	ldd	r31, Y+2	; 0x02
 3e2:	8b 85       	ldd	r24, Y+11	; 0x0b
 3e4:	9c 85       	ldd	r25, Y+12	; 0x0c
 3e6:	95 8b       	std	Z+21, r25	; 0x15
 3e8:	84 8b       	std	Z+20, r24	; 0x14
 3ea:	e9 81       	ldd	r30, Y+1	; 0x01
 3ec:	fa 81       	ldd	r31, Y+2	; 0x02
 3ee:	8d 85       	ldd	r24, Y+13	; 0x0d
 3f0:	9e 85       	ldd	r25, Y+14	; 0x0e
 3f2:	97 8b       	std	Z+23, r25	; 0x17
 3f4:	86 8b       	std	Z+22, r24	; 0x16
 3f6:	e9 81       	ldd	r30, Y+1	; 0x01
 3f8:	fa 81       	ldd	r31, Y+2	; 0x02
 3fa:	8f 85       	ldd	r24, Y+15	; 0x0f
 3fc:	98 89       	ldd	r25, Y+16	; 0x10
 3fe:	91 8f       	std	Z+25, r25	; 0x19
 400:	80 8f       	std	Z+24, r24	; 0x18
 402:	e9 81       	ldd	r30, Y+1	; 0x01
 404:	fa 81       	ldd	r31, Y+2	; 0x02
 406:	89 89       	ldd	r24, Y+17	; 0x11
 408:	9a 89       	ldd	r25, Y+18	; 0x12
 40a:	93 8f       	std	Z+27, r25	; 0x1b
 40c:	82 8f       	std	Z+26, r24	; 0x1a
 40e:	e9 81       	ldd	r30, Y+1	; 0x01
 410:	fa 81       	ldd	r31, Y+2	; 0x02
 412:	89 a1       	ldd	r24, Y+33	; 0x21
 414:	84 8f       	std	Z+28, r24	; 0x1c
 416:	e9 81       	ldd	r30, Y+1	; 0x01
 418:	fa 81       	ldd	r31, Y+2	; 0x02
 41a:	8a a1       	ldd	r24, Y+34	; 0x22
 41c:	85 8f       	std	Z+29, r24	; 0x1d
 41e:	e9 81       	ldd	r30, Y+1	; 0x01
 420:	fa 81       	ldd	r31, Y+2	; 0x02
 422:	8b a1       	ldd	r24, Y+35	; 0x23
 424:	86 8f       	std	Z+30, r24	; 0x1e
 426:	e9 81       	ldd	r30, Y+1	; 0x01
 428:	fa 81       	ldd	r31, Y+2	; 0x02
 42a:	8c a1       	ldd	r24, Y+36	; 0x24
 42c:	87 8f       	std	Z+31, r24	; 0x1f
 42e:	e9 81       	ldd	r30, Y+1	; 0x01
 430:	fa 81       	ldd	r31, Y+2	; 0x02
 432:	8d a1       	ldd	r24, Y+37	; 0x25
 434:	80 a3       	std	Z+32, r24	; 0x20
 436:	e9 81       	ldd	r30, Y+1	; 0x01
 438:	fa 81       	ldd	r31, Y+2	; 0x02
 43a:	11 a2       	std	Z+33, r1	; 0x21
{
}
 43c:	62 96       	adiw	r28, 0x12	; 18
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
 448:	cf 91       	pop	r28
 44a:	df 91       	pop	r29
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	ff 90       	pop	r15
 452:	ef 90       	pop	r14
 454:	df 90       	pop	r13
 456:	cf 90       	pop	r12
 458:	bf 90       	pop	r11
 45a:	af 90       	pop	r10
 45c:	9f 90       	pop	r9
 45e:	8f 90       	pop	r8
 460:	08 95       	ret

00000462 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
 462:	df 93       	push	r29
 464:	cf 93       	push	r28
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	29 97       	sbiw	r28, 0x09	; 9
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	9d 83       	std	Y+5, r25	; 0x05
 478:	8c 83       	std	Y+4, r24	; 0x04
 47a:	4e 83       	std	Y+6, r20	; 0x06
 47c:	5f 83       	std	Y+7, r21	; 0x07
 47e:	68 87       	std	Y+8, r22	; 0x08
 480:	79 87       	std	Y+9, r23	; 0x09
{
  uint16_t baud_setting;
  bool use_u2x = true;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	89 83       	std	Y+1, r24	; 0x01
  }
#endif

try_again:
  
  if (use_u2x) {
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	88 23       	and	r24, r24
 48a:	01 f0       	breq	.+0      	; 0x48c <_ZN14HardwareSerial5beginEm+0x2a>
    *_ucsra = 1 << _u2x;
 48c:	ec 81       	ldd	r30, Y+4	; 0x04
 48e:	fd 81       	ldd	r31, Y+5	; 0x05
 490:	a4 89       	ldd	r26, Z+20	; 0x14
 492:	b5 89       	ldd	r27, Z+21	; 0x15
 494:	ec 81       	ldd	r30, Y+4	; 0x04
 496:	fd 81       	ldd	r31, Y+5	; 0x05
 498:	80 a1       	ldd	r24, Z+32	; 0x20
 49a:	28 2f       	mov	r18, r24
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <_ZN14HardwareSerial5beginEm+0x42>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	2a 95       	dec	r18
 4aa:	02 f4       	brpl	.+0      	; 0x4ac <_ZN14HardwareSerial5beginEm+0x4a>
 4ac:	8c 93       	st	X, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 4ae:	80 e8       	ldi	r24, 0x80	; 128
 4b0:	94 e8       	ldi	r25, 0x84	; 132
 4b2:	ae e1       	ldi	r26, 0x1E	; 30
 4b4:	b0 e0       	ldi	r27, 0x00	; 0
 4b6:	2e 81       	ldd	r18, Y+6	; 0x06
 4b8:	3f 81       	ldd	r19, Y+7	; 0x07
 4ba:	48 85       	ldd	r20, Y+8	; 0x08
 4bc:	59 85       	ldd	r21, Y+9	; 0x09
 4be:	bc 01       	movw	r22, r24
 4c0:	cd 01       	movw	r24, r26
 4c2:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 4c6:	da 01       	movw	r26, r20
 4c8:	c9 01       	movw	r24, r18
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	a1 09       	sbc	r26, r1
 4ce:	b1 09       	sbc	r27, r1
 4d0:	b6 95       	lsr	r27
 4d2:	a7 95       	ror	r26
 4d4:	97 95       	ror	r25
 4d6:	87 95       	ror	r24
 4d8:	9b 83       	std	Y+3, r25	; 0x03
 4da:	8a 83       	std	Y+2, r24	; 0x02
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <_ZN14HardwareSerial5beginEm+0x7c>
  } else {
    *_ucsra = 0;
 4de:	ec 81       	ldd	r30, Y+4	; 0x04
 4e0:	fd 81       	ldd	r31, Y+5	; 0x05
 4e2:	04 88       	ldd	r0, Z+20	; 0x14
 4e4:	f5 89       	ldd	r31, Z+21	; 0x15
 4e6:	e0 2d       	mov	r30, r0
 4e8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 4ea:	80 e4       	ldi	r24, 0x40	; 64
 4ec:	92 e4       	ldi	r25, 0x42	; 66
 4ee:	af e0       	ldi	r26, 0x0F	; 15
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	2e 81       	ldd	r18, Y+6	; 0x06
 4f4:	3f 81       	ldd	r19, Y+7	; 0x07
 4f6:	48 85       	ldd	r20, Y+8	; 0x08
 4f8:	59 85       	ldd	r21, Y+9	; 0x09
 4fa:	bc 01       	movw	r22, r24
 4fc:	cd 01       	movw	r24, r26
 4fe:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 502:	da 01       	movw	r26, r20
 504:	c9 01       	movw	r24, r18
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	a1 09       	sbc	r26, r1
 50a:	b1 09       	sbc	r27, r1
 50c:	b6 95       	lsr	r27
 50e:	a7 95       	ror	r26
 510:	97 95       	ror	r25
 512:	87 95       	ror	r24
 514:	9b 83       	std	Y+3, r25	; 0x03
 516:	8a 83       	std	Y+2, r24	; 0x02
  }
  
  if ((baud_setting > 4095) && use_u2x)
 518:	8a 81       	ldd	r24, Y+2	; 0x02
 51a:	9b 81       	ldd	r25, Y+3	; 0x03
 51c:	20 e1       	ldi	r18, 0x10	; 16
 51e:	80 30       	cpi	r24, 0x00	; 0
 520:	92 07       	cpc	r25, r18
 522:	00 f0       	brcs	.+0      	; 0x524 <_ZN14HardwareSerial5beginEm+0xc2>
 524:	89 81       	ldd	r24, Y+1	; 0x01
 526:	88 23       	and	r24, r24
 528:	01 f0       	breq	.+0      	; 0x52a <_ZN14HardwareSerial5beginEm+0xc8>
  {
    use_u2x = false;
 52a:	19 82       	std	Y+1, r1	; 0x01
 52c:	00 c0       	rjmp	.+0      	; 0x52e <_ZN14HardwareSerial5beginEm+0xcc>
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 52e:	ec 81       	ldd	r30, Y+4	; 0x04
 530:	fd 81       	ldd	r31, Y+5	; 0x05
 532:	00 88       	ldd	r0, Z+16	; 0x10
 534:	f1 89       	ldd	r31, Z+17	; 0x11
 536:	e0 2d       	mov	r30, r0
 538:	8a 81       	ldd	r24, Y+2	; 0x02
 53a:	9b 81       	ldd	r25, Y+3	; 0x03
 53c:	89 2f       	mov	r24, r25
 53e:	99 27       	eor	r25, r25
 540:	80 83       	st	Z, r24
  *_ubrrl = baud_setting;
 542:	ec 81       	ldd	r30, Y+4	; 0x04
 544:	fd 81       	ldd	r31, Y+5	; 0x05
 546:	02 88       	ldd	r0, Z+18	; 0x12
 548:	f3 89       	ldd	r31, Z+19	; 0x13
 54a:	e0 2d       	mov	r30, r0
 54c:	8a 81       	ldd	r24, Y+2	; 0x02
 54e:	80 83       	st	Z, r24

  transmitting = false;
 550:	ec 81       	ldd	r30, Y+4	; 0x04
 552:	fd 81       	ldd	r31, Y+5	; 0x05
 554:	11 a2       	std	Z+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
 556:	ec 81       	ldd	r30, Y+4	; 0x04
 558:	fd 81       	ldd	r31, Y+5	; 0x05
 55a:	a6 89       	ldd	r26, Z+22	; 0x16
 55c:	b7 89       	ldd	r27, Z+23	; 0x17
 55e:	ec 81       	ldd	r30, Y+4	; 0x04
 560:	fd 81       	ldd	r31, Y+5	; 0x05
 562:	06 88       	ldd	r0, Z+22	; 0x16
 564:	f7 89       	ldd	r31, Z+23	; 0x17
 566:	e0 2d       	mov	r30, r0
 568:	80 81       	ld	r24, Z
 56a:	48 2f       	mov	r20, r24
 56c:	ec 81       	ldd	r30, Y+4	; 0x04
 56e:	fd 81       	ldd	r31, Y+5	; 0x05
 570:	84 8d       	ldd	r24, Z+28	; 0x1c
 572:	28 2f       	mov	r18, r24
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	00 c0       	rjmp	.+0      	; 0x57c <_ZN14HardwareSerial5beginEm+0x11a>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	2a 95       	dec	r18
 582:	02 f4       	brpl	.+0      	; 0x584 <_ZN14HardwareSerial5beginEm+0x122>
 584:	84 2b       	or	r24, r20
 586:	8c 93       	st	X, r24
  sbi(*_ucsrb, _txen);
 588:	ec 81       	ldd	r30, Y+4	; 0x04
 58a:	fd 81       	ldd	r31, Y+5	; 0x05
 58c:	a6 89       	ldd	r26, Z+22	; 0x16
 58e:	b7 89       	ldd	r27, Z+23	; 0x17
 590:	ec 81       	ldd	r30, Y+4	; 0x04
 592:	fd 81       	ldd	r31, Y+5	; 0x05
 594:	06 88       	ldd	r0, Z+22	; 0x16
 596:	f7 89       	ldd	r31, Z+23	; 0x17
 598:	e0 2d       	mov	r30, r0
 59a:	80 81       	ld	r24, Z
 59c:	48 2f       	mov	r20, r24
 59e:	ec 81       	ldd	r30, Y+4	; 0x04
 5a0:	fd 81       	ldd	r31, Y+5	; 0x05
 5a2:	85 8d       	ldd	r24, Z+29	; 0x1d
 5a4:	28 2f       	mov	r18, r24
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <_ZN14HardwareSerial5beginEm+0x14c>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	2a 95       	dec	r18
 5b4:	02 f4       	brpl	.+0      	; 0x5b6 <_ZN14HardwareSerial5beginEm+0x154>
 5b6:	84 2b       	or	r24, r20
 5b8:	8c 93       	st	X, r24
  sbi(*_ucsrb, _rxcie);
 5ba:	ec 81       	ldd	r30, Y+4	; 0x04
 5bc:	fd 81       	ldd	r31, Y+5	; 0x05
 5be:	a6 89       	ldd	r26, Z+22	; 0x16
 5c0:	b7 89       	ldd	r27, Z+23	; 0x17
 5c2:	ec 81       	ldd	r30, Y+4	; 0x04
 5c4:	fd 81       	ldd	r31, Y+5	; 0x05
 5c6:	06 88       	ldd	r0, Z+22	; 0x16
 5c8:	f7 89       	ldd	r31, Z+23	; 0x17
 5ca:	e0 2d       	mov	r30, r0
 5cc:	80 81       	ld	r24, Z
 5ce:	48 2f       	mov	r20, r24
 5d0:	ec 81       	ldd	r30, Y+4	; 0x04
 5d2:	fd 81       	ldd	r31, Y+5	; 0x05
 5d4:	86 8d       	ldd	r24, Z+30	; 0x1e
 5d6:	28 2f       	mov	r18, r24
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <_ZN14HardwareSerial5beginEm+0x17e>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	2a 95       	dec	r18
 5e6:	02 f4       	brpl	.+0      	; 0x5e8 <_ZN14HardwareSerial5beginEm+0x186>
 5e8:	84 2b       	or	r24, r20
 5ea:	8c 93       	st	X, r24
  cbi(*_ucsrb, _udrie);
 5ec:	ec 81       	ldd	r30, Y+4	; 0x04
 5ee:	fd 81       	ldd	r31, Y+5	; 0x05
 5f0:	a6 89       	ldd	r26, Z+22	; 0x16
 5f2:	b7 89       	ldd	r27, Z+23	; 0x17
 5f4:	ec 81       	ldd	r30, Y+4	; 0x04
 5f6:	fd 81       	ldd	r31, Y+5	; 0x05
 5f8:	06 88       	ldd	r0, Z+22	; 0x16
 5fa:	f7 89       	ldd	r31, Z+23	; 0x17
 5fc:	e0 2d       	mov	r30, r0
 5fe:	80 81       	ld	r24, Z
 600:	48 2f       	mov	r20, r24
 602:	ec 81       	ldd	r30, Y+4	; 0x04
 604:	fd 81       	ldd	r31, Y+5	; 0x05
 606:	87 8d       	ldd	r24, Z+31	; 0x1f
 608:	28 2f       	mov	r18, r24
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	02 2e       	mov	r0, r18
 612:	00 c0       	rjmp	.+0      	; 0x614 <_ZN14HardwareSerial5beginEm+0x1b2>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	0a 94       	dec	r0
 61a:	02 f4       	brpl	.+0      	; 0x61c <_ZN14HardwareSerial5beginEm+0x1ba>
 61c:	80 95       	com	r24
 61e:	84 23       	and	r24, r20
 620:	8c 93       	st	X, r24
}
 622:	29 96       	adiw	r28, 0x09	; 9
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	f8 94       	cli
 628:	de bf       	out	0x3e, r29	; 62
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	cd bf       	out	0x3d, r28	; 61
 62e:	cf 91       	pop	r28
 630:	df 91       	pop	r29
 632:	08 95       	ret

00000634 <_ZN14HardwareSerial5beginEmh>:

void HardwareSerial::begin(unsigned long baud, byte config)
 634:	df 93       	push	r29
 636:	cf 93       	push	r28
 638:	cd b7       	in	r28, 0x3d	; 61
 63a:	de b7       	in	r29, 0x3e	; 62
 63c:	2a 97       	sbiw	r28, 0x0a	; 10
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	f8 94       	cli
 642:	de bf       	out	0x3e, r29	; 62
 644:	0f be       	out	0x3f, r0	; 63
 646:	cd bf       	out	0x3d, r28	; 61
 648:	9d 83       	std	Y+5, r25	; 0x05
 64a:	8c 83       	std	Y+4, r24	; 0x04
 64c:	4e 83       	std	Y+6, r20	; 0x06
 64e:	5f 83       	std	Y+7, r21	; 0x07
 650:	68 87       	std	Y+8, r22	; 0x08
 652:	79 87       	std	Y+9, r23	; 0x09
 654:	2a 87       	std	Y+10, r18	; 0x0a
{
  uint16_t baud_setting;
  //uint8_t current_config;
  bool use_u2x = true;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	89 83       	std	Y+1, r24	; 0x01
  }
#endif

try_again:
  
  if (use_u2x) {
 65a:	89 81       	ldd	r24, Y+1	; 0x01
 65c:	88 23       	and	r24, r24
 65e:	01 f0       	breq	.+0      	; 0x660 <_ZN14HardwareSerial5beginEmh+0x2c>
    *_ucsra = 1 << _u2x;
 660:	ec 81       	ldd	r30, Y+4	; 0x04
 662:	fd 81       	ldd	r31, Y+5	; 0x05
 664:	a4 89       	ldd	r26, Z+20	; 0x14
 666:	b5 89       	ldd	r27, Z+21	; 0x15
 668:	ec 81       	ldd	r30, Y+4	; 0x04
 66a:	fd 81       	ldd	r31, Y+5	; 0x05
 66c:	80 a1       	ldd	r24, Z+32	; 0x20
 66e:	28 2f       	mov	r18, r24
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	00 c0       	rjmp	.+0      	; 0x678 <_ZN14HardwareSerial5beginEmh+0x44>
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	2a 95       	dec	r18
 67e:	02 f4       	brpl	.+0      	; 0x680 <_ZN14HardwareSerial5beginEmh+0x4c>
 680:	8c 93       	st	X, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 682:	80 e8       	ldi	r24, 0x80	; 128
 684:	94 e8       	ldi	r25, 0x84	; 132
 686:	ae e1       	ldi	r26, 0x1E	; 30
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	2e 81       	ldd	r18, Y+6	; 0x06
 68c:	3f 81       	ldd	r19, Y+7	; 0x07
 68e:	48 85       	ldd	r20, Y+8	; 0x08
 690:	59 85       	ldd	r21, Y+9	; 0x09
 692:	bc 01       	movw	r22, r24
 694:	cd 01       	movw	r24, r26
 696:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 69a:	da 01       	movw	r26, r20
 69c:	c9 01       	movw	r24, r18
 69e:	01 97       	sbiw	r24, 0x01	; 1
 6a0:	a1 09       	sbc	r26, r1
 6a2:	b1 09       	sbc	r27, r1
 6a4:	b6 95       	lsr	r27
 6a6:	a7 95       	ror	r26
 6a8:	97 95       	ror	r25
 6aa:	87 95       	ror	r24
 6ac:	9b 83       	std	Y+3, r25	; 0x03
 6ae:	8a 83       	std	Y+2, r24	; 0x02
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <_ZN14HardwareSerial5beginEmh+0x7e>
  } else {
    *_ucsra = 0;
 6b2:	ec 81       	ldd	r30, Y+4	; 0x04
 6b4:	fd 81       	ldd	r31, Y+5	; 0x05
 6b6:	04 88       	ldd	r0, Z+20	; 0x14
 6b8:	f5 89       	ldd	r31, Z+21	; 0x15
 6ba:	e0 2d       	mov	r30, r0
 6bc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 6be:	80 e4       	ldi	r24, 0x40	; 64
 6c0:	92 e4       	ldi	r25, 0x42	; 66
 6c2:	af e0       	ldi	r26, 0x0F	; 15
 6c4:	b0 e0       	ldi	r27, 0x00	; 0
 6c6:	2e 81       	ldd	r18, Y+6	; 0x06
 6c8:	3f 81       	ldd	r19, Y+7	; 0x07
 6ca:	48 85       	ldd	r20, Y+8	; 0x08
 6cc:	59 85       	ldd	r21, Y+9	; 0x09
 6ce:	bc 01       	movw	r22, r24
 6d0:	cd 01       	movw	r24, r26
 6d2:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 6d6:	da 01       	movw	r26, r20
 6d8:	c9 01       	movw	r24, r18
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	a1 09       	sbc	r26, r1
 6de:	b1 09       	sbc	r27, r1
 6e0:	b6 95       	lsr	r27
 6e2:	a7 95       	ror	r26
 6e4:	97 95       	ror	r25
 6e6:	87 95       	ror	r24
 6e8:	9b 83       	std	Y+3, r25	; 0x03
 6ea:	8a 83       	std	Y+2, r24	; 0x02
  }
  
  if ((baud_setting > 4095) && use_u2x)
 6ec:	8a 81       	ldd	r24, Y+2	; 0x02
 6ee:	9b 81       	ldd	r25, Y+3	; 0x03
 6f0:	20 e1       	ldi	r18, 0x10	; 16
 6f2:	80 30       	cpi	r24, 0x00	; 0
 6f4:	92 07       	cpc	r25, r18
 6f6:	00 f0       	brcs	.+0      	; 0x6f8 <_ZN14HardwareSerial5beginEmh+0xc4>
 6f8:	89 81       	ldd	r24, Y+1	; 0x01
 6fa:	88 23       	and	r24, r24
 6fc:	01 f0       	breq	.+0      	; 0x6fe <_ZN14HardwareSerial5beginEmh+0xca>
  {
    use_u2x = false;
 6fe:	19 82       	std	Y+1, r1	; 0x01
 700:	00 c0       	rjmp	.+0      	; 0x702 <_ZN14HardwareSerial5beginEmh+0xce>
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 702:	ec 81       	ldd	r30, Y+4	; 0x04
 704:	fd 81       	ldd	r31, Y+5	; 0x05
 706:	00 88       	ldd	r0, Z+16	; 0x10
 708:	f1 89       	ldd	r31, Z+17	; 0x11
 70a:	e0 2d       	mov	r30, r0
 70c:	8a 81       	ldd	r24, Y+2	; 0x02
 70e:	9b 81       	ldd	r25, Y+3	; 0x03
 710:	89 2f       	mov	r24, r25
 712:	99 27       	eor	r25, r25
 714:	80 83       	st	Z, r24
  *_ubrrl = baud_setting;
 716:	ec 81       	ldd	r30, Y+4	; 0x04
 718:	fd 81       	ldd	r31, Y+5	; 0x05
 71a:	02 88       	ldd	r0, Z+18	; 0x12
 71c:	f3 89       	ldd	r31, Z+19	; 0x13
 71e:	e0 2d       	mov	r30, r0
 720:	8a 81       	ldd	r24, Y+2	; 0x02
 722:	80 83       	st	Z, r24

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 724:	ec 81       	ldd	r30, Y+4	; 0x04
 726:	fd 81       	ldd	r31, Y+5	; 0x05
 728:	00 8c       	ldd	r0, Z+24	; 0x18
 72a:	f1 8d       	ldd	r31, Z+25	; 0x19
 72c:	e0 2d       	mov	r30, r0
 72e:	8a 85       	ldd	r24, Y+10	; 0x0a
 730:	80 83       	st	Z, r24
  
  sbi(*_ucsrb, _rxen);
 732:	ec 81       	ldd	r30, Y+4	; 0x04
 734:	fd 81       	ldd	r31, Y+5	; 0x05
 736:	a6 89       	ldd	r26, Z+22	; 0x16
 738:	b7 89       	ldd	r27, Z+23	; 0x17
 73a:	ec 81       	ldd	r30, Y+4	; 0x04
 73c:	fd 81       	ldd	r31, Y+5	; 0x05
 73e:	06 88       	ldd	r0, Z+22	; 0x16
 740:	f7 89       	ldd	r31, Z+23	; 0x17
 742:	e0 2d       	mov	r30, r0
 744:	80 81       	ld	r24, Z
 746:	48 2f       	mov	r20, r24
 748:	ec 81       	ldd	r30, Y+4	; 0x04
 74a:	fd 81       	ldd	r31, Y+5	; 0x05
 74c:	84 8d       	ldd	r24, Z+28	; 0x1c
 74e:	28 2f       	mov	r18, r24
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	00 c0       	rjmp	.+0      	; 0x758 <_ZN14HardwareSerial5beginEmh+0x124>
 758:	88 0f       	add	r24, r24
 75a:	99 1f       	adc	r25, r25
 75c:	2a 95       	dec	r18
 75e:	02 f4       	brpl	.+0      	; 0x760 <_ZN14HardwareSerial5beginEmh+0x12c>
 760:	84 2b       	or	r24, r20
 762:	8c 93       	st	X, r24
  sbi(*_ucsrb, _txen);
 764:	ec 81       	ldd	r30, Y+4	; 0x04
 766:	fd 81       	ldd	r31, Y+5	; 0x05
 768:	a6 89       	ldd	r26, Z+22	; 0x16
 76a:	b7 89       	ldd	r27, Z+23	; 0x17
 76c:	ec 81       	ldd	r30, Y+4	; 0x04
 76e:	fd 81       	ldd	r31, Y+5	; 0x05
 770:	06 88       	ldd	r0, Z+22	; 0x16
 772:	f7 89       	ldd	r31, Z+23	; 0x17
 774:	e0 2d       	mov	r30, r0
 776:	80 81       	ld	r24, Z
 778:	48 2f       	mov	r20, r24
 77a:	ec 81       	ldd	r30, Y+4	; 0x04
 77c:	fd 81       	ldd	r31, Y+5	; 0x05
 77e:	85 8d       	ldd	r24, Z+29	; 0x1d
 780:	28 2f       	mov	r18, r24
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	00 c0       	rjmp	.+0      	; 0x78a <_ZN14HardwareSerial5beginEmh+0x156>
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	2a 95       	dec	r18
 790:	02 f4       	brpl	.+0      	; 0x792 <_ZN14HardwareSerial5beginEmh+0x15e>
 792:	84 2b       	or	r24, r20
 794:	8c 93       	st	X, r24
  sbi(*_ucsrb, _rxcie);
 796:	ec 81       	ldd	r30, Y+4	; 0x04
 798:	fd 81       	ldd	r31, Y+5	; 0x05
 79a:	a6 89       	ldd	r26, Z+22	; 0x16
 79c:	b7 89       	ldd	r27, Z+23	; 0x17
 79e:	ec 81       	ldd	r30, Y+4	; 0x04
 7a0:	fd 81       	ldd	r31, Y+5	; 0x05
 7a2:	06 88       	ldd	r0, Z+22	; 0x16
 7a4:	f7 89       	ldd	r31, Z+23	; 0x17
 7a6:	e0 2d       	mov	r30, r0
 7a8:	80 81       	ld	r24, Z
 7aa:	48 2f       	mov	r20, r24
 7ac:	ec 81       	ldd	r30, Y+4	; 0x04
 7ae:	fd 81       	ldd	r31, Y+5	; 0x05
 7b0:	86 8d       	ldd	r24, Z+30	; 0x1e
 7b2:	28 2f       	mov	r18, r24
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	00 c0       	rjmp	.+0      	; 0x7bc <_ZN14HardwareSerial5beginEmh+0x188>
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	2a 95       	dec	r18
 7c2:	02 f4       	brpl	.+0      	; 0x7c4 <_ZN14HardwareSerial5beginEmh+0x190>
 7c4:	84 2b       	or	r24, r20
 7c6:	8c 93       	st	X, r24
  cbi(*_ucsrb, _udrie);
 7c8:	ec 81       	ldd	r30, Y+4	; 0x04
 7ca:	fd 81       	ldd	r31, Y+5	; 0x05
 7cc:	a6 89       	ldd	r26, Z+22	; 0x16
 7ce:	b7 89       	ldd	r27, Z+23	; 0x17
 7d0:	ec 81       	ldd	r30, Y+4	; 0x04
 7d2:	fd 81       	ldd	r31, Y+5	; 0x05
 7d4:	06 88       	ldd	r0, Z+22	; 0x16
 7d6:	f7 89       	ldd	r31, Z+23	; 0x17
 7d8:	e0 2d       	mov	r30, r0
 7da:	80 81       	ld	r24, Z
 7dc:	48 2f       	mov	r20, r24
 7de:	ec 81       	ldd	r30, Y+4	; 0x04
 7e0:	fd 81       	ldd	r31, Y+5	; 0x05
 7e2:	87 8d       	ldd	r24, Z+31	; 0x1f
 7e4:	28 2f       	mov	r18, r24
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	02 2e       	mov	r0, r18
 7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <_ZN14HardwareSerial5beginEmh+0x1bc>
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	0a 94       	dec	r0
 7f6:	02 f4       	brpl	.+0      	; 0x7f8 <_ZN14HardwareSerial5beginEmh+0x1c4>
 7f8:	80 95       	com	r24
 7fa:	84 23       	and	r24, r20
 7fc:	8c 93       	st	X, r24
}
 7fe:	2a 96       	adiw	r28, 0x0a	; 10
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	f8 94       	cli
 804:	de bf       	out	0x3e, r29	; 62
 806:	0f be       	out	0x3f, r0	; 63
 808:	cd bf       	out	0x3d, r28	; 61
 80a:	cf 91       	pop	r28
 80c:	df 91       	pop	r29
 80e:	08 95       	ret

00000810 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
 810:	df 93       	push	r29
 812:	cf 93       	push	r28
 814:	00 d0       	rcall	.+0      	; 0x816 <_ZN14HardwareSerial3endEv+0x6>
 816:	0f 92       	push	r0
 818:	cd b7       	in	r28, 0x3d	; 61
 81a:	de b7       	in	r29, 0x3e	; 62
 81c:	9a 83       	std	Y+2, r25	; 0x02
 81e:	89 83       	std	Y+1, r24	; 0x01
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
 820:	e9 81       	ldd	r30, Y+1	; 0x01
 822:	fa 81       	ldd	r31, Y+2	; 0x02
 824:	86 85       	ldd	r24, Z+14	; 0x0e
 826:	97 85       	ldd	r25, Z+15	; 0x0f
 828:	fc 01       	movw	r30, r24
 82a:	e0 5c       	subi	r30, 0xC0	; 192
 82c:	ff 4f       	sbci	r31, 0xFF	; 255
 82e:	20 81       	ld	r18, Z
 830:	31 81       	ldd	r19, Z+1	; 0x01
 832:	e9 81       	ldd	r30, Y+1	; 0x01
 834:	fa 81       	ldd	r31, Y+2	; 0x02
 836:	86 85       	ldd	r24, Z+14	; 0x0e
 838:	97 85       	ldd	r25, Z+15	; 0x0f
 83a:	fc 01       	movw	r30, r24
 83c:	ee 5b       	subi	r30, 0xBE	; 190
 83e:	ff 4f       	sbci	r31, 0xFF	; 255
 840:	80 81       	ld	r24, Z
 842:	91 81       	ldd	r25, Z+1	; 0x01
 844:	1b 82       	std	Y+3, r1	; 0x03
 846:	28 17       	cp	r18, r24
 848:	39 07       	cpc	r19, r25
 84a:	01 f0       	breq	.+0      	; 0x84c <_ZN14HardwareSerial3endEv+0x3c>
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	8b 83       	std	Y+3, r24	; 0x03
 850:	8b 81       	ldd	r24, Y+3	; 0x03
 852:	88 23       	and	r24, r24
 854:	01 f4       	brne	.+0      	; 0x856 <_ZN14HardwareSerial3endEv+0x46>
    ;

  cbi(*_ucsrb, _rxen);
 856:	e9 81       	ldd	r30, Y+1	; 0x01
 858:	fa 81       	ldd	r31, Y+2	; 0x02
 85a:	a6 89       	ldd	r26, Z+22	; 0x16
 85c:	b7 89       	ldd	r27, Z+23	; 0x17
 85e:	e9 81       	ldd	r30, Y+1	; 0x01
 860:	fa 81       	ldd	r31, Y+2	; 0x02
 862:	06 88       	ldd	r0, Z+22	; 0x16
 864:	f7 89       	ldd	r31, Z+23	; 0x17
 866:	e0 2d       	mov	r30, r0
 868:	80 81       	ld	r24, Z
 86a:	48 2f       	mov	r20, r24
 86c:	e9 81       	ldd	r30, Y+1	; 0x01
 86e:	fa 81       	ldd	r31, Y+2	; 0x02
 870:	84 8d       	ldd	r24, Z+28	; 0x1c
 872:	28 2f       	mov	r18, r24
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	00 c0       	rjmp	.+0      	; 0x87c <_ZN14HardwareSerial3endEv+0x6c>
 87c:	88 0f       	add	r24, r24
 87e:	99 1f       	adc	r25, r25
 880:	2a 95       	dec	r18
 882:	02 f4       	brpl	.+0      	; 0x884 <_ZN14HardwareSerial3endEv+0x74>
 884:	80 95       	com	r24
 886:	84 23       	and	r24, r20
 888:	8c 93       	st	X, r24
  cbi(*_ucsrb, _txen);
 88a:	e9 81       	ldd	r30, Y+1	; 0x01
 88c:	fa 81       	ldd	r31, Y+2	; 0x02
 88e:	a6 89       	ldd	r26, Z+22	; 0x16
 890:	b7 89       	ldd	r27, Z+23	; 0x17
 892:	e9 81       	ldd	r30, Y+1	; 0x01
 894:	fa 81       	ldd	r31, Y+2	; 0x02
 896:	06 88       	ldd	r0, Z+22	; 0x16
 898:	f7 89       	ldd	r31, Z+23	; 0x17
 89a:	e0 2d       	mov	r30, r0
 89c:	80 81       	ld	r24, Z
 89e:	48 2f       	mov	r20, r24
 8a0:	e9 81       	ldd	r30, Y+1	; 0x01
 8a2:	fa 81       	ldd	r31, Y+2	; 0x02
 8a4:	85 8d       	ldd	r24, Z+29	; 0x1d
 8a6:	28 2f       	mov	r18, r24
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <_ZN14HardwareSerial3endEv+0xa0>
 8b0:	88 0f       	add	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	2a 95       	dec	r18
 8b6:	02 f4       	brpl	.+0      	; 0x8b8 <_ZN14HardwareSerial3endEv+0xa8>
 8b8:	80 95       	com	r24
 8ba:	84 23       	and	r24, r20
 8bc:	8c 93       	st	X, r24
  cbi(*_ucsrb, _rxcie);  
 8be:	e9 81       	ldd	r30, Y+1	; 0x01
 8c0:	fa 81       	ldd	r31, Y+2	; 0x02
 8c2:	a6 89       	ldd	r26, Z+22	; 0x16
 8c4:	b7 89       	ldd	r27, Z+23	; 0x17
 8c6:	e9 81       	ldd	r30, Y+1	; 0x01
 8c8:	fa 81       	ldd	r31, Y+2	; 0x02
 8ca:	06 88       	ldd	r0, Z+22	; 0x16
 8cc:	f7 89       	ldd	r31, Z+23	; 0x17
 8ce:	e0 2d       	mov	r30, r0
 8d0:	80 81       	ld	r24, Z
 8d2:	48 2f       	mov	r20, r24
 8d4:	e9 81       	ldd	r30, Y+1	; 0x01
 8d6:	fa 81       	ldd	r31, Y+2	; 0x02
 8d8:	86 8d       	ldd	r24, Z+30	; 0x1e
 8da:	28 2f       	mov	r18, r24
 8dc:	30 e0       	ldi	r19, 0x00	; 0
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <_ZN14HardwareSerial3endEv+0xd4>
 8e4:	88 0f       	add	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	2a 95       	dec	r18
 8ea:	02 f4       	brpl	.+0      	; 0x8ec <_ZN14HardwareSerial3endEv+0xdc>
 8ec:	80 95       	com	r24
 8ee:	84 23       	and	r24, r20
 8f0:	8c 93       	st	X, r24
  cbi(*_ucsrb, _udrie);
 8f2:	e9 81       	ldd	r30, Y+1	; 0x01
 8f4:	fa 81       	ldd	r31, Y+2	; 0x02
 8f6:	a6 89       	ldd	r26, Z+22	; 0x16
 8f8:	b7 89       	ldd	r27, Z+23	; 0x17
 8fa:	e9 81       	ldd	r30, Y+1	; 0x01
 8fc:	fa 81       	ldd	r31, Y+2	; 0x02
 8fe:	06 88       	ldd	r0, Z+22	; 0x16
 900:	f7 89       	ldd	r31, Z+23	; 0x17
 902:	e0 2d       	mov	r30, r0
 904:	80 81       	ld	r24, Z
 906:	48 2f       	mov	r20, r24
 908:	e9 81       	ldd	r30, Y+1	; 0x01
 90a:	fa 81       	ldd	r31, Y+2	; 0x02
 90c:	87 8d       	ldd	r24, Z+31	; 0x1f
 90e:	28 2f       	mov	r18, r24
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	00 c0       	rjmp	.+0      	; 0x918 <_ZN14HardwareSerial3endEv+0x108>
 918:	88 0f       	add	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	2a 95       	dec	r18
 91e:	02 f4       	brpl	.+0      	; 0x920 <_ZN14HardwareSerial3endEv+0x110>
 920:	80 95       	com	r24
 922:	84 23       	and	r24, r20
 924:	8c 93       	st	X, r24
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
 926:	e9 81       	ldd	r30, Y+1	; 0x01
 928:	fa 81       	ldd	r31, Y+2	; 0x02
 92a:	24 85       	ldd	r18, Z+12	; 0x0c
 92c:	35 85       	ldd	r19, Z+13	; 0x0d
 92e:	e9 81       	ldd	r30, Y+1	; 0x01
 930:	fa 81       	ldd	r31, Y+2	; 0x02
 932:	84 85       	ldd	r24, Z+12	; 0x0c
 934:	95 85       	ldd	r25, Z+13	; 0x0d
 936:	fc 01       	movw	r30, r24
 938:	ee 5b       	subi	r30, 0xBE	; 190
 93a:	ff 4f       	sbci	r31, 0xFF	; 255
 93c:	80 81       	ld	r24, Z
 93e:	91 81       	ldd	r25, Z+1	; 0x01
 940:	f9 01       	movw	r30, r18
 942:	e0 5c       	subi	r30, 0xC0	; 192
 944:	ff 4f       	sbci	r31, 0xFF	; 255
 946:	91 83       	std	Z+1, r25	; 0x01
 948:	80 83       	st	Z, r24
}
 94a:	0f 90       	pop	r0
 94c:	0f 90       	pop	r0
 94e:	0f 90       	pop	r0
 950:	cf 91       	pop	r28
 952:	df 91       	pop	r29
 954:	08 95       	ret

00000956 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
 956:	df 93       	push	r29
 958:	cf 93       	push	r28
 95a:	00 d0       	rcall	.+0      	; 0x95c <_ZN14HardwareSerial9availableEv+0x6>
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
 960:	9a 83       	std	Y+2, r25	; 0x02
 962:	89 83       	std	Y+1, r24	; 0x01
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 964:	e9 81       	ldd	r30, Y+1	; 0x01
 966:	fa 81       	ldd	r31, Y+2	; 0x02
 968:	84 85       	ldd	r24, Z+12	; 0x0c
 96a:	95 85       	ldd	r25, Z+13	; 0x0d
 96c:	fc 01       	movw	r30, r24
 96e:	e0 5c       	subi	r30, 0xC0	; 192
 970:	ff 4f       	sbci	r31, 0xFF	; 255
 972:	20 81       	ld	r18, Z
 974:	31 81       	ldd	r19, Z+1	; 0x01
 976:	e9 81       	ldd	r30, Y+1	; 0x01
 978:	fa 81       	ldd	r31, Y+2	; 0x02
 97a:	84 85       	ldd	r24, Z+12	; 0x0c
 97c:	95 85       	ldd	r25, Z+13	; 0x0d
 97e:	fc 01       	movw	r30, r24
 980:	ee 5b       	subi	r30, 0xBE	; 190
 982:	ff 4f       	sbci	r31, 0xFF	; 255
 984:	80 81       	ld	r24, Z
 986:	91 81       	ldd	r25, Z+1	; 0x01
 988:	a9 01       	movw	r20, r18
 98a:	48 1b       	sub	r20, r24
 98c:	59 0b       	sbc	r21, r25
 98e:	ca 01       	movw	r24, r20
 990:	80 5c       	subi	r24, 0xC0	; 192
 992:	9f 4f       	sbci	r25, 0xFF	; 255
 994:	8f 73       	andi	r24, 0x3F	; 63
 996:	90 70       	andi	r25, 0x00	; 0
}
 998:	0f 90       	pop	r0
 99a:	0f 90       	pop	r0
 99c:	cf 91       	pop	r28
 99e:	df 91       	pop	r29
 9a0:	08 95       	ret

000009a2 <_Z14serialEventRunv>:
      unsigned char c = UDR3;
    };
  }
#endif

void serialEventRun(void)
 9a2:	df 93       	push	r29
 9a4:	cf 93       	push	r28
 9a6:	0f 92       	push	r0
 9a8:	cd b7       	in	r28, 0x3d	; 61
 9aa:	de b7       	in	r29, 0x3e	; 62
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 9b4:	19 82       	std	Y+1, r1	; 0x01
 9b6:	00 97       	sbiw	r24, 0x00	; 0
 9b8:	01 f0       	breq	.+0      	; 0x9ba <_Z14serialEventRunv+0x18>
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	89 83       	std	Y+1, r24	; 0x01
 9be:	89 81       	ldd	r24, Y+1	; 0x01
 9c0:	88 23       	and	r24, r24
 9c2:	01 f0       	breq	.+0      	; 0x9c4 <_Z14serialEventRunv+0x22>
 9c4:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  if (Serial2.available()) serialEvent2();
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
#endif
}
 9c8:	0f 90       	pop	r0
 9ca:	cf 91       	pop	r28
 9cc:	df 91       	pop	r29
 9ce:	08 95       	ret

000009d0 <_ZN14HardwareSerial4peekEv>:
int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
 9d0:	df 93       	push	r29
 9d2:	cf 93       	push	r28
 9d4:	00 d0       	rcall	.+0      	; 0x9d6 <_ZN14HardwareSerial4peekEv+0x6>
 9d6:	00 d0       	rcall	.+0      	; 0x9d8 <_ZN14HardwareSerial4peekEv+0x8>
 9d8:	0f 92       	push	r0
 9da:	cd b7       	in	r28, 0x3d	; 61
 9dc:	de b7       	in	r29, 0x3e	; 62
 9de:	9a 83       	std	Y+2, r25	; 0x02
 9e0:	89 83       	std	Y+1, r24	; 0x01
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 9e2:	e9 81       	ldd	r30, Y+1	; 0x01
 9e4:	fa 81       	ldd	r31, Y+2	; 0x02
 9e6:	84 85       	ldd	r24, Z+12	; 0x0c
 9e8:	95 85       	ldd	r25, Z+13	; 0x0d
 9ea:	fc 01       	movw	r30, r24
 9ec:	e0 5c       	subi	r30, 0xC0	; 192
 9ee:	ff 4f       	sbci	r31, 0xFF	; 255
 9f0:	20 81       	ld	r18, Z
 9f2:	31 81       	ldd	r19, Z+1	; 0x01
 9f4:	e9 81       	ldd	r30, Y+1	; 0x01
 9f6:	fa 81       	ldd	r31, Y+2	; 0x02
 9f8:	84 85       	ldd	r24, Z+12	; 0x0c
 9fa:	95 85       	ldd	r25, Z+13	; 0x0d
 9fc:	fc 01       	movw	r30, r24
 9fe:	ee 5b       	subi	r30, 0xBE	; 190
 a00:	ff 4f       	sbci	r31, 0xFF	; 255
 a02:	80 81       	ld	r24, Z
 a04:	91 81       	ldd	r25, Z+1	; 0x01
 a06:	1d 82       	std	Y+5, r1	; 0x05
 a08:	28 17       	cp	r18, r24
 a0a:	39 07       	cpc	r19, r25
 a0c:	01 f4       	brne	.+0      	; 0xa0e <_ZN14HardwareSerial4peekEv+0x3e>
 a0e:	21 e0       	ldi	r18, 0x01	; 1
 a10:	2d 83       	std	Y+5, r18	; 0x05
 a12:	3d 81       	ldd	r19, Y+5	; 0x05
 a14:	33 23       	and	r19, r19
 a16:	01 f0       	breq	.+0      	; 0xa18 <_ZN14HardwareSerial4peekEv+0x48>
    return -1;
 a18:	8f ef       	ldi	r24, 0xFF	; 255
 a1a:	9f ef       	ldi	r25, 0xFF	; 255
 a1c:	9c 83       	std	Y+4, r25	; 0x04
 a1e:	8b 83       	std	Y+3, r24	; 0x03
 a20:	00 c0       	rjmp	.+0      	; 0xa22 <_ZN14HardwareSerial4peekEv+0x52>
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 a22:	e9 81       	ldd	r30, Y+1	; 0x01
 a24:	fa 81       	ldd	r31, Y+2	; 0x02
 a26:	24 85       	ldd	r18, Z+12	; 0x0c
 a28:	35 85       	ldd	r19, Z+13	; 0x0d
 a2a:	e9 81       	ldd	r30, Y+1	; 0x01
 a2c:	fa 81       	ldd	r31, Y+2	; 0x02
 a2e:	84 85       	ldd	r24, Z+12	; 0x0c
 a30:	95 85       	ldd	r25, Z+13	; 0x0d
 a32:	fc 01       	movw	r30, r24
 a34:	ee 5b       	subi	r30, 0xBE	; 190
 a36:	ff 4f       	sbci	r31, 0xFF	; 255
 a38:	80 81       	ld	r24, Z
 a3a:	91 81       	ldd	r25, Z+1	; 0x01
 a3c:	f9 01       	movw	r30, r18
 a3e:	e8 0f       	add	r30, r24
 a40:	f9 1f       	adc	r31, r25
 a42:	80 81       	ld	r24, Z
 a44:	28 2f       	mov	r18, r24
 a46:	30 e0       	ldi	r19, 0x00	; 0
 a48:	3c 83       	std	Y+4, r19	; 0x04
 a4a:	2b 83       	std	Y+3, r18	; 0x03
 a4c:	8b 81       	ldd	r24, Y+3	; 0x03
 a4e:	9c 81       	ldd	r25, Y+4	; 0x04
  }
}
 a50:	0f 90       	pop	r0
 a52:	0f 90       	pop	r0
 a54:	0f 90       	pop	r0
 a56:	0f 90       	pop	r0
 a58:	0f 90       	pop	r0
 a5a:	cf 91       	pop	r28
 a5c:	df 91       	pop	r29
 a5e:	08 95       	ret

00000a60 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
 a60:	df 93       	push	r29
 a62:	cf 93       	push	r28
 a64:	00 d0       	rcall	.+0      	; 0xa66 <_ZN14HardwareSerial4readEv+0x6>
 a66:	00 d0       	rcall	.+0      	; 0xa68 <_ZN14HardwareSerial4readEv+0x8>
 a68:	00 d0       	rcall	.+0      	; 0xa6a <_ZN14HardwareSerial4readEv+0xa>
 a6a:	cd b7       	in	r28, 0x3d	; 61
 a6c:	de b7       	in	r29, 0x3e	; 62
 a6e:	9b 83       	std	Y+3, r25	; 0x03
 a70:	8a 83       	std	Y+2, r24	; 0x02
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 a72:	ea 81       	ldd	r30, Y+2	; 0x02
 a74:	fb 81       	ldd	r31, Y+3	; 0x03
 a76:	84 85       	ldd	r24, Z+12	; 0x0c
 a78:	95 85       	ldd	r25, Z+13	; 0x0d
 a7a:	fc 01       	movw	r30, r24
 a7c:	e0 5c       	subi	r30, 0xC0	; 192
 a7e:	ff 4f       	sbci	r31, 0xFF	; 255
 a80:	20 81       	ld	r18, Z
 a82:	31 81       	ldd	r19, Z+1	; 0x01
 a84:	ea 81       	ldd	r30, Y+2	; 0x02
 a86:	fb 81       	ldd	r31, Y+3	; 0x03
 a88:	84 85       	ldd	r24, Z+12	; 0x0c
 a8a:	95 85       	ldd	r25, Z+13	; 0x0d
 a8c:	fc 01       	movw	r30, r24
 a8e:	ee 5b       	subi	r30, 0xBE	; 190
 a90:	ff 4f       	sbci	r31, 0xFF	; 255
 a92:	80 81       	ld	r24, Z
 a94:	91 81       	ldd	r25, Z+1	; 0x01
 a96:	1e 82       	std	Y+6, r1	; 0x06
 a98:	28 17       	cp	r18, r24
 a9a:	39 07       	cpc	r19, r25
 a9c:	01 f4       	brne	.+0      	; 0xa9e <_ZN14HardwareSerial4readEv+0x3e>
 a9e:	21 e0       	ldi	r18, 0x01	; 1
 aa0:	2e 83       	std	Y+6, r18	; 0x06
 aa2:	3e 81       	ldd	r19, Y+6	; 0x06
 aa4:	33 23       	and	r19, r19
 aa6:	01 f0       	breq	.+0      	; 0xaa8 <_ZN14HardwareSerial4readEv+0x48>
    return -1;
 aa8:	8f ef       	ldi	r24, 0xFF	; 255
 aaa:	9f ef       	ldi	r25, 0xFF	; 255
 aac:	9d 83       	std	Y+5, r25	; 0x05
 aae:	8c 83       	std	Y+4, r24	; 0x04
 ab0:	00 c0       	rjmp	.+0      	; 0xab2 <_ZN14HardwareSerial4readEv+0x52>
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 ab2:	ea 81       	ldd	r30, Y+2	; 0x02
 ab4:	fb 81       	ldd	r31, Y+3	; 0x03
 ab6:	24 85       	ldd	r18, Z+12	; 0x0c
 ab8:	35 85       	ldd	r19, Z+13	; 0x0d
 aba:	ea 81       	ldd	r30, Y+2	; 0x02
 abc:	fb 81       	ldd	r31, Y+3	; 0x03
 abe:	84 85       	ldd	r24, Z+12	; 0x0c
 ac0:	95 85       	ldd	r25, Z+13	; 0x0d
 ac2:	fc 01       	movw	r30, r24
 ac4:	ee 5b       	subi	r30, 0xBE	; 190
 ac6:	ff 4f       	sbci	r31, 0xFF	; 255
 ac8:	80 81       	ld	r24, Z
 aca:	91 81       	ldd	r25, Z+1	; 0x01
 acc:	f9 01       	movw	r30, r18
 ace:	e8 0f       	add	r30, r24
 ad0:	f9 1f       	adc	r31, r25
 ad2:	80 81       	ld	r24, Z
 ad4:	89 83       	std	Y+1, r24	; 0x01
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
 ad6:	ea 81       	ldd	r30, Y+2	; 0x02
 ad8:	fb 81       	ldd	r31, Y+3	; 0x03
 ada:	24 85       	ldd	r18, Z+12	; 0x0c
 adc:	35 85       	ldd	r19, Z+13	; 0x0d
 ade:	ea 81       	ldd	r30, Y+2	; 0x02
 ae0:	fb 81       	ldd	r31, Y+3	; 0x03
 ae2:	84 85       	ldd	r24, Z+12	; 0x0c
 ae4:	95 85       	ldd	r25, Z+13	; 0x0d
 ae6:	fc 01       	movw	r30, r24
 ae8:	ee 5b       	subi	r30, 0xBE	; 190
 aea:	ff 4f       	sbci	r31, 0xFF	; 255
 aec:	80 81       	ld	r24, Z
 aee:	91 81       	ldd	r25, Z+1	; 0x01
 af0:	01 96       	adiw	r24, 0x01	; 1
 af2:	8f 73       	andi	r24, 0x3F	; 63
 af4:	90 70       	andi	r25, 0x00	; 0
 af6:	f9 01       	movw	r30, r18
 af8:	ee 5b       	subi	r30, 0xBE	; 190
 afa:	ff 4f       	sbci	r31, 0xFF	; 255
 afc:	91 83       	std	Z+1, r25	; 0x01
 afe:	80 83       	st	Z, r24
    return c;
 b00:	89 81       	ldd	r24, Y+1	; 0x01
 b02:	28 2f       	mov	r18, r24
 b04:	30 e0       	ldi	r19, 0x00	; 0
 b06:	3d 83       	std	Y+5, r19	; 0x05
 b08:	2c 83       	std	Y+4, r18	; 0x04
 b0a:	8c 81       	ldd	r24, Y+4	; 0x04
 b0c:	9d 81       	ldd	r25, Y+5	; 0x05
  }
}
 b0e:	26 96       	adiw	r28, 0x06	; 6
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	f8 94       	cli
 b14:	de bf       	out	0x3e, r29	; 62
 b16:	0f be       	out	0x3f, r0	; 63
 b18:	cd bf       	out	0x3d, r28	; 61
 b1a:	cf 91       	pop	r28
 b1c:	df 91       	pop	r29
 b1e:	08 95       	ret

00000b20 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
 b20:	df 93       	push	r29
 b22:	cf 93       	push	r28
 b24:	00 d0       	rcall	.+0      	; 0xb26 <_ZN14HardwareSerial5flushEv+0x6>
 b26:	0f 92       	push	r0
 b28:	cd b7       	in	r28, 0x3d	; 61
 b2a:	de b7       	in	r29, 0x3e	; 62
 b2c:	9a 83       	std	Y+2, r25	; 0x02
 b2e:	89 83       	std	Y+1, r24	; 0x01
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
 b30:	e9 81       	ldd	r30, Y+1	; 0x01
 b32:	fa 81       	ldd	r31, Y+2	; 0x02
 b34:	91 a1       	ldd	r25, Z+33	; 0x21
 b36:	81 e0       	ldi	r24, 0x01	; 1
 b38:	89 27       	eor	r24, r25
 b3a:	88 23       	and	r24, r24
 b3c:	01 f4       	brne	.+0      	; 0xb3e <_ZN14HardwareSerial5flushEv+0x1e>
 b3e:	e9 81       	ldd	r30, Y+1	; 0x01
 b40:	fa 81       	ldd	r31, Y+2	; 0x02
 b42:	04 88       	ldd	r0, Z+20	; 0x14
 b44:	f5 89       	ldd	r31, Z+21	; 0x15
 b46:	e0 2d       	mov	r30, r0
 b48:	80 81       	ld	r24, Z
 b4a:	88 2f       	mov	r24, r24
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	80 74       	andi	r24, 0x40	; 64
 b50:	90 70       	andi	r25, 0x00	; 0
 b52:	00 97       	sbiw	r24, 0x00	; 0
 b54:	01 f4       	brne	.+0      	; 0xb56 <_ZN14HardwareSerial5flushEv+0x36>
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	8b 83       	std	Y+3, r24	; 0x03
 b5a:	00 c0       	rjmp	.+0      	; 0xb5c <_ZN14HardwareSerial5flushEv+0x3c>
 b5c:	1b 82       	std	Y+3, r1	; 0x03
 b5e:	8b 81       	ldd	r24, Y+3	; 0x03
 b60:	88 23       	and	r24, r24
 b62:	01 f4       	brne	.+0      	; 0xb64 <_ZN14HardwareSerial5flushEv+0x44>
  transmitting = false;
 b64:	e9 81       	ldd	r30, Y+1	; 0x01
 b66:	fa 81       	ldd	r31, Y+2	; 0x02
 b68:	11 a2       	std	Z+33, r1	; 0x21
}
 b6a:	0f 90       	pop	r0
 b6c:	0f 90       	pop	r0
 b6e:	0f 90       	pop	r0
 b70:	cf 91       	pop	r28
 b72:	df 91       	pop	r29
 b74:	08 95       	ret

00000b76 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
 b76:	df 93       	push	r29
 b78:	cf 93       	push	r28
 b7a:	00 d0       	rcall	.+0      	; 0xb7c <_ZN14HardwareSerial5writeEh+0x6>
 b7c:	00 d0       	rcall	.+0      	; 0xb7e <_ZN14HardwareSerial5writeEh+0x8>
 b7e:	00 d0       	rcall	.+0      	; 0xb80 <_ZN14HardwareSerial5writeEh+0xa>
 b80:	cd b7       	in	r28, 0x3d	; 61
 b82:	de b7       	in	r29, 0x3e	; 62
 b84:	9c 83       	std	Y+4, r25	; 0x04
 b86:	8b 83       	std	Y+3, r24	; 0x03
 b88:	6d 83       	std	Y+5, r22	; 0x05
{
  unsigned int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
 b8a:	eb 81       	ldd	r30, Y+3	; 0x03
 b8c:	fc 81       	ldd	r31, Y+4	; 0x04
 b8e:	86 85       	ldd	r24, Z+14	; 0x0e
 b90:	97 85       	ldd	r25, Z+15	; 0x0f
 b92:	fc 01       	movw	r30, r24
 b94:	e0 5c       	subi	r30, 0xC0	; 192
 b96:	ff 4f       	sbci	r31, 0xFF	; 255
 b98:	80 81       	ld	r24, Z
 b9a:	91 81       	ldd	r25, Z+1	; 0x01
 b9c:	01 96       	adiw	r24, 0x01	; 1
 b9e:	8f 73       	andi	r24, 0x3F	; 63
 ba0:	90 70       	andi	r25, 0x00	; 0
 ba2:	9a 83       	std	Y+2, r25	; 0x02
 ba4:	89 83       	std	Y+1, r24	; 0x01
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
 ba6:	eb 81       	ldd	r30, Y+3	; 0x03
 ba8:	fc 81       	ldd	r31, Y+4	; 0x04
 baa:	86 85       	ldd	r24, Z+14	; 0x0e
 bac:	97 85       	ldd	r25, Z+15	; 0x0f
 bae:	fc 01       	movw	r30, r24
 bb0:	ee 5b       	subi	r30, 0xBE	; 190
 bb2:	ff 4f       	sbci	r31, 0xFF	; 255
 bb4:	20 81       	ld	r18, Z
 bb6:	31 81       	ldd	r19, Z+1	; 0x01
 bb8:	1e 82       	std	Y+6, r1	; 0x06
 bba:	89 81       	ldd	r24, Y+1	; 0x01
 bbc:	9a 81       	ldd	r25, Y+2	; 0x02
 bbe:	28 17       	cp	r18, r24
 bc0:	39 07       	cpc	r19, r25
 bc2:	01 f4       	brne	.+0      	; 0xbc4 <_ZN14HardwareSerial5writeEh+0x4e>
 bc4:	81 e0       	ldi	r24, 0x01	; 1
 bc6:	8e 83       	std	Y+6, r24	; 0x06
 bc8:	8e 81       	ldd	r24, Y+6	; 0x06
 bca:	88 23       	and	r24, r24
 bcc:	01 f4       	brne	.+0      	; 0xbce <_ZN14HardwareSerial5writeEh+0x58>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
 bce:	eb 81       	ldd	r30, Y+3	; 0x03
 bd0:	fc 81       	ldd	r31, Y+4	; 0x04
 bd2:	26 85       	ldd	r18, Z+14	; 0x0e
 bd4:	37 85       	ldd	r19, Z+15	; 0x0f
 bd6:	eb 81       	ldd	r30, Y+3	; 0x03
 bd8:	fc 81       	ldd	r31, Y+4	; 0x04
 bda:	86 85       	ldd	r24, Z+14	; 0x0e
 bdc:	97 85       	ldd	r25, Z+15	; 0x0f
 bde:	fc 01       	movw	r30, r24
 be0:	e0 5c       	subi	r30, 0xC0	; 192
 be2:	ff 4f       	sbci	r31, 0xFF	; 255
 be4:	80 81       	ld	r24, Z
 be6:	91 81       	ldd	r25, Z+1	; 0x01
 be8:	f9 01       	movw	r30, r18
 bea:	e8 0f       	add	r30, r24
 bec:	f9 1f       	adc	r31, r25
 bee:	8d 81       	ldd	r24, Y+5	; 0x05
 bf0:	80 83       	st	Z, r24
  _tx_buffer->head = i;
 bf2:	eb 81       	ldd	r30, Y+3	; 0x03
 bf4:	fc 81       	ldd	r31, Y+4	; 0x04
 bf6:	86 85       	ldd	r24, Z+14	; 0x0e
 bf8:	97 85       	ldd	r25, Z+15	; 0x0f
 bfa:	fc 01       	movw	r30, r24
 bfc:	e0 5c       	subi	r30, 0xC0	; 192
 bfe:	ff 4f       	sbci	r31, 0xFF	; 255
 c00:	89 81       	ldd	r24, Y+1	; 0x01
 c02:	9a 81       	ldd	r25, Y+2	; 0x02
 c04:	91 83       	std	Z+1, r25	; 0x01
 c06:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, _udrie);
 c08:	eb 81       	ldd	r30, Y+3	; 0x03
 c0a:	fc 81       	ldd	r31, Y+4	; 0x04
 c0c:	a6 89       	ldd	r26, Z+22	; 0x16
 c0e:	b7 89       	ldd	r27, Z+23	; 0x17
 c10:	eb 81       	ldd	r30, Y+3	; 0x03
 c12:	fc 81       	ldd	r31, Y+4	; 0x04
 c14:	06 88       	ldd	r0, Z+22	; 0x16
 c16:	f7 89       	ldd	r31, Z+23	; 0x17
 c18:	e0 2d       	mov	r30, r0
 c1a:	80 81       	ld	r24, Z
 c1c:	48 2f       	mov	r20, r24
 c1e:	eb 81       	ldd	r30, Y+3	; 0x03
 c20:	fc 81       	ldd	r31, Y+4	; 0x04
 c22:	87 8d       	ldd	r24, Z+31	; 0x1f
 c24:	28 2f       	mov	r18, r24
 c26:	30 e0       	ldi	r19, 0x00	; 0
 c28:	81 e0       	ldi	r24, 0x01	; 1
 c2a:	90 e0       	ldi	r25, 0x00	; 0
 c2c:	02 2e       	mov	r0, r18
 c2e:	00 c0       	rjmp	.+0      	; 0xc30 <_ZN14HardwareSerial5writeEh+0xba>
 c30:	88 0f       	add	r24, r24
 c32:	99 1f       	adc	r25, r25
 c34:	0a 94       	dec	r0
 c36:	02 f4       	brpl	.+0      	; 0xc38 <_ZN14HardwareSerial5writeEh+0xc2>
 c38:	84 2b       	or	r24, r20
 c3a:	8c 93       	st	X, r24
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
 c3c:	eb 81       	ldd	r30, Y+3	; 0x03
 c3e:	fc 81       	ldd	r31, Y+4	; 0x04
 c40:	81 e0       	ldi	r24, 0x01	; 1
 c42:	81 a3       	std	Z+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
 c44:	eb 81       	ldd	r30, Y+3	; 0x03
 c46:	fc 81       	ldd	r31, Y+4	; 0x04
 c48:	a4 89       	ldd	r26, Z+20	; 0x14
 c4a:	b5 89       	ldd	r27, Z+21	; 0x15
 c4c:	eb 81       	ldd	r30, Y+3	; 0x03
 c4e:	fc 81       	ldd	r31, Y+4	; 0x04
 c50:	04 88       	ldd	r0, Z+20	; 0x14
 c52:	f5 89       	ldd	r31, Z+21	; 0x15
 c54:	e0 2d       	mov	r30, r0
 c56:	80 81       	ld	r24, Z
 c58:	80 64       	ori	r24, 0x40	; 64
 c5a:	8c 93       	st	X, r24
  
  return 1;
 c5c:	81 e0       	ldi	r24, 0x01	; 1
 c5e:	90 e0       	ldi	r25, 0x00	; 0
}
 c60:	26 96       	adiw	r28, 0x06	; 6
 c62:	0f b6       	in	r0, 0x3f	; 63
 c64:	f8 94       	cli
 c66:	de bf       	out	0x3e, r29	; 62
 c68:	0f be       	out	0x3f, r0	; 63
 c6a:	cd bf       	out	0x3d, r28	; 61
 c6c:	cf 91       	pop	r28
 c6e:	df 91       	pop	r29
 c70:	08 95       	ret

00000c72 <_ZN14HardwareSerialcvbEv>:

HardwareSerial::operator bool() {
 c72:	df 93       	push	r29
 c74:	cf 93       	push	r28
 c76:	00 d0       	rcall	.+0      	; 0xc78 <_ZN14HardwareSerialcvbEv+0x6>
 c78:	cd b7       	in	r28, 0x3d	; 61
 c7a:	de b7       	in	r29, 0x3e	; 62
 c7c:	9a 83       	std	Y+2, r25	; 0x02
 c7e:	89 83       	std	Y+1, r24	; 0x01
	return true;
 c80:	81 e0       	ldi	r24, 0x01	; 1
}
 c82:	0f 90       	pop	r0
 c84:	0f 90       	pop	r0
 c86:	cf 91       	pop	r28
 c88:	df 91       	pop	r29
 c8a:	08 95       	ret

00000c8c <_ZN6StreamD2Ev>:
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
{
 c8c:	df 93       	push	r29
 c8e:	cf 93       	push	r28
 c90:	00 d0       	rcall	.+0      	; 0xc92 <_ZN6StreamD2Ev+0x6>
 c92:	cd b7       	in	r28, 0x3d	; 61
 c94:	de b7       	in	r29, 0x3e	; 62
 c96:	9a 83       	std	Y+2, r25	; 0x02
 c98:	89 83       	std	Y+1, r24	; 0x01
 c9a:	e9 81       	ldd	r30, Y+1	; 0x01
 c9c:	fa 81       	ldd	r31, Y+2	; 0x02
 c9e:	80 e0       	ldi	r24, 0x00	; 0
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	91 83       	std	Z+1, r25	; 0x01
 ca4:	80 83       	st	Z, r24
 ca6:	89 81       	ldd	r24, Y+1	; 0x01
 ca8:	9a 81       	ldd	r25, Y+2	; 0x02
 caa:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 cae:	80 e0       	ldi	r24, 0x00	; 0
 cb0:	90 e0       	ldi	r25, 0x00	; 0
 cb2:	88 23       	and	r24, r24
 cb4:	01 f0       	breq	.+0      	; 0xcb6 <_ZN6StreamD2Ev+0x2a>
 cb6:	89 81       	ldd	r24, Y+1	; 0x01
 cb8:	9a 81       	ldd	r25, Y+2	; 0x02
 cba:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 cbe:	0f 90       	pop	r0
 cc0:	0f 90       	pop	r0
 cc2:	cf 91       	pop	r28
 cc4:	df 91       	pop	r29
 cc6:	08 95       	ret

00000cc8 <_ZN14HardwareSerialD0Ev>:
#include "Stream.h"

struct ring_buffer;

class HardwareSerial : public Stream
{
 cc8:	df 93       	push	r29
 cca:	cf 93       	push	r28
 ccc:	00 d0       	rcall	.+0      	; 0xcce <_ZN14HardwareSerialD0Ev+0x6>
 cce:	cd b7       	in	r28, 0x3d	; 61
 cd0:	de b7       	in	r29, 0x3e	; 62
 cd2:	9a 83       	std	Y+2, r25	; 0x02
 cd4:	89 83       	std	Y+1, r24	; 0x01
 cd6:	e9 81       	ldd	r30, Y+1	; 0x01
 cd8:	fa 81       	ldd	r31, Y+2	; 0x02
 cda:	80 e0       	ldi	r24, 0x00	; 0
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	91 83       	std	Z+1, r25	; 0x01
 ce0:	80 83       	st	Z, r24
 ce2:	89 81       	ldd	r24, Y+1	; 0x01
 ce4:	9a 81       	ldd	r25, Y+2	; 0x02
 ce6:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 cea:	81 e0       	ldi	r24, 0x01	; 1
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	88 23       	and	r24, r24
 cf0:	01 f0       	breq	.+0      	; 0xcf2 <_ZN14HardwareSerialD0Ev+0x2a>
 cf2:	89 81       	ldd	r24, Y+1	; 0x01
 cf4:	9a 81       	ldd	r25, Y+2	; 0x02
 cf6:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 cfa:	0f 90       	pop	r0
 cfc:	0f 90       	pop	r0
 cfe:	cf 91       	pop	r28
 d00:	df 91       	pop	r29
 d02:	08 95       	ret

00000d04 <_ZN14HardwareSerialD1Ev>:
 d04:	df 93       	push	r29
 d06:	cf 93       	push	r28
 d08:	00 d0       	rcall	.+0      	; 0xd0a <_ZN14HardwareSerialD1Ev+0x6>
 d0a:	cd b7       	in	r28, 0x3d	; 61
 d0c:	de b7       	in	r29, 0x3e	; 62
 d0e:	9a 83       	std	Y+2, r25	; 0x02
 d10:	89 83       	std	Y+1, r24	; 0x01
 d12:	e9 81       	ldd	r30, Y+1	; 0x01
 d14:	fa 81       	ldd	r31, Y+2	; 0x02
 d16:	80 e0       	ldi	r24, 0x00	; 0
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	91 83       	std	Z+1, r25	; 0x01
 d1c:	80 83       	st	Z, r24
 d1e:	89 81       	ldd	r24, Y+1	; 0x01
 d20:	9a 81       	ldd	r25, Y+2	; 0x02
 d22:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 d26:	80 e0       	ldi	r24, 0x00	; 0
 d28:	90 e0       	ldi	r25, 0x00	; 0
 d2a:	88 23       	and	r24, r24
 d2c:	01 f0       	breq	.+0      	; 0xd2e <_ZN14HardwareSerialD1Ev+0x2a>
 d2e:	89 81       	ldd	r24, Y+1	; 0x01
 d30:	9a 81       	ldd	r25, Y+2	; 0x02
 d32:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 d36:	0f 90       	pop	r0
 d38:	0f 90       	pop	r0
 d3a:	cf 91       	pop	r28
 d3c:	df 91       	pop	r29
 d3e:	08 95       	ret

00000d40 <_Z41__static_initialization_and_destruction_0ii>:
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
 d40:	8f 92       	push	r8
 d42:	9f 92       	push	r9
 d44:	af 92       	push	r10
 d46:	bf 92       	push	r11
 d48:	cf 92       	push	r12
 d4a:	df 92       	push	r13
 d4c:	ef 92       	push	r14
 d4e:	ff 92       	push	r15
 d50:	0f 93       	push	r16
 d52:	1f 93       	push	r17
 d54:	df 93       	push	r29
 d56:	cf 93       	push	r28
 d58:	00 d0       	rcall	.+0      	; 0xd5a <_Z41__static_initialization_and_destruction_0ii+0x1a>
 d5a:	00 d0       	rcall	.+0      	; 0xd5c <_Z41__static_initialization_and_destruction_0ii+0x1c>
 d5c:	cd b7       	in	r28, 0x3d	; 61
 d5e:	de b7       	in	r29, 0x3e	; 62
 d60:	9a 83       	std	Y+2, r25	; 0x02
 d62:	89 83       	std	Y+1, r24	; 0x01
 d64:	7c 83       	std	Y+4, r23	; 0x04
 d66:	6b 83       	std	Y+3, r22	; 0x03
 d68:	89 81       	ldd	r24, Y+1	; 0x01
 d6a:	9a 81       	ldd	r25, Y+2	; 0x02
 d6c:	81 30       	cpi	r24, 0x01	; 1
 d6e:	91 05       	cpc	r25, r1
 d70:	01 f0       	breq	.+0      	; 0xd72 <_Z41__static_initialization_and_destruction_0ii+0x32>
 d72:	00 c0       	rjmp	.+0      	; 0xd74 <_Z41__static_initialization_and_destruction_0ii+0x34>
 d74:	8b 81       	ldd	r24, Y+3	; 0x03
 d76:	9c 81       	ldd	r25, Y+4	; 0x04
 d78:	2f ef       	ldi	r18, 0xFF	; 255
 d7a:	8f 3f       	cpi	r24, 0xFF	; 255
 d7c:	92 07       	cpc	r25, r18
 d7e:	01 f4       	brne	.+0      	; 0xd80 <_Z41__static_initialization_and_destruction_0ii+0x40>
 d80:	00 d0       	rcall	.+0      	; 0xd82 <_Z41__static_initialization_and_destruction_0ii+0x42>
 d82:	00 d0       	rcall	.+0      	; 0xd84 <_Z41__static_initialization_and_destruction_0ii+0x44>
 d84:	0f 92       	push	r0
 d86:	ed b7       	in	r30, 0x3d	; 61
 d88:	fe b7       	in	r31, 0x3e	; 62
 d8a:	31 96       	adiw	r30, 0x01	; 1
 d8c:	20 e0       	ldi	r18, 0x00	; 0
 d8e:	30 e0       	ldi	r19, 0x00	; 0
 d90:	40 e0       	ldi	r20, 0x00	; 0
 d92:	50 e0       	ldi	r21, 0x00	; 0
 d94:	a0 e0       	ldi	r26, 0x00	; 0
 d96:	b0 e0       	ldi	r27, 0x00	; 0
 d98:	84 e0       	ldi	r24, 0x04	; 4
 d9a:	80 83       	st	Z, r24
 d9c:	83 e0       	ldi	r24, 0x03	; 3
 d9e:	81 83       	std	Z+1, r24	; 0x01
 da0:	87 e0       	ldi	r24, 0x07	; 7
 da2:	82 83       	std	Z+2, r24	; 0x02
 da4:	85 e0       	ldi	r24, 0x05	; 5
 da6:	83 83       	std	Z+3, r24	; 0x03
 da8:	81 e0       	ldi	r24, 0x01	; 1
 daa:	84 83       	std	Z+4, r24	; 0x04
 dac:	c9 01       	movw	r24, r18
 dae:	ba 01       	movw	r22, r20
 db0:	ad 01       	movw	r20, r26
 db2:	25 ec       	ldi	r18, 0xC5	; 197
 db4:	30 e0       	ldi	r19, 0x00	; 0
 db6:	04 ec       	ldi	r16, 0xC4	; 196
 db8:	10 e0       	ldi	r17, 0x00	; 0
 dba:	0f 2e       	mov	r0, r31
 dbc:	f0 ec       	ldi	r31, 0xC0	; 192
 dbe:	ef 2e       	mov	r14, r31
 dc0:	ff 24       	eor	r15, r15
 dc2:	f0 2d       	mov	r31, r0
 dc4:	0f 2e       	mov	r0, r31
 dc6:	f1 ec       	ldi	r31, 0xC1	; 193
 dc8:	cf 2e       	mov	r12, r31
 dca:	dd 24       	eor	r13, r13
 dcc:	f0 2d       	mov	r31, r0
 dce:	0f 2e       	mov	r0, r31
 dd0:	f2 ec       	ldi	r31, 0xC2	; 194
 dd2:	af 2e       	mov	r10, r31
 dd4:	bb 24       	eor	r11, r11
 dd6:	f0 2d       	mov	r31, r0
 dd8:	0f 2e       	mov	r0, r31
 dda:	f6 ec       	ldi	r31, 0xC6	; 198
 ddc:	8f 2e       	mov	r8, r31
 dde:	99 24       	eor	r9, r9
 de0:	f0 2d       	mov	r31, r0
 de2:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 de6:	0f 90       	pop	r0
 de8:	0f 90       	pop	r0
 dea:	0f 90       	pop	r0
 dec:	0f 90       	pop	r0
 dee:	0f 90       	pop	r0
 df0:	89 81       	ldd	r24, Y+1	; 0x01
 df2:	9a 81       	ldd	r25, Y+2	; 0x02
 df4:	00 97       	sbiw	r24, 0x00	; 0
 df6:	01 f4       	brne	.+0      	; 0xdf8 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 df8:	8b 81       	ldd	r24, Y+3	; 0x03
 dfa:	9c 81       	ldd	r25, Y+4	; 0x04
 dfc:	2f ef       	ldi	r18, 0xFF	; 255
 dfe:	8f 3f       	cpi	r24, 0xFF	; 255
 e00:	92 07       	cpc	r25, r18
 e02:	01 f4       	brne	.+0      	; 0xe04 <_Z41__static_initialization_and_destruction_0ii+0xc4>
 e04:	80 e0       	ldi	r24, 0x00	; 0
 e06:	90 e0       	ldi	r25, 0x00	; 0
 e08:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 e0c:	0f 90       	pop	r0
 e0e:	0f 90       	pop	r0
 e10:	0f 90       	pop	r0
 e12:	0f 90       	pop	r0
 e14:	cf 91       	pop	r28
 e16:	df 91       	pop	r29
 e18:	1f 91       	pop	r17
 e1a:	0f 91       	pop	r16
 e1c:	ff 90       	pop	r15
 e1e:	ef 90       	pop	r14
 e20:	df 90       	pop	r13
 e22:	cf 90       	pop	r12
 e24:	bf 90       	pop	r11
 e26:	af 90       	pop	r10
 e28:	9f 90       	pop	r9
 e2a:	8f 90       	pop	r8
 e2c:	08 95       	ret

00000e2e <_GLOBAL__D_rx_buffer>:
 e2e:	df 93       	push	r29
 e30:	cf 93       	push	r28
 e32:	cd b7       	in	r28, 0x3d	; 61
 e34:	de b7       	in	r29, 0x3e	; 62
 e36:	80 e0       	ldi	r24, 0x00	; 0
 e38:	90 e0       	ldi	r25, 0x00	; 0
 e3a:	6f ef       	ldi	r22, 0xFF	; 255
 e3c:	7f ef       	ldi	r23, 0xFF	; 255
 e3e:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 e42:	cf 91       	pop	r28
 e44:	df 91       	pop	r29
 e46:	08 95       	ret

00000e48 <_GLOBAL__I_rx_buffer>:
 e48:	df 93       	push	r29
 e4a:	cf 93       	push	r28
 e4c:	cd b7       	in	r28, 0x3d	; 61
 e4e:	de b7       	in	r29, 0x3e	; 62
 e50:	81 e0       	ldi	r24, 0x01	; 1
 e52:	90 e0       	ldi	r25, 0x00	; 0
 e54:	6f ef       	ldi	r22, 0xFF	; 255
 e56:	7f ef       	ldi	r23, 0xFF	; 255
 e58:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 e5c:	cf 91       	pop	r28
 e5e:	df 91       	pop	r29
 e60:	08 95       	ret

00000e62 <_ZN6StreamD0Ev>:
 e62:	df 93       	push	r29
 e64:	cf 93       	push	r28
 e66:	00 d0       	rcall	.+0      	; 0xe68 <_ZN6StreamD0Ev+0x6>
 e68:	cd b7       	in	r28, 0x3d	; 61
 e6a:	de b7       	in	r29, 0x3e	; 62
 e6c:	9a 83       	std	Y+2, r25	; 0x02
 e6e:	89 83       	std	Y+1, r24	; 0x01
 e70:	e9 81       	ldd	r30, Y+1	; 0x01
 e72:	fa 81       	ldd	r31, Y+2	; 0x02
 e74:	80 e0       	ldi	r24, 0x00	; 0
 e76:	90 e0       	ldi	r25, 0x00	; 0
 e78:	91 83       	std	Z+1, r25	; 0x01
 e7a:	80 83       	st	Z, r24
 e7c:	89 81       	ldd	r24, Y+1	; 0x01
 e7e:	9a 81       	ldd	r25, Y+2	; 0x02
 e80:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 e84:	81 e0       	ldi	r24, 0x01	; 1
 e86:	90 e0       	ldi	r25, 0x00	; 0
 e88:	88 23       	and	r24, r24
 e8a:	01 f0       	breq	.+0      	; 0xe8c <_ZN6StreamD0Ev+0x2a>
 e8c:	89 81       	ldd	r24, Y+1	; 0x01
 e8e:	9a 81       	ldd	r25, Y+2	; 0x02
 e90:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 e94:	0f 90       	pop	r0
 e96:	0f 90       	pop	r0
 e98:	cf 91       	pop	r28
 e9a:	df 91       	pop	r29
 e9c:	08 95       	ret

00000e9e <_ZN6StreamD1Ev>:
 e9e:	df 93       	push	r29
 ea0:	cf 93       	push	r28
 ea2:	00 d0       	rcall	.+0      	; 0xea4 <_ZN6StreamD1Ev+0x6>
 ea4:	cd b7       	in	r28, 0x3d	; 61
 ea6:	de b7       	in	r29, 0x3e	; 62
 ea8:	9a 83       	std	Y+2, r25	; 0x02
 eaa:	89 83       	std	Y+1, r24	; 0x01
 eac:	e9 81       	ldd	r30, Y+1	; 0x01
 eae:	fa 81       	ldd	r31, Y+2	; 0x02
 eb0:	80 e0       	ldi	r24, 0x00	; 0
 eb2:	90 e0       	ldi	r25, 0x00	; 0
 eb4:	91 83       	std	Z+1, r25	; 0x01
 eb6:	80 83       	st	Z, r24
 eb8:	89 81       	ldd	r24, Y+1	; 0x01
 eba:	9a 81       	ldd	r25, Y+2	; 0x02
 ebc:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 ec0:	80 e0       	ldi	r24, 0x00	; 0
 ec2:	90 e0       	ldi	r25, 0x00	; 0
 ec4:	88 23       	and	r24, r24
 ec6:	01 f0       	breq	.+0      	; 0xec8 <_ZN6StreamD1Ev+0x2a>
 ec8:	89 81       	ldd	r24, Y+1	; 0x01
 eca:	9a 81       	ldd	r25, Y+2	; 0x02
 ecc:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 ed0:	0f 90       	pop	r0
 ed2:	0f 90       	pop	r0
 ed4:	cf 91       	pop	r28
 ed6:	df 91       	pop	r29
 ed8:	08 95       	ret

IPAddress.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ae  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000014  00000000  00000000  000005e2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          00000006  00000000  00000000  000005f6  2**0
                  ALLOC
  3 .stab         00000c54  00000000  00000000  000005f8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001285  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .dtors        00000002  00000000  00000000  000024d1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  6 .ctors        00000002  00000000  00000000  000024d3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text:

00000000 <_ZN9PrintableC2Ev>:
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
*/

class Printable
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9PrintableC2Ev+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	80 e0       	ldi	r24, 0x00	; 0
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	91 83       	std	Z+1, r25	; 0x01
  18:	80 83       	st	Z, r24
  1a:	0f 90       	pop	r0
  1c:	0f 90       	pop	r0
  1e:	cf 91       	pop	r28
  20:	df 91       	pop	r29
  22:	08 95       	ret

00000024 <_ZN9IPAddressC2Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
  24:	0f 93       	push	r16
  26:	df 93       	push	r29
  28:	cf 93       	push	r28
  2a:	00 d0       	rcall	.+0      	; 0x2c <_ZN9IPAddressC2Ehhhh+0x8>
  2c:	00 d0       	rcall	.+0      	; 0x2e <_ZN9IPAddressC2Ehhhh+0xa>
  2e:	00 d0       	rcall	.+0      	; 0x30 <_ZN9IPAddressC2Ehhhh+0xc>
  30:	cd b7       	in	r28, 0x3d	; 61
  32:	de b7       	in	r29, 0x3e	; 62
  34:	9a 83       	std	Y+2, r25	; 0x02
  36:	89 83       	std	Y+1, r24	; 0x01
  38:	6b 83       	std	Y+3, r22	; 0x03
  3a:	4c 83       	std	Y+4, r20	; 0x04
  3c:	2d 83       	std	Y+5, r18	; 0x05
  3e:	0e 83       	std	Y+6, r16	; 0x06
  40:	89 81       	ldd	r24, Y+1	; 0x01
  42:	9a 81       	ldd	r25, Y+2	; 0x02
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
  48:	e9 81       	ldd	r30, Y+1	; 0x01
  4a:	fa 81       	ldd	r31, Y+2	; 0x02
  4c:	80 e0       	ldi	r24, 0x00	; 0
  4e:	90 e0       	ldi	r25, 0x00	; 0
  50:	91 83       	std	Z+1, r25	; 0x01
  52:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
  54:	e9 81       	ldd	r30, Y+1	; 0x01
  56:	fa 81       	ldd	r31, Y+2	; 0x02
  58:	8b 81       	ldd	r24, Y+3	; 0x03
  5a:	82 83       	std	Z+2, r24	; 0x02
    _address[1] = second_octet;
  5c:	e9 81       	ldd	r30, Y+1	; 0x01
  5e:	fa 81       	ldd	r31, Y+2	; 0x02
  60:	8c 81       	ldd	r24, Y+4	; 0x04
  62:	83 83       	std	Z+3, r24	; 0x03
    _address[2] = third_octet;
  64:	e9 81       	ldd	r30, Y+1	; 0x01
  66:	fa 81       	ldd	r31, Y+2	; 0x02
  68:	8d 81       	ldd	r24, Y+5	; 0x05
  6a:	84 83       	std	Z+4, r24	; 0x04
    _address[3] = fourth_octet;
  6c:	e9 81       	ldd	r30, Y+1	; 0x01
  6e:	fa 81       	ldd	r31, Y+2	; 0x02
  70:	8e 81       	ldd	r24, Y+6	; 0x06
  72:	85 83       	std	Z+5, r24	; 0x05
}
  74:	26 96       	adiw	r28, 0x06	; 6
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	cf 91       	pop	r28
  82:	df 91       	pop	r29
  84:	0f 91       	pop	r16
  86:	08 95       	ret

00000088 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
  88:	0f 93       	push	r16
  8a:	df 93       	push	r29
  8c:	cf 93       	push	r28
  8e:	00 d0       	rcall	.+0      	; 0x90 <_ZN9IPAddressC1Ehhhh+0x8>
  90:	00 d0       	rcall	.+0      	; 0x92 <_ZN9IPAddressC1Ehhhh+0xa>
  92:	00 d0       	rcall	.+0      	; 0x94 <_ZN9IPAddressC1Ehhhh+0xc>
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	9a 83       	std	Y+2, r25	; 0x02
  9a:	89 83       	std	Y+1, r24	; 0x01
  9c:	6b 83       	std	Y+3, r22	; 0x03
  9e:	4c 83       	std	Y+4, r20	; 0x04
  a0:	2d 83       	std	Y+5, r18	; 0x05
  a2:	0e 83       	std	Y+6, r16	; 0x06
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	9a 81       	ldd	r25, Y+2	; 0x02
  a8:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
  ac:	e9 81       	ldd	r30, Y+1	; 0x01
  ae:	fa 81       	ldd	r31, Y+2	; 0x02
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	91 83       	std	Z+1, r25	; 0x01
  b6:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
  b8:	e9 81       	ldd	r30, Y+1	; 0x01
  ba:	fa 81       	ldd	r31, Y+2	; 0x02
  bc:	8b 81       	ldd	r24, Y+3	; 0x03
  be:	82 83       	std	Z+2, r24	; 0x02
    _address[1] = second_octet;
  c0:	e9 81       	ldd	r30, Y+1	; 0x01
  c2:	fa 81       	ldd	r31, Y+2	; 0x02
  c4:	8c 81       	ldd	r24, Y+4	; 0x04
  c6:	83 83       	std	Z+3, r24	; 0x03
    _address[2] = third_octet;
  c8:	e9 81       	ldd	r30, Y+1	; 0x01
  ca:	fa 81       	ldd	r31, Y+2	; 0x02
  cc:	8d 81       	ldd	r24, Y+5	; 0x05
  ce:	84 83       	std	Z+4, r24	; 0x04
    _address[3] = fourth_octet;
  d0:	e9 81       	ldd	r30, Y+1	; 0x01
  d2:	fa 81       	ldd	r31, Y+2	; 0x02
  d4:	8e 81       	ldd	r24, Y+6	; 0x06
  d6:	85 83       	std	Z+5, r24	; 0x05
}
  d8:	26 96       	adiw	r28, 0x06	; 6
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	f8 94       	cli
  de:	de bf       	out	0x3e, r29	; 62
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	cd bf       	out	0x3d, r28	; 61
  e4:	cf 91       	pop	r28
  e6:	df 91       	pop	r29
  e8:	0f 91       	pop	r16
  ea:	08 95       	ret

000000ec <_ZNK9IPAddress7printToER5Print>:
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	28 97       	sbiw	r28, 0x08	; 8
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	9e 83       	std	Y+6, r25	; 0x06
 102:	8d 83       	std	Y+5, r24	; 0x05
 104:	78 87       	std	Y+8, r23	; 0x08
 106:	6f 83       	std	Y+7, r22	; 0x07
{
    size_t n = 0;
 108:	1c 82       	std	Y+4, r1	; 0x04
 10a:	1b 82       	std	Y+3, r1	; 0x03
    for (int i =0; i < 3; i++)
 10c:	1a 82       	std	Y+2, r1	; 0x02
 10e:	19 82       	std	Y+1, r1	; 0x01
 110:	00 c0       	rjmp	.+0      	; 0x112 <_ZNK9IPAddress7printToER5Print+0x26>
    {
        n += p.print(_address[i], DEC);
 112:	29 81       	ldd	r18, Y+1	; 0x01
 114:	3a 81       	ldd	r19, Y+2	; 0x02
 116:	8d 81       	ldd	r24, Y+5	; 0x05
 118:	9e 81       	ldd	r25, Y+6	; 0x06
 11a:	82 0f       	add	r24, r18
 11c:	93 1f       	adc	r25, r19
 11e:	fc 01       	movw	r30, r24
 120:	32 96       	adiw	r30, 0x02	; 2
 122:	20 81       	ld	r18, Z
 124:	8f 81       	ldd	r24, Y+7	; 0x07
 126:	98 85       	ldd	r25, Y+8	; 0x08
 128:	62 2f       	mov	r22, r18
 12a:	4a e0       	ldi	r20, 0x0A	; 10
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 132:	9c 01       	movw	r18, r24
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	9c 81       	ldd	r25, Y+4	; 0x04
 138:	82 0f       	add	r24, r18
 13a:	93 1f       	adc	r25, r19
 13c:	9c 83       	std	Y+4, r25	; 0x04
 13e:	8b 83       	std	Y+3, r24	; 0x03
        n += p.print('.');
 140:	8f 81       	ldd	r24, Y+7	; 0x07
 142:	98 85       	ldd	r25, Y+8	; 0x08
 144:	6e e2       	ldi	r22, 0x2E	; 46
 146:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 14a:	9c 01       	movw	r18, r24
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	9c 81       	ldd	r25, Y+4	; 0x04
 150:	82 0f       	add	r24, r18
 152:	93 1f       	adc	r25, r19
 154:	9c 83       	std	Y+4, r25	; 0x04
 156:	8b 83       	std	Y+3, r24	; 0x03
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	9a 81       	ldd	r25, Y+2	; 0x02
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	9a 83       	std	Y+2, r25	; 0x02
 160:	89 83       	std	Y+1, r24	; 0x01
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	9a 81       	ldd	r25, Y+2	; 0x02
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	91 05       	cpc	r25, r1
 16a:	04 f0       	brlt	.+0      	; 0x16c <_ZNK9IPAddress7printToER5Print+0x80>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
 16c:	ed 81       	ldd	r30, Y+5	; 0x05
 16e:	fe 81       	ldd	r31, Y+6	; 0x06
 170:	25 81       	ldd	r18, Z+5	; 0x05
 172:	8f 81       	ldd	r24, Y+7	; 0x07
 174:	98 85       	ldd	r25, Y+8	; 0x08
 176:	62 2f       	mov	r22, r18
 178:	4a e0       	ldi	r20, 0x0A	; 10
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 180:	9c 01       	movw	r18, r24
 182:	8b 81       	ldd	r24, Y+3	; 0x03
 184:	9c 81       	ldd	r25, Y+4	; 0x04
 186:	82 0f       	add	r24, r18
 188:	93 1f       	adc	r25, r19
 18a:	9c 83       	std	Y+4, r25	; 0x04
 18c:	8b 83       	std	Y+3, r24	; 0x03
    return n;
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	9c 81       	ldd	r25, Y+4	; 0x04
}
 192:	28 96       	adiw	r28, 0x08	; 8
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	cf 91       	pop	r28
 1a0:	df 91       	pop	r29
 1a2:	08 95       	ret

000001a4 <_ZN9IPAddresseqEPKh>:
{
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
    return *this;
}

bool IPAddress::operator==(const uint8_t* addr)
 1a4:	df 93       	push	r29
 1a6:	cf 93       	push	r28
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <_ZN9IPAddresseqEPKh+0x6>
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <_ZN9IPAddresseqEPKh+0x8>
 1ac:	0f 92       	push	r0
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	9a 83       	std	Y+2, r25	; 0x02
 1b4:	89 83       	std	Y+1, r24	; 0x01
 1b6:	7c 83       	std	Y+4, r23	; 0x04
 1b8:	6b 83       	std	Y+3, r22	; 0x03
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	9a 81       	ldd	r25, Y+2	; 0x02
 1be:	9c 01       	movw	r18, r24
 1c0:	2e 5f       	subi	r18, 0xFE	; 254
 1c2:	3f 4f       	sbci	r19, 0xFF	; 255
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	9c 81       	ldd	r25, Y+4	; 0x04
 1c8:	b9 01       	movw	r22, r18
 1ca:	44 e0       	ldi	r20, 0x04	; 4
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 1d2:	1d 82       	std	Y+5, r1	; 0x05
 1d4:	00 97       	sbiw	r24, 0x00	; 0
 1d6:	01 f4       	brne	.+0      	; 0x1d8 <_ZN9IPAddresseqEPKh+0x34>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	8d 83       	std	Y+5, r24	; 0x05
 1dc:	8d 81       	ldd	r24, Y+5	; 0x05
}
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	cf 91       	pop	r28
 1ea:	df 91       	pop	r29
 1ec:	08 95       	ret

000001ee <_ZN9IPAddressaSEm>:
{
    memcpy(_address, address, sizeof(_address));
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t address)
 1ee:	df 93       	push	r29
 1f0:	cf 93       	push	r28
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <_ZN9IPAddressaSEm+0x6>
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <_ZN9IPAddressaSEm+0x8>
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <_ZN9IPAddressaSEm+0xa>
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	9a 83       	std	Y+2, r25	; 0x02
 1fe:	89 83       	std	Y+1, r24	; 0x01
 200:	4b 83       	std	Y+3, r20	; 0x03
 202:	5c 83       	std	Y+4, r21	; 0x04
 204:	6d 83       	std	Y+5, r22	; 0x05
 206:	7e 83       	std	Y+6, r23	; 0x06
{
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	9a 81       	ldd	r25, Y+2	; 0x02
 20c:	02 96       	adiw	r24, 0x02	; 2
 20e:	9e 01       	movw	r18, r28
 210:	2d 5f       	subi	r18, 0xFD	; 253
 212:	3f 4f       	sbci	r19, 0xFF	; 255
 214:	b9 01       	movw	r22, r18
 216:	44 e0       	ldi	r20, 0x04	; 4
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
    return *this;
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	9a 81       	ldd	r25, Y+2	; 0x02
}
 222:	26 96       	adiw	r28, 0x06	; 6
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
 22e:	cf 91       	pop	r28
 230:	df 91       	pop	r29
 232:	08 95       	ret

00000234 <_ZN9IPAddressaSEPKh>:
IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address, address, sizeof(_address));
}

IPAddress& IPAddress::operator=(const uint8_t *address)
 234:	df 93       	push	r29
 236:	cf 93       	push	r28
 238:	00 d0       	rcall	.+0      	; 0x23a <_ZN9IPAddressaSEPKh+0x6>
 23a:	00 d0       	rcall	.+0      	; 0x23c <_ZN9IPAddressaSEPKh+0x8>
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
 240:	9a 83       	std	Y+2, r25	; 0x02
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	7c 83       	std	Y+4, r23	; 0x04
 246:	6b 83       	std	Y+3, r22	; 0x03
{
    memcpy(_address, address, sizeof(_address));
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	9a 81       	ldd	r25, Y+2	; 0x02
 24c:	02 96       	adiw	r24, 0x02	; 2
 24e:	2b 81       	ldd	r18, Y+3	; 0x03
 250:	3c 81       	ldd	r19, Y+4	; 0x04
 252:	b9 01       	movw	r22, r18
 254:	44 e0       	ldi	r20, 0x04	; 4
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
    return *this;
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	9a 81       	ldd	r25, Y+2	; 0x02
}
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	cf 91       	pop	r28
 26a:	df 91       	pop	r29
 26c:	08 95       	ret

0000026e <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    memcpy(_address, &address, sizeof(_address));
}

IPAddress::IPAddress(const uint8_t *address)
 26e:	df 93       	push	r29
 270:	cf 93       	push	r28
 272:	00 d0       	rcall	.+0      	; 0x274 <_ZN9IPAddressC1EPKh+0x6>
 274:	00 d0       	rcall	.+0      	; 0x276 <_ZN9IPAddressC1EPKh+0x8>
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	9a 83       	std	Y+2, r25	; 0x02
 27c:	89 83       	std	Y+1, r24	; 0x01
 27e:	7c 83       	std	Y+4, r23	; 0x04
 280:	6b 83       	std	Y+3, r22	; 0x03
 282:	89 81       	ldd	r24, Y+1	; 0x01
 284:	9a 81       	ldd	r25, Y+2	; 0x02
 286:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 28a:	e9 81       	ldd	r30, Y+1	; 0x01
 28c:	fa 81       	ldd	r31, Y+2	; 0x02
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	91 83       	std	Z+1, r25	; 0x01
 294:	80 83       	st	Z, r24
{
    memcpy(_address, address, sizeof(_address));
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	9a 81       	ldd	r25, Y+2	; 0x02
 29a:	02 96       	adiw	r24, 0x02	; 2
 29c:	2b 81       	ldd	r18, Y+3	; 0x03
 29e:	3c 81       	ldd	r19, Y+4	; 0x04
 2a0:	b9 01       	movw	r22, r18
 2a2:	44 e0       	ldi	r20, 0x04	; 4
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
}
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	cf 91       	pop	r28
 2b4:	df 91       	pop	r29
 2b6:	08 95       	ret

000002b8 <_ZN9IPAddressC2EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    memcpy(_address, &address, sizeof(_address));
}

IPAddress::IPAddress(const uint8_t *address)
 2b8:	df 93       	push	r29
 2ba:	cf 93       	push	r28
 2bc:	00 d0       	rcall	.+0      	; 0x2be <_ZN9IPAddressC2EPKh+0x6>
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <_ZN9IPAddressC2EPKh+0x8>
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	9a 83       	std	Y+2, r25	; 0x02
 2c6:	89 83       	std	Y+1, r24	; 0x01
 2c8:	7c 83       	std	Y+4, r23	; 0x04
 2ca:	6b 83       	std	Y+3, r22	; 0x03
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	9a 81       	ldd	r25, Y+2	; 0x02
 2d0:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 2d4:	e9 81       	ldd	r30, Y+1	; 0x01
 2d6:	fa 81       	ldd	r31, Y+2	; 0x02
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	91 83       	std	Z+1, r25	; 0x01
 2de:	80 83       	st	Z, r24
{
    memcpy(_address, address, sizeof(_address));
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	9a 81       	ldd	r25, Y+2	; 0x02
 2e4:	02 96       	adiw	r24, 0x02	; 2
 2e6:	2b 81       	ldd	r18, Y+3	; 0x03
 2e8:	3c 81       	ldd	r19, Y+4	; 0x04
 2ea:	b9 01       	movw	r22, r18
 2ec:	44 e0       	ldi	r20, 0x04	; 4
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
}
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	cf 91       	pop	r28
 2fe:	df 91       	pop	r29
 300:	08 95       	ret

00000302 <_ZN9IPAddressC1Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
 302:	df 93       	push	r29
 304:	cf 93       	push	r28
 306:	00 d0       	rcall	.+0      	; 0x308 <_ZN9IPAddressC1Em+0x6>
 308:	00 d0       	rcall	.+0      	; 0x30a <_ZN9IPAddressC1Em+0x8>
 30a:	00 d0       	rcall	.+0      	; 0x30c <_ZN9IPAddressC1Em+0xa>
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	9a 83       	std	Y+2, r25	; 0x02
 312:	89 83       	std	Y+1, r24	; 0x01
 314:	4b 83       	std	Y+3, r20	; 0x03
 316:	5c 83       	std	Y+4, r21	; 0x04
 318:	6d 83       	std	Y+5, r22	; 0x05
 31a:	7e 83       	std	Y+6, r23	; 0x06
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	9a 81       	ldd	r25, Y+2	; 0x02
 320:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 324:	e9 81       	ldd	r30, Y+1	; 0x01
 326:	fa 81       	ldd	r31, Y+2	; 0x02
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	91 83       	std	Z+1, r25	; 0x01
 32e:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	9a 81       	ldd	r25, Y+2	; 0x02
 334:	02 96       	adiw	r24, 0x02	; 2
 336:	9e 01       	movw	r18, r28
 338:	2d 5f       	subi	r18, 0xFD	; 253
 33a:	3f 4f       	sbci	r19, 0xFF	; 255
 33c:	b9 01       	movw	r22, r18
 33e:	44 e0       	ldi	r20, 0x04	; 4
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
}
 346:	26 96       	adiw	r28, 0x06	; 6
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	f8 94       	cli
 34c:	de bf       	out	0x3e, r29	; 62
 34e:	0f be       	out	0x3f, r0	; 63
 350:	cd bf       	out	0x3d, r28	; 61
 352:	cf 91       	pop	r28
 354:	df 91       	pop	r29
 356:	08 95       	ret

00000358 <_ZN9IPAddressC2Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
 358:	df 93       	push	r29
 35a:	cf 93       	push	r28
 35c:	00 d0       	rcall	.+0      	; 0x35e <_ZN9IPAddressC2Em+0x6>
 35e:	00 d0       	rcall	.+0      	; 0x360 <_ZN9IPAddressC2Em+0x8>
 360:	00 d0       	rcall	.+0      	; 0x362 <_ZN9IPAddressC2Em+0xa>
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
 366:	9a 83       	std	Y+2, r25	; 0x02
 368:	89 83       	std	Y+1, r24	; 0x01
 36a:	4b 83       	std	Y+3, r20	; 0x03
 36c:	5c 83       	std	Y+4, r21	; 0x04
 36e:	6d 83       	std	Y+5, r22	; 0x05
 370:	7e 83       	std	Y+6, r23	; 0x06
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	9a 81       	ldd	r25, Y+2	; 0x02
 376:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 37a:	e9 81       	ldd	r30, Y+1	; 0x01
 37c:	fa 81       	ldd	r31, Y+2	; 0x02
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	91 83       	std	Z+1, r25	; 0x01
 384:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	9a 81       	ldd	r25, Y+2	; 0x02
 38a:	02 96       	adiw	r24, 0x02	; 2
 38c:	9e 01       	movw	r18, r28
 38e:	2d 5f       	subi	r18, 0xFD	; 253
 390:	3f 4f       	sbci	r19, 0xFF	; 255
 392:	b9 01       	movw	r22, r18
 394:	44 e0       	ldi	r20, 0x04	; 4
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
}
 39c:	26 96       	adiw	r28, 0x06	; 6
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	f8 94       	cli
 3a2:	de bf       	out	0x3e, r29	; 62
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	cd bf       	out	0x3d, r28	; 61
 3a8:	cf 91       	pop	r28
 3aa:	df 91       	pop	r29
 3ac:	08 95       	ret

000003ae <_ZN9IPAddressC1Ev>:

IPAddress::~IPAddress()
{
}

IPAddress::IPAddress()
 3ae:	df 93       	push	r29
 3b0:	cf 93       	push	r28
 3b2:	00 d0       	rcall	.+0      	; 0x3b4 <_ZN9IPAddressC1Ev+0x6>
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	9a 83       	std	Y+2, r25	; 0x02
 3ba:	89 83       	std	Y+1, r24	; 0x01
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	9a 81       	ldd	r25, Y+2	; 0x02
 3c0:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 3c4:	e9 81       	ldd	r30, Y+1	; 0x01
 3c6:	fa 81       	ldd	r31, Y+2	; 0x02
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	91 83       	std	Z+1, r25	; 0x01
 3ce:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	9a 81       	ldd	r25, Y+2	; 0x02
 3d4:	02 96       	adiw	r24, 0x02	; 2
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	44 e0       	ldi	r20, 0x04	; 4
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
}
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	cf 91       	pop	r28
 3e8:	df 91       	pop	r29
 3ea:	08 95       	ret

000003ec <_ZN9IPAddressC2Ev>:

IPAddress::~IPAddress()
{
}

IPAddress::IPAddress()
 3ec:	df 93       	push	r29
 3ee:	cf 93       	push	r28
 3f0:	00 d0       	rcall	.+0      	; 0x3f2 <_ZN9IPAddressC2Ev+0x6>
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	9a 83       	std	Y+2, r25	; 0x02
 3f8:	89 83       	std	Y+1, r24	; 0x01
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	9a 81       	ldd	r25, Y+2	; 0x02
 3fe:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 402:	e9 81       	ldd	r30, Y+1	; 0x01
 404:	fa 81       	ldd	r31, Y+2	; 0x02
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	91 83       	std	Z+1, r25	; 0x01
 40c:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
 40e:	89 81       	ldd	r24, Y+1	; 0x01
 410:	9a 81       	ldd	r25, Y+2	; 0x02
 412:	02 96       	adiw	r24, 0x02	; 2
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	44 e0       	ldi	r20, 0x04	; 4
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
}
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	cf 91       	pop	r28
 426:	df 91       	pop	r29
 428:	08 95       	ret

0000042a <_ZN9PrintableD2Ev>:
  public:
	virtual ~Printable() = 0;
    virtual size_t printTo(Print& p) const = 0;
};

inline Printable::~Printable() {}
 42a:	df 93       	push	r29
 42c:	cf 93       	push	r28
 42e:	00 d0       	rcall	.+0      	; 0x430 <_ZN9PrintableD2Ev+0x6>
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
 434:	9a 83       	std	Y+2, r25	; 0x02
 436:	89 83       	std	Y+1, r24	; 0x01
 438:	e9 81       	ldd	r30, Y+1	; 0x01
 43a:	fa 81       	ldd	r31, Y+2	; 0x02
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	91 83       	std	Z+1, r25	; 0x01
 442:	80 83       	st	Z, r24
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	88 23       	and	r24, r24
 44a:	01 f0       	breq	.+0      	; 0x44c <_ZN9PrintableD2Ev+0x22>
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	9a 81       	ldd	r25, Y+2	; 0x02
 450:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	cf 91       	pop	r28
 45a:	df 91       	pop	r29
 45c:	08 95       	ret

0000045e <_ZN9IPAddressD0Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::~IPAddress()
 45e:	df 93       	push	r29
 460:	cf 93       	push	r28
 462:	00 d0       	rcall	.+0      	; 0x464 <_ZN9IPAddressD0Ev+0x6>
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	9a 83       	std	Y+2, r25	; 0x02
 46a:	89 83       	std	Y+1, r24	; 0x01
 46c:	e9 81       	ldd	r30, Y+1	; 0x01
 46e:	fa 81       	ldd	r31, Y+2	; 0x02
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	91 83       	std	Z+1, r25	; 0x01
 476:	80 83       	st	Z, r24
{
}
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	9a 81       	ldd	r25, Y+2	; 0x02
 47c:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	88 23       	and	r24, r24
 486:	01 f0       	breq	.+0      	; 0x488 <_ZN9IPAddressD0Ev+0x2a>
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	9a 81       	ldd	r25, Y+2	; 0x02
 48c:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	cf 91       	pop	r28
 496:	df 91       	pop	r29
 498:	08 95       	ret

0000049a <_ZN9IPAddressD1Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::~IPAddress()
 49a:	df 93       	push	r29
 49c:	cf 93       	push	r28
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <_ZN9IPAddressD1Ev+0x6>
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	9a 83       	std	Y+2, r25	; 0x02
 4a6:	89 83       	std	Y+1, r24	; 0x01
 4a8:	e9 81       	ldd	r30, Y+1	; 0x01
 4aa:	fa 81       	ldd	r31, Y+2	; 0x02
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	91 83       	std	Z+1, r25	; 0x01
 4b2:	80 83       	st	Z, r24
{
}
 4b4:	89 81       	ldd	r24, Y+1	; 0x01
 4b6:	9a 81       	ldd	r25, Y+2	; 0x02
 4b8:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	88 23       	and	r24, r24
 4c2:	01 f0       	breq	.+0      	; 0x4c4 <_ZN9IPAddressD1Ev+0x2a>
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	9a 81       	ldd	r25, Y+2	; 0x02
 4c8:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 4cc:	0f 90       	pop	r0
 4ce:	0f 90       	pop	r0
 4d0:	cf 91       	pop	r28
 4d2:	df 91       	pop	r29
 4d4:	08 95       	ret

000004d6 <_Z41__static_initialization_and_destruction_0ii>:
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
 4d6:	0f 93       	push	r16
 4d8:	df 93       	push	r29
 4da:	cf 93       	push	r28
 4dc:	00 d0       	rcall	.+0      	; 0x4de <_Z41__static_initialization_and_destruction_0ii+0x8>
 4de:	00 d0       	rcall	.+0      	; 0x4e0 <_Z41__static_initialization_and_destruction_0ii+0xa>
 4e0:	cd b7       	in	r28, 0x3d	; 61
 4e2:	de b7       	in	r29, 0x3e	; 62
 4e4:	9a 83       	std	Y+2, r25	; 0x02
 4e6:	89 83       	std	Y+1, r24	; 0x01
 4e8:	7c 83       	std	Y+4, r23	; 0x04
 4ea:	6b 83       	std	Y+3, r22	; 0x03
 4ec:	89 81       	ldd	r24, Y+1	; 0x01
 4ee:	9a 81       	ldd	r25, Y+2	; 0x02
 4f0:	81 30       	cpi	r24, 0x01	; 1
 4f2:	91 05       	cpc	r25, r1
 4f4:	01 f4       	brne	.+0      	; 0x4f6 <_Z41__static_initialization_and_destruction_0ii+0x20>
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	9c 81       	ldd	r25, Y+4	; 0x04
 4fa:	2f ef       	ldi	r18, 0xFF	; 255
 4fc:	8f 3f       	cpi	r24, 0xFF	; 255
 4fe:	92 07       	cpc	r25, r18
 500:	01 f4       	brne	.+0      	; 0x502 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	20 e0       	ldi	r18, 0x00	; 0
 50c:	00 e0       	ldi	r16, 0x00	; 0
 50e:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 512:	89 81       	ldd	r24, Y+1	; 0x01
 514:	9a 81       	ldd	r25, Y+2	; 0x02
 516:	00 97       	sbiw	r24, 0x00	; 0
 518:	01 f4       	brne	.+0      	; 0x51a <_Z41__static_initialization_and_destruction_0ii+0x44>
 51a:	8b 81       	ldd	r24, Y+3	; 0x03
 51c:	9c 81       	ldd	r25, Y+4	; 0x04
 51e:	2f ef       	ldi	r18, 0xFF	; 255
 520:	8f 3f       	cpi	r24, 0xFF	; 255
 522:	92 07       	cpc	r25, r18
 524:	01 f4       	brne	.+0      	; 0x526 <_Z41__static_initialization_and_destruction_0ii+0x50>
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 52e:	0f 90       	pop	r0
 530:	0f 90       	pop	r0
 532:	0f 90       	pop	r0
 534:	0f 90       	pop	r0
 536:	cf 91       	pop	r28
 538:	df 91       	pop	r29
 53a:	0f 91       	pop	r16
 53c:	08 95       	ret

0000053e <_GLOBAL__D__ZN9IPAddressD2Ev>:
 53e:	df 93       	push	r29
 540:	cf 93       	push	r28
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	6f ef       	ldi	r22, 0xFF	; 255
 54c:	7f ef       	ldi	r23, 0xFF	; 255
 54e:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 552:	cf 91       	pop	r28
 554:	df 91       	pop	r29
 556:	08 95       	ret

00000558 <_GLOBAL__I__ZN9IPAddressD2Ev>:
 558:	df 93       	push	r29
 55a:	cf 93       	push	r28
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	6f ef       	ldi	r22, 0xFF	; 255
 566:	7f ef       	ldi	r23, 0xFF	; 255
 568:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 56c:	cf 91       	pop	r28
 56e:	df 91       	pop	r29
 570:	08 95       	ret

00000572 <_ZN9IPAddressD2Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::~IPAddress()
 572:	df 93       	push	r29
 574:	cf 93       	push	r28
 576:	00 d0       	rcall	.+0      	; 0x578 <_ZN9IPAddressD2Ev+0x6>
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
 57c:	9a 83       	std	Y+2, r25	; 0x02
 57e:	89 83       	std	Y+1, r24	; 0x01
 580:	e9 81       	ldd	r30, Y+1	; 0x01
 582:	fa 81       	ldd	r31, Y+2	; 0x02
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	91 83       	std	Z+1, r25	; 0x01
 58a:	80 83       	st	Z, r24
{
}
 58c:	89 81       	ldd	r24, Y+1	; 0x01
 58e:	9a 81       	ldd	r25, Y+2	; 0x02
 590:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	88 23       	and	r24, r24
 59a:	01 f0       	breq	.+0      	; 0x59c <_ZN9IPAddressD2Ev+0x2a>
 59c:	89 81       	ldd	r24, Y+1	; 0x01
 59e:	9a 81       	ldd	r25, Y+2	; 0x02
 5a0:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 5a4:	0f 90       	pop	r0
 5a6:	0f 90       	pop	r0
 5a8:	cf 91       	pop	r28
 5aa:	df 91       	pop	r29
 5ac:	08 95       	ret

LiquidCrystal.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e58  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000014  00000000  00000000  00000e8c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          00000000  00000000  00000000  00000ea0  2**0
                  ALLOC
  3 .stab         000016f8  00000000  00000000  00000ea0  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000019bf  00000000  00000000  00002598  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ZN5PrintC2Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5PrintC2Ev+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	80 e0       	ldi	r24, 0x00	; 0
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	91 83       	std	Z+1, r25	; 0x01
  18:	80 83       	st	Z, r24
  1a:	e9 81       	ldd	r30, Y+1	; 0x01
  1c:	fa 81       	ldd	r31, Y+2	; 0x02
  1e:	13 82       	std	Z+3, r1	; 0x03
  20:	12 82       	std	Z+2, r1	; 0x02
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

0000002c <_ZN13LiquidCrystalD0Ev>:
#define LCD_2LINE 0x08
#define LCD_1LINE 0x00
#define LCD_5x10DOTS 0x04
#define LCD_5x8DOTS 0x00

class LiquidCrystal : public Print {
  2c:	df 93       	push	r29
  2e:	cf 93       	push	r28
  30:	00 d0       	rcall	.+0      	; 0x32 <_ZN13LiquidCrystalD0Ev+0x6>
  32:	cd b7       	in	r28, 0x3d	; 61
  34:	de b7       	in	r29, 0x3e	; 62
  36:	9a 83       	std	Y+2, r25	; 0x02
  38:	89 83       	std	Y+1, r24	; 0x01
  3a:	e9 81       	ldd	r30, Y+1	; 0x01
  3c:	fa 81       	ldd	r31, Y+2	; 0x02
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	91 83       	std	Z+1, r25	; 0x01
  44:	80 83       	st	Z, r24
  46:	89 81       	ldd	r24, Y+1	; 0x01
  48:	9a 81       	ldd	r25, Y+2	; 0x02
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  4e:	81 e0       	ldi	r24, 0x01	; 1
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	88 23       	and	r24, r24
  54:	01 f0       	breq	.+0      	; 0x56 <_ZN13LiquidCrystalD0Ev+0x2a>
  56:	89 81       	ldd	r24, Y+1	; 0x01
  58:	9a 81       	ldd	r25, Y+2	; 0x02
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  5e:	0f 90       	pop	r0
  60:	0f 90       	pop	r0
  62:	cf 91       	pop	r28
  64:	df 91       	pop	r29
  66:	08 95       	ret

00000068 <_ZN13LiquidCrystalD1Ev>:
  68:	df 93       	push	r29
  6a:	cf 93       	push	r28
  6c:	00 d0       	rcall	.+0      	; 0x6e <_ZN13LiquidCrystalD1Ev+0x6>
  6e:	cd b7       	in	r28, 0x3d	; 61
  70:	de b7       	in	r29, 0x3e	; 62
  72:	9a 83       	std	Y+2, r25	; 0x02
  74:	89 83       	std	Y+1, r24	; 0x01
  76:	e9 81       	ldd	r30, Y+1	; 0x01
  78:	fa 81       	ldd	r31, Y+2	; 0x02
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	91 83       	std	Z+1, r25	; 0x01
  80:	80 83       	st	Z, r24
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	9a 81       	ldd	r25, Y+2	; 0x02
  86:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	88 23       	and	r24, r24
  90:	01 f0       	breq	.+0      	; 0x92 <_ZN13LiquidCrystalD1Ev+0x2a>
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	9a 81       	ldd	r25, Y+2	; 0x02
  96:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  9a:	0f 90       	pop	r0
  9c:	0f 90       	pop	r0
  9e:	cf 91       	pop	r28
  a0:	df 91       	pop	r29
  a2:	08 95       	ret

000000a4 <_ZN13LiquidCrystal11pulseEnableEv>:
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	00 d0       	rcall	.+0      	; 0xaa <_ZN13LiquidCrystal11pulseEnableEv+0x6>
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	9a 83       	std	Y+2, r25	; 0x02
  b0:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
  b2:	e9 81       	ldd	r30, Y+1	; 0x01
  b4:	fa 81       	ldd	r31, Y+2	; 0x02
  b6:	86 81       	ldd	r24, Z+6	; 0x06
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  delayMicroseconds(1);    
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  digitalWrite(_enable_pin, HIGH);
  c6:	e9 81       	ldd	r30, Y+1	; 0x01
  c8:	fa 81       	ldd	r31, Y+2	; 0x02
  ca:	86 81       	ldd	r24, Z+6	; 0x06
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  delayMicroseconds(1);    // enable pulse must be >450ns
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  digitalWrite(_enable_pin, LOW);
  da:	e9 81       	ldd	r30, Y+1	; 0x01
  dc:	fa 81       	ldd	r31, Y+2	; 0x02
  de:	86 81       	ldd	r24, Z+6	; 0x06
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  delayMicroseconds(100);   // commands need > 37us to settle
  e6:	84 e6       	ldi	r24, 0x64	; 100
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	cf 91       	pop	r28
  f4:	df 91       	pop	r29
  f6:	08 95       	ret

000000f8 <_ZN13LiquidCrystal10write8bitsEh>:
  }

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	00 d0       	rcall	.+0      	; 0xfe <_ZN13LiquidCrystal10write8bitsEh+0x6>
  fe:	00 d0       	rcall	.+0      	; 0x100 <_ZN13LiquidCrystal10write8bitsEh+0x8>
 100:	0f 92       	push	r0
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	9c 83       	std	Y+4, r25	; 0x04
 108:	8b 83       	std	Y+3, r24	; 0x03
 10a:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
 10c:	1a 82       	std	Y+2, r1	; 0x02
 10e:	19 82       	std	Y+1, r1	; 0x01
 110:	00 c0       	rjmp	.+0      	; 0x112 <_ZN13LiquidCrystal10write8bitsEh+0x1a>
    pinMode(_data_pins[i], OUTPUT);
 112:	29 81       	ldd	r18, Y+1	; 0x01
 114:	3a 81       	ldd	r19, Y+2	; 0x02
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	9c 81       	ldd	r25, Y+4	; 0x04
 11a:	82 0f       	add	r24, r18
 11c:	93 1f       	adc	r25, r19
 11e:	fc 01       	movw	r30, r24
 120:	37 96       	adiw	r30, 0x07	; 7
 122:	80 81       	ld	r24, Z
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	3a 81       	ldd	r19, Y+2	; 0x02
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	9c 81       	ldd	r25, Y+4	; 0x04
 132:	82 0f       	add	r24, r18
 134:	93 1f       	adc	r25, r19
 136:	fc 01       	movw	r30, r24
 138:	37 96       	adiw	r30, 0x07	; 7
 13a:	20 81       	ld	r18, Z
 13c:	8d 81       	ldd	r24, Y+5	; 0x05
 13e:	88 2f       	mov	r24, r24
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	09 80       	ldd	r0, Y+1	; 0x01
 144:	00 c0       	rjmp	.+0      	; 0x146 <_ZN13LiquidCrystal10write8bitsEh+0x4e>
 146:	95 95       	asr	r25
 148:	87 95       	ror	r24
 14a:	0a 94       	dec	r0
 14c:	02 f4       	brpl	.+0      	; 0x14e <_ZN13LiquidCrystal10write8bitsEh+0x56>
 14e:	98 2f       	mov	r25, r24
 150:	91 70       	andi	r25, 0x01	; 1
 152:	82 2f       	mov	r24, r18
 154:	69 2f       	mov	r22, r25
 156:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	9a 81       	ldd	r25, Y+2	; 0x02
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	9a 83       	std	Y+2, r25	; 0x02
 162:	89 83       	std	Y+1, r24	; 0x01
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	9a 81       	ldd	r25, Y+2	; 0x02
 168:	88 30       	cpi	r24, 0x08	; 8
 16a:	91 05       	cpc	r25, r1
 16c:	04 f0       	brlt	.+0      	; 0x16e <_ZN13LiquidCrystal10write8bitsEh+0x76>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
 16e:	8b 81       	ldd	r24, Y+3	; 0x03
 170:	9c 81       	ldd	r25, Y+4	; 0x04
 172:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	cf 91       	pop	r28
 182:	df 91       	pop	r29
 184:	08 95       	ret

00000186 <_ZN13LiquidCrystal10write4bitsEh>:
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
 186:	df 93       	push	r29
 188:	cf 93       	push	r28
 18a:	00 d0       	rcall	.+0      	; 0x18c <_ZN13LiquidCrystal10write4bitsEh+0x6>
 18c:	00 d0       	rcall	.+0      	; 0x18e <_ZN13LiquidCrystal10write4bitsEh+0x8>
 18e:	0f 92       	push	r0
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	9c 83       	std	Y+4, r25	; 0x04
 196:	8b 83       	std	Y+3, r24	; 0x03
 198:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
 19a:	1a 82       	std	Y+2, r1	; 0x02
 19c:	19 82       	std	Y+1, r1	; 0x01
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <_ZN13LiquidCrystal10write4bitsEh+0x1a>
    pinMode(_data_pins[i], OUTPUT);
 1a0:	29 81       	ldd	r18, Y+1	; 0x01
 1a2:	3a 81       	ldd	r19, Y+2	; 0x02
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	9c 81       	ldd	r25, Y+4	; 0x04
 1a8:	82 0f       	add	r24, r18
 1aa:	93 1f       	adc	r25, r19
 1ac:	fc 01       	movw	r30, r24
 1ae:	37 96       	adiw	r30, 0x07	; 7
 1b0:	80 81       	ld	r24, Z
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
 1b8:	29 81       	ldd	r18, Y+1	; 0x01
 1ba:	3a 81       	ldd	r19, Y+2	; 0x02
 1bc:	8b 81       	ldd	r24, Y+3	; 0x03
 1be:	9c 81       	ldd	r25, Y+4	; 0x04
 1c0:	82 0f       	add	r24, r18
 1c2:	93 1f       	adc	r25, r19
 1c4:	fc 01       	movw	r30, r24
 1c6:	37 96       	adiw	r30, 0x07	; 7
 1c8:	20 81       	ld	r18, Z
 1ca:	8d 81       	ldd	r24, Y+5	; 0x05
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	09 80       	ldd	r0, Y+1	; 0x01
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <_ZN13LiquidCrystal10write4bitsEh+0x4e>
 1d4:	95 95       	asr	r25
 1d6:	87 95       	ror	r24
 1d8:	0a 94       	dec	r0
 1da:	02 f4       	brpl	.+0      	; 0x1dc <_ZN13LiquidCrystal10write4bitsEh+0x56>
 1dc:	98 2f       	mov	r25, r24
 1de:	91 70       	andi	r25, 0x01	; 1
 1e0:	82 2f       	mov	r24, r18
 1e2:	69 2f       	mov	r22, r25
 1e4:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	9a 81       	ldd	r25, Y+2	; 0x02
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	9a 83       	std	Y+2, r25	; 0x02
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	9a 81       	ldd	r25, Y+2	; 0x02
 1f6:	84 30       	cpi	r24, 0x04	; 4
 1f8:	91 05       	cpc	r25, r1
 1fa:	04 f0       	brlt	.+0      	; 0x1fc <_ZN13LiquidCrystal10write4bitsEh+0x76>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	9c 81       	ldd	r25, Y+4	; 0x04
 200:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	cf 91       	pop	r28
 210:	df 91       	pop	r29
 212:	08 95       	ret

00000214 <_ZN13LiquidCrystal4sendEhh>:
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
 214:	df 93       	push	r29
 216:	cf 93       	push	r28
 218:	00 d0       	rcall	.+0      	; 0x21a <_ZN13LiquidCrystal4sendEhh+0x6>
 21a:	00 d0       	rcall	.+0      	; 0x21c <_ZN13LiquidCrystal4sendEhh+0x8>
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	9a 83       	std	Y+2, r25	; 0x02
 222:	89 83       	std	Y+1, r24	; 0x01
 224:	6b 83       	std	Y+3, r22	; 0x03
 226:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
 228:	e9 81       	ldd	r30, Y+1	; 0x01
 22a:	fa 81       	ldd	r31, Y+2	; 0x02
 22c:	84 81       	ldd	r24, Z+4	; 0x04
 22e:	6c 81       	ldd	r22, Y+4	; 0x04
 230:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 234:	e9 81       	ldd	r30, Y+1	; 0x01
 236:	fa 81       	ldd	r31, Y+2	; 0x02
 238:	85 81       	ldd	r24, Z+5	; 0x05
 23a:	8f 3f       	cpi	r24, 0xFF	; 255
 23c:	01 f0       	breq	.+0      	; 0x23e <_ZN13LiquidCrystal4sendEhh+0x2a>
    digitalWrite(_rw_pin, LOW);
 23e:	e9 81       	ldd	r30, Y+1	; 0x01
 240:	fa 81       	ldd	r31, Y+2	; 0x02
 242:	85 81       	ldd	r24, Z+5	; 0x05
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 24a:	e9 81       	ldd	r30, Y+1	; 0x01
 24c:	fa 81       	ldd	r31, Y+2	; 0x02
 24e:	87 85       	ldd	r24, Z+15	; 0x0f
 250:	88 2f       	mov	r24, r24
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	80 71       	andi	r24, 0x10	; 16
 256:	90 70       	andi	r25, 0x00	; 0
 258:	00 97       	sbiw	r24, 0x00	; 0
 25a:	01 f0       	breq	.+0      	; 0x25c <_ZN13LiquidCrystal4sendEhh+0x48>
    write8bits(value); 
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	9a 81       	ldd	r25, Y+2	; 0x02
 260:	6b 81       	ldd	r22, Y+3	; 0x03
 262:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 266:	00 c0       	rjmp	.+0      	; 0x268 <_ZN13LiquidCrystal4sendEhh+0x54>
  } else {
    write4bits(value>>4);
 268:	8b 81       	ldd	r24, Y+3	; 0x03
 26a:	88 2f       	mov	r24, r24
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	95 95       	asr	r25
 270:	87 95       	ror	r24
 272:	95 95       	asr	r25
 274:	87 95       	ror	r24
 276:	95 95       	asr	r25
 278:	87 95       	ror	r24
 27a:	95 95       	asr	r25
 27c:	87 95       	ror	r24
 27e:	28 2f       	mov	r18, r24
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	9a 81       	ldd	r25, Y+2	; 0x02
 284:	62 2f       	mov	r22, r18
 286:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
    write4bits(value);
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	9a 81       	ldd	r25, Y+2	; 0x02
 28e:	6b 81       	ldd	r22, Y+3	; 0x03
 290:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  }
}
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	cf 91       	pop	r28
 29e:	df 91       	pop	r29
 2a0:	08 95       	ret

000002a2 <_ZN13LiquidCrystal5writeEh>:

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
 2a2:	df 93       	push	r29
 2a4:	cf 93       	push	r28
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <_ZN13LiquidCrystal5writeEh+0x6>
 2a8:	0f 92       	push	r0
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	9a 83       	std	Y+2, r25	; 0x02
 2b0:	89 83       	std	Y+1, r24	; 0x01
 2b2:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	9a 81       	ldd	r25, Y+2	; 0x02
 2b8:	6b 81       	ldd	r22, Y+3	; 0x03
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  return 1; // assume sucess
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
}
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	cf 91       	pop	r28
 2cc:	df 91       	pop	r29
 2ce:	08 95       	ret

000002d0 <_ZN13LiquidCrystal7commandEh>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
 2d0:	df 93       	push	r29
 2d2:	cf 93       	push	r28
 2d4:	00 d0       	rcall	.+0      	; 0x2d6 <_ZN13LiquidCrystal7commandEh+0x6>
 2d6:	0f 92       	push	r0
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	9a 83       	std	Y+2, r25	; 0x02
 2de:	89 83       	std	Y+1, r24	; 0x01
 2e0:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	9a 81       	ldd	r25, Y+2	; 0x02
 2e6:	6b 81       	ldd	r22, Y+3	; 0x03
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	cf 91       	pop	r28
 2f6:	df 91       	pop	r29
 2f8:	08 95       	ret

000002fa <_ZN13LiquidCrystal10createCharEhPh>:
  command(LCD_ENTRYMODESET | _displaymode);
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
 2fa:	df 93       	push	r29
 2fc:	cf 93       	push	r28
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	27 97       	sbiw	r28, 0x07	; 7
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	9c 83       	std	Y+4, r25	; 0x04
 310:	8b 83       	std	Y+3, r24	; 0x03
 312:	6d 83       	std	Y+5, r22	; 0x05
 314:	5f 83       	std	Y+7, r21	; 0x07
 316:	4e 83       	std	Y+6, r20	; 0x06
  location &= 0x7; // we only have 8 locations 0-7
 318:	8d 81       	ldd	r24, Y+5	; 0x05
 31a:	87 70       	andi	r24, 0x07	; 7
 31c:	8d 83       	std	Y+5, r24	; 0x05
  command(LCD_SETCGRAMADDR | (location << 3));
 31e:	8d 81       	ldd	r24, Y+5	; 0x05
 320:	88 2f       	mov	r24, r24
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	80 64       	ori	r24, 0x40	; 64
 332:	28 2f       	mov	r18, r24
 334:	8b 81       	ldd	r24, Y+3	; 0x03
 336:	9c 81       	ldd	r25, Y+4	; 0x04
 338:	62 2f       	mov	r22, r18
 33a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  for (int i=0; i<8; i++) {
 33e:	1a 82       	std	Y+2, r1	; 0x02
 340:	19 82       	std	Y+1, r1	; 0x01
 342:	00 c0       	rjmp	.+0      	; 0x344 <_ZN13LiquidCrystal10createCharEhPh+0x4a>
    write(charmap[i]);
 344:	eb 81       	ldd	r30, Y+3	; 0x03
 346:	fc 81       	ldd	r31, Y+4	; 0x04
 348:	80 81       	ld	r24, Z
 34a:	91 81       	ldd	r25, Z+1	; 0x01
 34c:	fc 01       	movw	r30, r24
 34e:	34 96       	adiw	r30, 0x04	; 4
 350:	40 81       	ld	r20, Z
 352:	51 81       	ldd	r21, Z+1	; 0x01
 354:	29 81       	ldd	r18, Y+1	; 0x01
 356:	3a 81       	ldd	r19, Y+2	; 0x02
 358:	8e 81       	ldd	r24, Y+6	; 0x06
 35a:	9f 81       	ldd	r25, Y+7	; 0x07
 35c:	fc 01       	movw	r30, r24
 35e:	e2 0f       	add	r30, r18
 360:	f3 1f       	adc	r31, r19
 362:	20 81       	ld	r18, Z
 364:	8b 81       	ldd	r24, Y+3	; 0x03
 366:	9c 81       	ldd	r25, Y+4	; 0x04
 368:	62 2f       	mov	r22, r18
 36a:	fa 01       	movw	r30, r20
 36c:	09 95       	icall
// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	9a 81       	ldd	r25, Y+2	; 0x02
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	9a 83       	std	Y+2, r25	; 0x02
 376:	89 83       	std	Y+1, r24	; 0x01
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	9a 81       	ldd	r25, Y+2	; 0x02
 37c:	88 30       	cpi	r24, 0x08	; 8
 37e:	91 05       	cpc	r25, r1
 380:	04 f0       	brlt	.+0      	; 0x382 <_ZN13LiquidCrystal10createCharEhPh+0x88>
    write(charmap[i]);
  }
}
 382:	27 96       	adiw	r28, 0x07	; 7
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61
 38e:	cf 91       	pop	r28
 390:	df 91       	pop	r29
 392:	08 95       	ret

00000394 <_ZN13LiquidCrystal12noAutoscrollEv>:
  _displaymode |= LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will 'left justify' text from the cursor
void LiquidCrystal::noAutoscroll(void) {
 394:	df 93       	push	r29
 396:	cf 93       	push	r28
 398:	00 d0       	rcall	.+0      	; 0x39a <_ZN13LiquidCrystal12noAutoscrollEv+0x6>
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
 39e:	9a 83       	std	Y+2, r25	; 0x02
 3a0:	89 83       	std	Y+1, r24	; 0x01
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
 3a2:	e9 81       	ldd	r30, Y+1	; 0x01
 3a4:	fa 81       	ldd	r31, Y+2	; 0x02
 3a6:	81 89       	ldd	r24, Z+17	; 0x11
 3a8:	8e 7f       	andi	r24, 0xFE	; 254
 3aa:	e9 81       	ldd	r30, Y+1	; 0x01
 3ac:	fa 81       	ldd	r31, Y+2	; 0x02
 3ae:	81 8b       	std	Z+17, r24	; 0x11
  command(LCD_ENTRYMODESET | _displaymode);
 3b0:	e9 81       	ldd	r30, Y+1	; 0x01
 3b2:	fa 81       	ldd	r31, Y+2	; 0x02
 3b4:	81 89       	ldd	r24, Z+17	; 0x11
 3b6:	28 2f       	mov	r18, r24
 3b8:	24 60       	ori	r18, 0x04	; 4
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	9a 81       	ldd	r25, Y+2	; 0x02
 3be:	62 2f       	mov	r22, r18
 3c0:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	cf 91       	pop	r28
 3ca:	df 91       	pop	r29
 3cc:	08 95       	ret

000003ce <_ZN13LiquidCrystal10autoscrollEv>:
  _displaymode &= ~LCD_ENTRYLEFT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will 'right justify' text from the cursor
void LiquidCrystal::autoscroll(void) {
 3ce:	df 93       	push	r29
 3d0:	cf 93       	push	r28
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <_ZN13LiquidCrystal10autoscrollEv+0x6>
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	9a 83       	std	Y+2, r25	; 0x02
 3da:	89 83       	std	Y+1, r24	; 0x01
  _displaymode |= LCD_ENTRYSHIFTINCREMENT;
 3dc:	e9 81       	ldd	r30, Y+1	; 0x01
 3de:	fa 81       	ldd	r31, Y+2	; 0x02
 3e0:	81 89       	ldd	r24, Z+17	; 0x11
 3e2:	81 60       	ori	r24, 0x01	; 1
 3e4:	e9 81       	ldd	r30, Y+1	; 0x01
 3e6:	fa 81       	ldd	r31, Y+2	; 0x02
 3e8:	81 8b       	std	Z+17, r24	; 0x11
  command(LCD_ENTRYMODESET | _displaymode);
 3ea:	e9 81       	ldd	r30, Y+1	; 0x01
 3ec:	fa 81       	ldd	r31, Y+2	; 0x02
 3ee:	81 89       	ldd	r24, Z+17	; 0x11
 3f0:	28 2f       	mov	r18, r24
 3f2:	24 60       	ori	r18, 0x04	; 4
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
 3f6:	9a 81       	ldd	r25, Y+2	; 0x02
 3f8:	62 2f       	mov	r22, r18
 3fa:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	cf 91       	pop	r28
 404:	df 91       	pop	r29
 406:	08 95       	ret

00000408 <_ZN13LiquidCrystal11rightToLeftEv>:
  _displaymode |= LCD_ENTRYLEFT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This is for text that flows Right to Left
void LiquidCrystal::rightToLeft(void) {
 408:	df 93       	push	r29
 40a:	cf 93       	push	r28
 40c:	00 d0       	rcall	.+0      	; 0x40e <_ZN13LiquidCrystal11rightToLeftEv+0x6>
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	9a 83       	std	Y+2, r25	; 0x02
 414:	89 83       	std	Y+1, r24	; 0x01
  _displaymode &= ~LCD_ENTRYLEFT;
 416:	e9 81       	ldd	r30, Y+1	; 0x01
 418:	fa 81       	ldd	r31, Y+2	; 0x02
 41a:	81 89       	ldd	r24, Z+17	; 0x11
 41c:	8d 7f       	andi	r24, 0xFD	; 253
 41e:	e9 81       	ldd	r30, Y+1	; 0x01
 420:	fa 81       	ldd	r31, Y+2	; 0x02
 422:	81 8b       	std	Z+17, r24	; 0x11
  command(LCD_ENTRYMODESET | _displaymode);
 424:	e9 81       	ldd	r30, Y+1	; 0x01
 426:	fa 81       	ldd	r31, Y+2	; 0x02
 428:	81 89       	ldd	r24, Z+17	; 0x11
 42a:	28 2f       	mov	r18, r24
 42c:	24 60       	ori	r18, 0x04	; 4
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	9a 81       	ldd	r25, Y+2	; 0x02
 432:	62 2f       	mov	r22, r18
 434:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	cf 91       	pop	r28
 43e:	df 91       	pop	r29
 440:	08 95       	ret

00000442 <_ZN13LiquidCrystal11leftToRightEv>:
void LiquidCrystal::scrollDisplayRight(void) {
  command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}

// This is for text that flows Left to Right
void LiquidCrystal::leftToRight(void) {
 442:	df 93       	push	r29
 444:	cf 93       	push	r28
 446:	00 d0       	rcall	.+0      	; 0x448 <_ZN13LiquidCrystal11leftToRightEv+0x6>
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
 44c:	9a 83       	std	Y+2, r25	; 0x02
 44e:	89 83       	std	Y+1, r24	; 0x01
  _displaymode |= LCD_ENTRYLEFT;
 450:	e9 81       	ldd	r30, Y+1	; 0x01
 452:	fa 81       	ldd	r31, Y+2	; 0x02
 454:	81 89       	ldd	r24, Z+17	; 0x11
 456:	82 60       	ori	r24, 0x02	; 2
 458:	e9 81       	ldd	r30, Y+1	; 0x01
 45a:	fa 81       	ldd	r31, Y+2	; 0x02
 45c:	81 8b       	std	Z+17, r24	; 0x11
  command(LCD_ENTRYMODESET | _displaymode);
 45e:	e9 81       	ldd	r30, Y+1	; 0x01
 460:	fa 81       	ldd	r31, Y+2	; 0x02
 462:	81 89       	ldd	r24, Z+17	; 0x11
 464:	28 2f       	mov	r18, r24
 466:	24 60       	ori	r18, 0x04	; 4
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	9a 81       	ldd	r25, Y+2	; 0x02
 46c:	62 2f       	mov	r22, r18
 46e:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	cf 91       	pop	r28
 478:	df 91       	pop	r29
 47a:	08 95       	ret

0000047c <_ZN13LiquidCrystal18scrollDisplayRightEv>:

// These commands scroll the display without changing the RAM
void LiquidCrystal::scrollDisplayLeft(void) {
  command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
}
void LiquidCrystal::scrollDisplayRight(void) {
 47c:	df 93       	push	r29
 47e:	cf 93       	push	r28
 480:	00 d0       	rcall	.+0      	; 0x482 <_ZN13LiquidCrystal18scrollDisplayRightEv+0x6>
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	9a 83       	std	Y+2, r25	; 0x02
 488:	89 83       	std	Y+1, r24	; 0x01
  command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	9a 81       	ldd	r25, Y+2	; 0x02
 48e:	6c e1       	ldi	r22, 0x1C	; 28
 490:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	cf 91       	pop	r28
 49a:	df 91       	pop	r29
 49c:	08 95       	ret

0000049e <_ZN13LiquidCrystal17scrollDisplayLeftEv>:
  _displaycontrol |= LCD_BLINKON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}

// These commands scroll the display without changing the RAM
void LiquidCrystal::scrollDisplayLeft(void) {
 49e:	df 93       	push	r29
 4a0:	cf 93       	push	r28
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <_ZN13LiquidCrystal17scrollDisplayLeftEv+0x6>
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
 4a8:	9a 83       	std	Y+2, r25	; 0x02
 4aa:	89 83       	std	Y+1, r24	; 0x01
  command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 4ac:	89 81       	ldd	r24, Y+1	; 0x01
 4ae:	9a 81       	ldd	r25, Y+2	; 0x02
 4b0:	68 e1       	ldi	r22, 0x18	; 24
 4b2:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 4b6:	0f 90       	pop	r0
 4b8:	0f 90       	pop	r0
 4ba:	cf 91       	pop	r28
 4bc:	df 91       	pop	r29
 4be:	08 95       	ret

000004c0 <_ZN13LiquidCrystal5blinkEv>:
// Turn on and off the blinking cursor
void LiquidCrystal::noBlink() {
  _displaycontrol &= ~LCD_BLINKON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::blink() {
 4c0:	df 93       	push	r29
 4c2:	cf 93       	push	r28
 4c4:	00 d0       	rcall	.+0      	; 0x4c6 <_ZN13LiquidCrystal5blinkEv+0x6>
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	9a 83       	std	Y+2, r25	; 0x02
 4cc:	89 83       	std	Y+1, r24	; 0x01
  _displaycontrol |= LCD_BLINKON;
 4ce:	e9 81       	ldd	r30, Y+1	; 0x01
 4d0:	fa 81       	ldd	r31, Y+2	; 0x02
 4d2:	80 89       	ldd	r24, Z+16	; 0x10
 4d4:	81 60       	ori	r24, 0x01	; 1
 4d6:	e9 81       	ldd	r30, Y+1	; 0x01
 4d8:	fa 81       	ldd	r31, Y+2	; 0x02
 4da:	80 8b       	std	Z+16, r24	; 0x10
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 4dc:	e9 81       	ldd	r30, Y+1	; 0x01
 4de:	fa 81       	ldd	r31, Y+2	; 0x02
 4e0:	80 89       	ldd	r24, Z+16	; 0x10
 4e2:	28 2f       	mov	r18, r24
 4e4:	28 60       	ori	r18, 0x08	; 8
 4e6:	89 81       	ldd	r24, Y+1	; 0x01
 4e8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ea:	62 2f       	mov	r22, r18
 4ec:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	cf 91       	pop	r28
 4f6:	df 91       	pop	r29
 4f8:	08 95       	ret

000004fa <_ZN13LiquidCrystal7noBlinkEv>:
  _displaycontrol |= LCD_CURSORON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}

// Turn on and off the blinking cursor
void LiquidCrystal::noBlink() {
 4fa:	df 93       	push	r29
 4fc:	cf 93       	push	r28
 4fe:	00 d0       	rcall	.+0      	; 0x500 <_ZN13LiquidCrystal7noBlinkEv+0x6>
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	9a 83       	std	Y+2, r25	; 0x02
 506:	89 83       	std	Y+1, r24	; 0x01
  _displaycontrol &= ~LCD_BLINKON;
 508:	e9 81       	ldd	r30, Y+1	; 0x01
 50a:	fa 81       	ldd	r31, Y+2	; 0x02
 50c:	80 89       	ldd	r24, Z+16	; 0x10
 50e:	8e 7f       	andi	r24, 0xFE	; 254
 510:	e9 81       	ldd	r30, Y+1	; 0x01
 512:	fa 81       	ldd	r31, Y+2	; 0x02
 514:	80 8b       	std	Z+16, r24	; 0x10
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 516:	e9 81       	ldd	r30, Y+1	; 0x01
 518:	fa 81       	ldd	r31, Y+2	; 0x02
 51a:	80 89       	ldd	r24, Z+16	; 0x10
 51c:	28 2f       	mov	r18, r24
 51e:	28 60       	ori	r18, 0x08	; 8
 520:	89 81       	ldd	r24, Y+1	; 0x01
 522:	9a 81       	ldd	r25, Y+2	; 0x02
 524:	62 2f       	mov	r22, r18
 526:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 52a:	0f 90       	pop	r0
 52c:	0f 90       	pop	r0
 52e:	cf 91       	pop	r28
 530:	df 91       	pop	r29
 532:	08 95       	ret

00000534 <_ZN13LiquidCrystal6cursorEv>:
// Turns the underline cursor on/off
void LiquidCrystal::noCursor() {
  _displaycontrol &= ~LCD_CURSORON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::cursor() {
 534:	df 93       	push	r29
 536:	cf 93       	push	r28
 538:	00 d0       	rcall	.+0      	; 0x53a <_ZN13LiquidCrystal6cursorEv+0x6>
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
 53e:	9a 83       	std	Y+2, r25	; 0x02
 540:	89 83       	std	Y+1, r24	; 0x01
  _displaycontrol |= LCD_CURSORON;
 542:	e9 81       	ldd	r30, Y+1	; 0x01
 544:	fa 81       	ldd	r31, Y+2	; 0x02
 546:	80 89       	ldd	r24, Z+16	; 0x10
 548:	82 60       	ori	r24, 0x02	; 2
 54a:	e9 81       	ldd	r30, Y+1	; 0x01
 54c:	fa 81       	ldd	r31, Y+2	; 0x02
 54e:	80 8b       	std	Z+16, r24	; 0x10
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 550:	e9 81       	ldd	r30, Y+1	; 0x01
 552:	fa 81       	ldd	r31, Y+2	; 0x02
 554:	80 89       	ldd	r24, Z+16	; 0x10
 556:	28 2f       	mov	r18, r24
 558:	28 60       	ori	r18, 0x08	; 8
 55a:	89 81       	ldd	r24, Y+1	; 0x01
 55c:	9a 81       	ldd	r25, Y+2	; 0x02
 55e:	62 2f       	mov	r22, r18
 560:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 564:	0f 90       	pop	r0
 566:	0f 90       	pop	r0
 568:	cf 91       	pop	r28
 56a:	df 91       	pop	r29
 56c:	08 95       	ret

0000056e <_ZN13LiquidCrystal8noCursorEv>:
  _displaycontrol |= LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}

// Turns the underline cursor on/off
void LiquidCrystal::noCursor() {
 56e:	df 93       	push	r29
 570:	cf 93       	push	r28
 572:	00 d0       	rcall	.+0      	; 0x574 <_ZN13LiquidCrystal8noCursorEv+0x6>
 574:	cd b7       	in	r28, 0x3d	; 61
 576:	de b7       	in	r29, 0x3e	; 62
 578:	9a 83       	std	Y+2, r25	; 0x02
 57a:	89 83       	std	Y+1, r24	; 0x01
  _displaycontrol &= ~LCD_CURSORON;
 57c:	e9 81       	ldd	r30, Y+1	; 0x01
 57e:	fa 81       	ldd	r31, Y+2	; 0x02
 580:	80 89       	ldd	r24, Z+16	; 0x10
 582:	8d 7f       	andi	r24, 0xFD	; 253
 584:	e9 81       	ldd	r30, Y+1	; 0x01
 586:	fa 81       	ldd	r31, Y+2	; 0x02
 588:	80 8b       	std	Z+16, r24	; 0x10
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 58a:	e9 81       	ldd	r30, Y+1	; 0x01
 58c:	fa 81       	ldd	r31, Y+2	; 0x02
 58e:	80 89       	ldd	r24, Z+16	; 0x10
 590:	28 2f       	mov	r18, r24
 592:	28 60       	ori	r18, 0x08	; 8
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	9a 81       	ldd	r25, Y+2	; 0x02
 598:	62 2f       	mov	r22, r18
 59a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 59e:	0f 90       	pop	r0
 5a0:	0f 90       	pop	r0
 5a2:	cf 91       	pop	r28
 5a4:	df 91       	pop	r29
 5a6:	08 95       	ret

000005a8 <_ZN13LiquidCrystal7displayEv>:
// Turn the display on/off (quickly)
void LiquidCrystal::noDisplay() {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
 5a8:	df 93       	push	r29
 5aa:	cf 93       	push	r28
 5ac:	00 d0       	rcall	.+0      	; 0x5ae <_ZN13LiquidCrystal7displayEv+0x6>
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
 5b2:	9a 83       	std	Y+2, r25	; 0x02
 5b4:	89 83       	std	Y+1, r24	; 0x01
  _displaycontrol |= LCD_DISPLAYON;
 5b6:	e9 81       	ldd	r30, Y+1	; 0x01
 5b8:	fa 81       	ldd	r31, Y+2	; 0x02
 5ba:	80 89       	ldd	r24, Z+16	; 0x10
 5bc:	84 60       	ori	r24, 0x04	; 4
 5be:	e9 81       	ldd	r30, Y+1	; 0x01
 5c0:	fa 81       	ldd	r31, Y+2	; 0x02
 5c2:	80 8b       	std	Z+16, r24	; 0x10
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 5c4:	e9 81       	ldd	r30, Y+1	; 0x01
 5c6:	fa 81       	ldd	r31, Y+2	; 0x02
 5c8:	80 89       	ldd	r24, Z+16	; 0x10
 5ca:	28 2f       	mov	r18, r24
 5cc:	28 60       	ori	r18, 0x08	; 8
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
 5d0:	9a 81       	ldd	r25, Y+2	; 0x02
 5d2:	62 2f       	mov	r22, r18
 5d4:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	cf 91       	pop	r28
 5de:	df 91       	pop	r29
 5e0:	08 95       	ret

000005e2 <_ZN13LiquidCrystal9noDisplayEv>:
  
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}

// Turn the display on/off (quickly)
void LiquidCrystal::noDisplay() {
 5e2:	df 93       	push	r29
 5e4:	cf 93       	push	r28
 5e6:	00 d0       	rcall	.+0      	; 0x5e8 <_ZN13LiquidCrystal9noDisplayEv+0x6>
 5e8:	cd b7       	in	r28, 0x3d	; 61
 5ea:	de b7       	in	r29, 0x3e	; 62
 5ec:	9a 83       	std	Y+2, r25	; 0x02
 5ee:	89 83       	std	Y+1, r24	; 0x01
  _displaycontrol &= ~LCD_DISPLAYON;
 5f0:	e9 81       	ldd	r30, Y+1	; 0x01
 5f2:	fa 81       	ldd	r31, Y+2	; 0x02
 5f4:	80 89       	ldd	r24, Z+16	; 0x10
 5f6:	8b 7f       	andi	r24, 0xFB	; 251
 5f8:	e9 81       	ldd	r30, Y+1	; 0x01
 5fa:	fa 81       	ldd	r31, Y+2	; 0x02
 5fc:	80 8b       	std	Z+16, r24	; 0x10
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 5fe:	e9 81       	ldd	r30, Y+1	; 0x01
 600:	fa 81       	ldd	r31, Y+2	; 0x02
 602:	80 89       	ldd	r24, Z+16	; 0x10
 604:	28 2f       	mov	r18, r24
 606:	28 60       	ori	r18, 0x08	; 8
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	9a 81       	ldd	r25, Y+2	; 0x02
 60c:	62 2f       	mov	r22, r18
 60e:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 612:	0f 90       	pop	r0
 614:	0f 90       	pop	r0
 616:	cf 91       	pop	r28
 618:	df 91       	pop	r29
 61a:	08 95       	ret

0000061c <_ZN13LiquidCrystal9setCursorEhh>:
{
  command(LCD_RETURNHOME);  // set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal::setCursor(uint8_t col, uint8_t row)
 61c:	df 93       	push	r29
 61e:	cf 93       	push	r28
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
 624:	61 97       	sbiw	r28, 0x11	; 17
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	f8 94       	cli
 62a:	de bf       	out	0x3e, r29	; 62
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	cd bf       	out	0x3d, r28	; 61
 630:	9a 87       	std	Y+10, r25	; 0x0a
 632:	89 87       	std	Y+9, r24	; 0x09
 634:	6b 87       	std	Y+11, r22	; 0x0b
 636:	4c 87       	std	Y+12, r20	; 0x0c
{
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 638:	ce 01       	movw	r24, r28
 63a:	01 96       	adiw	r24, 0x01	; 1
 63c:	9e 87       	std	Y+14, r25	; 0x0e
 63e:	8d 87       	std	Y+13, r24	; 0x0d
 640:	e0 e0       	ldi	r30, 0x00	; 0
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	f8 8b       	std	Y+16, r31	; 0x10
 646:	ef 87       	std	Y+15, r30	; 0x0f
 648:	f8 e0       	ldi	r31, 0x08	; 8
 64a:	f9 8b       	std	Y+17, r31	; 0x11
 64c:	ef 85       	ldd	r30, Y+15	; 0x0f
 64e:	f8 89       	ldd	r31, Y+16	; 0x10
 650:	00 80       	ld	r0, Z
 652:	8f 85       	ldd	r24, Y+15	; 0x0f
 654:	98 89       	ldd	r25, Y+16	; 0x10
 656:	01 96       	adiw	r24, 0x01	; 1
 658:	98 8b       	std	Y+16, r25	; 0x10
 65a:	8f 87       	std	Y+15, r24	; 0x0f
 65c:	ed 85       	ldd	r30, Y+13	; 0x0d
 65e:	fe 85       	ldd	r31, Y+14	; 0x0e
 660:	00 82       	st	Z, r0
 662:	8d 85       	ldd	r24, Y+13	; 0x0d
 664:	9e 85       	ldd	r25, Y+14	; 0x0e
 666:	01 96       	adiw	r24, 0x01	; 1
 668:	9e 87       	std	Y+14, r25	; 0x0e
 66a:	8d 87       	std	Y+13, r24	; 0x0d
 66c:	99 89       	ldd	r25, Y+17	; 0x11
 66e:	91 50       	subi	r25, 0x01	; 1
 670:	99 8b       	std	Y+17, r25	; 0x11
 672:	e9 89       	ldd	r30, Y+17	; 0x11
 674:	ee 23       	and	r30, r30
 676:	01 f4       	brne	.+0      	; 0x678 <_ZN13LiquidCrystal9setCursorEhh+0x5c>
  if ( row >= _numlines ) {
 678:	e9 85       	ldd	r30, Y+9	; 0x09
 67a:	fa 85       	ldd	r31, Y+10	; 0x0a
 67c:	93 89       	ldd	r25, Z+19	; 0x13
 67e:	8c 85       	ldd	r24, Y+12	; 0x0c
 680:	89 17       	cp	r24, r25
 682:	00 f0       	brcs	.+0      	; 0x684 <_ZN13LiquidCrystal9setCursorEhh+0x68>
    row = _numlines-1;    // we count rows starting w/0
 684:	e9 85       	ldd	r30, Y+9	; 0x09
 686:	fa 85       	ldd	r31, Y+10	; 0x0a
 688:	83 89       	ldd	r24, Z+19	; 0x13
 68a:	81 50       	subi	r24, 0x01	; 1
 68c:	8c 87       	std	Y+12, r24	; 0x0c
  }
  
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 68e:	8c 85       	ldd	r24, Y+12	; 0x0c
 690:	88 2f       	mov	r24, r24
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	9c 01       	movw	r18, r24
 696:	22 0f       	add	r18, r18
 698:	33 1f       	adc	r19, r19
 69a:	ce 01       	movw	r24, r28
 69c:	01 96       	adiw	r24, 0x01	; 1
 69e:	fc 01       	movw	r30, r24
 6a0:	e2 0f       	add	r30, r18
 6a2:	f3 1f       	adc	r31, r19
 6a4:	80 81       	ld	r24, Z
 6a6:	91 81       	ldd	r25, Z+1	; 0x01
 6a8:	98 2f       	mov	r25, r24
 6aa:	8b 85       	ldd	r24, Y+11	; 0x0b
 6ac:	89 0f       	add	r24, r25
 6ae:	80 68       	ori	r24, 0x80	; 128
 6b0:	28 2f       	mov	r18, r24
 6b2:	89 85       	ldd	r24, Y+9	; 0x09
 6b4:	9a 85       	ldd	r25, Y+10	; 0x0a
 6b6:	62 2f       	mov	r22, r18
 6b8:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 6bc:	61 96       	adiw	r28, 0x11	; 17
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	f8 94       	cli
 6c2:	de bf       	out	0x3e, r29	; 62
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	cd bf       	out	0x3d, r28	; 61
 6c8:	cf 91       	pop	r28
 6ca:	df 91       	pop	r29
 6cc:	08 95       	ret

000006ce <_ZN13LiquidCrystal4homeEv>:
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal::home()
 6ce:	df 93       	push	r29
 6d0:	cf 93       	push	r28
 6d2:	00 d0       	rcall	.+0      	; 0x6d4 <_ZN13LiquidCrystal4homeEv+0x6>
 6d4:	cd b7       	in	r28, 0x3d	; 61
 6d6:	de b7       	in	r29, 0x3e	; 62
 6d8:	9a 83       	std	Y+2, r25	; 0x02
 6da:	89 83       	std	Y+1, r24	; 0x01
{
  command(LCD_RETURNHOME);  // set cursor position to zero
 6dc:	89 81       	ldd	r24, Y+1	; 0x01
 6de:	9a 81       	ldd	r25, Y+2	; 0x02
 6e0:	62 e0       	ldi	r22, 0x02	; 2
 6e2:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  delayMicroseconds(2000);  // this command takes a long time!
 6e6:	80 ed       	ldi	r24, 0xD0	; 208
 6e8:	97 e0       	ldi	r25, 0x07	; 7
 6ea:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 6ee:	0f 90       	pop	r0
 6f0:	0f 90       	pop	r0
 6f2:	cf 91       	pop	r28
 6f4:	df 91       	pop	r29
 6f6:	08 95       	ret

000006f8 <_ZN13LiquidCrystal5clearEv>:
  command(LCD_ENTRYMODESET | _displaymode);

}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
 6f8:	df 93       	push	r29
 6fa:	cf 93       	push	r28
 6fc:	00 d0       	rcall	.+0      	; 0x6fe <_ZN13LiquidCrystal5clearEv+0x6>
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
 702:	9a 83       	std	Y+2, r25	; 0x02
 704:	89 83       	std	Y+1, r24	; 0x01
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 706:	89 81       	ldd	r24, Y+1	; 0x01
 708:	9a 81       	ldd	r25, Y+2	; 0x02
 70a:	61 e0       	ldi	r22, 0x01	; 1
 70c:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  delayMicroseconds(2000);  // this command takes a long time!
 710:	80 ed       	ldi	r24, 0xD0	; 208
 712:	97 e0       	ldi	r25, 0x07	; 7
 714:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 718:	0f 90       	pop	r0
 71a:	0f 90       	pop	r0
 71c:	cf 91       	pop	r28
 71e:	df 91       	pop	r29
 720:	08 95       	ret

00000722 <_ZN13LiquidCrystal5beginEhhh>:
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 722:	df 93       	push	r29
 724:	cf 93       	push	r28
 726:	00 d0       	rcall	.+0      	; 0x728 <_ZN13LiquidCrystal5beginEhhh+0x6>
 728:	00 d0       	rcall	.+0      	; 0x72a <_ZN13LiquidCrystal5beginEhhh+0x8>
 72a:	0f 92       	push	r0
 72c:	cd b7       	in	r28, 0x3d	; 61
 72e:	de b7       	in	r29, 0x3e	; 62
 730:	9a 83       	std	Y+2, r25	; 0x02
 732:	89 83       	std	Y+1, r24	; 0x01
 734:	6b 83       	std	Y+3, r22	; 0x03
 736:	4c 83       	std	Y+4, r20	; 0x04
 738:	2d 83       	std	Y+5, r18	; 0x05
  if (lines > 1) {
 73a:	8c 81       	ldd	r24, Y+4	; 0x04
 73c:	82 30       	cpi	r24, 0x02	; 2
 73e:	00 f0       	brcs	.+0      	; 0x740 <_ZN13LiquidCrystal5beginEhhh+0x1e>
    _displayfunction |= LCD_2LINE;
 740:	e9 81       	ldd	r30, Y+1	; 0x01
 742:	fa 81       	ldd	r31, Y+2	; 0x02
 744:	87 85       	ldd	r24, Z+15	; 0x0f
 746:	88 60       	ori	r24, 0x08	; 8
 748:	e9 81       	ldd	r30, Y+1	; 0x01
 74a:	fa 81       	ldd	r31, Y+2	; 0x02
 74c:	87 87       	std	Z+15, r24	; 0x0f
  }
  _numlines = lines;
 74e:	e9 81       	ldd	r30, Y+1	; 0x01
 750:	fa 81       	ldd	r31, Y+2	; 0x02
 752:	8c 81       	ldd	r24, Y+4	; 0x04
 754:	83 8b       	std	Z+19, r24	; 0x13
  _currline = 0;
 756:	e9 81       	ldd	r30, Y+1	; 0x01
 758:	fa 81       	ldd	r31, Y+2	; 0x02
 75a:	14 8a       	std	Z+20, r1	; 0x14

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != 0) && (lines == 1)) {
 75c:	8d 81       	ldd	r24, Y+5	; 0x05
 75e:	88 23       	and	r24, r24
 760:	01 f0       	breq	.+0      	; 0x762 <_ZN13LiquidCrystal5beginEhhh+0x40>
 762:	8c 81       	ldd	r24, Y+4	; 0x04
 764:	81 30       	cpi	r24, 0x01	; 1
 766:	01 f4       	brne	.+0      	; 0x768 <_ZN13LiquidCrystal5beginEhhh+0x46>
    _displayfunction |= LCD_5x10DOTS;
 768:	e9 81       	ldd	r30, Y+1	; 0x01
 76a:	fa 81       	ldd	r31, Y+2	; 0x02
 76c:	87 85       	ldd	r24, Z+15	; 0x0f
 76e:	84 60       	ori	r24, 0x04	; 4
 770:	e9 81       	ldd	r30, Y+1	; 0x01
 772:	fa 81       	ldd	r31, Y+2	; 0x02
 774:	87 87       	std	Z+15, r24	; 0x0f
  }

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
  delayMicroseconds(50000); 
 776:	80 e5       	ldi	r24, 0x50	; 80
 778:	93 ec       	ldi	r25, 0xC3	; 195
 77a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
 77e:	e9 81       	ldd	r30, Y+1	; 0x01
 780:	fa 81       	ldd	r31, Y+2	; 0x02
 782:	84 81       	ldd	r24, Z+4	; 0x04
 784:	60 e0       	ldi	r22, 0x00	; 0
 786:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  digitalWrite(_enable_pin, LOW);
 78a:	e9 81       	ldd	r30, Y+1	; 0x01
 78c:	fa 81       	ldd	r31, Y+2	; 0x02
 78e:	86 81       	ldd	r24, Z+6	; 0x06
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  if (_rw_pin != 255) { 
 796:	e9 81       	ldd	r30, Y+1	; 0x01
 798:	fa 81       	ldd	r31, Y+2	; 0x02
 79a:	85 81       	ldd	r24, Z+5	; 0x05
 79c:	8f 3f       	cpi	r24, 0xFF	; 255
 79e:	01 f0       	breq	.+0      	; 0x7a0 <_ZN13LiquidCrystal5beginEhhh+0x7e>
    digitalWrite(_rw_pin, LOW);
 7a0:	e9 81       	ldd	r30, Y+1	; 0x01
 7a2:	fa 81       	ldd	r31, Y+2	; 0x02
 7a4:	85 81       	ldd	r24, Z+5	; 0x05
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 7ac:	e9 81       	ldd	r30, Y+1	; 0x01
 7ae:	fa 81       	ldd	r31, Y+2	; 0x02
 7b0:	87 85       	ldd	r24, Z+15	; 0x0f
 7b2:	88 2f       	mov	r24, r24
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	80 71       	andi	r24, 0x10	; 16
 7b8:	90 70       	andi	r25, 0x00	; 0
 7ba:	00 97       	sbiw	r24, 0x00	; 0
 7bc:	01 f4       	brne	.+0      	; 0x7be <_ZN13LiquidCrystal5beginEhhh+0x9c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 7be:	89 81       	ldd	r24, Y+1	; 0x01
 7c0:	9a 81       	ldd	r25, Y+2	; 0x02
 7c2:	63 e0       	ldi	r22, 0x03	; 3
 7c4:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
    delayMicroseconds(4500); // wait min 4.1ms
 7c8:	84 e9       	ldi	r24, 0x94	; 148
 7ca:	91 e1       	ldi	r25, 0x11	; 17
 7cc:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>

    // second try
    write4bits(0x03);
 7d0:	89 81       	ldd	r24, Y+1	; 0x01
 7d2:	9a 81       	ldd	r25, Y+2	; 0x02
 7d4:	63 e0       	ldi	r22, 0x03	; 3
 7d6:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
    delayMicroseconds(4500); // wait min 4.1ms
 7da:	84 e9       	ldi	r24, 0x94	; 148
 7dc:	91 e1       	ldi	r25, 0x11	; 17
 7de:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
    
    // third go!
    write4bits(0x03); 
 7e2:	89 81       	ldd	r24, Y+1	; 0x01
 7e4:	9a 81       	ldd	r25, Y+2	; 0x02
 7e6:	63 e0       	ldi	r22, 0x03	; 3
 7e8:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
    delayMicroseconds(150);
 7ec:	86 e9       	ldi	r24, 0x96	; 150
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 7f4:	89 81       	ldd	r24, Y+1	; 0x01
 7f6:	9a 81       	ldd	r25, Y+2	; 0x02
 7f8:	62 e0       	ldi	r22, 0x02	; 2
 7fa:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 7fe:	00 c0       	rjmp	.+0      	; 0x800 <_ZN13LiquidCrystal5beginEhhh+0xde>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800:	e9 81       	ldd	r30, Y+1	; 0x01
 802:	fa 81       	ldd	r31, Y+2	; 0x02
 804:	87 85       	ldd	r24, Z+15	; 0x0f
 806:	28 2f       	mov	r18, r24
 808:	20 62       	ori	r18, 0x20	; 32
 80a:	89 81       	ldd	r24, Y+1	; 0x01
 80c:	9a 81       	ldd	r25, Y+2	; 0x02
 80e:	62 2f       	mov	r22, r18
 810:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
    delayMicroseconds(4500);  // wait more than 4.1ms
 814:	84 e9       	ldi	r24, 0x94	; 148
 816:	91 e1       	ldi	r25, 0x11	; 17
 818:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 81c:	e9 81       	ldd	r30, Y+1	; 0x01
 81e:	fa 81       	ldd	r31, Y+2	; 0x02
 820:	87 85       	ldd	r24, Z+15	; 0x0f
 822:	28 2f       	mov	r18, r24
 824:	20 62       	ori	r18, 0x20	; 32
 826:	89 81       	ldd	r24, Y+1	; 0x01
 828:	9a 81       	ldd	r25, Y+2	; 0x02
 82a:	62 2f       	mov	r22, r18
 82c:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
    delayMicroseconds(150);
 830:	86 e9       	ldi	r24, 0x96	; 150
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 838:	e9 81       	ldd	r30, Y+1	; 0x01
 83a:	fa 81       	ldd	r31, Y+2	; 0x02
 83c:	87 85       	ldd	r24, Z+15	; 0x0f
 83e:	28 2f       	mov	r18, r24
 840:	20 62       	ori	r18, 0x20	; 32
 842:	89 81       	ldd	r24, Y+1	; 0x01
 844:	9a 81       	ldd	r25, Y+2	; 0x02
 846:	62 2f       	mov	r22, r18
 848:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 84c:	e9 81       	ldd	r30, Y+1	; 0x01
 84e:	fa 81       	ldd	r31, Y+2	; 0x02
 850:	87 85       	ldd	r24, Z+15	; 0x0f
 852:	28 2f       	mov	r18, r24
 854:	20 62       	ori	r18, 0x20	; 32
 856:	89 81       	ldd	r24, Y+1	; 0x01
 858:	9a 81       	ldd	r25, Y+2	; 0x02
 85a:	62 2f       	mov	r22, r18
 85c:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 860:	e9 81       	ldd	r30, Y+1	; 0x01
 862:	fa 81       	ldd	r31, Y+2	; 0x02
 864:	84 e0       	ldi	r24, 0x04	; 4
 866:	80 8b       	std	Z+16, r24	; 0x10
  display();
 868:	89 81       	ldd	r24, Y+1	; 0x01
 86a:	9a 81       	ldd	r25, Y+2	; 0x02
 86c:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>

  // clear it off
  clear();
 870:	89 81       	ldd	r24, Y+1	; 0x01
 872:	9a 81       	ldd	r25, Y+2	; 0x02
 874:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 878:	e9 81       	ldd	r30, Y+1	; 0x01
 87a:	fa 81       	ldd	r31, Y+2	; 0x02
 87c:	82 e0       	ldi	r24, 0x02	; 2
 87e:	81 8b       	std	Z+17, r24	; 0x11
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 880:	e9 81       	ldd	r30, Y+1	; 0x01
 882:	fa 81       	ldd	r31, Y+2	; 0x02
 884:	81 89       	ldd	r24, Z+17	; 0x11
 886:	28 2f       	mov	r18, r24
 888:	24 60       	ori	r18, 0x04	; 4
 88a:	89 81       	ldd	r24, Y+1	; 0x01
 88c:	9a 81       	ldd	r25, Y+2	; 0x02
 88e:	62 2f       	mov	r22, r18
 890:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>

}
 894:	0f 90       	pop	r0
 896:	0f 90       	pop	r0
 898:	0f 90       	pop	r0
 89a:	0f 90       	pop	r0
 89c:	0f 90       	pop	r0
 89e:	cf 91       	pop	r28
 8a0:	df 91       	pop	r29
 8a2:	08 95       	ret

000008a4 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

void LiquidCrystal::init(uint8_t fourbitmode, uint8_t rs, uint8_t rw, uint8_t enable,
			 uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			 uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
 8a4:	8f 92       	push	r8
 8a6:	af 92       	push	r10
 8a8:	cf 92       	push	r12
 8aa:	ef 92       	push	r14
 8ac:	0f 93       	push	r16
 8ae:	df 93       	push	r29
 8b0:	cf 93       	push	r28
 8b2:	cd b7       	in	r28, 0x3d	; 61
 8b4:	de b7       	in	r29, 0x3e	; 62
 8b6:	2a 97       	sbiw	r28, 0x0a	; 10
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	f8 94       	cli
 8bc:	de bf       	out	0x3e, r29	; 62
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	cd bf       	out	0x3d, r28	; 61
 8c2:	9a 83       	std	Y+2, r25	; 0x02
 8c4:	89 83       	std	Y+1, r24	; 0x01
 8c6:	6b 83       	std	Y+3, r22	; 0x03
 8c8:	4c 83       	std	Y+4, r20	; 0x04
 8ca:	2d 83       	std	Y+5, r18	; 0x05
 8cc:	0e 83       	std	Y+6, r16	; 0x06
 8ce:	ef 82       	std	Y+7, r14	; 0x07
 8d0:	c8 86       	std	Y+8, r12	; 0x08
 8d2:	a9 86       	std	Y+9, r10	; 0x09
 8d4:	8a 86       	std	Y+10, r8	; 0x0a
{
  _rs_pin = rs;
 8d6:	e9 81       	ldd	r30, Y+1	; 0x01
 8d8:	fa 81       	ldd	r31, Y+2	; 0x02
 8da:	8c 81       	ldd	r24, Y+4	; 0x04
 8dc:	84 83       	std	Z+4, r24	; 0x04
  _rw_pin = rw;
 8de:	e9 81       	ldd	r30, Y+1	; 0x01
 8e0:	fa 81       	ldd	r31, Y+2	; 0x02
 8e2:	8d 81       	ldd	r24, Y+5	; 0x05
 8e4:	85 83       	std	Z+5, r24	; 0x05
  _enable_pin = enable;
 8e6:	e9 81       	ldd	r30, Y+1	; 0x01
 8e8:	fa 81       	ldd	r31, Y+2	; 0x02
 8ea:	8e 81       	ldd	r24, Y+6	; 0x06
 8ec:	86 83       	std	Z+6, r24	; 0x06
  
  _data_pins[0] = d0;
 8ee:	e9 81       	ldd	r30, Y+1	; 0x01
 8f0:	fa 81       	ldd	r31, Y+2	; 0x02
 8f2:	8f 81       	ldd	r24, Y+7	; 0x07
 8f4:	87 83       	std	Z+7, r24	; 0x07
  _data_pins[1] = d1;
 8f6:	e9 81       	ldd	r30, Y+1	; 0x01
 8f8:	fa 81       	ldd	r31, Y+2	; 0x02
 8fa:	88 85       	ldd	r24, Y+8	; 0x08
 8fc:	80 87       	std	Z+8, r24	; 0x08
  _data_pins[2] = d2;
 8fe:	e9 81       	ldd	r30, Y+1	; 0x01
 900:	fa 81       	ldd	r31, Y+2	; 0x02
 902:	89 85       	ldd	r24, Y+9	; 0x09
 904:	81 87       	std	Z+9, r24	; 0x09
  _data_pins[3] = d3; 
 906:	e9 81       	ldd	r30, Y+1	; 0x01
 908:	fa 81       	ldd	r31, Y+2	; 0x02
 90a:	8a 85       	ldd	r24, Y+10	; 0x0a
 90c:	82 87       	std	Z+10, r24	; 0x0a
  _data_pins[4] = d4;
 90e:	e9 81       	ldd	r30, Y+1	; 0x01
 910:	fa 81       	ldd	r31, Y+2	; 0x02
 912:	8c 89       	ldd	r24, Y+20	; 0x14
 914:	83 87       	std	Z+11, r24	; 0x0b
  _data_pins[5] = d5;
 916:	e9 81       	ldd	r30, Y+1	; 0x01
 918:	fa 81       	ldd	r31, Y+2	; 0x02
 91a:	8d 89       	ldd	r24, Y+21	; 0x15
 91c:	84 87       	std	Z+12, r24	; 0x0c
  _data_pins[6] = d6;
 91e:	e9 81       	ldd	r30, Y+1	; 0x01
 920:	fa 81       	ldd	r31, Y+2	; 0x02
 922:	8e 89       	ldd	r24, Y+22	; 0x16
 924:	85 87       	std	Z+13, r24	; 0x0d
  _data_pins[7] = d7; 
 926:	e9 81       	ldd	r30, Y+1	; 0x01
 928:	fa 81       	ldd	r31, Y+2	; 0x02
 92a:	8f 89       	ldd	r24, Y+23	; 0x17
 92c:	86 87       	std	Z+14, r24	; 0x0e

  pinMode(_rs_pin, OUTPUT);
 92e:	e9 81       	ldd	r30, Y+1	; 0x01
 930:	fa 81       	ldd	r31, Y+2	; 0x02
 932:	84 81       	ldd	r24, Z+4	; 0x04
 934:	61 e0       	ldi	r22, 0x01	; 1
 936:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
 93a:	e9 81       	ldd	r30, Y+1	; 0x01
 93c:	fa 81       	ldd	r31, Y+2	; 0x02
 93e:	85 81       	ldd	r24, Z+5	; 0x05
 940:	8f 3f       	cpi	r24, 0xFF	; 255
 942:	01 f0       	breq	.+0      	; 0x944 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xa0>
    pinMode(_rw_pin, OUTPUT);
 944:	e9 81       	ldd	r30, Y+1	; 0x01
 946:	fa 81       	ldd	r31, Y+2	; 0x02
 948:	85 81       	ldd	r24, Z+5	; 0x05
 94a:	61 e0       	ldi	r22, 0x01	; 1
 94c:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  }
  pinMode(_enable_pin, OUTPUT);
 950:	e9 81       	ldd	r30, Y+1	; 0x01
 952:	fa 81       	ldd	r31, Y+2	; 0x02
 954:	86 81       	ldd	r24, Z+6	; 0x06
 956:	61 e0       	ldi	r22, 0x01	; 1
 958:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  
  if (fourbitmode)
 95c:	8b 81       	ldd	r24, Y+3	; 0x03
 95e:	88 23       	and	r24, r24
 960:	01 f0       	breq	.+0      	; 0x962 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xbe>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 962:	e9 81       	ldd	r30, Y+1	; 0x01
 964:	fa 81       	ldd	r31, Y+2	; 0x02
 966:	17 86       	std	Z+15, r1	; 0x0f
 968:	00 c0       	rjmp	.+0      	; 0x96a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xc6>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 96a:	e9 81       	ldd	r30, Y+1	; 0x01
 96c:	fa 81       	ldd	r31, Y+2	; 0x02
 96e:	80 e1       	ldi	r24, 0x10	; 16
 970:	87 87       	std	Z+15, r24	; 0x0f
  
  begin(16, 1);  
 972:	89 81       	ldd	r24, Y+1	; 0x01
 974:	9a 81       	ldd	r25, Y+2	; 0x02
 976:	60 e1       	ldi	r22, 0x10	; 16
 978:	41 e0       	ldi	r20, 0x01	; 1
 97a:	20 e0       	ldi	r18, 0x00	; 0
 97c:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
}
 980:	2a 96       	adiw	r28, 0x0a	; 10
 982:	0f b6       	in	r0, 0x3f	; 63
 984:	f8 94       	cli
 986:	de bf       	out	0x3e, r29	; 62
 988:	0f be       	out	0x3f, r0	; 63
 98a:	cd bf       	out	0x3d, r28	; 61
 98c:	cf 91       	pop	r28
 98e:	df 91       	pop	r29
 990:	0f 91       	pop	r16
 992:	ef 90       	pop	r14
 994:	cf 90       	pop	r12
 996:	af 90       	pop	r10
 998:	8f 90       	pop	r8
 99a:	08 95       	ret

0000099c <_ZN13LiquidCrystalC1Ehhhhhh>:
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
 99c:	8f 92       	push	r8
 99e:	af 92       	push	r10
 9a0:	cf 92       	push	r12
 9a2:	ef 92       	push	r14
 9a4:	0f 93       	push	r16
 9a6:	df 93       	push	r29
 9a8:	cf 93       	push	r28
 9aa:	cd b7       	in	r28, 0x3d	; 61
 9ac:	de b7       	in	r29, 0x3e	; 62
 9ae:	28 97       	sbiw	r28, 0x08	; 8
 9b0:	0f b6       	in	r0, 0x3f	; 63
 9b2:	f8 94       	cli
 9b4:	de bf       	out	0x3e, r29	; 62
 9b6:	0f be       	out	0x3f, r0	; 63
 9b8:	cd bf       	out	0x3d, r28	; 61
 9ba:	9a 83       	std	Y+2, r25	; 0x02
 9bc:	89 83       	std	Y+1, r24	; 0x01
 9be:	6b 83       	std	Y+3, r22	; 0x03
 9c0:	4c 83       	std	Y+4, r20	; 0x04
 9c2:	2d 83       	std	Y+5, r18	; 0x05
 9c4:	0e 83       	std	Y+6, r16	; 0x06
 9c6:	ef 82       	std	Y+7, r14	; 0x07
 9c8:	c8 86       	std	Y+8, r12	; 0x08
 9ca:	89 81       	ldd	r24, Y+1	; 0x01
 9cc:	9a 81       	ldd	r25, Y+2	; 0x02
 9ce:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 9d2:	e9 81       	ldd	r30, Y+1	; 0x01
 9d4:	fa 81       	ldd	r31, Y+2	; 0x02
 9d6:	80 e0       	ldi	r24, 0x00	; 0
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	91 83       	std	Z+1, r25	; 0x01
 9dc:	80 83       	st	Z, r24
{
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 9de:	00 d0       	rcall	.+0      	; 0x9e0 <_ZN13LiquidCrystalC1Ehhhhhh+0x44>
 9e0:	00 d0       	rcall	.+0      	; 0x9e2 <_ZN13LiquidCrystalC1Ehhhhhh+0x46>
 9e2:	ed b7       	in	r30, 0x3d	; 61
 9e4:	fe b7       	in	r31, 0x3e	; 62
 9e6:	31 96       	adiw	r30, 0x01	; 1
 9e8:	89 81       	ldd	r24, Y+1	; 0x01
 9ea:	9a 81       	ldd	r25, Y+2	; 0x02
 9ec:	10 82       	st	Z, r1
 9ee:	11 82       	std	Z+1, r1	; 0x01
 9f0:	12 82       	std	Z+2, r1	; 0x02
 9f2:	13 82       	std	Z+3, r1	; 0x03
 9f4:	61 e0       	ldi	r22, 0x01	; 1
 9f6:	4b 81       	ldd	r20, Y+3	; 0x03
 9f8:	2f ef       	ldi	r18, 0xFF	; 255
 9fa:	0c 81       	ldd	r16, Y+4	; 0x04
 9fc:	ed 80       	ldd	r14, Y+5	; 0x05
 9fe:	ce 80       	ldd	r12, Y+6	; 0x06
 a00:	af 80       	ldd	r10, Y+7	; 0x07
 a02:	88 84       	ldd	r8, Y+8	; 0x08
 a04:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 a08:	0f 90       	pop	r0
 a0a:	0f 90       	pop	r0
 a0c:	0f 90       	pop	r0
 a0e:	0f 90       	pop	r0
}
 a10:	28 96       	adiw	r28, 0x08	; 8
 a12:	0f b6       	in	r0, 0x3f	; 63
 a14:	f8 94       	cli
 a16:	de bf       	out	0x3e, r29	; 62
 a18:	0f be       	out	0x3f, r0	; 63
 a1a:	cd bf       	out	0x3d, r28	; 61
 a1c:	cf 91       	pop	r28
 a1e:	df 91       	pop	r29
 a20:	0f 91       	pop	r16
 a22:	ef 90       	pop	r14
 a24:	cf 90       	pop	r12
 a26:	af 90       	pop	r10
 a28:	8f 90       	pop	r8
 a2a:	08 95       	ret

00000a2c <_ZN13LiquidCrystalC2Ehhhhhh>:
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
 a2c:	8f 92       	push	r8
 a2e:	af 92       	push	r10
 a30:	cf 92       	push	r12
 a32:	ef 92       	push	r14
 a34:	0f 93       	push	r16
 a36:	df 93       	push	r29
 a38:	cf 93       	push	r28
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
 a3e:	28 97       	sbiw	r28, 0x08	; 8
 a40:	0f b6       	in	r0, 0x3f	; 63
 a42:	f8 94       	cli
 a44:	de bf       	out	0x3e, r29	; 62
 a46:	0f be       	out	0x3f, r0	; 63
 a48:	cd bf       	out	0x3d, r28	; 61
 a4a:	9a 83       	std	Y+2, r25	; 0x02
 a4c:	89 83       	std	Y+1, r24	; 0x01
 a4e:	6b 83       	std	Y+3, r22	; 0x03
 a50:	4c 83       	std	Y+4, r20	; 0x04
 a52:	2d 83       	std	Y+5, r18	; 0x05
 a54:	0e 83       	std	Y+6, r16	; 0x06
 a56:	ef 82       	std	Y+7, r14	; 0x07
 a58:	c8 86       	std	Y+8, r12	; 0x08
 a5a:	89 81       	ldd	r24, Y+1	; 0x01
 a5c:	9a 81       	ldd	r25, Y+2	; 0x02
 a5e:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 a62:	e9 81       	ldd	r30, Y+1	; 0x01
 a64:	fa 81       	ldd	r31, Y+2	; 0x02
 a66:	80 e0       	ldi	r24, 0x00	; 0
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	91 83       	std	Z+1, r25	; 0x01
 a6c:	80 83       	st	Z, r24
{
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 a6e:	00 d0       	rcall	.+0      	; 0xa70 <_ZN13LiquidCrystalC2Ehhhhhh+0x44>
 a70:	00 d0       	rcall	.+0      	; 0xa72 <_ZN13LiquidCrystalC2Ehhhhhh+0x46>
 a72:	ed b7       	in	r30, 0x3d	; 61
 a74:	fe b7       	in	r31, 0x3e	; 62
 a76:	31 96       	adiw	r30, 0x01	; 1
 a78:	89 81       	ldd	r24, Y+1	; 0x01
 a7a:	9a 81       	ldd	r25, Y+2	; 0x02
 a7c:	10 82       	st	Z, r1
 a7e:	11 82       	std	Z+1, r1	; 0x01
 a80:	12 82       	std	Z+2, r1	; 0x02
 a82:	13 82       	std	Z+3, r1	; 0x03
 a84:	61 e0       	ldi	r22, 0x01	; 1
 a86:	4b 81       	ldd	r20, Y+3	; 0x03
 a88:	2f ef       	ldi	r18, 0xFF	; 255
 a8a:	0c 81       	ldd	r16, Y+4	; 0x04
 a8c:	ed 80       	ldd	r14, Y+5	; 0x05
 a8e:	ce 80       	ldd	r12, Y+6	; 0x06
 a90:	af 80       	ldd	r10, Y+7	; 0x07
 a92:	88 84       	ldd	r8, Y+8	; 0x08
 a94:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 a98:	0f 90       	pop	r0
 a9a:	0f 90       	pop	r0
 a9c:	0f 90       	pop	r0
 a9e:	0f 90       	pop	r0
}
 aa0:	28 96       	adiw	r28, 0x08	; 8
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	f8 94       	cli
 aa6:	de bf       	out	0x3e, r29	; 62
 aa8:	0f be       	out	0x3f, r0	; 63
 aaa:	cd bf       	out	0x3d, r28	; 61
 aac:	cf 91       	pop	r28
 aae:	df 91       	pop	r29
 ab0:	0f 91       	pop	r16
 ab2:	ef 90       	pop	r14
 ab4:	cf 90       	pop	r12
 ab6:	af 90       	pop	r10
 ab8:	8f 90       	pop	r8
 aba:	08 95       	ret

00000abc <_ZN13LiquidCrystalC1Ehhhhhhh>:
{
  init(0, rs, 255, enable, d0, d1, d2, d3, d4, d5, d6, d7);
}

LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t rw, uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
 abc:	8f 92       	push	r8
 abe:	af 92       	push	r10
 ac0:	cf 92       	push	r12
 ac2:	ef 92       	push	r14
 ac4:	0f 93       	push	r16
 ac6:	df 93       	push	r29
 ac8:	cf 93       	push	r28
 aca:	cd b7       	in	r28, 0x3d	; 61
 acc:	de b7       	in	r29, 0x3e	; 62
 ace:	29 97       	sbiw	r28, 0x09	; 9
 ad0:	0f b6       	in	r0, 0x3f	; 63
 ad2:	f8 94       	cli
 ad4:	de bf       	out	0x3e, r29	; 62
 ad6:	0f be       	out	0x3f, r0	; 63
 ad8:	cd bf       	out	0x3d, r28	; 61
 ada:	9a 83       	std	Y+2, r25	; 0x02
 adc:	89 83       	std	Y+1, r24	; 0x01
 ade:	6b 83       	std	Y+3, r22	; 0x03
 ae0:	4c 83       	std	Y+4, r20	; 0x04
 ae2:	2d 83       	std	Y+5, r18	; 0x05
 ae4:	0e 83       	std	Y+6, r16	; 0x06
 ae6:	ef 82       	std	Y+7, r14	; 0x07
 ae8:	c8 86       	std	Y+8, r12	; 0x08
 aea:	a9 86       	std	Y+9, r10	; 0x09
 aec:	89 81       	ldd	r24, Y+1	; 0x01
 aee:	9a 81       	ldd	r25, Y+2	; 0x02
 af0:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 af4:	e9 81       	ldd	r30, Y+1	; 0x01
 af6:	fa 81       	ldd	r31, Y+2	; 0x02
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	91 83       	std	Z+1, r25	; 0x01
 afe:	80 83       	st	Z, r24
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 b00:	00 d0       	rcall	.+0      	; 0xb02 <_ZN13LiquidCrystalC1Ehhhhhhh+0x46>
 b02:	00 d0       	rcall	.+0      	; 0xb04 <_ZN13LiquidCrystalC1Ehhhhhhh+0x48>
 b04:	ed b7       	in	r30, 0x3d	; 61
 b06:	fe b7       	in	r31, 0x3e	; 62
 b08:	31 96       	adiw	r30, 0x01	; 1
 b0a:	89 81       	ldd	r24, Y+1	; 0x01
 b0c:	9a 81       	ldd	r25, Y+2	; 0x02
 b0e:	10 82       	st	Z, r1
 b10:	11 82       	std	Z+1, r1	; 0x01
 b12:	12 82       	std	Z+2, r1	; 0x02
 b14:	13 82       	std	Z+3, r1	; 0x03
 b16:	61 e0       	ldi	r22, 0x01	; 1
 b18:	4b 81       	ldd	r20, Y+3	; 0x03
 b1a:	2c 81       	ldd	r18, Y+4	; 0x04
 b1c:	0d 81       	ldd	r16, Y+5	; 0x05
 b1e:	ee 80       	ldd	r14, Y+6	; 0x06
 b20:	cf 80       	ldd	r12, Y+7	; 0x07
 b22:	a8 84       	ldd	r10, Y+8	; 0x08
 b24:	89 84       	ldd	r8, Y+9	; 0x09
 b26:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 b2a:	0f 90       	pop	r0
 b2c:	0f 90       	pop	r0
 b2e:	0f 90       	pop	r0
 b30:	0f 90       	pop	r0
}
 b32:	29 96       	adiw	r28, 0x09	; 9
 b34:	0f b6       	in	r0, 0x3f	; 63
 b36:	f8 94       	cli
 b38:	de bf       	out	0x3e, r29	; 62
 b3a:	0f be       	out	0x3f, r0	; 63
 b3c:	cd bf       	out	0x3d, r28	; 61
 b3e:	cf 91       	pop	r28
 b40:	df 91       	pop	r29
 b42:	0f 91       	pop	r16
 b44:	ef 90       	pop	r14
 b46:	cf 90       	pop	r12
 b48:	af 90       	pop	r10
 b4a:	8f 90       	pop	r8
 b4c:	08 95       	ret

00000b4e <_ZN13LiquidCrystalC2Ehhhhhhh>:
{
  init(0, rs, 255, enable, d0, d1, d2, d3, d4, d5, d6, d7);
}

LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t rw, uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
 b4e:	8f 92       	push	r8
 b50:	af 92       	push	r10
 b52:	cf 92       	push	r12
 b54:	ef 92       	push	r14
 b56:	0f 93       	push	r16
 b58:	df 93       	push	r29
 b5a:	cf 93       	push	r28
 b5c:	cd b7       	in	r28, 0x3d	; 61
 b5e:	de b7       	in	r29, 0x3e	; 62
 b60:	29 97       	sbiw	r28, 0x09	; 9
 b62:	0f b6       	in	r0, 0x3f	; 63
 b64:	f8 94       	cli
 b66:	de bf       	out	0x3e, r29	; 62
 b68:	0f be       	out	0x3f, r0	; 63
 b6a:	cd bf       	out	0x3d, r28	; 61
 b6c:	9a 83       	std	Y+2, r25	; 0x02
 b6e:	89 83       	std	Y+1, r24	; 0x01
 b70:	6b 83       	std	Y+3, r22	; 0x03
 b72:	4c 83       	std	Y+4, r20	; 0x04
 b74:	2d 83       	std	Y+5, r18	; 0x05
 b76:	0e 83       	std	Y+6, r16	; 0x06
 b78:	ef 82       	std	Y+7, r14	; 0x07
 b7a:	c8 86       	std	Y+8, r12	; 0x08
 b7c:	a9 86       	std	Y+9, r10	; 0x09
 b7e:	89 81       	ldd	r24, Y+1	; 0x01
 b80:	9a 81       	ldd	r25, Y+2	; 0x02
 b82:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 b86:	e9 81       	ldd	r30, Y+1	; 0x01
 b88:	fa 81       	ldd	r31, Y+2	; 0x02
 b8a:	80 e0       	ldi	r24, 0x00	; 0
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	91 83       	std	Z+1, r25	; 0x01
 b90:	80 83       	st	Z, r24
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 b92:	00 d0       	rcall	.+0      	; 0xb94 <_ZN13LiquidCrystalC2Ehhhhhhh+0x46>
 b94:	00 d0       	rcall	.+0      	; 0xb96 <_ZN13LiquidCrystalC2Ehhhhhhh+0x48>
 b96:	ed b7       	in	r30, 0x3d	; 61
 b98:	fe b7       	in	r31, 0x3e	; 62
 b9a:	31 96       	adiw	r30, 0x01	; 1
 b9c:	89 81       	ldd	r24, Y+1	; 0x01
 b9e:	9a 81       	ldd	r25, Y+2	; 0x02
 ba0:	10 82       	st	Z, r1
 ba2:	11 82       	std	Z+1, r1	; 0x01
 ba4:	12 82       	std	Z+2, r1	; 0x02
 ba6:	13 82       	std	Z+3, r1	; 0x03
 ba8:	61 e0       	ldi	r22, 0x01	; 1
 baa:	4b 81       	ldd	r20, Y+3	; 0x03
 bac:	2c 81       	ldd	r18, Y+4	; 0x04
 bae:	0d 81       	ldd	r16, Y+5	; 0x05
 bb0:	ee 80       	ldd	r14, Y+6	; 0x06
 bb2:	cf 80       	ldd	r12, Y+7	; 0x07
 bb4:	a8 84       	ldd	r10, Y+8	; 0x08
 bb6:	89 84       	ldd	r8, Y+9	; 0x09
 bb8:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 bbc:	0f 90       	pop	r0
 bbe:	0f 90       	pop	r0
 bc0:	0f 90       	pop	r0
 bc2:	0f 90       	pop	r0
}
 bc4:	29 96       	adiw	r28, 0x09	; 9
 bc6:	0f b6       	in	r0, 0x3f	; 63
 bc8:	f8 94       	cli
 bca:	de bf       	out	0x3e, r29	; 62
 bcc:	0f be       	out	0x3f, r0	; 63
 bce:	cd bf       	out	0x3d, r28	; 61
 bd0:	cf 91       	pop	r28
 bd2:	df 91       	pop	r29
 bd4:	0f 91       	pop	r16
 bd6:	ef 90       	pop	r14
 bd8:	cf 90       	pop	r12
 bda:	af 90       	pop	r10
 bdc:	8f 90       	pop	r8
 bde:	08 95       	ret

00000be0 <_ZN13LiquidCrystalC1Ehhhhhhhhhh>:
  init(0, rs, rw, enable, d0, d1, d2, d3, d4, d5, d6, d7);
}

LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			     uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
 be0:	8f 92       	push	r8
 be2:	af 92       	push	r10
 be4:	cf 92       	push	r12
 be6:	ef 92       	push	r14
 be8:	0f 93       	push	r16
 bea:	df 93       	push	r29
 bec:	cf 93       	push	r28
 bee:	cd b7       	in	r28, 0x3d	; 61
 bf0:	de b7       	in	r29, 0x3e	; 62
 bf2:	2a 97       	sbiw	r28, 0x0a	; 10
 bf4:	0f b6       	in	r0, 0x3f	; 63
 bf6:	f8 94       	cli
 bf8:	de bf       	out	0x3e, r29	; 62
 bfa:	0f be       	out	0x3f, r0	; 63
 bfc:	cd bf       	out	0x3d, r28	; 61
 bfe:	9a 83       	std	Y+2, r25	; 0x02
 c00:	89 83       	std	Y+1, r24	; 0x01
 c02:	6b 83       	std	Y+3, r22	; 0x03
 c04:	4c 83       	std	Y+4, r20	; 0x04
 c06:	2d 83       	std	Y+5, r18	; 0x05
 c08:	0e 83       	std	Y+6, r16	; 0x06
 c0a:	ef 82       	std	Y+7, r14	; 0x07
 c0c:	c8 86       	std	Y+8, r12	; 0x08
 c0e:	a9 86       	std	Y+9, r10	; 0x09
 c10:	8a 86       	std	Y+10, r8	; 0x0a
 c12:	89 81       	ldd	r24, Y+1	; 0x01
 c14:	9a 81       	ldd	r25, Y+2	; 0x02
 c16:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 c1a:	e9 81       	ldd	r30, Y+1	; 0x01
 c1c:	fa 81       	ldd	r31, Y+2	; 0x02
 c1e:	80 e0       	ldi	r24, 0x00	; 0
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	91 83       	std	Z+1, r25	; 0x01
 c24:	80 83       	st	Z, r24
{
  init(0, rs, 255, enable, d0, d1, d2, d3, d4, d5, d6, d7);
 c26:	00 d0       	rcall	.+0      	; 0xc28 <_ZN13LiquidCrystalC1Ehhhhhhhhhh+0x48>
 c28:	00 d0       	rcall	.+0      	; 0xc2a <_ZN13LiquidCrystalC1Ehhhhhhhhhh+0x4a>
 c2a:	ed b7       	in	r30, 0x3d	; 61
 c2c:	fe b7       	in	r31, 0x3e	; 62
 c2e:	31 96       	adiw	r30, 0x01	; 1
 c30:	29 81       	ldd	r18, Y+1	; 0x01
 c32:	3a 81       	ldd	r19, Y+2	; 0x02
 c34:	89 85       	ldd	r24, Y+9	; 0x09
 c36:	80 83       	st	Z, r24
 c38:	8a 85       	ldd	r24, Y+10	; 0x0a
 c3a:	81 83       	std	Z+1, r24	; 0x01
 c3c:	8c 89       	ldd	r24, Y+20	; 0x14
 c3e:	82 83       	std	Z+2, r24	; 0x02
 c40:	8d 89       	ldd	r24, Y+21	; 0x15
 c42:	83 83       	std	Z+3, r24	; 0x03
 c44:	c9 01       	movw	r24, r18
 c46:	60 e0       	ldi	r22, 0x00	; 0
 c48:	4b 81       	ldd	r20, Y+3	; 0x03
 c4a:	2f ef       	ldi	r18, 0xFF	; 255
 c4c:	0c 81       	ldd	r16, Y+4	; 0x04
 c4e:	ed 80       	ldd	r14, Y+5	; 0x05
 c50:	ce 80       	ldd	r12, Y+6	; 0x06
 c52:	af 80       	ldd	r10, Y+7	; 0x07
 c54:	88 84       	ldd	r8, Y+8	; 0x08
 c56:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 c5a:	0f 90       	pop	r0
 c5c:	0f 90       	pop	r0
 c5e:	0f 90       	pop	r0
 c60:	0f 90       	pop	r0
}
 c62:	2a 96       	adiw	r28, 0x0a	; 10
 c64:	0f b6       	in	r0, 0x3f	; 63
 c66:	f8 94       	cli
 c68:	de bf       	out	0x3e, r29	; 62
 c6a:	0f be       	out	0x3f, r0	; 63
 c6c:	cd bf       	out	0x3d, r28	; 61
 c6e:	cf 91       	pop	r28
 c70:	df 91       	pop	r29
 c72:	0f 91       	pop	r16
 c74:	ef 90       	pop	r14
 c76:	cf 90       	pop	r12
 c78:	af 90       	pop	r10
 c7a:	8f 90       	pop	r8
 c7c:	08 95       	ret

00000c7e <_ZN13LiquidCrystalC2Ehhhhhhhhhh>:
  init(0, rs, rw, enable, d0, d1, d2, d3, d4, d5, d6, d7);
}

LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			     uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
 c7e:	8f 92       	push	r8
 c80:	af 92       	push	r10
 c82:	cf 92       	push	r12
 c84:	ef 92       	push	r14
 c86:	0f 93       	push	r16
 c88:	df 93       	push	r29
 c8a:	cf 93       	push	r28
 c8c:	cd b7       	in	r28, 0x3d	; 61
 c8e:	de b7       	in	r29, 0x3e	; 62
 c90:	2a 97       	sbiw	r28, 0x0a	; 10
 c92:	0f b6       	in	r0, 0x3f	; 63
 c94:	f8 94       	cli
 c96:	de bf       	out	0x3e, r29	; 62
 c98:	0f be       	out	0x3f, r0	; 63
 c9a:	cd bf       	out	0x3d, r28	; 61
 c9c:	9a 83       	std	Y+2, r25	; 0x02
 c9e:	89 83       	std	Y+1, r24	; 0x01
 ca0:	6b 83       	std	Y+3, r22	; 0x03
 ca2:	4c 83       	std	Y+4, r20	; 0x04
 ca4:	2d 83       	std	Y+5, r18	; 0x05
 ca6:	0e 83       	std	Y+6, r16	; 0x06
 ca8:	ef 82       	std	Y+7, r14	; 0x07
 caa:	c8 86       	std	Y+8, r12	; 0x08
 cac:	a9 86       	std	Y+9, r10	; 0x09
 cae:	8a 86       	std	Y+10, r8	; 0x0a
 cb0:	89 81       	ldd	r24, Y+1	; 0x01
 cb2:	9a 81       	ldd	r25, Y+2	; 0x02
 cb4:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 cb8:	e9 81       	ldd	r30, Y+1	; 0x01
 cba:	fa 81       	ldd	r31, Y+2	; 0x02
 cbc:	80 e0       	ldi	r24, 0x00	; 0
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	91 83       	std	Z+1, r25	; 0x01
 cc2:	80 83       	st	Z, r24
{
  init(0, rs, 255, enable, d0, d1, d2, d3, d4, d5, d6, d7);
 cc4:	00 d0       	rcall	.+0      	; 0xcc6 <_ZN13LiquidCrystalC2Ehhhhhhhhhh+0x48>
 cc6:	00 d0       	rcall	.+0      	; 0xcc8 <_ZN13LiquidCrystalC2Ehhhhhhhhhh+0x4a>
 cc8:	ed b7       	in	r30, 0x3d	; 61
 cca:	fe b7       	in	r31, 0x3e	; 62
 ccc:	31 96       	adiw	r30, 0x01	; 1
 cce:	29 81       	ldd	r18, Y+1	; 0x01
 cd0:	3a 81       	ldd	r19, Y+2	; 0x02
 cd2:	89 85       	ldd	r24, Y+9	; 0x09
 cd4:	80 83       	st	Z, r24
 cd6:	8a 85       	ldd	r24, Y+10	; 0x0a
 cd8:	81 83       	std	Z+1, r24	; 0x01
 cda:	8c 89       	ldd	r24, Y+20	; 0x14
 cdc:	82 83       	std	Z+2, r24	; 0x02
 cde:	8d 89       	ldd	r24, Y+21	; 0x15
 ce0:	83 83       	std	Z+3, r24	; 0x03
 ce2:	c9 01       	movw	r24, r18
 ce4:	60 e0       	ldi	r22, 0x00	; 0
 ce6:	4b 81       	ldd	r20, Y+3	; 0x03
 ce8:	2f ef       	ldi	r18, 0xFF	; 255
 cea:	0c 81       	ldd	r16, Y+4	; 0x04
 cec:	ed 80       	ldd	r14, Y+5	; 0x05
 cee:	ce 80       	ldd	r12, Y+6	; 0x06
 cf0:	af 80       	ldd	r10, Y+7	; 0x07
 cf2:	88 84       	ldd	r8, Y+8	; 0x08
 cf4:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 cf8:	0f 90       	pop	r0
 cfa:	0f 90       	pop	r0
 cfc:	0f 90       	pop	r0
 cfe:	0f 90       	pop	r0
}
 d00:	2a 96       	adiw	r28, 0x0a	; 10
 d02:	0f b6       	in	r0, 0x3f	; 63
 d04:	f8 94       	cli
 d06:	de bf       	out	0x3e, r29	; 62
 d08:	0f be       	out	0x3f, r0	; 63
 d0a:	cd bf       	out	0x3d, r28	; 61
 d0c:	cf 91       	pop	r28
 d0e:	df 91       	pop	r29
 d10:	0f 91       	pop	r16
 d12:	ef 90       	pop	r14
 d14:	cf 90       	pop	r12
 d16:	af 90       	pop	r10
 d18:	8f 90       	pop	r8
 d1a:	08 95       	ret

00000d1c <_ZN13LiquidCrystalC1Ehhhhhhhhhhh>:
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).

LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t rw, uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			     uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
 d1c:	8f 92       	push	r8
 d1e:	af 92       	push	r10
 d20:	cf 92       	push	r12
 d22:	ef 92       	push	r14
 d24:	0f 93       	push	r16
 d26:	df 93       	push	r29
 d28:	cf 93       	push	r28
 d2a:	cd b7       	in	r28, 0x3d	; 61
 d2c:	de b7       	in	r29, 0x3e	; 62
 d2e:	2a 97       	sbiw	r28, 0x0a	; 10
 d30:	0f b6       	in	r0, 0x3f	; 63
 d32:	f8 94       	cli
 d34:	de bf       	out	0x3e, r29	; 62
 d36:	0f be       	out	0x3f, r0	; 63
 d38:	cd bf       	out	0x3d, r28	; 61
 d3a:	9a 83       	std	Y+2, r25	; 0x02
 d3c:	89 83       	std	Y+1, r24	; 0x01
 d3e:	6b 83       	std	Y+3, r22	; 0x03
 d40:	4c 83       	std	Y+4, r20	; 0x04
 d42:	2d 83       	std	Y+5, r18	; 0x05
 d44:	0e 83       	std	Y+6, r16	; 0x06
 d46:	ef 82       	std	Y+7, r14	; 0x07
 d48:	c8 86       	std	Y+8, r12	; 0x08
 d4a:	a9 86       	std	Y+9, r10	; 0x09
 d4c:	8a 86       	std	Y+10, r8	; 0x0a
 d4e:	89 81       	ldd	r24, Y+1	; 0x01
 d50:	9a 81       	ldd	r25, Y+2	; 0x02
 d52:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 d56:	e9 81       	ldd	r30, Y+1	; 0x01
 d58:	fa 81       	ldd	r31, Y+2	; 0x02
 d5a:	80 e0       	ldi	r24, 0x00	; 0
 d5c:	90 e0       	ldi	r25, 0x00	; 0
 d5e:	91 83       	std	Z+1, r25	; 0x01
 d60:	80 83       	st	Z, r24
{
  init(0, rs, rw, enable, d0, d1, d2, d3, d4, d5, d6, d7);
 d62:	00 d0       	rcall	.+0      	; 0xd64 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh+0x48>
 d64:	00 d0       	rcall	.+0      	; 0xd66 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh+0x4a>
 d66:	ed b7       	in	r30, 0x3d	; 61
 d68:	fe b7       	in	r31, 0x3e	; 62
 d6a:	31 96       	adiw	r30, 0x01	; 1
 d6c:	29 81       	ldd	r18, Y+1	; 0x01
 d6e:	3a 81       	ldd	r19, Y+2	; 0x02
 d70:	8a 85       	ldd	r24, Y+10	; 0x0a
 d72:	80 83       	st	Z, r24
 d74:	8c 89       	ldd	r24, Y+20	; 0x14
 d76:	81 83       	std	Z+1, r24	; 0x01
 d78:	8d 89       	ldd	r24, Y+21	; 0x15
 d7a:	82 83       	std	Z+2, r24	; 0x02
 d7c:	8e 89       	ldd	r24, Y+22	; 0x16
 d7e:	83 83       	std	Z+3, r24	; 0x03
 d80:	c9 01       	movw	r24, r18
 d82:	60 e0       	ldi	r22, 0x00	; 0
 d84:	4b 81       	ldd	r20, Y+3	; 0x03
 d86:	2c 81       	ldd	r18, Y+4	; 0x04
 d88:	0d 81       	ldd	r16, Y+5	; 0x05
 d8a:	ee 80       	ldd	r14, Y+6	; 0x06
 d8c:	cf 80       	ldd	r12, Y+7	; 0x07
 d8e:	a8 84       	ldd	r10, Y+8	; 0x08
 d90:	89 84       	ldd	r8, Y+9	; 0x09
 d92:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 d96:	0f 90       	pop	r0
 d98:	0f 90       	pop	r0
 d9a:	0f 90       	pop	r0
 d9c:	0f 90       	pop	r0
}
 d9e:	2a 96       	adiw	r28, 0x0a	; 10
 da0:	0f b6       	in	r0, 0x3f	; 63
 da2:	f8 94       	cli
 da4:	de bf       	out	0x3e, r29	; 62
 da6:	0f be       	out	0x3f, r0	; 63
 da8:	cd bf       	out	0x3d, r28	; 61
 daa:	cf 91       	pop	r28
 dac:	df 91       	pop	r29
 dae:	0f 91       	pop	r16
 db0:	ef 90       	pop	r14
 db2:	cf 90       	pop	r12
 db4:	af 90       	pop	r10
 db6:	8f 90       	pop	r8
 db8:	08 95       	ret

00000dba <_ZN13LiquidCrystalC2Ehhhhhhhhhhh>:
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).

LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t rw, uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			     uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
 dba:	8f 92       	push	r8
 dbc:	af 92       	push	r10
 dbe:	cf 92       	push	r12
 dc0:	ef 92       	push	r14
 dc2:	0f 93       	push	r16
 dc4:	df 93       	push	r29
 dc6:	cf 93       	push	r28
 dc8:	cd b7       	in	r28, 0x3d	; 61
 dca:	de b7       	in	r29, 0x3e	; 62
 dcc:	2a 97       	sbiw	r28, 0x0a	; 10
 dce:	0f b6       	in	r0, 0x3f	; 63
 dd0:	f8 94       	cli
 dd2:	de bf       	out	0x3e, r29	; 62
 dd4:	0f be       	out	0x3f, r0	; 63
 dd6:	cd bf       	out	0x3d, r28	; 61
 dd8:	9a 83       	std	Y+2, r25	; 0x02
 dda:	89 83       	std	Y+1, r24	; 0x01
 ddc:	6b 83       	std	Y+3, r22	; 0x03
 dde:	4c 83       	std	Y+4, r20	; 0x04
 de0:	2d 83       	std	Y+5, r18	; 0x05
 de2:	0e 83       	std	Y+6, r16	; 0x06
 de4:	ef 82       	std	Y+7, r14	; 0x07
 de6:	c8 86       	std	Y+8, r12	; 0x08
 de8:	a9 86       	std	Y+9, r10	; 0x09
 dea:	8a 86       	std	Y+10, r8	; 0x0a
 dec:	89 81       	ldd	r24, Y+1	; 0x01
 dee:	9a 81       	ldd	r25, Y+2	; 0x02
 df0:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 df4:	e9 81       	ldd	r30, Y+1	; 0x01
 df6:	fa 81       	ldd	r31, Y+2	; 0x02
 df8:	80 e0       	ldi	r24, 0x00	; 0
 dfa:	90 e0       	ldi	r25, 0x00	; 0
 dfc:	91 83       	std	Z+1, r25	; 0x01
 dfe:	80 83       	st	Z, r24
{
  init(0, rs, rw, enable, d0, d1, d2, d3, d4, d5, d6, d7);
 e00:	00 d0       	rcall	.+0      	; 0xe02 <_ZN13LiquidCrystalC2Ehhhhhhhhhhh+0x48>
 e02:	00 d0       	rcall	.+0      	; 0xe04 <_ZN13LiquidCrystalC2Ehhhhhhhhhhh+0x4a>
 e04:	ed b7       	in	r30, 0x3d	; 61
 e06:	fe b7       	in	r31, 0x3e	; 62
 e08:	31 96       	adiw	r30, 0x01	; 1
 e0a:	29 81       	ldd	r18, Y+1	; 0x01
 e0c:	3a 81       	ldd	r19, Y+2	; 0x02
 e0e:	8a 85       	ldd	r24, Y+10	; 0x0a
 e10:	80 83       	st	Z, r24
 e12:	8c 89       	ldd	r24, Y+20	; 0x14
 e14:	81 83       	std	Z+1, r24	; 0x01
 e16:	8d 89       	ldd	r24, Y+21	; 0x15
 e18:	82 83       	std	Z+2, r24	; 0x02
 e1a:	8e 89       	ldd	r24, Y+22	; 0x16
 e1c:	83 83       	std	Z+3, r24	; 0x03
 e1e:	c9 01       	movw	r24, r18
 e20:	60 e0       	ldi	r22, 0x00	; 0
 e22:	4b 81       	ldd	r20, Y+3	; 0x03
 e24:	2c 81       	ldd	r18, Y+4	; 0x04
 e26:	0d 81       	ldd	r16, Y+5	; 0x05
 e28:	ee 80       	ldd	r14, Y+6	; 0x06
 e2a:	cf 80       	ldd	r12, Y+7	; 0x07
 e2c:	a8 84       	ldd	r10, Y+8	; 0x08
 e2e:	89 84       	ldd	r8, Y+9	; 0x09
 e30:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 e34:	0f 90       	pop	r0
 e36:	0f 90       	pop	r0
 e38:	0f 90       	pop	r0
 e3a:	0f 90       	pop	r0
}
 e3c:	2a 96       	adiw	r28, 0x0a	; 10
 e3e:	0f b6       	in	r0, 0x3f	; 63
 e40:	f8 94       	cli
 e42:	de bf       	out	0x3e, r29	; 62
 e44:	0f be       	out	0x3f, r0	; 63
 e46:	cd bf       	out	0x3d, r28	; 61
 e48:	cf 91       	pop	r28
 e4a:	df 91       	pop	r29
 e4c:	0f 91       	pop	r16
 e4e:	ef 90       	pop	r14
 e50:	cf 90       	pop	r12
 e52:	af 90       	pop	r10
 e54:	8f 90       	pop	r8
 e56:	08 95       	ret

Print.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ea0  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000001a  00000000  00000000  00000ed4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          00000000  00000000  00000000  00000eee  2**0
                  ALLOC
  3 .stab         00001614  00000000  00000000  00000ef0  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000015d5  00000000  00000000  00002504  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ZNK6String6lengthEv>:
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String6lengthEv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	84 81       	ldd	r24, Z+4	; 0x04
  14:	95 81       	ldd	r25, Z+5	; 0x05
  16:	0f 90       	pop	r0
  18:	0f 90       	pop	r0
  1a:	cf 91       	pop	r28
  1c:	df 91       	pop	r29
  1e:	08 95       	ret

00000020 <_ZN5Print5writeEPKhj>:
}

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
  20:	df 93       	push	r29
  22:	cf 93       	push	r28
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	29 97       	sbiw	r28, 0x09	; 9
  2a:	0f b6       	in	r0, 0x3f	; 63
  2c:	f8 94       	cli
  2e:	de bf       	out	0x3e, r29	; 62
  30:	0f be       	out	0x3f, r0	; 63
  32:	cd bf       	out	0x3d, r28	; 61
  34:	9c 83       	std	Y+4, r25	; 0x04
  36:	8b 83       	std	Y+3, r24	; 0x03
  38:	7e 83       	std	Y+6, r23	; 0x06
  3a:	6d 83       	std	Y+5, r22	; 0x05
  3c:	58 87       	std	Y+8, r21	; 0x08
  3e:	4f 83       	std	Y+7, r20	; 0x07
{
  size_t n = 0;
  40:	1a 82       	std	Y+2, r1	; 0x02
  42:	19 82       	std	Y+1, r1	; 0x01
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN5Print5writeEPKhj+0x26>
  while (size--) {
    n += write(*buffer++);
  46:	eb 81       	ldd	r30, Y+3	; 0x03
  48:	fc 81       	ldd	r31, Y+4	; 0x04
  4a:	80 81       	ld	r24, Z
  4c:	91 81       	ldd	r25, Z+1	; 0x01
  4e:	fc 01       	movw	r30, r24
  50:	34 96       	adiw	r30, 0x04	; 4
  52:	20 81       	ld	r18, Z
  54:	31 81       	ldd	r19, Z+1	; 0x01
  56:	ed 81       	ldd	r30, Y+5	; 0x05
  58:	fe 81       	ldd	r31, Y+6	; 0x06
  5a:	40 81       	ld	r20, Z
  5c:	8d 81       	ldd	r24, Y+5	; 0x05
  5e:	9e 81       	ldd	r25, Y+6	; 0x06
  60:	01 96       	adiw	r24, 0x01	; 1
  62:	9e 83       	std	Y+6, r25	; 0x06
  64:	8d 83       	std	Y+5, r24	; 0x05
  66:	8b 81       	ldd	r24, Y+3	; 0x03
  68:	9c 81       	ldd	r25, Y+4	; 0x04
  6a:	64 2f       	mov	r22, r20
  6c:	f9 01       	movw	r30, r18
  6e:	09 95       	icall
  70:	9c 01       	movw	r18, r24
  72:	89 81       	ldd	r24, Y+1	; 0x01
  74:	9a 81       	ldd	r25, Y+2	; 0x02
  76:	82 0f       	add	r24, r18
  78:	93 1f       	adc	r25, r19
  7a:	9a 83       	std	Y+2, r25	; 0x02
  7c:	89 83       	std	Y+1, r24	; 0x01

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
  7e:	19 86       	std	Y+9, r1	; 0x09
  80:	8f 81       	ldd	r24, Y+7	; 0x07
  82:	98 85       	ldd	r25, Y+8	; 0x08
  84:	00 97       	sbiw	r24, 0x00	; 0
  86:	01 f0       	breq	.+0      	; 0x88 <_ZN5Print5writeEPKhj+0x68>
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	89 87       	std	Y+9, r24	; 0x09
  8c:	8f 81       	ldd	r24, Y+7	; 0x07
  8e:	98 85       	ldd	r25, Y+8	; 0x08
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	98 87       	std	Y+8, r25	; 0x08
  94:	8f 83       	std	Y+7, r24	; 0x07
  96:	89 85       	ldd	r24, Y+9	; 0x09
  98:	88 23       	and	r24, r24
  9a:	01 f4       	brne	.+0      	; 0x9c <_ZN5Print5writeEPKhj+0x7c>
    n += write(*buffer++);
  }
  return n;
  9c:	89 81       	ldd	r24, Y+1	; 0x01
  9e:	9a 81       	ldd	r25, Y+2	; 0x02
}
  a0:	29 96       	adiw	r28, 0x09	; 9
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
  ac:	cf 91       	pop	r28
  ae:	df 91       	pop	r29
  b0:	08 95       	ret

000000b2 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
  b2:	df 93       	push	r29
  b4:	cf 93       	push	r28
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	2c 97       	sbiw	r28, 0x0c	; 12
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
  c6:	9a 87       	std	Y+10, r25	; 0x0a
  c8:	89 87       	std	Y+9, r24	; 0x09
  ca:	7c 87       	std	Y+12, r23	; 0x0c
  cc:	6b 87       	std	Y+11, r22	; 0x0b
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  ce:	8b 85       	ldd	r24, Y+11	; 0x0b
  d0:	9c 85       	ldd	r25, Y+12	; 0x0c
  d2:	98 87       	std	Y+8, r25	; 0x08
  d4:	8f 83       	std	Y+7, r24	; 0x07
  size_t n = 0;
  d6:	1e 82       	std	Y+6, r1	; 0x06
  d8:	1d 82       	std	Y+5, r1	; 0x05
  while (1) {
    unsigned char c = pgm_read_byte(p++);
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	98 85       	ldd	r25, Y+8	; 0x08
  de:	9b 83       	std	Y+3, r25	; 0x03
  e0:	8a 83       	std	Y+2, r24	; 0x02
  e2:	8f 81       	ldd	r24, Y+7	; 0x07
  e4:	98 85       	ldd	r25, Y+8	; 0x08
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	98 87       	std	Y+8, r25	; 0x08
  ea:	8f 83       	std	Y+7, r24	; 0x07
  ec:	ea 81       	ldd	r30, Y+2	; 0x02
  ee:	fb 81       	ldd	r31, Y+3	; 0x03
  f0:	84 91       	lpm	r24, Z+
  f2:	89 83       	std	Y+1, r24	; 0x01
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	8c 83       	std	Y+4, r24	; 0x04
    if (c == 0) break;
  f8:	8c 81       	ldd	r24, Y+4	; 0x04
  fa:	88 23       	and	r24, r24
  fc:	01 f0       	breq	.+0      	; 0xfe <_ZN5Print5printEPK19__FlashStringHelper+0x4c>
    n += write(c);
  fe:	e9 85       	ldd	r30, Y+9	; 0x09
 100:	fa 85       	ldd	r31, Y+10	; 0x0a
 102:	80 81       	ld	r24, Z
 104:	91 81       	ldd	r25, Z+1	; 0x01
 106:	fc 01       	movw	r30, r24
 108:	34 96       	adiw	r30, 0x04	; 4
 10a:	01 90       	ld	r0, Z+
 10c:	f0 81       	ld	r31, Z
 10e:	e0 2d       	mov	r30, r0
 110:	89 85       	ldd	r24, Y+9	; 0x09
 112:	9a 85       	ldd	r25, Y+10	; 0x0a
 114:	6c 81       	ldd	r22, Y+4	; 0x04
 116:	09 95       	icall
 118:	9c 01       	movw	r18, r24
 11a:	8d 81       	ldd	r24, Y+5	; 0x05
 11c:	9e 81       	ldd	r25, Y+6	; 0x06
 11e:	82 0f       	add	r24, r18
 120:	93 1f       	adc	r25, r19
 122:	9e 83       	std	Y+6, r25	; 0x06
 124:	8d 83       	std	Y+5, r24	; 0x05
 126:	00 c0       	rjmp	.+0      	; 0x128 <_ZN5Print5printEPK19__FlashStringHelper+0x76>
  }
  return n;
 128:	8d 81       	ldd	r24, Y+5	; 0x05
 12a:	9e 81       	ldd	r25, Y+6	; 0x06
}
 12c:	2c 96       	adiw	r28, 0x0c	; 12
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	08 95       	ret

0000013e <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
 13e:	df 93       	push	r29
 140:	cf 93       	push	r28
 142:	00 d0       	rcall	.+0      	; 0x144 <_ZN5Print5printEc+0x6>
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	9a 83       	std	Y+2, r25	; 0x02
 14c:	89 83       	std	Y+1, r24	; 0x01
 14e:	6b 83       	std	Y+3, r22	; 0x03
{
  return write(c);
 150:	e9 81       	ldd	r30, Y+1	; 0x01
 152:	fa 81       	ldd	r31, Y+2	; 0x02
 154:	80 81       	ld	r24, Z
 156:	91 81       	ldd	r25, Z+1	; 0x01
 158:	fc 01       	movw	r30, r24
 15a:	34 96       	adiw	r30, 0x04	; 4
 15c:	01 90       	ld	r0, Z+
 15e:	f0 81       	ld	r31, Z
 160:	e0 2d       	mov	r30, r0
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	9a 81       	ldd	r25, Y+2	; 0x02
 166:	6b 81       	ldd	r22, Y+3	; 0x03
 168:	09 95       	icall
}
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	cf 91       	pop	r28
 172:	df 91       	pop	r29
 174:	08 95       	ret

00000176 <_ZN5Print5printERK9Printable>:
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
 176:	df 93       	push	r29
 178:	cf 93       	push	r28
 17a:	00 d0       	rcall	.+0      	; 0x17c <_ZN5Print5printERK9Printable+0x6>
 17c:	00 d0       	rcall	.+0      	; 0x17e <_ZN5Print5printERK9Printable+0x8>
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	9a 83       	std	Y+2, r25	; 0x02
 184:	89 83       	std	Y+1, r24	; 0x01
 186:	7c 83       	std	Y+4, r23	; 0x04
 188:	6b 83       	std	Y+3, r22	; 0x03
{
  return x.printTo(*this);
 18a:	eb 81       	ldd	r30, Y+3	; 0x03
 18c:	fc 81       	ldd	r31, Y+4	; 0x04
 18e:	80 81       	ld	r24, Z
 190:	91 81       	ldd	r25, Z+1	; 0x01
 192:	fc 01       	movw	r30, r24
 194:	34 96       	adiw	r30, 0x04	; 4
 196:	01 90       	ld	r0, Z+
 198:	f0 81       	ld	r31, Z
 19a:	e0 2d       	mov	r30, r0
 19c:	8b 81       	ldd	r24, Y+3	; 0x03
 19e:	9c 81       	ldd	r25, Y+4	; 0x04
 1a0:	29 81       	ldd	r18, Y+1	; 0x01
 1a2:	3a 81       	ldd	r19, Y+2	; 0x02
 1a4:	b9 01       	movw	r22, r18
 1a6:	09 95       	icall
}
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	08 95       	ret

000001b6 <_ZN5Print7printlnEv>:

size_t Print::println(void)
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <_ZN5Print7printlnEv+0x6>
 1bc:	00 d0       	rcall	.+0      	; 0x1be <_ZN5Print7printlnEv+0x8>
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	9c 83       	std	Y+4, r25	; 0x04
 1c4:	8b 83       	std	Y+3, r24	; 0x03
{
  size_t n = print('\r');
 1c6:	8b 81       	ldd	r24, Y+3	; 0x03
 1c8:	9c 81       	ldd	r25, Y+4	; 0x04
 1ca:	6d e0       	ldi	r22, 0x0D	; 13
 1cc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 1d0:	9a 83       	std	Y+2, r25	; 0x02
 1d2:	89 83       	std	Y+1, r24	; 0x01
  n += print('\n');
 1d4:	8b 81       	ldd	r24, Y+3	; 0x03
 1d6:	9c 81       	ldd	r25, Y+4	; 0x04
 1d8:	6a e0       	ldi	r22, 0x0A	; 10
 1da:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 1de:	9c 01       	movw	r18, r24
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	9a 81       	ldd	r25, Y+2	; 0x02
 1e4:	82 0f       	add	r24, r18
 1e6:	93 1f       	adc	r25, r19
 1e8:	9a 83       	std	Y+2, r25	; 0x02
 1ea:	89 83       	std	Y+1, r24	; 0x01
  return n;
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	9a 81       	ldd	r25, Y+2	; 0x02
}
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	cf 91       	pop	r28
 1fa:	df 91       	pop	r29
 1fc:	08 95       	ret

000001fe <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
 1fe:	df 93       	push	r29
 200:	cf 93       	push	r28
 202:	00 d0       	rcall	.+0      	; 0x204 <_ZN5Print7printlnEPK19__FlashStringHelper+0x6>
 204:	00 d0       	rcall	.+0      	; 0x206 <_ZN5Print7printlnEPK19__FlashStringHelper+0x8>
 206:	00 d0       	rcall	.+0      	; 0x208 <_ZN5Print7printlnEPK19__FlashStringHelper+0xa>
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	9c 83       	std	Y+4, r25	; 0x04
 20e:	8b 83       	std	Y+3, r24	; 0x03
 210:	7e 83       	std	Y+6, r23	; 0x06
 212:	6d 83       	std	Y+5, r22	; 0x05
{
  size_t n = print(ifsh);
 214:	8b 81       	ldd	r24, Y+3	; 0x03
 216:	9c 81       	ldd	r25, Y+4	; 0x04
 218:	2d 81       	ldd	r18, Y+5	; 0x05
 21a:	3e 81       	ldd	r19, Y+6	; 0x06
 21c:	b9 01       	movw	r22, r18
 21e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 222:	9a 83       	std	Y+2, r25	; 0x02
 224:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	9c 81       	ldd	r25, Y+4	; 0x04
 22a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 22e:	9c 01       	movw	r18, r24
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	9a 81       	ldd	r25, Y+2	; 0x02
 234:	82 0f       	add	r24, r18
 236:	93 1f       	adc	r25, r19
 238:	9a 83       	std	Y+2, r25	; 0x02
 23a:	89 83       	std	Y+1, r24	; 0x01
  return n;
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	9a 81       	ldd	r25, Y+2	; 0x02
}
 240:	26 96       	adiw	r28, 0x06	; 6
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	f8 94       	cli
 246:	de bf       	out	0x3e, r29	; 62
 248:	0f be       	out	0x3f, r0	; 63
 24a:	cd bf       	out	0x3d, r28	; 61
 24c:	cf 91       	pop	r28
 24e:	df 91       	pop	r29
 250:	08 95       	ret

00000252 <_ZN5Print7printlnEc>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(char c)
 252:	df 93       	push	r29
 254:	cf 93       	push	r28
 256:	00 d0       	rcall	.+0      	; 0x258 <_ZN5Print7printlnEc+0x6>
 258:	00 d0       	rcall	.+0      	; 0x25a <_ZN5Print7printlnEc+0x8>
 25a:	0f 92       	push	r0
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	9c 83       	std	Y+4, r25	; 0x04
 262:	8b 83       	std	Y+3, r24	; 0x03
 264:	6d 83       	std	Y+5, r22	; 0x05
{
  size_t n = print(c);
 266:	8b 81       	ldd	r24, Y+3	; 0x03
 268:	9c 81       	ldd	r25, Y+4	; 0x04
 26a:	6d 81       	ldd	r22, Y+5	; 0x05
 26c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 270:	9a 83       	std	Y+2, r25	; 0x02
 272:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 274:	8b 81       	ldd	r24, Y+3	; 0x03
 276:	9c 81       	ldd	r25, Y+4	; 0x04
 278:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 27c:	9c 01       	movw	r18, r24
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	9a 81       	ldd	r25, Y+2	; 0x02
 282:	82 0f       	add	r24, r18
 284:	93 1f       	adc	r25, r19
 286:	9a 83       	std	Y+2, r25	; 0x02
 288:	89 83       	std	Y+1, r24	; 0x01
  return n;
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	9a 81       	ldd	r25, Y+2	; 0x02
}
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	cf 91       	pop	r28
 29a:	df 91       	pop	r29
 29c:	08 95       	ret

0000029e <_ZN5Print7printlnERK9Printable>:
  size_t n = print(num, digits);
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
 29e:	df 93       	push	r29
 2a0:	cf 93       	push	r28
 2a2:	00 d0       	rcall	.+0      	; 0x2a4 <_ZN5Print7printlnERK9Printable+0x6>
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <_ZN5Print7printlnERK9Printable+0x8>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <_ZN5Print7printlnERK9Printable+0xa>
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	9c 83       	std	Y+4, r25	; 0x04
 2ae:	8b 83       	std	Y+3, r24	; 0x03
 2b0:	7e 83       	std	Y+6, r23	; 0x06
 2b2:	6d 83       	std	Y+5, r22	; 0x05
{
  size_t n = print(x);
 2b4:	8b 81       	ldd	r24, Y+3	; 0x03
 2b6:	9c 81       	ldd	r25, Y+4	; 0x04
 2b8:	2d 81       	ldd	r18, Y+5	; 0x05
 2ba:	3e 81       	ldd	r19, Y+6	; 0x06
 2bc:	b9 01       	movw	r22, r18
 2be:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 2c2:	9a 83       	std	Y+2, r25	; 0x02
 2c4:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 2c6:	8b 81       	ldd	r24, Y+3	; 0x03
 2c8:	9c 81       	ldd	r25, Y+4	; 0x04
 2ca:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 2ce:	9c 01       	movw	r18, r24
 2d0:	89 81       	ldd	r24, Y+1	; 0x01
 2d2:	9a 81       	ldd	r25, Y+2	; 0x02
 2d4:	82 0f       	add	r24, r18
 2d6:	93 1f       	adc	r25, r19
 2d8:	9a 83       	std	Y+2, r25	; 0x02
 2da:	89 83       	std	Y+1, r24	; 0x01
  return n;
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
 2de:	9a 81       	ldd	r25, Y+2	; 0x02
}
 2e0:	26 96       	adiw	r28, 0x06	; 6
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
 2ec:	cf 91       	pop	r28
 2ee:	df 91       	pop	r29
 2f0:	08 95       	ret

000002f2 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	df 93       	push	r29
 2f8:	cf 93       	push	r28
 2fa:	00 d0       	rcall	.+0      	; 0x2fc <_ZN5Print5writeEPKc+0xa>
 2fc:	00 d0       	rcall	.+0      	; 0x2fe <_ZN5Print5writeEPKc+0xc>
 2fe:	00 d0       	rcall	.+0      	; 0x300 <_ZN5Print5writeEPKc+0xe>
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	9a 83       	std	Y+2, r25	; 0x02
 306:	89 83       	std	Y+1, r24	; 0x01
 308:	7c 83       	std	Y+4, r23	; 0x04
 30a:	6b 83       	std	Y+3, r22	; 0x03
      if (str == NULL) return 0;
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	9c 81       	ldd	r25, Y+4	; 0x04
 310:	00 97       	sbiw	r24, 0x00	; 0
 312:	01 f4       	brne	.+0      	; 0x314 <_ZN5Print5writeEPKc+0x22>
 314:	1e 82       	std	Y+6, r1	; 0x06
 316:	1d 82       	std	Y+5, r1	; 0x05
 318:	00 c0       	rjmp	.+0      	; 0x31a <_ZN5Print5writeEPKc+0x28>
      return write((const uint8_t *)str, strlen(str));
 31a:	e9 81       	ldd	r30, Y+1	; 0x01
 31c:	fa 81       	ldd	r31, Y+2	; 0x02
 31e:	80 81       	ld	r24, Z
 320:	91 81       	ldd	r25, Z+1	; 0x01
 322:	fc 01       	movw	r30, r24
 324:	36 96       	adiw	r30, 0x06	; 6
 326:	00 81       	ld	r16, Z
 328:	11 81       	ldd	r17, Z+1	; 0x01
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	9c 81       	ldd	r25, Y+4	; 0x04
 32e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 332:	ac 01       	movw	r20, r24
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	9a 81       	ldd	r25, Y+2	; 0x02
 338:	2b 81       	ldd	r18, Y+3	; 0x03
 33a:	3c 81       	ldd	r19, Y+4	; 0x04
 33c:	b9 01       	movw	r22, r18
 33e:	f8 01       	movw	r30, r16
 340:	09 95       	icall
 342:	9e 83       	std	Y+6, r25	; 0x06
 344:	8d 83       	std	Y+5, r24	; 0x05
 346:	8d 81       	ldd	r24, Y+5	; 0x05
 348:	9e 81       	ldd	r25, Y+6	; 0x06
    }
 34a:	26 96       	adiw	r28, 0x06	; 6
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
 356:	cf 91       	pop	r28
 358:	df 91       	pop	r29
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	08 95       	ret

00000360 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 360:	1f 93       	push	r17
 362:	df 93       	push	r29
 364:	cf 93       	push	r28
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	e0 97       	sbiw	r28, 0x30	; 48
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
 376:	9a a7       	std	Y+42, r25	; 0x2a
 378:	89 a7       	std	Y+41, r24	; 0x29
 37a:	4b a7       	std	Y+43, r20	; 0x2b
 37c:	5c a7       	std	Y+44, r21	; 0x2c
 37e:	6d a7       	std	Y+45, r22	; 0x2d
 380:	7e a7       	std	Y+46, r23	; 0x2e
 382:	2f a7       	std	Y+47, r18	; 0x2f
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 384:	ce 01       	movw	r24, r28
 386:	08 96       	adiw	r24, 0x08	; 8
 388:	80 96       	adiw	r24, 0x20	; 32
 38a:	9f 83       	std	Y+7, r25	; 0x07
 38c:	8e 83       	std	Y+6, r24	; 0x06

  *str = '\0';
 38e:	ee 81       	ldd	r30, Y+6	; 0x06
 390:	ff 81       	ldd	r31, Y+7	; 0x07
 392:	10 82       	st	Z, r1

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 394:	8f a5       	ldd	r24, Y+47	; 0x2f
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	00 f4       	brcc	.+0      	; 0x39a <_ZN5Print11printNumberEmh+0x3a>
 39a:	8a e0       	ldi	r24, 0x0A	; 10
 39c:	8f a7       	std	Y+47, r24	; 0x2f

  do {
    unsigned long m = n;
 39e:	8b a5       	ldd	r24, Y+43	; 0x2b
 3a0:	9c a5       	ldd	r25, Y+44	; 0x2c
 3a2:	ad a5       	ldd	r26, Y+45	; 0x2d
 3a4:	be a5       	ldd	r27, Y+46	; 0x2e
 3a6:	8a 83       	std	Y+2, r24	; 0x02
 3a8:	9b 83       	std	Y+3, r25	; 0x03
 3aa:	ac 83       	std	Y+4, r26	; 0x04
 3ac:	bd 83       	std	Y+5, r27	; 0x05
    n /= base;
 3ae:	8f a5       	ldd	r24, Y+47	; 0x2f
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	8b a5       	ldd	r24, Y+43	; 0x2b
 3ba:	9c a5       	ldd	r25, Y+44	; 0x2c
 3bc:	ad a5       	ldd	r26, Y+45	; 0x2d
 3be:	be a5       	ldd	r27, Y+46	; 0x2e
 3c0:	bc 01       	movw	r22, r24
 3c2:	cd 01       	movw	r24, r26
 3c4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 3c8:	da 01       	movw	r26, r20
 3ca:	c9 01       	movw	r24, r18
 3cc:	8b a7       	std	Y+43, r24	; 0x2b
 3ce:	9c a7       	std	Y+44, r25	; 0x2c
 3d0:	ad a7       	std	Y+45, r26	; 0x2d
 3d2:	be a7       	std	Y+46, r27	; 0x2e
    char c = m - base * n;
 3d4:	1a 81       	ldd	r17, Y+2	; 0x02
 3d6:	8f a5       	ldd	r24, Y+47	; 0x2f
 3d8:	88 2f       	mov	r24, r24
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	a0 e0       	ldi	r26, 0x00	; 0
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	2b a5       	ldd	r18, Y+43	; 0x2b
 3e2:	3c a5       	ldd	r19, Y+44	; 0x2c
 3e4:	4d a5       	ldd	r20, Y+45	; 0x2d
 3e6:	5e a5       	ldd	r21, Y+46	; 0x2e
 3e8:	bc 01       	movw	r22, r24
 3ea:	cd 01       	movw	r24, r26
 3ec:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 3f0:	dc 01       	movw	r26, r24
 3f2:	cb 01       	movw	r24, r22
 3f4:	91 2f       	mov	r25, r17
 3f6:	98 1b       	sub	r25, r24
 3f8:	89 2f       	mov	r24, r25
 3fa:	89 83       	std	Y+1, r24	; 0x01
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 3fc:	8e 81       	ldd	r24, Y+6	; 0x06
 3fe:	9f 81       	ldd	r25, Y+7	; 0x07
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	9f 83       	std	Y+7, r25	; 0x07
 404:	8e 83       	std	Y+6, r24	; 0x06
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	8a 30       	cpi	r24, 0x0A	; 10
 40a:	00 f4       	brcc	.+0      	; 0x40c <_ZN5Print11printNumberEmh+0xac>
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	98 2f       	mov	r25, r24
 410:	90 5d       	subi	r25, 0xD0	; 208
 412:	98 ab       	std	Y+48, r25	; 0x30
 414:	00 c0       	rjmp	.+0      	; 0x416 <_ZN5Print11printNumberEmh+0xb6>
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	98 2f       	mov	r25, r24
 41a:	99 5c       	subi	r25, 0xC9	; 201
 41c:	98 ab       	std	Y+48, r25	; 0x30
 41e:	ee 81       	ldd	r30, Y+6	; 0x06
 420:	ff 81       	ldd	r31, Y+7	; 0x07
 422:	88 a9       	ldd	r24, Y+48	; 0x30
 424:	80 83       	st	Z, r24
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 426:	8b a5       	ldd	r24, Y+43	; 0x2b
 428:	9c a5       	ldd	r25, Y+44	; 0x2c
 42a:	ad a5       	ldd	r26, Y+45	; 0x2d
 42c:	be a5       	ldd	r27, Y+46	; 0x2e
 42e:	00 97       	sbiw	r24, 0x00	; 0
 430:	a1 05       	cpc	r26, r1
 432:	b1 05       	cpc	r27, r1
 434:	01 f0       	breq	.+0      	; 0x436 <_ZN5Print11printNumberEmh+0xd6>
 436:	00 c0       	rjmp	.+0      	; 0x438 <_ZN5Print11printNumberEmh+0xd8>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 438:	89 a5       	ldd	r24, Y+41	; 0x29
 43a:	9a a5       	ldd	r25, Y+42	; 0x2a
 43c:	2e 81       	ldd	r18, Y+6	; 0x06
 43e:	3f 81       	ldd	r19, Y+7	; 0x07
 440:	b9 01       	movw	r22, r18
 442:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 446:	e0 96       	adiw	r28, 0x30	; 48
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	f8 94       	cli
 44c:	de bf       	out	0x3e, r29	; 62
 44e:	0f be       	out	0x3f, r0	; 63
 450:	cd bf       	out	0x3d, r28	; 61
 452:	cf 91       	pop	r28
 454:	df 91       	pop	r29
 456:	1f 91       	pop	r17
 458:	08 95       	ret

0000045a <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
 45a:	df 93       	push	r29
 45c:	cf 93       	push	r28
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
 462:	2a 97       	sbiw	r28, 0x0a	; 10
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	f8 94       	cli
 468:	de bf       	out	0x3e, r29	; 62
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	cd bf       	out	0x3d, r28	; 61
 46e:	9a 83       	std	Y+2, r25	; 0x02
 470:	89 83       	std	Y+1, r24	; 0x01
 472:	4b 83       	std	Y+3, r20	; 0x03
 474:	5c 83       	std	Y+4, r21	; 0x04
 476:	6d 83       	std	Y+5, r22	; 0x05
 478:	7e 83       	std	Y+6, r23	; 0x06
 47a:	38 87       	std	Y+8, r19	; 0x08
 47c:	2f 83       	std	Y+7, r18	; 0x07
{
  if (base == 0) return write(n);
 47e:	8f 81       	ldd	r24, Y+7	; 0x07
 480:	98 85       	ldd	r25, Y+8	; 0x08
 482:	00 97       	sbiw	r24, 0x00	; 0
 484:	01 f4       	brne	.+0      	; 0x486 <_ZN5Print5printEmi+0x2c>
 486:	e9 81       	ldd	r30, Y+1	; 0x01
 488:	fa 81       	ldd	r31, Y+2	; 0x02
 48a:	80 81       	ld	r24, Z
 48c:	91 81       	ldd	r25, Z+1	; 0x01
 48e:	fc 01       	movw	r30, r24
 490:	34 96       	adiw	r30, 0x04	; 4
 492:	01 90       	ld	r0, Z+
 494:	f0 81       	ld	r31, Z
 496:	e0 2d       	mov	r30, r0
 498:	2b 81       	ldd	r18, Y+3	; 0x03
 49a:	89 81       	ldd	r24, Y+1	; 0x01
 49c:	9a 81       	ldd	r25, Y+2	; 0x02
 49e:	62 2f       	mov	r22, r18
 4a0:	09 95       	icall
 4a2:	9a 87       	std	Y+10, r25	; 0x0a
 4a4:	89 87       	std	Y+9, r24	; 0x09
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <_ZN5Print5printEmi+0x4e>
  else return printNumber(n, base);
 4a8:	ef 81       	ldd	r30, Y+7	; 0x07
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
 4ac:	9a 81       	ldd	r25, Y+2	; 0x02
 4ae:	2b 81       	ldd	r18, Y+3	; 0x03
 4b0:	3c 81       	ldd	r19, Y+4	; 0x04
 4b2:	4d 81       	ldd	r20, Y+5	; 0x05
 4b4:	5e 81       	ldd	r21, Y+6	; 0x06
 4b6:	ba 01       	movw	r22, r20
 4b8:	a9 01       	movw	r20, r18
 4ba:	2e 2f       	mov	r18, r30
 4bc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 4c0:	9a 87       	std	Y+10, r25	; 0x0a
 4c2:	89 87       	std	Y+9, r24	; 0x09
 4c4:	89 85       	ldd	r24, Y+9	; 0x09
 4c6:	9a 85       	ldd	r25, Y+10	; 0x0a
}
 4c8:	2a 96       	adiw	r28, 0x0a	; 10
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61
 4d4:	cf 91       	pop	r28
 4d6:	df 91       	pop	r29
 4d8:	08 95       	ret

000004da <_ZN5Print7printlnEmi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
 4da:	df 93       	push	r29
 4dc:	cf 93       	push	r28
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	2a 97       	sbiw	r28, 0x0a	; 10
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	f8 94       	cli
 4e8:	de bf       	out	0x3e, r29	; 62
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	cd bf       	out	0x3d, r28	; 61
 4ee:	9c 83       	std	Y+4, r25	; 0x04
 4f0:	8b 83       	std	Y+3, r24	; 0x03
 4f2:	4d 83       	std	Y+5, r20	; 0x05
 4f4:	5e 83       	std	Y+6, r21	; 0x06
 4f6:	6f 83       	std	Y+7, r22	; 0x07
 4f8:	78 87       	std	Y+8, r23	; 0x08
 4fa:	3a 87       	std	Y+10, r19	; 0x0a
 4fc:	29 87       	std	Y+9, r18	; 0x09
{
  size_t n = print(num, base);
 4fe:	8b 81       	ldd	r24, Y+3	; 0x03
 500:	9c 81       	ldd	r25, Y+4	; 0x04
 502:	2d 81       	ldd	r18, Y+5	; 0x05
 504:	3e 81       	ldd	r19, Y+6	; 0x06
 506:	4f 81       	ldd	r20, Y+7	; 0x07
 508:	58 85       	ldd	r21, Y+8	; 0x08
 50a:	e9 85       	ldd	r30, Y+9	; 0x09
 50c:	fa 85       	ldd	r31, Y+10	; 0x0a
 50e:	ba 01       	movw	r22, r20
 510:	a9 01       	movw	r20, r18
 512:	9f 01       	movw	r18, r30
 514:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 518:	9a 83       	std	Y+2, r25	; 0x02
 51a:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 51c:	8b 81       	ldd	r24, Y+3	; 0x03
 51e:	9c 81       	ldd	r25, Y+4	; 0x04
 520:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 524:	9c 01       	movw	r18, r24
 526:	89 81       	ldd	r24, Y+1	; 0x01
 528:	9a 81       	ldd	r25, Y+2	; 0x02
 52a:	82 0f       	add	r24, r18
 52c:	93 1f       	adc	r25, r19
 52e:	9a 83       	std	Y+2, r25	; 0x02
 530:	89 83       	std	Y+1, r24	; 0x01
  return n;
 532:	89 81       	ldd	r24, Y+1	; 0x01
 534:	9a 81       	ldd	r25, Y+2	; 0x02
}
 536:	2a 96       	adiw	r28, 0x0a	; 10
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	cf 91       	pop	r28
 544:	df 91       	pop	r29
 546:	08 95       	ret

00000548 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
 548:	df 93       	push	r29
 54a:	cf 93       	push	r28
 54c:	00 d0       	rcall	.+0      	; 0x54e <_ZN5Print5printEji+0x6>
 54e:	00 d0       	rcall	.+0      	; 0x550 <_ZN5Print5printEji+0x8>
 550:	00 d0       	rcall	.+0      	; 0x552 <_ZN5Print5printEji+0xa>
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
 556:	9a 83       	std	Y+2, r25	; 0x02
 558:	89 83       	std	Y+1, r24	; 0x01
 55a:	7c 83       	std	Y+4, r23	; 0x04
 55c:	6b 83       	std	Y+3, r22	; 0x03
 55e:	5e 83       	std	Y+6, r21	; 0x06
 560:	4d 83       	std	Y+5, r20	; 0x05
{
  return print((unsigned long) n, base);
 562:	8b 81       	ldd	r24, Y+3	; 0x03
 564:	9c 81       	ldd	r25, Y+4	; 0x04
 566:	9c 01       	movw	r18, r24
 568:	40 e0       	ldi	r20, 0x00	; 0
 56a:	50 e0       	ldi	r21, 0x00	; 0
 56c:	89 81       	ldd	r24, Y+1	; 0x01
 56e:	9a 81       	ldd	r25, Y+2	; 0x02
 570:	ed 81       	ldd	r30, Y+5	; 0x05
 572:	fe 81       	ldd	r31, Y+6	; 0x06
 574:	ba 01       	movw	r22, r20
 576:	a9 01       	movw	r20, r18
 578:	9f 01       	movw	r18, r30
 57a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 57e:	26 96       	adiw	r28, 0x06	; 6
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	de bf       	out	0x3e, r29	; 62
 586:	0f be       	out	0x3f, r0	; 63
 588:	cd bf       	out	0x3d, r28	; 61
 58a:	cf 91       	pop	r28
 58c:	df 91       	pop	r29
 58e:	08 95       	ret

00000590 <_ZN5Print7printlnEji>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
 590:	df 93       	push	r29
 592:	cf 93       	push	r28
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	28 97       	sbiw	r28, 0x08	; 8
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
 5a4:	9c 83       	std	Y+4, r25	; 0x04
 5a6:	8b 83       	std	Y+3, r24	; 0x03
 5a8:	7e 83       	std	Y+6, r23	; 0x06
 5aa:	6d 83       	std	Y+5, r22	; 0x05
 5ac:	58 87       	std	Y+8, r21	; 0x08
 5ae:	4f 83       	std	Y+7, r20	; 0x07
{
  size_t n = print(num, base);
 5b0:	8b 81       	ldd	r24, Y+3	; 0x03
 5b2:	9c 81       	ldd	r25, Y+4	; 0x04
 5b4:	2d 81       	ldd	r18, Y+5	; 0x05
 5b6:	3e 81       	ldd	r19, Y+6	; 0x06
 5b8:	4f 81       	ldd	r20, Y+7	; 0x07
 5ba:	58 85       	ldd	r21, Y+8	; 0x08
 5bc:	b9 01       	movw	r22, r18
 5be:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 5c2:	9a 83       	std	Y+2, r25	; 0x02
 5c4:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 5c6:	8b 81       	ldd	r24, Y+3	; 0x03
 5c8:	9c 81       	ldd	r25, Y+4	; 0x04
 5ca:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 5ce:	9c 01       	movw	r18, r24
 5d0:	89 81       	ldd	r24, Y+1	; 0x01
 5d2:	9a 81       	ldd	r25, Y+2	; 0x02
 5d4:	82 0f       	add	r24, r18
 5d6:	93 1f       	adc	r25, r19
 5d8:	9a 83       	std	Y+2, r25	; 0x02
 5da:	89 83       	std	Y+1, r24	; 0x01
  return n;
 5dc:	89 81       	ldd	r24, Y+1	; 0x01
 5de:	9a 81       	ldd	r25, Y+2	; 0x02
}
 5e0:	28 96       	adiw	r28, 0x08	; 8
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	f8 94       	cli
 5e6:	de bf       	out	0x3e, r29	; 62
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	cd bf       	out	0x3d, r28	; 61
 5ec:	cf 91       	pop	r28
 5ee:	df 91       	pop	r29
 5f0:	08 95       	ret

000005f2 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
 5f2:	df 93       	push	r29
 5f4:	cf 93       	push	r28
 5f6:	00 d0       	rcall	.+0      	; 0x5f8 <_ZN5Print5printEhi+0x6>
 5f8:	00 d0       	rcall	.+0      	; 0x5fa <_ZN5Print5printEhi+0x8>
 5fa:	0f 92       	push	r0
 5fc:	cd b7       	in	r28, 0x3d	; 61
 5fe:	de b7       	in	r29, 0x3e	; 62
 600:	9a 83       	std	Y+2, r25	; 0x02
 602:	89 83       	std	Y+1, r24	; 0x01
 604:	6b 83       	std	Y+3, r22	; 0x03
 606:	5d 83       	std	Y+5, r21	; 0x05
 608:	4c 83       	std	Y+4, r20	; 0x04
{
  return print((unsigned long) b, base);
 60a:	8b 81       	ldd	r24, Y+3	; 0x03
 60c:	28 2f       	mov	r18, r24
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	89 81       	ldd	r24, Y+1	; 0x01
 616:	9a 81       	ldd	r25, Y+2	; 0x02
 618:	ec 81       	ldd	r30, Y+4	; 0x04
 61a:	fd 81       	ldd	r31, Y+5	; 0x05
 61c:	ba 01       	movw	r22, r20
 61e:	a9 01       	movw	r20, r18
 620:	9f 01       	movw	r18, r30
 622:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 626:	0f 90       	pop	r0
 628:	0f 90       	pop	r0
 62a:	0f 90       	pop	r0
 62c:	0f 90       	pop	r0
 62e:	0f 90       	pop	r0
 630:	cf 91       	pop	r28
 632:	df 91       	pop	r29
 634:	08 95       	ret

00000636 <_ZN5Print7printlnEhi>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
 636:	df 93       	push	r29
 638:	cf 93       	push	r28
 63a:	cd b7       	in	r28, 0x3d	; 61
 63c:	de b7       	in	r29, 0x3e	; 62
 63e:	27 97       	sbiw	r28, 0x07	; 7
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	f8 94       	cli
 644:	de bf       	out	0x3e, r29	; 62
 646:	0f be       	out	0x3f, r0	; 63
 648:	cd bf       	out	0x3d, r28	; 61
 64a:	9c 83       	std	Y+4, r25	; 0x04
 64c:	8b 83       	std	Y+3, r24	; 0x03
 64e:	6d 83       	std	Y+5, r22	; 0x05
 650:	5f 83       	std	Y+7, r21	; 0x07
 652:	4e 83       	std	Y+6, r20	; 0x06
{
  size_t n = print(b, base);
 654:	8b 81       	ldd	r24, Y+3	; 0x03
 656:	9c 81       	ldd	r25, Y+4	; 0x04
 658:	2e 81       	ldd	r18, Y+6	; 0x06
 65a:	3f 81       	ldd	r19, Y+7	; 0x07
 65c:	6d 81       	ldd	r22, Y+5	; 0x05
 65e:	a9 01       	movw	r20, r18
 660:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 664:	9a 83       	std	Y+2, r25	; 0x02
 666:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 668:	8b 81       	ldd	r24, Y+3	; 0x03
 66a:	9c 81       	ldd	r25, Y+4	; 0x04
 66c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 670:	9c 01       	movw	r18, r24
 672:	89 81       	ldd	r24, Y+1	; 0x01
 674:	9a 81       	ldd	r25, Y+2	; 0x02
 676:	82 0f       	add	r24, r18
 678:	93 1f       	adc	r25, r19
 67a:	9a 83       	std	Y+2, r25	; 0x02
 67c:	89 83       	std	Y+1, r24	; 0x01
  return n;
 67e:	89 81       	ldd	r24, Y+1	; 0x01
 680:	9a 81       	ldd	r25, Y+2	; 0x02
}
 682:	27 96       	adiw	r28, 0x07	; 7
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	f8 94       	cli
 688:	de bf       	out	0x3e, r29	; 62
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	cd bf       	out	0x3d, r28	; 61
 68e:	cf 91       	pop	r28
 690:	df 91       	pop	r29
 692:	08 95       	ret

00000694 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
 694:	df 93       	push	r29
 696:	cf 93       	push	r28
 698:	cd b7       	in	r28, 0x3d	; 61
 69a:	de b7       	in	r29, 0x3e	; 62
 69c:	2c 97       	sbiw	r28, 0x0c	; 12
 69e:	0f b6       	in	r0, 0x3f	; 63
 6a0:	f8 94       	cli
 6a2:	de bf       	out	0x3e, r29	; 62
 6a4:	0f be       	out	0x3f, r0	; 63
 6a6:	cd bf       	out	0x3d, r28	; 61
 6a8:	9c 83       	std	Y+4, r25	; 0x04
 6aa:	8b 83       	std	Y+3, r24	; 0x03
 6ac:	4d 83       	std	Y+5, r20	; 0x05
 6ae:	5e 83       	std	Y+6, r21	; 0x06
 6b0:	6f 83       	std	Y+7, r22	; 0x07
 6b2:	78 87       	std	Y+8, r23	; 0x08
 6b4:	3a 87       	std	Y+10, r19	; 0x0a
 6b6:	29 87       	std	Y+9, r18	; 0x09
{
  if (base == 0) {
 6b8:	89 85       	ldd	r24, Y+9	; 0x09
 6ba:	9a 85       	ldd	r25, Y+10	; 0x0a
 6bc:	00 97       	sbiw	r24, 0x00	; 0
 6be:	01 f4       	brne	.+0      	; 0x6c0 <_ZN5Print5printEli+0x2c>
    return write(n);
 6c0:	eb 81       	ldd	r30, Y+3	; 0x03
 6c2:	fc 81       	ldd	r31, Y+4	; 0x04
 6c4:	80 81       	ld	r24, Z
 6c6:	91 81       	ldd	r25, Z+1	; 0x01
 6c8:	fc 01       	movw	r30, r24
 6ca:	34 96       	adiw	r30, 0x04	; 4
 6cc:	01 90       	ld	r0, Z+
 6ce:	f0 81       	ld	r31, Z
 6d0:	e0 2d       	mov	r30, r0
 6d2:	2d 81       	ldd	r18, Y+5	; 0x05
 6d4:	8b 81       	ldd	r24, Y+3	; 0x03
 6d6:	9c 81       	ldd	r25, Y+4	; 0x04
 6d8:	62 2f       	mov	r22, r18
 6da:	09 95       	icall
 6dc:	9c 87       	std	Y+12, r25	; 0x0c
 6de:	8b 87       	std	Y+11, r24	; 0x0b
 6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <_ZN5Print5printEli+0x4e>
  } else if (base == 10) {
 6e2:	89 85       	ldd	r24, Y+9	; 0x09
 6e4:	9a 85       	ldd	r25, Y+10	; 0x0a
 6e6:	8a 30       	cpi	r24, 0x0A	; 10
 6e8:	91 05       	cpc	r25, r1
 6ea:	01 f0       	breq	.+0      	; 0x6ec <_ZN5Print5printEli+0x58>
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <_ZN5Print5printEli+0x5a>
    if (n < 0) {
 6ee:	8d 81       	ldd	r24, Y+5	; 0x05
 6f0:	9e 81       	ldd	r25, Y+6	; 0x06
 6f2:	af 81       	ldd	r26, Y+7	; 0x07
 6f4:	b8 85       	ldd	r27, Y+8	; 0x08
 6f6:	bb 23       	and	r27, r27
 6f8:	04 f4       	brge	.+0      	; 0x6fa <_ZN5Print5printEli+0x66>
      int t = print('-');
 6fa:	8b 81       	ldd	r24, Y+3	; 0x03
 6fc:	9c 81       	ldd	r25, Y+4	; 0x04
 6fe:	6d e2       	ldi	r22, 0x2D	; 45
 700:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 704:	9a 83       	std	Y+2, r25	; 0x02
 706:	89 83       	std	Y+1, r24	; 0x01
      n = -n;
 708:	8d 81       	ldd	r24, Y+5	; 0x05
 70a:	9e 81       	ldd	r25, Y+6	; 0x06
 70c:	af 81       	ldd	r26, Y+7	; 0x07
 70e:	b8 85       	ldd	r27, Y+8	; 0x08
 710:	b0 95       	com	r27
 712:	a0 95       	com	r26
 714:	90 95       	com	r25
 716:	81 95       	neg	r24
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	af 4f       	sbci	r26, 0xFF	; 255
 71c:	bf 4f       	sbci	r27, 0xFF	; 255
 71e:	8d 83       	std	Y+5, r24	; 0x05
 720:	9e 83       	std	Y+6, r25	; 0x06
 722:	af 83       	std	Y+7, r26	; 0x07
 724:	b8 87       	std	Y+8, r27	; 0x08
      return printNumber(n, 10) + t;
 726:	2d 81       	ldd	r18, Y+5	; 0x05
 728:	3e 81       	ldd	r19, Y+6	; 0x06
 72a:	4f 81       	ldd	r20, Y+7	; 0x07
 72c:	58 85       	ldd	r21, Y+8	; 0x08
 72e:	8b 81       	ldd	r24, Y+3	; 0x03
 730:	9c 81       	ldd	r25, Y+4	; 0x04
 732:	ba 01       	movw	r22, r20
 734:	a9 01       	movw	r20, r18
 736:	2a e0       	ldi	r18, 0x0A	; 10
 738:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 73c:	9c 01       	movw	r18, r24
 73e:	89 81       	ldd	r24, Y+1	; 0x01
 740:	9a 81       	ldd	r25, Y+2	; 0x02
 742:	a9 01       	movw	r20, r18
 744:	48 0f       	add	r20, r24
 746:	59 1f       	adc	r21, r25
 748:	5c 87       	std	Y+12, r21	; 0x0c
 74a:	4b 87       	std	Y+11, r20	; 0x0b
 74c:	00 c0       	rjmp	.+0      	; 0x74e <_ZN5Print5printEli+0xba>
    }
    return printNumber(n, 10);
 74e:	2d 81       	ldd	r18, Y+5	; 0x05
 750:	3e 81       	ldd	r19, Y+6	; 0x06
 752:	4f 81       	ldd	r20, Y+7	; 0x07
 754:	58 85       	ldd	r21, Y+8	; 0x08
 756:	8b 81       	ldd	r24, Y+3	; 0x03
 758:	9c 81       	ldd	r25, Y+4	; 0x04
 75a:	ba 01       	movw	r22, r20
 75c:	a9 01       	movw	r20, r18
 75e:	2a e0       	ldi	r18, 0x0A	; 10
 760:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 764:	9c 87       	std	Y+12, r25	; 0x0c
 766:	8b 87       	std	Y+11, r24	; 0x0b
 768:	00 c0       	rjmp	.+0      	; 0x76a <_ZN5Print5printEli+0xd6>
  } else {
    return printNumber(n, base);
 76a:	2d 81       	ldd	r18, Y+5	; 0x05
 76c:	3e 81       	ldd	r19, Y+6	; 0x06
 76e:	4f 81       	ldd	r20, Y+7	; 0x07
 770:	58 85       	ldd	r21, Y+8	; 0x08
 772:	e9 85       	ldd	r30, Y+9	; 0x09
 774:	8b 81       	ldd	r24, Y+3	; 0x03
 776:	9c 81       	ldd	r25, Y+4	; 0x04
 778:	ba 01       	movw	r22, r20
 77a:	a9 01       	movw	r20, r18
 77c:	2e 2f       	mov	r18, r30
 77e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 782:	9c 87       	std	Y+12, r25	; 0x0c
 784:	8b 87       	std	Y+11, r24	; 0x0b
 786:	8b 85       	ldd	r24, Y+11	; 0x0b
 788:	9c 85       	ldd	r25, Y+12	; 0x0c
  }
}
 78a:	2c 96       	adiw	r28, 0x0c	; 12
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	f8 94       	cli
 790:	de bf       	out	0x3e, r29	; 62
 792:	0f be       	out	0x3f, r0	; 63
 794:	cd bf       	out	0x3d, r28	; 61
 796:	cf 91       	pop	r28
 798:	df 91       	pop	r29
 79a:	08 95       	ret

0000079c <_ZN5Print7printlnEli>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(long num, int base)
 79c:	df 93       	push	r29
 79e:	cf 93       	push	r28
 7a0:	cd b7       	in	r28, 0x3d	; 61
 7a2:	de b7       	in	r29, 0x3e	; 62
 7a4:	2a 97       	sbiw	r28, 0x0a	; 10
 7a6:	0f b6       	in	r0, 0x3f	; 63
 7a8:	f8 94       	cli
 7aa:	de bf       	out	0x3e, r29	; 62
 7ac:	0f be       	out	0x3f, r0	; 63
 7ae:	cd bf       	out	0x3d, r28	; 61
 7b0:	9c 83       	std	Y+4, r25	; 0x04
 7b2:	8b 83       	std	Y+3, r24	; 0x03
 7b4:	4d 83       	std	Y+5, r20	; 0x05
 7b6:	5e 83       	std	Y+6, r21	; 0x06
 7b8:	6f 83       	std	Y+7, r22	; 0x07
 7ba:	78 87       	std	Y+8, r23	; 0x08
 7bc:	3a 87       	std	Y+10, r19	; 0x0a
 7be:	29 87       	std	Y+9, r18	; 0x09
{
  size_t n = print(num, base);
 7c0:	8b 81       	ldd	r24, Y+3	; 0x03
 7c2:	9c 81       	ldd	r25, Y+4	; 0x04
 7c4:	2d 81       	ldd	r18, Y+5	; 0x05
 7c6:	3e 81       	ldd	r19, Y+6	; 0x06
 7c8:	4f 81       	ldd	r20, Y+7	; 0x07
 7ca:	58 85       	ldd	r21, Y+8	; 0x08
 7cc:	e9 85       	ldd	r30, Y+9	; 0x09
 7ce:	fa 85       	ldd	r31, Y+10	; 0x0a
 7d0:	ba 01       	movw	r22, r20
 7d2:	a9 01       	movw	r20, r18
 7d4:	9f 01       	movw	r18, r30
 7d6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 7da:	9a 83       	std	Y+2, r25	; 0x02
 7dc:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 7de:	8b 81       	ldd	r24, Y+3	; 0x03
 7e0:	9c 81       	ldd	r25, Y+4	; 0x04
 7e2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 7e6:	9c 01       	movw	r18, r24
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	9a 81       	ldd	r25, Y+2	; 0x02
 7ec:	82 0f       	add	r24, r18
 7ee:	93 1f       	adc	r25, r19
 7f0:	9a 83       	std	Y+2, r25	; 0x02
 7f2:	89 83       	std	Y+1, r24	; 0x01
  return n;
 7f4:	89 81       	ldd	r24, Y+1	; 0x01
 7f6:	9a 81       	ldd	r25, Y+2	; 0x02
}
 7f8:	2a 96       	adiw	r28, 0x0a	; 10
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	f8 94       	cli
 7fe:	de bf       	out	0x3e, r29	; 62
 800:	0f be       	out	0x3f, r0	; 63
 802:	cd bf       	out	0x3d, r28	; 61
 804:	cf 91       	pop	r28
 806:	df 91       	pop	r29
 808:	08 95       	ret

0000080a <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
 80a:	df 93       	push	r29
 80c:	cf 93       	push	r28
 80e:	00 d0       	rcall	.+0      	; 0x810 <_ZN5Print5printEii+0x6>
 810:	00 d0       	rcall	.+0      	; 0x812 <_ZN5Print5printEii+0x8>
 812:	00 d0       	rcall	.+0      	; 0x814 <_ZN5Print5printEii+0xa>
 814:	cd b7       	in	r28, 0x3d	; 61
 816:	de b7       	in	r29, 0x3e	; 62
 818:	9a 83       	std	Y+2, r25	; 0x02
 81a:	89 83       	std	Y+1, r24	; 0x01
 81c:	7c 83       	std	Y+4, r23	; 0x04
 81e:	6b 83       	std	Y+3, r22	; 0x03
 820:	5e 83       	std	Y+6, r21	; 0x06
 822:	4d 83       	std	Y+5, r20	; 0x05
{
  return print((long) n, base);
 824:	8b 81       	ldd	r24, Y+3	; 0x03
 826:	9c 81       	ldd	r25, Y+4	; 0x04
 828:	9c 01       	movw	r18, r24
 82a:	44 27       	eor	r20, r20
 82c:	37 fd       	sbrc	r19, 7
 82e:	40 95       	com	r20
 830:	54 2f       	mov	r21, r20
 832:	89 81       	ldd	r24, Y+1	; 0x01
 834:	9a 81       	ldd	r25, Y+2	; 0x02
 836:	ed 81       	ldd	r30, Y+5	; 0x05
 838:	fe 81       	ldd	r31, Y+6	; 0x06
 83a:	ba 01       	movw	r22, r20
 83c:	a9 01       	movw	r20, r18
 83e:	9f 01       	movw	r18, r30
 840:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 844:	26 96       	adiw	r28, 0x06	; 6
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	f8 94       	cli
 84a:	de bf       	out	0x3e, r29	; 62
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	cd bf       	out	0x3d, r28	; 61
 850:	cf 91       	pop	r28
 852:	df 91       	pop	r29
 854:	08 95       	ret

00000856 <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
 856:	df 93       	push	r29
 858:	cf 93       	push	r28
 85a:	cd b7       	in	r28, 0x3d	; 61
 85c:	de b7       	in	r29, 0x3e	; 62
 85e:	28 97       	sbiw	r28, 0x08	; 8
 860:	0f b6       	in	r0, 0x3f	; 63
 862:	f8 94       	cli
 864:	de bf       	out	0x3e, r29	; 62
 866:	0f be       	out	0x3f, r0	; 63
 868:	cd bf       	out	0x3d, r28	; 61
 86a:	9c 83       	std	Y+4, r25	; 0x04
 86c:	8b 83       	std	Y+3, r24	; 0x03
 86e:	7e 83       	std	Y+6, r23	; 0x06
 870:	6d 83       	std	Y+5, r22	; 0x05
 872:	58 87       	std	Y+8, r21	; 0x08
 874:	4f 83       	std	Y+7, r20	; 0x07
{
  size_t n = print(num, base);
 876:	8b 81       	ldd	r24, Y+3	; 0x03
 878:	9c 81       	ldd	r25, Y+4	; 0x04
 87a:	2d 81       	ldd	r18, Y+5	; 0x05
 87c:	3e 81       	ldd	r19, Y+6	; 0x06
 87e:	4f 81       	ldd	r20, Y+7	; 0x07
 880:	58 85       	ldd	r21, Y+8	; 0x08
 882:	b9 01       	movw	r22, r18
 884:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 888:	9a 83       	std	Y+2, r25	; 0x02
 88a:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 88c:	8b 81       	ldd	r24, Y+3	; 0x03
 88e:	9c 81       	ldd	r25, Y+4	; 0x04
 890:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 894:	9c 01       	movw	r18, r24
 896:	89 81       	ldd	r24, Y+1	; 0x01
 898:	9a 81       	ldd	r25, Y+2	; 0x02
 89a:	82 0f       	add	r24, r18
 89c:	93 1f       	adc	r25, r19
 89e:	9a 83       	std	Y+2, r25	; 0x02
 8a0:	89 83       	std	Y+1, r24	; 0x01
  return n;
 8a2:	89 81       	ldd	r24, Y+1	; 0x01
 8a4:	9a 81       	ldd	r25, Y+2	; 0x02
}
 8a6:	28 96       	adiw	r28, 0x08	; 8
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	f8 94       	cli
 8ac:	de bf       	out	0x3e, r29	; 62
 8ae:	0f be       	out	0x3f, r0	; 63
 8b0:	cd bf       	out	0x3d, r28	; 61
 8b2:	cf 91       	pop	r28
 8b4:	df 91       	pop	r29
 8b6:	08 95       	ret

000008b8 <_ZN5Print5printEPKc>:
    n += write(s[i]);
  }
  return n;
}

size_t Print::print(const char str[])
 8b8:	df 93       	push	r29
 8ba:	cf 93       	push	r28
 8bc:	00 d0       	rcall	.+0      	; 0x8be <_ZN5Print5printEPKc+0x6>
 8be:	00 d0       	rcall	.+0      	; 0x8c0 <_ZN5Print5printEPKc+0x8>
 8c0:	cd b7       	in	r28, 0x3d	; 61
 8c2:	de b7       	in	r29, 0x3e	; 62
 8c4:	9a 83       	std	Y+2, r25	; 0x02
 8c6:	89 83       	std	Y+1, r24	; 0x01
 8c8:	7c 83       	std	Y+4, r23	; 0x04
 8ca:	6b 83       	std	Y+3, r22	; 0x03
{
  return write(str);
 8cc:	89 81       	ldd	r24, Y+1	; 0x01
 8ce:	9a 81       	ldd	r25, Y+2	; 0x02
 8d0:	2b 81       	ldd	r18, Y+3	; 0x03
 8d2:	3c 81       	ldd	r19, Y+4	; 0x04
 8d4:	b9 01       	movw	r22, r18
 8d6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 8da:	0f 90       	pop	r0
 8dc:	0f 90       	pop	r0
 8de:	0f 90       	pop	r0
 8e0:	0f 90       	pop	r0
 8e2:	cf 91       	pop	r28
 8e4:	df 91       	pop	r29
 8e6:	08 95       	ret

000008e8 <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
 8e8:	df 93       	push	r29
 8ea:	cf 93       	push	r28
 8ec:	cd b7       	in	r28, 0x3d	; 61
 8ee:	de b7       	in	r29, 0x3e	; 62
 8f0:	a1 97       	sbiw	r28, 0x21	; 33
 8f2:	0f b6       	in	r0, 0x3f	; 63
 8f4:	f8 94       	cli
 8f6:	de bf       	out	0x3e, r29	; 62
 8f8:	0f be       	out	0x3f, r0	; 63
 8fa:	cd bf       	out	0x3d, r28	; 61
 8fc:	9b 8b       	std	Y+19, r25	; 0x13
 8fe:	8a 8b       	std	Y+18, r24	; 0x12
 900:	4c 8b       	std	Y+20, r20	; 0x14
 902:	5d 8b       	std	Y+21, r21	; 0x15
 904:	6e 8b       	std	Y+22, r22	; 0x16
 906:	7f 8b       	std	Y+23, r23	; 0x17
 908:	28 8f       	std	Y+24, r18	; 0x18
{ 
  size_t n = 0;
 90a:	19 8a       	std	Y+17, r1	; 0x11
 90c:	18 8a       	std	Y+16, r1	; 0x10
  
  if (isnan(number)) return print("nan");
 90e:	6c 89       	ldd	r22, Y+20	; 0x14
 910:	7d 89       	ldd	r23, Y+21	; 0x15
 912:	8e 89       	ldd	r24, Y+22	; 0x16
 914:	9f 89       	ldd	r25, Y+23	; 0x17
 916:	2c 89       	ldd	r18, Y+20	; 0x14
 918:	3d 89       	ldd	r19, Y+21	; 0x15
 91a:	4e 89       	ldd	r20, Y+22	; 0x16
 91c:	5f 89       	ldd	r21, Y+23	; 0x17
 91e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 922:	88 23       	and	r24, r24
 924:	01 f0       	breq	.+0      	; 0x926 <_ZN5Print10printFloatEdh+0x3e>
 926:	8a 89       	ldd	r24, Y+18	; 0x12
 928:	9b 89       	ldd	r25, Y+19	; 0x13
 92a:	20 e0       	ldi	r18, 0x00	; 0
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	b9 01       	movw	r22, r18
 930:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 934:	9c 8f       	std	Y+28, r25	; 0x1c
 936:	8b 8f       	std	Y+27, r24	; 0x1b
 938:	00 c0       	rjmp	.+0      	; 0x93a <_ZN5Print10printFloatEdh+0x52>
  if (isinf(number)) return print("inf");
 93a:	1a 8e       	std	Y+26, r1	; 0x1a
 93c:	19 8e       	std	Y+25, r1	; 0x19
 93e:	8c 89       	ldd	r24, Y+20	; 0x14
 940:	9d 89       	ldd	r25, Y+21	; 0x15
 942:	ae 89       	ldd	r26, Y+22	; 0x16
 944:	bf 89       	ldd	r27, Y+23	; 0x17
 946:	bf 77       	andi	r27, 0x7F	; 127
 948:	8d 8f       	std	Y+29, r24	; 0x1d
 94a:	9e 8f       	std	Y+30, r25	; 0x1e
 94c:	af 8f       	std	Y+31, r26	; 0x1f
 94e:	b8 a3       	std	Y+32, r27	; 0x20
 950:	6d 8d       	ldd	r22, Y+29	; 0x1d
 952:	7e 8d       	ldd	r23, Y+30	; 0x1e
 954:	8f 8d       	ldd	r24, Y+31	; 0x1f
 956:	98 a1       	ldd	r25, Y+32	; 0x20
 958:	2f ef       	ldi	r18, 0xFF	; 255
 95a:	3f ef       	ldi	r19, 0xFF	; 255
 95c:	4f e7       	ldi	r20, 0x7F	; 127
 95e:	5f e7       	ldi	r21, 0x7F	; 127
 960:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 964:	88 23       	and	r24, r24
 966:	01 f4       	brne	.+0      	; 0x968 <_ZN5Print10printFloatEdh+0x80>
 968:	6d 8d       	ldd	r22, Y+29	; 0x1d
 96a:	7e 8d       	ldd	r23, Y+30	; 0x1e
 96c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 96e:	98 a1       	ldd	r25, Y+32	; 0x20
 970:	2f ef       	ldi	r18, 0xFF	; 255
 972:	3f ef       	ldi	r19, 0xFF	; 255
 974:	4f e7       	ldi	r20, 0x7F	; 127
 976:	5f e7       	ldi	r21, 0x7F	; 127
 978:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 97c:	18 16       	cp	r1, r24
 97e:	04 f0       	brlt	.+0      	; 0x980 <_ZN5Print10printFloatEdh+0x98>
 980:	21 e0       	ldi	r18, 0x01	; 1
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	3a 8f       	std	Y+26, r19	; 0x1a
 986:	29 8f       	std	Y+25, r18	; 0x19
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	29 8d       	ldd	r18, Y+25	; 0x19
 98e:	3a 8d       	ldd	r19, Y+26	; 0x1a
 990:	28 27       	eor	r18, r24
 992:	39 27       	eor	r19, r25
 994:	3a 8f       	std	Y+26, r19	; 0x1a
 996:	29 8f       	std	Y+25, r18	; 0x19
 998:	89 8d       	ldd	r24, Y+25	; 0x19
 99a:	9a 8d       	ldd	r25, Y+26	; 0x1a
 99c:	00 97       	sbiw	r24, 0x00	; 0
 99e:	01 f0       	breq	.+0      	; 0x9a0 <_ZN5Print10printFloatEdh+0xb8>
 9a0:	8a 89       	ldd	r24, Y+18	; 0x12
 9a2:	9b 89       	ldd	r25, Y+19	; 0x13
 9a4:	20 e0       	ldi	r18, 0x00	; 0
 9a6:	30 e0       	ldi	r19, 0x00	; 0
 9a8:	b9 01       	movw	r22, r18
 9aa:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 9ae:	9c 8f       	std	Y+28, r25	; 0x1c
 9b0:	8b 8f       	std	Y+27, r24	; 0x1b
 9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <_ZN5Print10printFloatEdh+0xcc>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 9b4:	6c 89       	ldd	r22, Y+20	; 0x14
 9b6:	7d 89       	ldd	r23, Y+21	; 0x15
 9b8:	8e 89       	ldd	r24, Y+22	; 0x16
 9ba:	9f 89       	ldd	r25, Y+23	; 0x17
 9bc:	2f ef       	ldi	r18, 0xFF	; 255
 9be:	3f ef       	ldi	r19, 0xFF	; 255
 9c0:	4f e7       	ldi	r20, 0x7F	; 127
 9c2:	5f e4       	ldi	r21, 0x4F	; 79
 9c4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 9c8:	18 16       	cp	r1, r24
 9ca:	04 f4       	brge	.+0      	; 0x9cc <_ZN5Print10printFloatEdh+0xe4>
 9cc:	8a 89       	ldd	r24, Y+18	; 0x12
 9ce:	9b 89       	ldd	r25, Y+19	; 0x13
 9d0:	20 e0       	ldi	r18, 0x00	; 0
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	b9 01       	movw	r22, r18
 9d6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 9da:	9c 8f       	std	Y+28, r25	; 0x1c
 9dc:	8b 8f       	std	Y+27, r24	; 0x1b
 9de:	00 c0       	rjmp	.+0      	; 0x9e0 <_ZN5Print10printFloatEdh+0xf8>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 9e0:	6c 89       	ldd	r22, Y+20	; 0x14
 9e2:	7d 89       	ldd	r23, Y+21	; 0x15
 9e4:	8e 89       	ldd	r24, Y+22	; 0x16
 9e6:	9f 89       	ldd	r25, Y+23	; 0x17
 9e8:	2f ef       	ldi	r18, 0xFF	; 255
 9ea:	3f ef       	ldi	r19, 0xFF	; 255
 9ec:	4f e7       	ldi	r20, 0x7F	; 127
 9ee:	5f ec       	ldi	r21, 0xCF	; 207
 9f0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 9f4:	88 23       	and	r24, r24
 9f6:	04 f4       	brge	.+0      	; 0x9f8 <_ZN5Print10printFloatEdh+0x110>
 9f8:	8a 89       	ldd	r24, Y+18	; 0x12
 9fa:	9b 89       	ldd	r25, Y+19	; 0x13
 9fc:	20 e0       	ldi	r18, 0x00	; 0
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	b9 01       	movw	r22, r18
 a02:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 a06:	9c 8f       	std	Y+28, r25	; 0x1c
 a08:	8b 8f       	std	Y+27, r24	; 0x1b
 a0a:	00 c0       	rjmp	.+0      	; 0xa0c <_ZN5Print10printFloatEdh+0x124>
  
  // Handle negative numbers
  if (number < 0.0)
 a0c:	6c 89       	ldd	r22, Y+20	; 0x14
 a0e:	7d 89       	ldd	r23, Y+21	; 0x15
 a10:	8e 89       	ldd	r24, Y+22	; 0x16
 a12:	9f 89       	ldd	r25, Y+23	; 0x17
 a14:	20 e0       	ldi	r18, 0x00	; 0
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	40 e0       	ldi	r20, 0x00	; 0
 a1a:	50 e0       	ldi	r21, 0x00	; 0
 a1c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 a20:	88 23       	and	r24, r24
 a22:	04 f4       	brge	.+0      	; 0xa24 <_ZN5Print10printFloatEdh+0x13c>
  {
     n += print('-');
 a24:	8a 89       	ldd	r24, Y+18	; 0x12
 a26:	9b 89       	ldd	r25, Y+19	; 0x13
 a28:	6d e2       	ldi	r22, 0x2D	; 45
 a2a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 a2e:	9c 01       	movw	r18, r24
 a30:	88 89       	ldd	r24, Y+16	; 0x10
 a32:	99 89       	ldd	r25, Y+17	; 0x11
 a34:	82 0f       	add	r24, r18
 a36:	93 1f       	adc	r25, r19
 a38:	99 8b       	std	Y+17, r25	; 0x11
 a3a:	88 8b       	std	Y+16, r24	; 0x10
     number = -number;
 a3c:	8c 89       	ldd	r24, Y+20	; 0x14
 a3e:	9d 89       	ldd	r25, Y+21	; 0x15
 a40:	ae 89       	ldd	r26, Y+22	; 0x16
 a42:	bf 89       	ldd	r27, Y+23	; 0x17
 a44:	b0 58       	subi	r27, 0x80	; 128
 a46:	8c 8b       	std	Y+20, r24	; 0x14
 a48:	9d 8b       	std	Y+21, r25	; 0x15
 a4a:	ae 8b       	std	Y+22, r26	; 0x16
 a4c:	bf 8b       	std	Y+23, r27	; 0x17
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 a4e:	80 e0       	ldi	r24, 0x00	; 0
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	a0 e0       	ldi	r26, 0x00	; 0
 a54:	bf e3       	ldi	r27, 0x3F	; 63
 a56:	8c 87       	std	Y+12, r24	; 0x0c
 a58:	9d 87       	std	Y+13, r25	; 0x0d
 a5a:	ae 87       	std	Y+14, r26	; 0x0e
 a5c:	bf 87       	std	Y+15, r27	; 0x0f
  for (uint8_t i=0; i<digits; ++i)
 a5e:	1b 82       	std	Y+3, r1	; 0x03
 a60:	00 c0       	rjmp	.+0      	; 0xa62 <_ZN5Print10printFloatEdh+0x17a>
    rounding /= 10.0;
 a62:	6c 85       	ldd	r22, Y+12	; 0x0c
 a64:	7d 85       	ldd	r23, Y+13	; 0x0d
 a66:	8e 85       	ldd	r24, Y+14	; 0x0e
 a68:	9f 85       	ldd	r25, Y+15	; 0x0f
 a6a:	20 e0       	ldi	r18, 0x00	; 0
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	40 e2       	ldi	r20, 0x20	; 32
 a70:	51 e4       	ldi	r21, 0x41	; 65
 a72:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 a76:	dc 01       	movw	r26, r24
 a78:	cb 01       	movw	r24, r22
 a7a:	8c 87       	std	Y+12, r24	; 0x0c
 a7c:	9d 87       	std	Y+13, r25	; 0x0d
 a7e:	ae 87       	std	Y+14, r26	; 0x0e
 a80:	bf 87       	std	Y+15, r27	; 0x0f
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
 a82:	8b 81       	ldd	r24, Y+3	; 0x03
 a84:	8f 5f       	subi	r24, 0xFF	; 255
 a86:	8b 83       	std	Y+3, r24	; 0x03
 a88:	9b 81       	ldd	r25, Y+3	; 0x03
 a8a:	88 8d       	ldd	r24, Y+24	; 0x18
 a8c:	98 17       	cp	r25, r24
 a8e:	00 f0       	brcs	.+0      	; 0xa90 <_ZN5Print10printFloatEdh+0x1a8>
    rounding /= 10.0;
  
  number += rounding;
 a90:	6c 89       	ldd	r22, Y+20	; 0x14
 a92:	7d 89       	ldd	r23, Y+21	; 0x15
 a94:	8e 89       	ldd	r24, Y+22	; 0x16
 a96:	9f 89       	ldd	r25, Y+23	; 0x17
 a98:	2c 85       	ldd	r18, Y+12	; 0x0c
 a9a:	3d 85       	ldd	r19, Y+13	; 0x0d
 a9c:	4e 85       	ldd	r20, Y+14	; 0x0e
 a9e:	5f 85       	ldd	r21, Y+15	; 0x0f
 aa0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 aa4:	dc 01       	movw	r26, r24
 aa6:	cb 01       	movw	r24, r22
 aa8:	8c 8b       	std	Y+20, r24	; 0x14
 aaa:	9d 8b       	std	Y+21, r25	; 0x15
 aac:	ae 8b       	std	Y+22, r26	; 0x16
 aae:	bf 8b       	std	Y+23, r27	; 0x17

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 ab0:	6c 89       	ldd	r22, Y+20	; 0x14
 ab2:	7d 89       	ldd	r23, Y+21	; 0x15
 ab4:	8e 89       	ldd	r24, Y+22	; 0x16
 ab6:	9f 89       	ldd	r25, Y+23	; 0x17
 ab8:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 abc:	dc 01       	movw	r26, r24
 abe:	cb 01       	movw	r24, r22
 ac0:	88 87       	std	Y+8, r24	; 0x08
 ac2:	99 87       	std	Y+9, r25	; 0x09
 ac4:	aa 87       	std	Y+10, r26	; 0x0a
 ac6:	bb 87       	std	Y+11, r27	; 0x0b
  double remainder = number - (double)int_part;
 ac8:	68 85       	ldd	r22, Y+8	; 0x08
 aca:	79 85       	ldd	r23, Y+9	; 0x09
 acc:	8a 85       	ldd	r24, Y+10	; 0x0a
 ace:	9b 85       	ldd	r25, Y+11	; 0x0b
 ad0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 ad4:	9b 01       	movw	r18, r22
 ad6:	ac 01       	movw	r20, r24
 ad8:	6c 89       	ldd	r22, Y+20	; 0x14
 ada:	7d 89       	ldd	r23, Y+21	; 0x15
 adc:	8e 89       	ldd	r24, Y+22	; 0x16
 ade:	9f 89       	ldd	r25, Y+23	; 0x17
 ae0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 ae4:	dc 01       	movw	r26, r24
 ae6:	cb 01       	movw	r24, r22
 ae8:	8c 83       	std	Y+4, r24	; 0x04
 aea:	9d 83       	std	Y+5, r25	; 0x05
 aec:	ae 83       	std	Y+6, r26	; 0x06
 aee:	bf 83       	std	Y+7, r27	; 0x07
  n += print(int_part);
 af0:	8a 89       	ldd	r24, Y+18	; 0x12
 af2:	9b 89       	ldd	r25, Y+19	; 0x13
 af4:	28 85       	ldd	r18, Y+8	; 0x08
 af6:	39 85       	ldd	r19, Y+9	; 0x09
 af8:	4a 85       	ldd	r20, Y+10	; 0x0a
 afa:	5b 85       	ldd	r21, Y+11	; 0x0b
 afc:	ba 01       	movw	r22, r20
 afe:	a9 01       	movw	r20, r18
 b00:	2a e0       	ldi	r18, 0x0A	; 10
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 b08:	9c 01       	movw	r18, r24
 b0a:	88 89       	ldd	r24, Y+16	; 0x10
 b0c:	99 89       	ldd	r25, Y+17	; 0x11
 b0e:	82 0f       	add	r24, r18
 b10:	93 1f       	adc	r25, r19
 b12:	99 8b       	std	Y+17, r25	; 0x11
 b14:	88 8b       	std	Y+16, r24	; 0x10

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 b16:	88 8d       	ldd	r24, Y+24	; 0x18
 b18:	88 23       	and	r24, r24
 b1a:	01 f4       	brne	.+0      	; 0xb1c <_ZN5Print10printFloatEdh+0x234>
 b1c:	00 c0       	rjmp	.+0      	; 0xb1e <_ZN5Print10printFloatEdh+0x236>
    n += print("."); 
 b1e:	8a 89       	ldd	r24, Y+18	; 0x12
 b20:	9b 89       	ldd	r25, Y+19	; 0x13
 b22:	20 e0       	ldi	r18, 0x00	; 0
 b24:	30 e0       	ldi	r19, 0x00	; 0
 b26:	b9 01       	movw	r22, r18
 b28:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 b2c:	9c 01       	movw	r18, r24
 b2e:	88 89       	ldd	r24, Y+16	; 0x10
 b30:	99 89       	ldd	r25, Y+17	; 0x11
 b32:	82 0f       	add	r24, r18
 b34:	93 1f       	adc	r25, r19
 b36:	99 8b       	std	Y+17, r25	; 0x11
 b38:	88 8b       	std	Y+16, r24	; 0x10
 b3a:	00 c0       	rjmp	.+0      	; 0xb3c <_ZN5Print10printFloatEdh+0x254>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 b3c:	6c 81       	ldd	r22, Y+4	; 0x04
 b3e:	7d 81       	ldd	r23, Y+5	; 0x05
 b40:	8e 81       	ldd	r24, Y+6	; 0x06
 b42:	9f 81       	ldd	r25, Y+7	; 0x07
 b44:	20 e0       	ldi	r18, 0x00	; 0
 b46:	30 e0       	ldi	r19, 0x00	; 0
 b48:	40 e2       	ldi	r20, 0x20	; 32
 b4a:	51 e4       	ldi	r21, 0x41	; 65
 b4c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 b50:	dc 01       	movw	r26, r24
 b52:	cb 01       	movw	r24, r22
 b54:	8c 83       	std	Y+4, r24	; 0x04
 b56:	9d 83       	std	Y+5, r25	; 0x05
 b58:	ae 83       	std	Y+6, r26	; 0x06
 b5a:	bf 83       	std	Y+7, r27	; 0x07
    int toPrint = int(remainder);
 b5c:	6c 81       	ldd	r22, Y+4	; 0x04
 b5e:	7d 81       	ldd	r23, Y+5	; 0x05
 b60:	8e 81       	ldd	r24, Y+6	; 0x06
 b62:	9f 81       	ldd	r25, Y+7	; 0x07
 b64:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 b68:	dc 01       	movw	r26, r24
 b6a:	cb 01       	movw	r24, r22
 b6c:	9a 83       	std	Y+2, r25	; 0x02
 b6e:	89 83       	std	Y+1, r24	; 0x01
    n += print(toPrint);
 b70:	8a 89       	ldd	r24, Y+18	; 0x12
 b72:	9b 89       	ldd	r25, Y+19	; 0x13
 b74:	29 81       	ldd	r18, Y+1	; 0x01
 b76:	3a 81       	ldd	r19, Y+2	; 0x02
 b78:	b9 01       	movw	r22, r18
 b7a:	4a e0       	ldi	r20, 0x0A	; 10
 b7c:	50 e0       	ldi	r21, 0x00	; 0
 b7e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 b82:	9c 01       	movw	r18, r24
 b84:	88 89       	ldd	r24, Y+16	; 0x10
 b86:	99 89       	ldd	r25, Y+17	; 0x11
 b88:	82 0f       	add	r24, r18
 b8a:	93 1f       	adc	r25, r19
 b8c:	99 8b       	std	Y+17, r25	; 0x11
 b8e:	88 8b       	std	Y+16, r24	; 0x10
    remainder -= toPrint; 
 b90:	89 81       	ldd	r24, Y+1	; 0x01
 b92:	9a 81       	ldd	r25, Y+2	; 0x02
 b94:	aa 27       	eor	r26, r26
 b96:	97 fd       	sbrc	r25, 7
 b98:	a0 95       	com	r26
 b9a:	ba 2f       	mov	r27, r26
 b9c:	bc 01       	movw	r22, r24
 b9e:	cd 01       	movw	r24, r26
 ba0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 ba4:	9b 01       	movw	r18, r22
 ba6:	ac 01       	movw	r20, r24
 ba8:	6c 81       	ldd	r22, Y+4	; 0x04
 baa:	7d 81       	ldd	r23, Y+5	; 0x05
 bac:	8e 81       	ldd	r24, Y+6	; 0x06
 bae:	9f 81       	ldd	r25, Y+7	; 0x07
 bb0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 bb4:	dc 01       	movw	r26, r24
 bb6:	cb 01       	movw	r24, r22
 bb8:	8c 83       	std	Y+4, r24	; 0x04
 bba:	9d 83       	std	Y+5, r25	; 0x05
 bbc:	ae 83       	std	Y+6, r26	; 0x06
 bbe:	bf 83       	std	Y+7, r27	; 0x07
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 bc0:	98 8d       	ldd	r25, Y+24	; 0x18
 bc2:	99 a3       	std	Y+33, r25	; 0x21
 bc4:	29 a1       	ldd	r18, Y+33	; 0x21
 bc6:	22 23       	and	r18, r18
 bc8:	01 f0       	breq	.+0      	; 0xbca <_ZN5Print10printFloatEdh+0x2e2>
 bca:	31 e0       	ldi	r19, 0x01	; 1
 bcc:	39 a3       	std	Y+33, r19	; 0x21
 bce:	89 a1       	ldd	r24, Y+33	; 0x21
 bd0:	98 8d       	ldd	r25, Y+24	; 0x18
 bd2:	91 50       	subi	r25, 0x01	; 1
 bd4:	98 8f       	std	Y+24, r25	; 0x18
 bd6:	88 23       	and	r24, r24
 bd8:	01 f0       	breq	.+0      	; 0xbda <_ZN5Print10printFloatEdh+0x2f2>
 bda:	00 c0       	rjmp	.+0      	; 0xbdc <_ZN5Print10printFloatEdh+0x2f4>
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
 bdc:	88 89       	ldd	r24, Y+16	; 0x10
 bde:	99 89       	ldd	r25, Y+17	; 0x11
 be0:	9c 8f       	std	Y+28, r25	; 0x1c
 be2:	8b 8f       	std	Y+27, r24	; 0x1b
 be4:	8b 8d       	ldd	r24, Y+27	; 0x1b
 be6:	9c 8d       	ldd	r25, Y+28	; 0x1c
}
 be8:	a1 96       	adiw	r28, 0x21	; 33
 bea:	0f b6       	in	r0, 0x3f	; 63
 bec:	f8 94       	cli
 bee:	de bf       	out	0x3e, r29	; 62
 bf0:	0f be       	out	0x3f, r0	; 63
 bf2:	cd bf       	out	0x3d, r28	; 61
 bf4:	cf 91       	pop	r28
 bf6:	df 91       	pop	r29
 bf8:	08 95       	ret

00000bfa <_ZN5Print5printEdi>:
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
 bfa:	df 93       	push	r29
 bfc:	cf 93       	push	r28
 bfe:	cd b7       	in	r28, 0x3d	; 61
 c00:	de b7       	in	r29, 0x3e	; 62
 c02:	28 97       	sbiw	r28, 0x08	; 8
 c04:	0f b6       	in	r0, 0x3f	; 63
 c06:	f8 94       	cli
 c08:	de bf       	out	0x3e, r29	; 62
 c0a:	0f be       	out	0x3f, r0	; 63
 c0c:	cd bf       	out	0x3d, r28	; 61
 c0e:	9a 83       	std	Y+2, r25	; 0x02
 c10:	89 83       	std	Y+1, r24	; 0x01
 c12:	4b 83       	std	Y+3, r20	; 0x03
 c14:	5c 83       	std	Y+4, r21	; 0x04
 c16:	6d 83       	std	Y+5, r22	; 0x05
 c18:	7e 83       	std	Y+6, r23	; 0x06
 c1a:	38 87       	std	Y+8, r19	; 0x08
 c1c:	2f 83       	std	Y+7, r18	; 0x07
{
  return printFloat(n, digits);
 c1e:	ef 81       	ldd	r30, Y+7	; 0x07
 c20:	89 81       	ldd	r24, Y+1	; 0x01
 c22:	9a 81       	ldd	r25, Y+2	; 0x02
 c24:	2b 81       	ldd	r18, Y+3	; 0x03
 c26:	3c 81       	ldd	r19, Y+4	; 0x04
 c28:	4d 81       	ldd	r20, Y+5	; 0x05
 c2a:	5e 81       	ldd	r21, Y+6	; 0x06
 c2c:	ba 01       	movw	r22, r20
 c2e:	a9 01       	movw	r20, r18
 c30:	2e 2f       	mov	r18, r30
 c32:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 c36:	28 96       	adiw	r28, 0x08	; 8
 c38:	0f b6       	in	r0, 0x3f	; 63
 c3a:	f8 94       	cli
 c3c:	de bf       	out	0x3e, r29	; 62
 c3e:	0f be       	out	0x3f, r0	; 63
 c40:	cd bf       	out	0x3d, r28	; 61
 c42:	cf 91       	pop	r28
 c44:	df 91       	pop	r29
 c46:	08 95       	ret

00000c48 <_ZN5Print7printlnEdi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
 c48:	df 93       	push	r29
 c4a:	cf 93       	push	r28
 c4c:	cd b7       	in	r28, 0x3d	; 61
 c4e:	de b7       	in	r29, 0x3e	; 62
 c50:	2a 97       	sbiw	r28, 0x0a	; 10
 c52:	0f b6       	in	r0, 0x3f	; 63
 c54:	f8 94       	cli
 c56:	de bf       	out	0x3e, r29	; 62
 c58:	0f be       	out	0x3f, r0	; 63
 c5a:	cd bf       	out	0x3d, r28	; 61
 c5c:	9c 83       	std	Y+4, r25	; 0x04
 c5e:	8b 83       	std	Y+3, r24	; 0x03
 c60:	4d 83       	std	Y+5, r20	; 0x05
 c62:	5e 83       	std	Y+6, r21	; 0x06
 c64:	6f 83       	std	Y+7, r22	; 0x07
 c66:	78 87       	std	Y+8, r23	; 0x08
 c68:	3a 87       	std	Y+10, r19	; 0x0a
 c6a:	29 87       	std	Y+9, r18	; 0x09
{
  size_t n = print(num, digits);
 c6c:	8b 81       	ldd	r24, Y+3	; 0x03
 c6e:	9c 81       	ldd	r25, Y+4	; 0x04
 c70:	2d 81       	ldd	r18, Y+5	; 0x05
 c72:	3e 81       	ldd	r19, Y+6	; 0x06
 c74:	4f 81       	ldd	r20, Y+7	; 0x07
 c76:	58 85       	ldd	r21, Y+8	; 0x08
 c78:	e9 85       	ldd	r30, Y+9	; 0x09
 c7a:	fa 85       	ldd	r31, Y+10	; 0x0a
 c7c:	ba 01       	movw	r22, r20
 c7e:	a9 01       	movw	r20, r18
 c80:	9f 01       	movw	r18, r30
 c82:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 c86:	9a 83       	std	Y+2, r25	; 0x02
 c88:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 c8a:	8b 81       	ldd	r24, Y+3	; 0x03
 c8c:	9c 81       	ldd	r25, Y+4	; 0x04
 c8e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 c92:	9c 01       	movw	r18, r24
 c94:	89 81       	ldd	r24, Y+1	; 0x01
 c96:	9a 81       	ldd	r25, Y+2	; 0x02
 c98:	82 0f       	add	r24, r18
 c9a:	93 1f       	adc	r25, r19
 c9c:	9a 83       	std	Y+2, r25	; 0x02
 c9e:	89 83       	std	Y+1, r24	; 0x01
  return n;
 ca0:	89 81       	ldd	r24, Y+1	; 0x01
 ca2:	9a 81       	ldd	r25, Y+2	; 0x02
}
 ca4:	2a 96       	adiw	r28, 0x0a	; 10
 ca6:	0f b6       	in	r0, 0x3f	; 63
 ca8:	f8 94       	cli
 caa:	de bf       	out	0x3e, r29	; 62
 cac:	0f be       	out	0x3f, r0	; 63
 cae:	cd bf       	out	0x3d, r28	; 61
 cb0:	cf 91       	pop	r28
 cb2:	df 91       	pop	r29
 cb4:	08 95       	ret

00000cb6 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
 cb6:	df 93       	push	r29
 cb8:	cf 93       	push	r28
 cba:	00 d0       	rcall	.+0      	; 0xcbc <_ZN5Print7printlnEPKc+0x6>
 cbc:	00 d0       	rcall	.+0      	; 0xcbe <_ZN5Print7printlnEPKc+0x8>
 cbe:	00 d0       	rcall	.+0      	; 0xcc0 <_ZN5Print7printlnEPKc+0xa>
 cc0:	cd b7       	in	r28, 0x3d	; 61
 cc2:	de b7       	in	r29, 0x3e	; 62
 cc4:	9c 83       	std	Y+4, r25	; 0x04
 cc6:	8b 83       	std	Y+3, r24	; 0x03
 cc8:	7e 83       	std	Y+6, r23	; 0x06
 cca:	6d 83       	std	Y+5, r22	; 0x05
{
  size_t n = print(c);
 ccc:	8b 81       	ldd	r24, Y+3	; 0x03
 cce:	9c 81       	ldd	r25, Y+4	; 0x04
 cd0:	2d 81       	ldd	r18, Y+5	; 0x05
 cd2:	3e 81       	ldd	r19, Y+6	; 0x06
 cd4:	b9 01       	movw	r22, r18
 cd6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 cda:	9a 83       	std	Y+2, r25	; 0x02
 cdc:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 cde:	8b 81       	ldd	r24, Y+3	; 0x03
 ce0:	9c 81       	ldd	r25, Y+4	; 0x04
 ce2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 ce6:	9c 01       	movw	r18, r24
 ce8:	89 81       	ldd	r24, Y+1	; 0x01
 cea:	9a 81       	ldd	r25, Y+2	; 0x02
 cec:	82 0f       	add	r24, r18
 cee:	93 1f       	adc	r25, r19
 cf0:	9a 83       	std	Y+2, r25	; 0x02
 cf2:	89 83       	std	Y+1, r24	; 0x01
  return n;
 cf4:	89 81       	ldd	r24, Y+1	; 0x01
 cf6:	9a 81       	ldd	r25, Y+2	; 0x02
}
 cf8:	26 96       	adiw	r28, 0x06	; 6
 cfa:	0f b6       	in	r0, 0x3f	; 63
 cfc:	f8 94       	cli
 cfe:	de bf       	out	0x3e, r29	; 62
 d00:	0f be       	out	0x3f, r0	; 63
 d02:	cd bf       	out	0x3d, r28	; 61
 d04:	cf 91       	pop	r28
 d06:	df 91       	pop	r29
 d08:	08 95       	ret

00000d0a <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
 d0a:	0f 93       	push	r16
 d0c:	1f 93       	push	r17
 d0e:	df 93       	push	r29
 d10:	cf 93       	push	r28
 d12:	cd b7       	in	r28, 0x3d	; 61
 d14:	de b7       	in	r29, 0x3e	; 62
 d16:	29 97       	sbiw	r28, 0x09	; 9
 d18:	0f b6       	in	r0, 0x3f	; 63
 d1a:	f8 94       	cli
 d1c:	de bf       	out	0x3e, r29	; 62
 d1e:	0f be       	out	0x3f, r0	; 63
 d20:	cd bf       	out	0x3d, r28	; 61
 d22:	9e 83       	std	Y+6, r25	; 0x06
 d24:	8d 83       	std	Y+5, r24	; 0x05
 d26:	78 87       	std	Y+8, r23	; 0x08
 d28:	6f 83       	std	Y+7, r22	; 0x07
{
  size_t n = 0;
 d2a:	1c 82       	std	Y+4, r1	; 0x04
 d2c:	1b 82       	std	Y+3, r1	; 0x03
  for (uint16_t i = 0; i < s.length(); i++) {
 d2e:	1a 82       	std	Y+2, r1	; 0x02
 d30:	19 82       	std	Y+1, r1	; 0x01
 d32:	00 c0       	rjmp	.+0      	; 0xd34 <_ZN5Print5printERK6String+0x2a>
    n += write(s[i]);
 d34:	ed 81       	ldd	r30, Y+5	; 0x05
 d36:	fe 81       	ldd	r31, Y+6	; 0x06
 d38:	80 81       	ld	r24, Z
 d3a:	91 81       	ldd	r25, Z+1	; 0x01
 d3c:	fc 01       	movw	r30, r24
 d3e:	34 96       	adiw	r30, 0x04	; 4
 d40:	00 81       	ld	r16, Z
 d42:	11 81       	ldd	r17, Z+1	; 0x01
 d44:	8f 81       	ldd	r24, Y+7	; 0x07
 d46:	98 85       	ldd	r25, Y+8	; 0x08
 d48:	29 81       	ldd	r18, Y+1	; 0x01
 d4a:	3a 81       	ldd	r19, Y+2	; 0x02
 d4c:	b9 01       	movw	r22, r18
 d4e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 d52:	28 2f       	mov	r18, r24
 d54:	8d 81       	ldd	r24, Y+5	; 0x05
 d56:	9e 81       	ldd	r25, Y+6	; 0x06
 d58:	62 2f       	mov	r22, r18
 d5a:	f8 01       	movw	r30, r16
 d5c:	09 95       	icall
 d5e:	9c 01       	movw	r18, r24
 d60:	8b 81       	ldd	r24, Y+3	; 0x03
 d62:	9c 81       	ldd	r25, Y+4	; 0x04
 d64:	82 0f       	add	r24, r18
 d66:	93 1f       	adc	r25, r19
 d68:	9c 83       	std	Y+4, r25	; 0x04
 d6a:	8b 83       	std	Y+3, r24	; 0x03
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
 d6c:	89 81       	ldd	r24, Y+1	; 0x01
 d6e:	9a 81       	ldd	r25, Y+2	; 0x02
 d70:	01 96       	adiw	r24, 0x01	; 1
 d72:	9a 83       	std	Y+2, r25	; 0x02
 d74:	89 83       	std	Y+1, r24	; 0x01
 d76:	8f 81       	ldd	r24, Y+7	; 0x07
 d78:	98 85       	ldd	r25, Y+8	; 0x08
 d7a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 d7e:	9c 01       	movw	r18, r24
 d80:	19 86       	std	Y+9, r1	; 0x09
 d82:	89 81       	ldd	r24, Y+1	; 0x01
 d84:	9a 81       	ldd	r25, Y+2	; 0x02
 d86:	82 17       	cp	r24, r18
 d88:	93 07       	cpc	r25, r19
 d8a:	00 f4       	brcc	.+0      	; 0xd8c <_ZN5Print5printERK6String+0x82>
 d8c:	81 e0       	ldi	r24, 0x01	; 1
 d8e:	89 87       	std	Y+9, r24	; 0x09
 d90:	89 85       	ldd	r24, Y+9	; 0x09
 d92:	88 23       	and	r24, r24
 d94:	01 f4       	brne	.+0      	; 0xd96 <_ZN5Print5printERK6String+0x8c>
    n += write(s[i]);
  }
  return n;
 d96:	8b 81       	ldd	r24, Y+3	; 0x03
 d98:	9c 81       	ldd	r25, Y+4	; 0x04
}
 d9a:	29 96       	adiw	r28, 0x09	; 9
 d9c:	0f b6       	in	r0, 0x3f	; 63
 d9e:	f8 94       	cli
 da0:	de bf       	out	0x3e, r29	; 62
 da2:	0f be       	out	0x3f, r0	; 63
 da4:	cd bf       	out	0x3d, r28	; 61
 da6:	cf 91       	pop	r28
 da8:	df 91       	pop	r29
 daa:	1f 91       	pop	r17
 dac:	0f 91       	pop	r16
 dae:	08 95       	ret

00000db0 <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
 db0:	df 93       	push	r29
 db2:	cf 93       	push	r28
 db4:	00 d0       	rcall	.+0      	; 0xdb6 <_ZN5Print7printlnERK6String+0x6>
 db6:	00 d0       	rcall	.+0      	; 0xdb8 <_ZN5Print7printlnERK6String+0x8>
 db8:	00 d0       	rcall	.+0      	; 0xdba <_ZN5Print7printlnERK6String+0xa>
 dba:	cd b7       	in	r28, 0x3d	; 61
 dbc:	de b7       	in	r29, 0x3e	; 62
 dbe:	9c 83       	std	Y+4, r25	; 0x04
 dc0:	8b 83       	std	Y+3, r24	; 0x03
 dc2:	7e 83       	std	Y+6, r23	; 0x06
 dc4:	6d 83       	std	Y+5, r22	; 0x05
{
  size_t n = print(s);
 dc6:	8b 81       	ldd	r24, Y+3	; 0x03
 dc8:	9c 81       	ldd	r25, Y+4	; 0x04
 dca:	2d 81       	ldd	r18, Y+5	; 0x05
 dcc:	3e 81       	ldd	r19, Y+6	; 0x06
 dce:	b9 01       	movw	r22, r18
 dd0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 dd4:	9a 83       	std	Y+2, r25	; 0x02
 dd6:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 dd8:	8b 81       	ldd	r24, Y+3	; 0x03
 dda:	9c 81       	ldd	r25, Y+4	; 0x04
 ddc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 de0:	9c 01       	movw	r18, r24
 de2:	89 81       	ldd	r24, Y+1	; 0x01
 de4:	9a 81       	ldd	r25, Y+2	; 0x02
 de6:	82 0f       	add	r24, r18
 de8:	93 1f       	adc	r25, r19
 dea:	9a 83       	std	Y+2, r25	; 0x02
 dec:	89 83       	std	Y+1, r24	; 0x01
  return n;
 dee:	89 81       	ldd	r24, Y+1	; 0x01
 df0:	9a 81       	ldd	r25, Y+2	; 0x02
}
 df2:	26 96       	adiw	r28, 0x06	; 6
 df4:	0f b6       	in	r0, 0x3f	; 63
 df6:	f8 94       	cli
 df8:	de bf       	out	0x3e, r29	; 62
 dfa:	0f be       	out	0x3f, r0	; 63
 dfc:	cd bf       	out	0x3d, r28	; 61
 dfe:	cf 91       	pop	r28
 e00:	df 91       	pop	r29
 e02:	08 95       	ret

00000e04 <_ZN5PrintD0Ev>:
#include <math.h>
#include "Arduino.h"

#include "Print.h"

Print::~Print()
 e04:	df 93       	push	r29
 e06:	cf 93       	push	r28
 e08:	00 d0       	rcall	.+0      	; 0xe0a <_ZN5PrintD0Ev+0x6>
 e0a:	cd b7       	in	r28, 0x3d	; 61
 e0c:	de b7       	in	r29, 0x3e	; 62
 e0e:	9a 83       	std	Y+2, r25	; 0x02
 e10:	89 83       	std	Y+1, r24	; 0x01
 e12:	e9 81       	ldd	r30, Y+1	; 0x01
 e14:	fa 81       	ldd	r31, Y+2	; 0x02
 e16:	80 e0       	ldi	r24, 0x00	; 0
 e18:	90 e0       	ldi	r25, 0x00	; 0
 e1a:	91 83       	std	Z+1, r25	; 0x01
 e1c:	80 83       	st	Z, r24
{
}
 e1e:	81 e0       	ldi	r24, 0x01	; 1
 e20:	90 e0       	ldi	r25, 0x00	; 0
 e22:	88 23       	and	r24, r24
 e24:	01 f0       	breq	.+0      	; 0xe26 <_ZN5PrintD0Ev+0x22>
 e26:	89 81       	ldd	r24, Y+1	; 0x01
 e28:	9a 81       	ldd	r25, Y+2	; 0x02
 e2a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 e2e:	0f 90       	pop	r0
 e30:	0f 90       	pop	r0
 e32:	cf 91       	pop	r28
 e34:	df 91       	pop	r29
 e36:	08 95       	ret

00000e38 <_ZN5PrintD1Ev>:
#include <math.h>
#include "Arduino.h"

#include "Print.h"

Print::~Print()
 e38:	df 93       	push	r29
 e3a:	cf 93       	push	r28
 e3c:	00 d0       	rcall	.+0      	; 0xe3e <_ZN5PrintD1Ev+0x6>
 e3e:	cd b7       	in	r28, 0x3d	; 61
 e40:	de b7       	in	r29, 0x3e	; 62
 e42:	9a 83       	std	Y+2, r25	; 0x02
 e44:	89 83       	std	Y+1, r24	; 0x01
 e46:	e9 81       	ldd	r30, Y+1	; 0x01
 e48:	fa 81       	ldd	r31, Y+2	; 0x02
 e4a:	80 e0       	ldi	r24, 0x00	; 0
 e4c:	90 e0       	ldi	r25, 0x00	; 0
 e4e:	91 83       	std	Z+1, r25	; 0x01
 e50:	80 83       	st	Z, r24
{
}
 e52:	80 e0       	ldi	r24, 0x00	; 0
 e54:	90 e0       	ldi	r25, 0x00	; 0
 e56:	88 23       	and	r24, r24
 e58:	01 f0       	breq	.+0      	; 0xe5a <_ZN5PrintD1Ev+0x22>
 e5a:	89 81       	ldd	r24, Y+1	; 0x01
 e5c:	9a 81       	ldd	r25, Y+2	; 0x02
 e5e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 e62:	0f 90       	pop	r0
 e64:	0f 90       	pop	r0
 e66:	cf 91       	pop	r28
 e68:	df 91       	pop	r29
 e6a:	08 95       	ret

00000e6c <_ZN5PrintD2Ev>:
#include <math.h>
#include "Arduino.h"

#include "Print.h"

Print::~Print()
 e6c:	df 93       	push	r29
 e6e:	cf 93       	push	r28
 e70:	00 d0       	rcall	.+0      	; 0xe72 <_ZN5PrintD2Ev+0x6>
 e72:	cd b7       	in	r28, 0x3d	; 61
 e74:	de b7       	in	r29, 0x3e	; 62
 e76:	9a 83       	std	Y+2, r25	; 0x02
 e78:	89 83       	std	Y+1, r24	; 0x01
 e7a:	e9 81       	ldd	r30, Y+1	; 0x01
 e7c:	fa 81       	ldd	r31, Y+2	; 0x02
 e7e:	80 e0       	ldi	r24, 0x00	; 0
 e80:	90 e0       	ldi	r25, 0x00	; 0
 e82:	91 83       	std	Z+1, r25	; 0x01
 e84:	80 83       	st	Z, r24
{
}
 e86:	80 e0       	ldi	r24, 0x00	; 0
 e88:	90 e0       	ldi	r25, 0x00	; 0
 e8a:	88 23       	and	r24, r24
 e8c:	01 f0       	breq	.+0      	; 0xe8e <_ZN5PrintD2Ev+0x22>
 e8e:	89 81       	ldd	r24, Y+1	; 0x01
 e90:	9a 81       	ldd	r25, Y+2	; 0x02
 e92:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 e96:	0f 90       	pop	r0
 e98:	0f 90       	pop	r0
 e9a:	cf 91       	pop	r28
 e9c:	df 91       	pop	r29
 e9e:	08 95       	ret

SoftwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000174  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000003bd  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Stream.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009e0  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000001  00000000  00000000  00000a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000a15  2**0
                  ALLOC
  3 .stab         00001074  00000000  00000000  00000a18  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000120c  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ZN6Stream10setTimeoutEm>:
}

// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6Stream10setTimeoutEm+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6Stream10setTimeoutEm+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN6Stream10setTimeoutEm+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	4b 83       	std	Y+3, r20	; 0x03
  14:	5c 83       	std	Y+4, r21	; 0x04
  16:	6d 83       	std	Y+5, r22	; 0x05
  18:	7e 83       	std	Y+6, r23	; 0x06
{
  _timeout = timeout;
  1a:	e9 81       	ldd	r30, Y+1	; 0x01
  1c:	fa 81       	ldd	r31, Y+2	; 0x02
  1e:	8b 81       	ldd	r24, Y+3	; 0x03
  20:	9c 81       	ldd	r25, Y+4	; 0x04
  22:	ad 81       	ldd	r26, Y+5	; 0x05
  24:	be 81       	ldd	r27, Y+6	; 0x06
  26:	84 83       	std	Z+4, r24	; 0x04
  28:	95 83       	std	Z+5, r25	; 0x05
  2a:	a6 83       	std	Z+6, r26	; 0x06
  2c:	b7 83       	std	Z+7, r27	; 0x07
}
  2e:	26 96       	adiw	r28, 0x06	; 6
  30:	0f b6       	in	r0, 0x3f	; 63
  32:	f8 94       	cli
  34:	de bf       	out	0x3e, r29	; 62
  36:	0f be       	out	0x3f, r0	; 63
  38:	cd bf       	out	0x3d, r28	; 61
  3a:	cf 91       	pop	r28
  3c:	df 91       	pop	r29
  3e:	08 95       	ret

00000040 <_ZN6StringpLEc>:
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
  40:	df 93       	push	r29
  42:	cf 93       	push	r28
  44:	00 d0       	rcall	.+0      	; 0x46 <_ZN6StringpLEc+0x6>
  46:	0f 92       	push	r0
  48:	cd b7       	in	r28, 0x3d	; 61
  4a:	de b7       	in	r29, 0x3e	; 62
  4c:	9a 83       	std	Y+2, r25	; 0x02
  4e:	89 83       	std	Y+1, r24	; 0x01
  50:	6b 83       	std	Y+3, r22	; 0x03
  52:	89 81       	ldd	r24, Y+1	; 0x01
  54:	9a 81       	ldd	r25, Y+2	; 0x02
  56:	6b 81       	ldd	r22, Y+3	; 0x03
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
  5c:	89 81       	ldd	r24, Y+1	; 0x01
  5e:	9a 81       	ldd	r25, Y+2	; 0x02
  60:	0f 90       	pop	r0
  62:	0f 90       	pop	r0
  64:	0f 90       	pop	r0
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	08 95       	ret

0000006c <_ZN6Stream9timedPeekEv>:
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	27 97       	sbiw	r28, 0x07	; 7
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	9c 83       	std	Y+4, r25	; 0x04
  82:	8b 83       	std	Y+3, r24	; 0x03
{
  int c;
  _startMillis = millis();
  84:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
  88:	dc 01       	movw	r26, r24
  8a:	cb 01       	movw	r24, r22
  8c:	eb 81       	ldd	r30, Y+3	; 0x03
  8e:	fc 81       	ldd	r31, Y+4	; 0x04
  90:	80 87       	std	Z+8, r24	; 0x08
  92:	91 87       	std	Z+9, r25	; 0x09
  94:	a2 87       	std	Z+10, r26	; 0x0a
  96:	b3 87       	std	Z+11, r27	; 0x0b
  do {
    c = peek();
  98:	eb 81       	ldd	r30, Y+3	; 0x03
  9a:	fc 81       	ldd	r31, Y+4	; 0x04
  9c:	80 81       	ld	r24, Z
  9e:	91 81       	ldd	r25, Z+1	; 0x01
  a0:	fc 01       	movw	r30, r24
  a2:	3c 96       	adiw	r30, 0x0c	; 12
  a4:	01 90       	ld	r0, Z+
  a6:	f0 81       	ld	r31, Z
  a8:	e0 2d       	mov	r30, r0
  aa:	8b 81       	ldd	r24, Y+3	; 0x03
  ac:	9c 81       	ldd	r25, Y+4	; 0x04
  ae:	09 95       	icall
  b0:	9a 83       	std	Y+2, r25	; 0x02
  b2:	89 83       	std	Y+1, r24	; 0x01
    if (c >= 0) return c;
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	9a 81       	ldd	r25, Y+2	; 0x02
  b8:	99 23       	and	r25, r25
  ba:	04 f0       	brlt	.+0      	; 0xbc <_ZN6Stream9timedPeekEv+0x50>
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	9a 81       	ldd	r25, Y+2	; 0x02
  c0:	9e 83       	std	Y+6, r25	; 0x06
  c2:	8d 83       	std	Y+5, r24	; 0x05
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_ZN6Stream9timedPeekEv+0x5a>
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  _startMillis = millis();
  do {
  c6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
  ca:	9b 01       	movw	r18, r22
  cc:	ac 01       	movw	r20, r24
  ce:	eb 81       	ldd	r30, Y+3	; 0x03
  d0:	fc 81       	ldd	r31, Y+4	; 0x04
  d2:	80 85       	ldd	r24, Z+8	; 0x08
  d4:	91 85       	ldd	r25, Z+9	; 0x09
  d6:	a2 85       	ldd	r26, Z+10	; 0x0a
  d8:	b3 85       	ldd	r27, Z+11	; 0x0b
  da:	28 1b       	sub	r18, r24
  dc:	39 0b       	sbc	r19, r25
  de:	4a 0b       	sbc	r20, r26
  e0:	5b 0b       	sbc	r21, r27
  e2:	eb 81       	ldd	r30, Y+3	; 0x03
  e4:	fc 81       	ldd	r31, Y+4	; 0x04
  e6:	84 81       	ldd	r24, Z+4	; 0x04
  e8:	95 81       	ldd	r25, Z+5	; 0x05
  ea:	a6 81       	ldd	r26, Z+6	; 0x06
  ec:	b7 81       	ldd	r27, Z+7	; 0x07
  ee:	1f 82       	std	Y+7, r1	; 0x07
  f0:	28 17       	cp	r18, r24
  f2:	39 07       	cpc	r19, r25
  f4:	4a 07       	cpc	r20, r26
  f6:	5b 07       	cpc	r21, r27
  f8:	00 f4       	brcc	.+0      	; 0xfa <_ZN6Stream9timedPeekEv+0x8e>
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	9f 83       	std	Y+7, r25	; 0x07
  fe:	8f 81       	ldd	r24, Y+7	; 0x07
 100:	88 23       	and	r24, r24
 102:	01 f4       	brne	.+0      	; 0x104 <_ZN6Stream9timedPeekEv+0x98>
    c = peek();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	9f ef       	ldi	r25, 0xFF	; 255
 108:	9e 83       	std	Y+6, r25	; 0x06
 10a:	8d 83       	std	Y+5, r24	; 0x05
 10c:	8d 81       	ldd	r24, Y+5	; 0x05
 10e:	9e 81       	ldd	r25, Y+6	; 0x06
}
 110:	27 96       	adiw	r28, 0x07	; 7
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	00 d0       	rcall	.+0      	; 0x128 <_ZN6Stream13peekNextDigitEv+0x6>
 128:	00 d0       	rcall	.+0      	; 0x12a <_ZN6Stream13peekNextDigitEv+0x8>
 12a:	00 d0       	rcall	.+0      	; 0x12c <_ZN6Stream13peekNextDigitEv+0xa>
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	9c 83       	std	Y+4, r25	; 0x04
 132:	8b 83       	std	Y+3, r24	; 0x03
{
  int c;
  while (1) {
    c = timedPeek();
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	9c 81       	ldd	r25, Y+4	; 0x04
 138:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 13c:	9a 83       	std	Y+2, r25	; 0x02
 13e:	89 83       	std	Y+1, r24	; 0x01
    if (c < 0) return c;  // timeout
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	9a 81       	ldd	r25, Y+2	; 0x02
 144:	99 23       	and	r25, r25
 146:	04 f4       	brge	.+0      	; 0x148 <_ZN6Stream13peekNextDigitEv+0x26>
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	9a 81       	ldd	r25, Y+2	; 0x02
 14c:	9e 83       	std	Y+6, r25	; 0x06
 14e:	8d 83       	std	Y+5, r24	; 0x05
 150:	00 c0       	rjmp	.+0      	; 0x152 <_ZN6Stream13peekNextDigitEv+0x30>
    if (c == '-') return c;
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	8d 32       	cpi	r24, 0x2D	; 45
 158:	91 05       	cpc	r25, r1
 15a:	01 f4       	brne	.+0      	; 0x15c <_ZN6Stream13peekNextDigitEv+0x3a>
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	9a 81       	ldd	r25, Y+2	; 0x02
 160:	9e 83       	std	Y+6, r25	; 0x06
 162:	8d 83       	std	Y+5, r24	; 0x05
 164:	00 c0       	rjmp	.+0      	; 0x166 <_ZN6Stream13peekNextDigitEv+0x44>
    if (c >= '0' && c <= '9') return c;
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9a 81       	ldd	r25, Y+2	; 0x02
 16a:	80 33       	cpi	r24, 0x30	; 48
 16c:	91 05       	cpc	r25, r1
 16e:	04 f0       	brlt	.+0      	; 0x170 <_ZN6Stream13peekNextDigitEv+0x4e>
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	9a 81       	ldd	r25, Y+2	; 0x02
 174:	8a 33       	cpi	r24, 0x3A	; 58
 176:	91 05       	cpc	r25, r1
 178:	04 f4       	brge	.+0      	; 0x17a <_ZN6Stream13peekNextDigitEv+0x58>
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	9a 81       	ldd	r25, Y+2	; 0x02
 17e:	9e 83       	std	Y+6, r25	; 0x06
 180:	8d 83       	std	Y+5, r24	; 0x05
 182:	00 c0       	rjmp	.+0      	; 0x184 <_ZN6Stream13peekNextDigitEv+0x62>
    read();  // discard non-numeric
 184:	eb 81       	ldd	r30, Y+3	; 0x03
 186:	fc 81       	ldd	r31, Y+4	; 0x04
 188:	80 81       	ld	r24, Z
 18a:	91 81       	ldd	r25, Z+1	; 0x01
 18c:	fc 01       	movw	r30, r24
 18e:	3a 96       	adiw	r30, 0x0a	; 10
 190:	01 90       	ld	r0, Z+
 192:	f0 81       	ld	r31, Z
 194:	e0 2d       	mov	r30, r0
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	9c 81       	ldd	r25, Y+4	; 0x04
 19a:	09 95       	icall
 19c:	00 c0       	rjmp	.+0      	; 0x19e <_ZN6Stream13peekNextDigitEv+0x7c>
// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
 19e:	8d 81       	ldd	r24, Y+5	; 0x05
 1a0:	9e 81       	ldd	r25, Y+6	; 0x06
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
 1a2:	26 96       	adiw	r28, 0x06	; 6
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
 1ae:	cf 91       	pop	r28
 1b0:	df 91       	pop	r29
 1b2:	08 95       	ret

000001b4 <_ZN6Stream10parseFloatEc>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
 1b4:	df 93       	push	r29
 1b6:	cf 93       	push	r28
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	62 97       	sbiw	r28, 0x12	; 18
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
 1c8:	9d 87       	std	Y+13, r25	; 0x0d
 1ca:	8c 87       	std	Y+12, r24	; 0x0c
 1cc:	6e 87       	std	Y+14, r22	; 0x0e
  boolean isNegative = false;
 1ce:	1b 86       	std	Y+11, r1	; 0x0b
  boolean isFraction = false;
 1d0:	1a 86       	std	Y+10, r1	; 0x0a
  long value = 0;
 1d2:	1e 82       	std	Y+6, r1	; 0x06
 1d4:	1f 82       	std	Y+7, r1	; 0x07
 1d6:	18 86       	std	Y+8, r1	; 0x08
 1d8:	19 86       	std	Y+9, r1	; 0x09
  char c;
  float fraction = 1.0;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	a0 e8       	ldi	r26, 0x80	; 128
 1e0:	bf e3       	ldi	r27, 0x3F	; 63
 1e2:	89 83       	std	Y+1, r24	; 0x01
 1e4:	9a 83       	std	Y+2, r25	; 0x02
 1e6:	ab 83       	std	Y+3, r26	; 0x03
 1e8:	bc 83       	std	Y+4, r27	; 0x04

  c = peekNextDigit();
 1ea:	8c 85       	ldd	r24, Y+12	; 0x0c
 1ec:	9d 85       	ldd	r25, Y+13	; 0x0d
 1ee:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 1f2:	8d 83       	std	Y+5, r24	; 0x05
    // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
 1f4:	9d 81       	ldd	r25, Y+5	; 0x05
 1f6:	8e 85       	ldd	r24, Y+14	; 0x0e
 1f8:	98 17       	cp	r25, r24
 1fa:	01 f4       	brne	.+0      	; 0x1fc <_ZN6Stream10parseFloatEc+0x48>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <_ZN6Stream10parseFloatEc+0x4a>
      ; // ignore
    else if(c == '-')
 1fe:	8d 81       	ldd	r24, Y+5	; 0x05
 200:	8d 32       	cpi	r24, 0x2D	; 45
 202:	01 f4       	brne	.+0      	; 0x204 <_ZN6Stream10parseFloatEc+0x50>
      isNegative = true;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	8b 87       	std	Y+11, r24	; 0x0b
 208:	00 c0       	rjmp	.+0      	; 0x20a <_ZN6Stream10parseFloatEc+0x56>
    else if (c == '.')
 20a:	8d 81       	ldd	r24, Y+5	; 0x05
 20c:	8e 32       	cpi	r24, 0x2E	; 46
 20e:	01 f4       	brne	.+0      	; 0x210 <_ZN6Stream10parseFloatEc+0x5c>
      isFraction = true;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	8a 87       	std	Y+10, r24	; 0x0a
 214:	00 c0       	rjmp	.+0      	; 0x216 <_ZN6Stream10parseFloatEc+0x62>
    else if(c >= '0' && c <= '9')  {      // is c a digit?
 216:	8d 81       	ldd	r24, Y+5	; 0x05
 218:	80 33       	cpi	r24, 0x30	; 48
 21a:	00 f0       	brcs	.+0      	; 0x21c <_ZN6Stream10parseFloatEc+0x68>
 21c:	8d 81       	ldd	r24, Y+5	; 0x05
 21e:	8a 33       	cpi	r24, 0x3A	; 58
 220:	00 f4       	brcc	.+0      	; 0x222 <_ZN6Stream10parseFloatEc+0x6e>
      value = value * 10 + c - '0';
 222:	8e 81       	ldd	r24, Y+6	; 0x06
 224:	9f 81       	ldd	r25, Y+7	; 0x07
 226:	a8 85       	ldd	r26, Y+8	; 0x08
 228:	b9 85       	ldd	r27, Y+9	; 0x09
 22a:	2a e0       	ldi	r18, 0x0A	; 10
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	bc 01       	movw	r22, r24
 234:	cd 01       	movw	r24, r26
 236:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 23a:	9b 01       	movw	r18, r22
 23c:	ac 01       	movw	r20, r24
 23e:	8d 81       	ldd	r24, Y+5	; 0x05
 240:	88 2f       	mov	r24, r24
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	a0 e0       	ldi	r26, 0x00	; 0
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	82 0f       	add	r24, r18
 24a:	93 1f       	adc	r25, r19
 24c:	a4 1f       	adc	r26, r20
 24e:	b5 1f       	adc	r27, r21
 250:	c0 97       	sbiw	r24, 0x30	; 48
 252:	a1 09       	sbc	r26, r1
 254:	b1 09       	sbc	r27, r1
 256:	8e 83       	std	Y+6, r24	; 0x06
 258:	9f 83       	std	Y+7, r25	; 0x07
 25a:	a8 87       	std	Y+8, r26	; 0x08
 25c:	b9 87       	std	Y+9, r27	; 0x09
      if(isFraction)
 25e:	8a 85       	ldd	r24, Y+10	; 0x0a
 260:	88 23       	and	r24, r24
 262:	01 f0       	breq	.+0      	; 0x264 <_ZN6Stream10parseFloatEc+0xb0>
         fraction *= 0.1;
 264:	69 81       	ldd	r22, Y+1	; 0x01
 266:	7a 81       	ldd	r23, Y+2	; 0x02
 268:	8b 81       	ldd	r24, Y+3	; 0x03
 26a:	9c 81       	ldd	r25, Y+4	; 0x04
 26c:	2d ec       	ldi	r18, 0xCD	; 205
 26e:	3c ec       	ldi	r19, 0xCC	; 204
 270:	4c ec       	ldi	r20, 0xCC	; 204
 272:	5d e3       	ldi	r21, 0x3D	; 61
 274:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 278:	dc 01       	movw	r26, r24
 27a:	cb 01       	movw	r24, r22
 27c:	89 83       	std	Y+1, r24	; 0x01
 27e:	9a 83       	std	Y+2, r25	; 0x02
 280:	ab 83       	std	Y+3, r26	; 0x03
 282:	bc 83       	std	Y+4, r27	; 0x04
    }
    read();  // consume the character we got with peek
 284:	ec 85       	ldd	r30, Y+12	; 0x0c
 286:	fd 85       	ldd	r31, Y+13	; 0x0d
 288:	80 81       	ld	r24, Z
 28a:	91 81       	ldd	r25, Z+1	; 0x01
 28c:	fc 01       	movw	r30, r24
 28e:	3a 96       	adiw	r30, 0x0a	; 10
 290:	01 90       	ld	r0, Z+
 292:	f0 81       	ld	r31, Z
 294:	e0 2d       	mov	r30, r0
 296:	8c 85       	ldd	r24, Y+12	; 0x0c
 298:	9d 85       	ldd	r25, Y+13	; 0x0d
 29a:	09 95       	icall
    c = timedPeek();
 29c:	8c 85       	ldd	r24, Y+12	; 0x0c
 29e:	9d 85       	ldd	r25, Y+13	; 0x0d
 2a0:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 2a4:	8d 83       	std	Y+5, r24	; 0x05
  c = peekNextDigit();
    // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
 2a6:	8d 81       	ldd	r24, Y+5	; 0x05
 2a8:	80 33       	cpi	r24, 0x30	; 48
 2aa:	00 f0       	brcs	.+0      	; 0x2ac <_ZN6Stream10parseFloatEc+0xf8>
 2ac:	8d 81       	ldd	r24, Y+5	; 0x05
 2ae:	8a 33       	cpi	r24, 0x3A	; 58
 2b0:	00 f4       	brcc	.+0      	; 0x2b2 <_ZN6Stream10parseFloatEc+0xfe>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <_ZN6Stream10parseFloatEc+0x100>
 2b4:	8d 81       	ldd	r24, Y+5	; 0x05
 2b6:	8e 32       	cpi	r24, 0x2E	; 46
 2b8:	01 f4       	brne	.+0      	; 0x2ba <_ZN6Stream10parseFloatEc+0x106>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <_ZN6Stream10parseFloatEc+0x108>
 2bc:	9d 81       	ldd	r25, Y+5	; 0x05
 2be:	8e 85       	ldd	r24, Y+14	; 0x0e
 2c0:	98 17       	cp	r25, r24
 2c2:	01 f4       	brne	.+0      	; 0x2c4 <_ZN6Stream10parseFloatEc+0x110>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <_ZN6Stream10parseFloatEc+0x112>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );

  if(isNegative)
 2c6:	8b 85       	ldd	r24, Y+11	; 0x0b
 2c8:	88 23       	and	r24, r24
 2ca:	01 f0       	breq	.+0      	; 0x2cc <_ZN6Stream10parseFloatEc+0x118>
    value = -value;
 2cc:	8e 81       	ldd	r24, Y+6	; 0x06
 2ce:	9f 81       	ldd	r25, Y+7	; 0x07
 2d0:	a8 85       	ldd	r26, Y+8	; 0x08
 2d2:	b9 85       	ldd	r27, Y+9	; 0x09
 2d4:	b0 95       	com	r27
 2d6:	a0 95       	com	r26
 2d8:	90 95       	com	r25
 2da:	81 95       	neg	r24
 2dc:	9f 4f       	sbci	r25, 0xFF	; 255
 2de:	af 4f       	sbci	r26, 0xFF	; 255
 2e0:	bf 4f       	sbci	r27, 0xFF	; 255
 2e2:	8e 83       	std	Y+6, r24	; 0x06
 2e4:	9f 83       	std	Y+7, r25	; 0x07
 2e6:	a8 87       	std	Y+8, r26	; 0x08
 2e8:	b9 87       	std	Y+9, r27	; 0x09
  if(isFraction)
 2ea:	8a 85       	ldd	r24, Y+10	; 0x0a
 2ec:	88 23       	and	r24, r24
 2ee:	01 f0       	breq	.+0      	; 0x2f0 <_ZN6Stream10parseFloatEc+0x13c>
    return value * fraction;
 2f0:	6e 81       	ldd	r22, Y+6	; 0x06
 2f2:	7f 81       	ldd	r23, Y+7	; 0x07
 2f4:	88 85       	ldd	r24, Y+8	; 0x08
 2f6:	99 85       	ldd	r25, Y+9	; 0x09
 2f8:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 2fc:	dc 01       	movw	r26, r24
 2fe:	cb 01       	movw	r24, r22
 300:	bc 01       	movw	r22, r24
 302:	cd 01       	movw	r24, r26
 304:	29 81       	ldd	r18, Y+1	; 0x01
 306:	3a 81       	ldd	r19, Y+2	; 0x02
 308:	4b 81       	ldd	r20, Y+3	; 0x03
 30a:	5c 81       	ldd	r21, Y+4	; 0x04
 30c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 310:	dc 01       	movw	r26, r24
 312:	cb 01       	movw	r24, r22
 314:	8f 87       	std	Y+15, r24	; 0x0f
 316:	98 8b       	std	Y+16, r25	; 0x10
 318:	a9 8b       	std	Y+17, r26	; 0x11
 31a:	ba 8b       	std	Y+18, r27	; 0x12
 31c:	00 c0       	rjmp	.+0      	; 0x31e <_ZN6Stream10parseFloatEc+0x16a>
  else
    return value;
 31e:	6e 81       	ldd	r22, Y+6	; 0x06
 320:	7f 81       	ldd	r23, Y+7	; 0x07
 322:	88 85       	ldd	r24, Y+8	; 0x08
 324:	99 85       	ldd	r25, Y+9	; 0x09
 326:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 32a:	6f 87       	std	Y+15, r22	; 0x0f
 32c:	78 8b       	std	Y+16, r23	; 0x10
 32e:	89 8b       	std	Y+17, r24	; 0x11
 330:	9a 8b       	std	Y+18, r25	; 0x12
 332:	8f 85       	ldd	r24, Y+15	; 0x0f
 334:	98 89       	ldd	r25, Y+16	; 0x10
 336:	a9 89       	ldd	r26, Y+17	; 0x11
 338:	ba 89       	ldd	r27, Y+18	; 0x12
}
 33a:	bc 01       	movw	r22, r24
 33c:	cd 01       	movw	r24, r26
 33e:	62 96       	adiw	r28, 0x12	; 18
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	f8 94       	cli
 344:	de bf       	out	0x3e, r29	; 62
 346:	0f be       	out	0x3f, r0	; 63
 348:	cd bf       	out	0x3d, r28	; 61
 34a:	cf 91       	pop	r28
 34c:	df 91       	pop	r29
 34e:	08 95       	ret

00000350 <_ZN6Stream10parseFloatEv>:
  return value;
}


// as parseInt but returns a floating point value
float Stream::parseFloat()
 350:	df 93       	push	r29
 352:	cf 93       	push	r28
 354:	00 d0       	rcall	.+0      	; 0x356 <_ZN6Stream10parseFloatEv+0x6>
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	9a 83       	std	Y+2, r25	; 0x02
 35c:	89 83       	std	Y+1, r24	; 0x01
{
  return parseFloat(NO_SKIP_CHAR);
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	9a 81       	ldd	r25, Y+2	; 0x02
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 368:	dc 01       	movw	r26, r24
 36a:	cb 01       	movw	r24, r22
}
 36c:	bc 01       	movw	r22, r24
 36e:	cd 01       	movw	r24, r26
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	cf 91       	pop	r28
 376:	df 91       	pop	r29
 378:	08 95       	ret

0000037a <_ZN6Stream8parseIntEc>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
 37a:	df 93       	push	r29
 37c:	cf 93       	push	r28
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	2e 97       	sbiw	r28, 0x0e	; 14
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61
 38e:	99 87       	std	Y+9, r25	; 0x09
 390:	88 87       	std	Y+8, r24	; 0x08
 392:	6a 87       	std	Y+10, r22	; 0x0a
{
  boolean isNegative = false;
 394:	1f 82       	std	Y+7, r1	; 0x07
  long value = 0;
 396:	1b 82       	std	Y+3, r1	; 0x03
 398:	1c 82       	std	Y+4, r1	; 0x04
 39a:	1d 82       	std	Y+5, r1	; 0x05
 39c:	1e 82       	std	Y+6, r1	; 0x06
  int c;

  c = peekNextDigit();
 39e:	88 85       	ldd	r24, Y+8	; 0x08
 3a0:	99 85       	ldd	r25, Y+9	; 0x09
 3a2:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 3a6:	9a 83       	std	Y+2, r25	; 0x02
 3a8:	89 83       	std	Y+1, r24	; 0x01
  // ignore non numeric leading characters
  if(c < 0)
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	9a 81       	ldd	r25, Y+2	; 0x02
 3ae:	99 23       	and	r25, r25
 3b0:	04 f4       	brge	.+0      	; 0x3b2 <_ZN6Stream8parseIntEc+0x38>
    return 0; // zero returned if timeout
 3b2:	1b 86       	std	Y+11, r1	; 0x0b
 3b4:	1c 86       	std	Y+12, r1	; 0x0c
 3b6:	1d 86       	std	Y+13, r1	; 0x0d
 3b8:	1e 86       	std	Y+14, r1	; 0x0e
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <_ZN6Stream8parseIntEc+0x42>

  do{
    if(c == skipChar)
 3bc:	8a 85       	ldd	r24, Y+10	; 0x0a
 3be:	28 2f       	mov	r18, r24
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	9a 81       	ldd	r25, Y+2	; 0x02
 3c6:	28 17       	cp	r18, r24
 3c8:	39 07       	cpc	r19, r25
 3ca:	01 f0       	breq	.+0      	; 0x3cc <_ZN6Stream8parseIntEc+0x52>
      ; // ignore this charactor
    else if(c == '-')
 3cc:	89 81       	ldd	r24, Y+1	; 0x01
 3ce:	9a 81       	ldd	r25, Y+2	; 0x02
 3d0:	8d 32       	cpi	r24, 0x2D	; 45
 3d2:	91 05       	cpc	r25, r1
 3d4:	01 f4       	brne	.+0      	; 0x3d6 <_ZN6Stream8parseIntEc+0x5c>
      isNegative = true;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	8f 83       	std	Y+7, r24	; 0x07
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <_ZN6Stream8parseIntEc+0x62>
    else if(c >= '0' && c <= '9')        // is c a digit?
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	9a 81       	ldd	r25, Y+2	; 0x02
 3e0:	80 33       	cpi	r24, 0x30	; 48
 3e2:	91 05       	cpc	r25, r1
 3e4:	04 f0       	brlt	.+0      	; 0x3e6 <_ZN6Stream8parseIntEc+0x6c>
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ea:	8a 33       	cpi	r24, 0x3A	; 58
 3ec:	91 05       	cpc	r25, r1
 3ee:	04 f4       	brge	.+0      	; 0x3f0 <_ZN6Stream8parseIntEc+0x76>
      value = value * 10 + c - '0';
 3f0:	8b 81       	ldd	r24, Y+3	; 0x03
 3f2:	9c 81       	ldd	r25, Y+4	; 0x04
 3f4:	ad 81       	ldd	r26, Y+5	; 0x05
 3f6:	be 81       	ldd	r27, Y+6	; 0x06
 3f8:	2a e0       	ldi	r18, 0x0A	; 10
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	bc 01       	movw	r22, r24
 402:	cd 01       	movw	r24, r26
 404:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 408:	9b 01       	movw	r18, r22
 40a:	ac 01       	movw	r20, r24
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	9a 81       	ldd	r25, Y+2	; 0x02
 410:	aa 27       	eor	r26, r26
 412:	97 fd       	sbrc	r25, 7
 414:	a0 95       	com	r26
 416:	ba 2f       	mov	r27, r26
 418:	82 0f       	add	r24, r18
 41a:	93 1f       	adc	r25, r19
 41c:	a4 1f       	adc	r26, r20
 41e:	b5 1f       	adc	r27, r21
 420:	c0 97       	sbiw	r24, 0x30	; 48
 422:	a1 09       	sbc	r26, r1
 424:	b1 09       	sbc	r27, r1
 426:	8b 83       	std	Y+3, r24	; 0x03
 428:	9c 83       	std	Y+4, r25	; 0x04
 42a:	ad 83       	std	Y+5, r26	; 0x05
 42c:	be 83       	std	Y+6, r27	; 0x06
    read();  // consume the character we got with peek
 42e:	e8 85       	ldd	r30, Y+8	; 0x08
 430:	f9 85       	ldd	r31, Y+9	; 0x09
 432:	80 81       	ld	r24, Z
 434:	91 81       	ldd	r25, Z+1	; 0x01
 436:	fc 01       	movw	r30, r24
 438:	3a 96       	adiw	r30, 0x0a	; 10
 43a:	01 90       	ld	r0, Z+
 43c:	f0 81       	ld	r31, Z
 43e:	e0 2d       	mov	r30, r0
 440:	88 85       	ldd	r24, Y+8	; 0x08
 442:	99 85       	ldd	r25, Y+9	; 0x09
 444:	09 95       	icall
    c = timedPeek();
 446:	88 85       	ldd	r24, Y+8	; 0x08
 448:	99 85       	ldd	r25, Y+9	; 0x09
 44a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 44e:	9a 83       	std	Y+2, r25	; 0x02
 450:	89 83       	std	Y+1, r24	; 0x01
  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	9a 81       	ldd	r25, Y+2	; 0x02
 456:	80 33       	cpi	r24, 0x30	; 48
 458:	91 05       	cpc	r25, r1
 45a:	04 f0       	brlt	.+0      	; 0x45c <_ZN6Stream8parseIntEc+0xe2>
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	9a 81       	ldd	r25, Y+2	; 0x02
 460:	8a 33       	cpi	r24, 0x3A	; 58
 462:	91 05       	cpc	r25, r1
 464:	04 f4       	brge	.+0      	; 0x466 <_ZN6Stream8parseIntEc+0xec>
 466:	00 c0       	rjmp	.+0      	; 0x468 <_ZN6Stream8parseIntEc+0xee>
 468:	8a 85       	ldd	r24, Y+10	; 0x0a
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	89 81       	ldd	r24, Y+1	; 0x01
 470:	9a 81       	ldd	r25, Y+2	; 0x02
 472:	28 17       	cp	r18, r24
 474:	39 07       	cpc	r19, r25
 476:	01 f4       	brne	.+0      	; 0x478 <_ZN6Stream8parseIntEc+0xfe>
 478:	00 c0       	rjmp	.+0      	; 0x47a <_ZN6Stream8parseIntEc+0x100>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
 47a:	8f 81       	ldd	r24, Y+7	; 0x07
 47c:	88 23       	and	r24, r24
 47e:	01 f0       	breq	.+0      	; 0x480 <_ZN6Stream8parseIntEc+0x106>
    value = -value;
 480:	8b 81       	ldd	r24, Y+3	; 0x03
 482:	9c 81       	ldd	r25, Y+4	; 0x04
 484:	ad 81       	ldd	r26, Y+5	; 0x05
 486:	be 81       	ldd	r27, Y+6	; 0x06
 488:	b0 95       	com	r27
 48a:	a0 95       	com	r26
 48c:	90 95       	com	r25
 48e:	81 95       	neg	r24
 490:	9f 4f       	sbci	r25, 0xFF	; 255
 492:	af 4f       	sbci	r26, 0xFF	; 255
 494:	bf 4f       	sbci	r27, 0xFF	; 255
 496:	8b 83       	std	Y+3, r24	; 0x03
 498:	9c 83       	std	Y+4, r25	; 0x04
 49a:	ad 83       	std	Y+5, r26	; 0x05
 49c:	be 83       	std	Y+6, r27	; 0x06
  return value;
 49e:	8b 81       	ldd	r24, Y+3	; 0x03
 4a0:	9c 81       	ldd	r25, Y+4	; 0x04
 4a2:	ad 81       	ldd	r26, Y+5	; 0x05
 4a4:	be 81       	ldd	r27, Y+6	; 0x06
 4a6:	8b 87       	std	Y+11, r24	; 0x0b
 4a8:	9c 87       	std	Y+12, r25	; 0x0c
 4aa:	ad 87       	std	Y+13, r26	; 0x0d
 4ac:	be 87       	std	Y+14, r27	; 0x0e
 4ae:	8b 85       	ldd	r24, Y+11	; 0x0b
 4b0:	9c 85       	ldd	r25, Y+12	; 0x0c
 4b2:	ad 85       	ldd	r26, Y+13	; 0x0d
 4b4:	be 85       	ldd	r27, Y+14	; 0x0e
}
 4b6:	bc 01       	movw	r22, r24
 4b8:	cd 01       	movw	r24, r26
 4ba:	2e 96       	adiw	r28, 0x0e	; 14
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	f8 94       	cli
 4c0:	de bf       	out	0x3e, r29	; 62
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	cd bf       	out	0x3d, r28	; 61
 4c6:	cf 91       	pop	r28
 4c8:	df 91       	pop	r29
 4ca:	08 95       	ret

000004cc <_ZN6Stream8parseIntEv>:


// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
 4cc:	df 93       	push	r29
 4ce:	cf 93       	push	r28
 4d0:	00 d0       	rcall	.+0      	; 0x4d2 <_ZN6Stream8parseIntEv+0x6>
 4d2:	cd b7       	in	r28, 0x3d	; 61
 4d4:	de b7       	in	r29, 0x3e	; 62
 4d6:	9a 83       	std	Y+2, r25	; 0x02
 4d8:	89 83       	std	Y+1, r24	; 0x01
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
 4da:	89 81       	ldd	r24, Y+1	; 0x01
 4dc:	9a 81       	ldd	r25, Y+2	; 0x02
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 4e4:	dc 01       	movw	r26, r24
 4e6:	cb 01       	movw	r24, r22
}
 4e8:	bc 01       	movw	r22, r24
 4ea:	cd 01       	movw	r24, r26
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	cf 91       	pop	r28
 4f2:	df 91       	pop	r29
 4f4:	08 95       	ret

000004f6 <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
 4f6:	df 93       	push	r29
 4f8:	cf 93       	push	r28
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	27 97       	sbiw	r28, 0x07	; 7
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	9c 83       	std	Y+4, r25	; 0x04
 50c:	8b 83       	std	Y+3, r24	; 0x03
{
  int c;
  _startMillis = millis();
 50e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 512:	dc 01       	movw	r26, r24
 514:	cb 01       	movw	r24, r22
 516:	eb 81       	ldd	r30, Y+3	; 0x03
 518:	fc 81       	ldd	r31, Y+4	; 0x04
 51a:	80 87       	std	Z+8, r24	; 0x08
 51c:	91 87       	std	Z+9, r25	; 0x09
 51e:	a2 87       	std	Z+10, r26	; 0x0a
 520:	b3 87       	std	Z+11, r27	; 0x0b
  do {
    c = read();
 522:	eb 81       	ldd	r30, Y+3	; 0x03
 524:	fc 81       	ldd	r31, Y+4	; 0x04
 526:	80 81       	ld	r24, Z
 528:	91 81       	ldd	r25, Z+1	; 0x01
 52a:	fc 01       	movw	r30, r24
 52c:	3a 96       	adiw	r30, 0x0a	; 10
 52e:	01 90       	ld	r0, Z+
 530:	f0 81       	ld	r31, Z
 532:	e0 2d       	mov	r30, r0
 534:	8b 81       	ldd	r24, Y+3	; 0x03
 536:	9c 81       	ldd	r25, Y+4	; 0x04
 538:	09 95       	icall
 53a:	9a 83       	std	Y+2, r25	; 0x02
 53c:	89 83       	std	Y+1, r24	; 0x01
    if (c >= 0) return c;
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	9a 81       	ldd	r25, Y+2	; 0x02
 542:	99 23       	and	r25, r25
 544:	04 f0       	brlt	.+0      	; 0x546 <_ZN6Stream9timedReadEv+0x50>
 546:	89 81       	ldd	r24, Y+1	; 0x01
 548:	9a 81       	ldd	r25, Y+2	; 0x02
 54a:	9e 83       	std	Y+6, r25	; 0x06
 54c:	8d 83       	std	Y+5, r24	; 0x05
 54e:	00 c0       	rjmp	.+0      	; 0x550 <_ZN6Stream9timedReadEv+0x5a>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 550:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 554:	9b 01       	movw	r18, r22
 556:	ac 01       	movw	r20, r24
 558:	eb 81       	ldd	r30, Y+3	; 0x03
 55a:	fc 81       	ldd	r31, Y+4	; 0x04
 55c:	80 85       	ldd	r24, Z+8	; 0x08
 55e:	91 85       	ldd	r25, Z+9	; 0x09
 560:	a2 85       	ldd	r26, Z+10	; 0x0a
 562:	b3 85       	ldd	r27, Z+11	; 0x0b
 564:	28 1b       	sub	r18, r24
 566:	39 0b       	sbc	r19, r25
 568:	4a 0b       	sbc	r20, r26
 56a:	5b 0b       	sbc	r21, r27
 56c:	eb 81       	ldd	r30, Y+3	; 0x03
 56e:	fc 81       	ldd	r31, Y+4	; 0x04
 570:	84 81       	ldd	r24, Z+4	; 0x04
 572:	95 81       	ldd	r25, Z+5	; 0x05
 574:	a6 81       	ldd	r26, Z+6	; 0x06
 576:	b7 81       	ldd	r27, Z+7	; 0x07
 578:	1f 82       	std	Y+7, r1	; 0x07
 57a:	28 17       	cp	r18, r24
 57c:	39 07       	cpc	r19, r25
 57e:	4a 07       	cpc	r20, r26
 580:	5b 07       	cpc	r21, r27
 582:	00 f4       	brcc	.+0      	; 0x584 <_ZN6Stream9timedReadEv+0x8e>
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	9f 83       	std	Y+7, r25	; 0x07
 588:	8f 81       	ldd	r24, Y+7	; 0x07
 58a:	88 23       	and	r24, r24
 58c:	01 f4       	brne	.+0      	; 0x58e <_ZN6Stream9timedReadEv+0x98>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 58e:	8f ef       	ldi	r24, 0xFF	; 255
 590:	9f ef       	ldi	r25, 0xFF	; 255
 592:	9e 83       	std	Y+6, r25	; 0x06
 594:	8d 83       	std	Y+5, r24	; 0x05
 596:	8d 81       	ldd	r24, Y+5	; 0x05
 598:	9e 81       	ldd	r25, Y+6	; 0x06
}
 59a:	27 96       	adiw	r28, 0x07	; 7
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	f8 94       	cli
 5a0:	de bf       	out	0x3e, r29	; 62
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	cd bf       	out	0x3d, r28	; 61
 5a6:	cf 91       	pop	r28
 5a8:	df 91       	pop	r29
 5aa:	08 95       	ret

000005ac <_ZN6Stream15readStringUntilEc>:
    c = timedRead();
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
 5ac:	df 93       	push	r29
 5ae:	cf 93       	push	r28
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
 5b4:	2e 97       	sbiw	r28, 0x0e	; 14
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	f8 94       	cli
 5ba:	de bf       	out	0x3e, r29	; 62
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	cd bf       	out	0x3d, r28	; 61
 5c0:	9e 87       	std	Y+14, r25	; 0x0e
 5c2:	8d 87       	std	Y+13, r24	; 0x0d
 5c4:	7b 87       	std	Y+11, r23	; 0x0b
 5c6:	6a 87       	std	Y+10, r22	; 0x0a
 5c8:	4c 87       	std	Y+12, r20	; 0x0c
{
  String ret;
 5ca:	8d 85       	ldd	r24, Y+13	; 0x0d
 5cc:	9e 85       	ldd	r25, Y+14	; 0x0e
 5ce:	20 e0       	ldi	r18, 0x00	; 0
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	b9 01       	movw	r22, r18
 5d4:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
  int c = timedRead();
 5d8:	8a 85       	ldd	r24, Y+10	; 0x0a
 5da:	9b 85       	ldd	r25, Y+11	; 0x0b
 5dc:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 5e0:	9a 83       	std	Y+2, r25	; 0x02
 5e2:	89 83       	std	Y+1, r24	; 0x01
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <_ZN6Stream15readStringUntilEc+0x3a>
  while (c >= 0 && c != terminator)
  {
    ret += (char)c;
 5e6:	8d 85       	ldd	r24, Y+13	; 0x0d
 5e8:	9e 85       	ldd	r25, Y+14	; 0x0e
 5ea:	29 81       	ldd	r18, Y+1	; 0x01
 5ec:	62 2f       	mov	r22, r18
 5ee:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
    c = timedRead();
 5f2:	8a 85       	ldd	r24, Y+10	; 0x0a
 5f4:	9b 85       	ldd	r25, Y+11	; 0x0b
 5f6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 5fa:	9a 83       	std	Y+2, r25	; 0x02
 5fc:	89 83       	std	Y+1, r24	; 0x01

String Stream::readStringUntil(char terminator)
{
  String ret;
  int c = timedRead();
  while (c >= 0 && c != terminator)
 5fe:	89 81       	ldd	r24, Y+1	; 0x01
 600:	9a 81       	ldd	r25, Y+2	; 0x02
 602:	99 23       	and	r25, r25
 604:	04 f0       	brlt	.+0      	; 0x606 <_ZN6Stream15readStringUntilEc+0x5a>
 606:	8c 85       	ldd	r24, Y+12	; 0x0c
 608:	28 2f       	mov	r18, r24
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	89 81       	ldd	r24, Y+1	; 0x01
 60e:	9a 81       	ldd	r25, Y+2	; 0x02
 610:	28 17       	cp	r18, r24
 612:	39 07       	cpc	r19, r25
 614:	01 f4       	brne	.+0      	; 0x616 <_ZN6Stream15readStringUntilEc+0x6a>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 616:	8d 85       	ldd	r24, Y+13	; 0x0d
 618:	9e 85       	ldd	r25, Y+14	; 0x0e
 61a:	8d 85       	ldd	r24, Y+13	; 0x0d
 61c:	9e 85       	ldd	r25, Y+14	; 0x0e
 61e:	2e 96       	adiw	r28, 0x0e	; 14
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	f8 94       	cli
 624:	de bf       	out	0x3e, r29	; 62
 626:	0f be       	out	0x3f, r0	; 63
 628:	cd bf       	out	0x3d, r28	; 61
 62a:	cf 91       	pop	r28
 62c:	df 91       	pop	r29
 62e:	08 95       	ret

00000630 <_ZN6Stream10readStringEv>:
    index++;
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
 630:	df 93       	push	r29
 632:	cf 93       	push	r28
 634:	cd b7       	in	r28, 0x3d	; 61
 636:	de b7       	in	r29, 0x3e	; 62
 638:	2d 97       	sbiw	r28, 0x0d	; 13
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	f8 94       	cli
 63e:	de bf       	out	0x3e, r29	; 62
 640:	0f be       	out	0x3f, r0	; 63
 642:	cd bf       	out	0x3d, r28	; 61
 644:	9d 87       	std	Y+13, r25	; 0x0d
 646:	8c 87       	std	Y+12, r24	; 0x0c
 648:	7b 87       	std	Y+11, r23	; 0x0b
 64a:	6a 87       	std	Y+10, r22	; 0x0a
{
  String ret;
 64c:	8c 85       	ldd	r24, Y+12	; 0x0c
 64e:	9d 85       	ldd	r25, Y+13	; 0x0d
 650:	20 e0       	ldi	r18, 0x00	; 0
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	b9 01       	movw	r22, r18
 656:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
  int c = timedRead();
 65a:	8a 85       	ldd	r24, Y+10	; 0x0a
 65c:	9b 85       	ldd	r25, Y+11	; 0x0b
 65e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 662:	9a 83       	std	Y+2, r25	; 0x02
 664:	89 83       	std	Y+1, r24	; 0x01
 666:	00 c0       	rjmp	.+0      	; 0x668 <_ZN6Stream10readStringEv+0x38>
  while (c >= 0)
  {
    ret += (char)c;
 668:	8c 85       	ldd	r24, Y+12	; 0x0c
 66a:	9d 85       	ldd	r25, Y+13	; 0x0d
 66c:	29 81       	ldd	r18, Y+1	; 0x01
 66e:	62 2f       	mov	r22, r18
 670:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
    c = timedRead();
 674:	8a 85       	ldd	r24, Y+10	; 0x0a
 676:	9b 85       	ldd	r25, Y+11	; 0x0b
 678:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 67c:	9a 83       	std	Y+2, r25	; 0x02
 67e:	89 83       	std	Y+1, r24	; 0x01

String Stream::readString()
{
  String ret;
  int c = timedRead();
  while (c >= 0)
 680:	89 81       	ldd	r24, Y+1	; 0x01
 682:	9a 81       	ldd	r25, Y+2	; 0x02
 684:	99 23       	and	r25, r25
 686:	04 f4       	brge	.+0      	; 0x688 <_ZN6Stream10readStringEv+0x58>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 688:	8c 85       	ldd	r24, Y+12	; 0x0c
 68a:	9d 85       	ldd	r25, Y+13	; 0x0d
 68c:	8c 85       	ldd	r24, Y+12	; 0x0c
 68e:	9d 85       	ldd	r25, Y+13	; 0x0d
 690:	2d 96       	adiw	r28, 0x0d	; 13
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	f8 94       	cli
 696:	de bf       	out	0x3e, r29	; 62
 698:	0f be       	out	0x3f, r0	; 63
 69a:	cd bf       	out	0x3d, r28	; 61
 69c:	cf 91       	pop	r28
 69e:	df 91       	pop	r29
 6a0:	08 95       	ret

000006a2 <_ZN6Stream14readBytesUntilEcPcj>:

// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
 6a2:	df 93       	push	r29
 6a4:	cf 93       	push	r28
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	2d 97       	sbiw	r28, 0x0d	; 13
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	f8 94       	cli
 6b0:	de bf       	out	0x3e, r29	; 62
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	cd bf       	out	0x3d, r28	; 61
 6b6:	9e 83       	std	Y+6, r25	; 0x06
 6b8:	8d 83       	std	Y+5, r24	; 0x05
 6ba:	6f 83       	std	Y+7, r22	; 0x07
 6bc:	59 87       	std	Y+9, r21	; 0x09
 6be:	48 87       	std	Y+8, r20	; 0x08
 6c0:	3b 87       	std	Y+11, r19	; 0x0b
 6c2:	2a 87       	std	Y+10, r18	; 0x0a
{
  if (length < 1) return 0;
 6c4:	8a 85       	ldd	r24, Y+10	; 0x0a
 6c6:	9b 85       	ldd	r25, Y+11	; 0x0b
 6c8:	00 97       	sbiw	r24, 0x00	; 0
 6ca:	01 f4       	brne	.+0      	; 0x6cc <_ZN6Stream14readBytesUntilEcPcj+0x2a>
 6cc:	1d 86       	std	Y+13, r1	; 0x0d
 6ce:	1c 86       	std	Y+12, r1	; 0x0c
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <_ZN6Stream14readBytesUntilEcPcj+0x30>
  size_t index = 0;
 6d2:	1c 82       	std	Y+4, r1	; 0x04
 6d4:	1b 82       	std	Y+3, r1	; 0x03
 6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <_ZN6Stream14readBytesUntilEcPcj+0x36>
  while (index < length) {
    int c = timedRead();
 6d8:	8d 81       	ldd	r24, Y+5	; 0x05
 6da:	9e 81       	ldd	r25, Y+6	; 0x06
 6dc:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 6e0:	9a 83       	std	Y+2, r25	; 0x02
 6e2:	89 83       	std	Y+1, r24	; 0x01
    if (c < 0 || c == terminator) break;
 6e4:	89 81       	ldd	r24, Y+1	; 0x01
 6e6:	9a 81       	ldd	r25, Y+2	; 0x02
 6e8:	99 23       	and	r25, r25
 6ea:	04 f0       	brlt	.+0      	; 0x6ec <_ZN6Stream14readBytesUntilEcPcj+0x4a>
 6ec:	8f 81       	ldd	r24, Y+7	; 0x07
 6ee:	28 2f       	mov	r18, r24
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	89 81       	ldd	r24, Y+1	; 0x01
 6f4:	9a 81       	ldd	r25, Y+2	; 0x02
 6f6:	28 17       	cp	r18, r24
 6f8:	39 07       	cpc	r19, r25
 6fa:	01 f0       	breq	.+0      	; 0x6fc <_ZN6Stream14readBytesUntilEcPcj+0x5a>
    *buffer++ = (char)c;
 6fc:	89 81       	ldd	r24, Y+1	; 0x01
 6fe:	e8 85       	ldd	r30, Y+8	; 0x08
 700:	f9 85       	ldd	r31, Y+9	; 0x09
 702:	80 83       	st	Z, r24
 704:	88 85       	ldd	r24, Y+8	; 0x08
 706:	99 85       	ldd	r25, Y+9	; 0x09
 708:	01 96       	adiw	r24, 0x01	; 1
 70a:	99 87       	std	Y+9, r25	; 0x09
 70c:	88 87       	std	Y+8, r24	; 0x08
    index++;
 70e:	8b 81       	ldd	r24, Y+3	; 0x03
 710:	9c 81       	ldd	r25, Y+4	; 0x04
 712:	01 96       	adiw	r24, 0x01	; 1
 714:	9c 83       	std	Y+4, r25	; 0x04
 716:	8b 83       	std	Y+3, r24	; 0x03

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
 718:	2b 81       	ldd	r18, Y+3	; 0x03
 71a:	3c 81       	ldd	r19, Y+4	; 0x04
 71c:	8a 85       	ldd	r24, Y+10	; 0x0a
 71e:	9b 85       	ldd	r25, Y+11	; 0x0b
 720:	28 17       	cp	r18, r24
 722:	39 07       	cpc	r19, r25
 724:	00 f0       	brcs	.+0      	; 0x726 <_ZN6Stream14readBytesUntilEcPcj+0x84>
    int c = timedRead();
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
 726:	8b 81       	ldd	r24, Y+3	; 0x03
 728:	9c 81       	ldd	r25, Y+4	; 0x04
 72a:	9d 87       	std	Y+13, r25	; 0x0d
 72c:	8c 87       	std	Y+12, r24	; 0x0c
 72e:	8c 85       	ldd	r24, Y+12	; 0x0c
 730:	9d 85       	ldd	r25, Y+13	; 0x0d
}
 732:	2d 96       	adiw	r28, 0x0d	; 13
 734:	0f b6       	in	r0, 0x3f	; 63
 736:	f8 94       	cli
 738:	de bf       	out	0x3e, r29	; 62
 73a:	0f be       	out	0x3f, r0	; 63
 73c:	cd bf       	out	0x3d, r28	; 61
 73e:	cf 91       	pop	r28
 740:	df 91       	pop	r29
 742:	08 95       	ret

00000744 <_ZN6Stream9readBytesEPcj>:
// read characters from stream into buffer
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
 744:	df 93       	push	r29
 746:	cf 93       	push	r28
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
 74c:	2a 97       	sbiw	r28, 0x0a	; 10
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	f8 94       	cli
 752:	de bf       	out	0x3e, r29	; 62
 754:	0f be       	out	0x3f, r0	; 63
 756:	cd bf       	out	0x3d, r28	; 61
 758:	9e 83       	std	Y+6, r25	; 0x06
 75a:	8d 83       	std	Y+5, r24	; 0x05
 75c:	78 87       	std	Y+8, r23	; 0x08
 75e:	6f 83       	std	Y+7, r22	; 0x07
 760:	5a 87       	std	Y+10, r21	; 0x0a
 762:	49 87       	std	Y+9, r20	; 0x09
{
  size_t count = 0;
 764:	1c 82       	std	Y+4, r1	; 0x04
 766:	1b 82       	std	Y+3, r1	; 0x03
 768:	00 c0       	rjmp	.+0      	; 0x76a <_ZN6Stream9readBytesEPcj+0x26>
  while (count < length) {
    int c = timedRead();
 76a:	8d 81       	ldd	r24, Y+5	; 0x05
 76c:	9e 81       	ldd	r25, Y+6	; 0x06
 76e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 772:	9a 83       	std	Y+2, r25	; 0x02
 774:	89 83       	std	Y+1, r24	; 0x01
    if (c < 0) break;
 776:	89 81       	ldd	r24, Y+1	; 0x01
 778:	9a 81       	ldd	r25, Y+2	; 0x02
 77a:	99 23       	and	r25, r25
 77c:	04 f0       	brlt	.+0      	; 0x77e <_ZN6Stream9readBytesEPcj+0x3a>
    *buffer++ = (char)c;
 77e:	89 81       	ldd	r24, Y+1	; 0x01
 780:	ef 81       	ldd	r30, Y+7	; 0x07
 782:	f8 85       	ldd	r31, Y+8	; 0x08
 784:	80 83       	st	Z, r24
 786:	8f 81       	ldd	r24, Y+7	; 0x07
 788:	98 85       	ldd	r25, Y+8	; 0x08
 78a:	01 96       	adiw	r24, 0x01	; 1
 78c:	98 87       	std	Y+8, r25	; 0x08
 78e:	8f 83       	std	Y+7, r24	; 0x07
    count++;
 790:	8b 81       	ldd	r24, Y+3	; 0x03
 792:	9c 81       	ldd	r25, Y+4	; 0x04
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	9c 83       	std	Y+4, r25	; 0x04
 798:	8b 83       	std	Y+3, r24	; 0x03
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
 79a:	2b 81       	ldd	r18, Y+3	; 0x03
 79c:	3c 81       	ldd	r19, Y+4	; 0x04
 79e:	89 85       	ldd	r24, Y+9	; 0x09
 7a0:	9a 85       	ldd	r25, Y+10	; 0x0a
 7a2:	28 17       	cp	r18, r24
 7a4:	39 07       	cpc	r19, r25
 7a6:	00 f0       	brcs	.+0      	; 0x7a8 <_ZN6Stream9readBytesEPcj+0x64>
    int c = timedRead();
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
 7a8:	8b 81       	ldd	r24, Y+3	; 0x03
 7aa:	9c 81       	ldd	r25, Y+4	; 0x04
}
 7ac:	2a 96       	adiw	r28, 0x0a	; 10
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	f8 94       	cli
 7b2:	de bf       	out	0x3e, r29	; 62
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	cd bf       	out	0x3d, r28	; 61
 7b8:	cf 91       	pop	r28
 7ba:	df 91       	pop	r29
 7bc:	08 95       	ret

000007be <_ZN6Stream9findUntilEPcjS0_j>:
}

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
 7be:	0f 93       	push	r16
 7c0:	1f 93       	push	r17
 7c2:	df 93       	push	r29
 7c4:	cf 93       	push	r28
 7c6:	cd b7       	in	r28, 0x3d	; 61
 7c8:	de b7       	in	r29, 0x3e	; 62
 7ca:	64 97       	sbiw	r28, 0x14	; 20
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	f8 94       	cli
 7d0:	de bf       	out	0x3e, r29	; 62
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	cd bf       	out	0x3d, r28	; 61
 7d6:	98 87       	std	Y+8, r25	; 0x08
 7d8:	8f 83       	std	Y+7, r24	; 0x07
 7da:	7a 87       	std	Y+10, r23	; 0x0a
 7dc:	69 87       	std	Y+9, r22	; 0x09
 7de:	5c 87       	std	Y+12, r21	; 0x0c
 7e0:	4b 87       	std	Y+11, r20	; 0x0b
 7e2:	3e 87       	std	Y+14, r19	; 0x0e
 7e4:	2d 87       	std	Y+13, r18	; 0x0d
 7e6:	18 8b       	std	Y+16, r17	; 0x10
 7e8:	0f 87       	std	Y+15, r16	; 0x0f
{
  size_t index = 0;  // maximum target string length is 64k bytes!
 7ea:	1e 82       	std	Y+6, r1	; 0x06
 7ec:	1d 82       	std	Y+5, r1	; 0x05
  size_t termIndex = 0;
 7ee:	1c 82       	std	Y+4, r1	; 0x04
 7f0:	1b 82       	std	Y+3, r1	; 0x03
  int c;
  
  if( *target == 0)
 7f2:	e9 85       	ldd	r30, Y+9	; 0x09
 7f4:	fa 85       	ldd	r31, Y+10	; 0x0a
 7f6:	80 81       	ld	r24, Z
 7f8:	88 23       	and	r24, r24
 7fa:	01 f0       	breq	.+0      	; 0x7fc <_ZN6Stream9findUntilEPcjS0_j+0x3e>
 7fc:	00 c0       	rjmp	.+0      	; 0x7fe <_ZN6Stream9findUntilEPcjS0_j+0x40>
    return true;   // return true if target is a null string
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	8c 8b       	std	Y+20, r24	; 0x14
 802:	00 c0       	rjmp	.+0      	; 0x804 <_ZN6Stream9findUntilEPcjS0_j+0x46>
  while( (c = timedRead()) > 0){
    
    if(c != target[index])
 804:	29 85       	ldd	r18, Y+9	; 0x09
 806:	3a 85       	ldd	r19, Y+10	; 0x0a
 808:	8d 81       	ldd	r24, Y+5	; 0x05
 80a:	9e 81       	ldd	r25, Y+6	; 0x06
 80c:	f9 01       	movw	r30, r18
 80e:	e8 0f       	add	r30, r24
 810:	f9 1f       	adc	r31, r25
 812:	80 81       	ld	r24, Z
 814:	28 2f       	mov	r18, r24
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	89 81       	ldd	r24, Y+1	; 0x01
 81a:	9a 81       	ldd	r25, Y+2	; 0x02
 81c:	28 17       	cp	r18, r24
 81e:	39 07       	cpc	r19, r25
 820:	01 f0       	breq	.+0      	; 0x822 <_ZN6Stream9findUntilEPcjS0_j+0x64>
      index = 0; // reset index if any char does not match
 822:	1e 82       	std	Y+6, r1	; 0x06
 824:	1d 82       	std	Y+5, r1	; 0x05
    
    if( c == target[index]){
 826:	29 85       	ldd	r18, Y+9	; 0x09
 828:	3a 85       	ldd	r19, Y+10	; 0x0a
 82a:	8d 81       	ldd	r24, Y+5	; 0x05
 82c:	9e 81       	ldd	r25, Y+6	; 0x06
 82e:	f9 01       	movw	r30, r18
 830:	e8 0f       	add	r30, r24
 832:	f9 1f       	adc	r31, r25
 834:	80 81       	ld	r24, Z
 836:	28 2f       	mov	r18, r24
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	89 81       	ldd	r24, Y+1	; 0x01
 83c:	9a 81       	ldd	r25, Y+2	; 0x02
 83e:	28 17       	cp	r18, r24
 840:	39 07       	cpc	r19, r25
 842:	01 f4       	brne	.+0      	; 0x844 <_ZN6Stream9findUntilEPcjS0_j+0x86>
      //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
 844:	8d 81       	ldd	r24, Y+5	; 0x05
 846:	9e 81       	ldd	r25, Y+6	; 0x06
 848:	01 96       	adiw	r24, 0x01	; 1
 84a:	9e 83       	std	Y+6, r25	; 0x06
 84c:	8d 83       	std	Y+5, r24	; 0x05
 84e:	1a 8a       	std	Y+18, r1	; 0x12
 850:	2d 81       	ldd	r18, Y+5	; 0x05
 852:	3e 81       	ldd	r19, Y+6	; 0x06
 854:	8b 85       	ldd	r24, Y+11	; 0x0b
 856:	9c 85       	ldd	r25, Y+12	; 0x0c
 858:	28 17       	cp	r18, r24
 85a:	39 07       	cpc	r19, r25
 85c:	00 f0       	brcs	.+0      	; 0x85e <_ZN6Stream9findUntilEPcjS0_j+0xa0>
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	8a 8b       	std	Y+18, r24	; 0x12
 862:	8a 89       	ldd	r24, Y+18	; 0x12
 864:	88 23       	and	r24, r24
 866:	01 f0       	breq	.+0      	; 0x868 <_ZN6Stream9findUntilEPcjS0_j+0xaa>
        return true;
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	8c 8b       	std	Y+20, r24	; 0x14
 86c:	00 c0       	rjmp	.+0      	; 0x86e <_ZN6Stream9findUntilEPcjS0_j+0xb0>
      }
    }
    
    if(termLen > 0 && c == terminator[termIndex]){
 86e:	8f 85       	ldd	r24, Y+15	; 0x0f
 870:	98 89       	ldd	r25, Y+16	; 0x10
 872:	00 97       	sbiw	r24, 0x00	; 0
 874:	01 f0       	breq	.+0      	; 0x876 <_ZN6Stream9findUntilEPcjS0_j+0xb8>
 876:	2d 85       	ldd	r18, Y+13	; 0x0d
 878:	3e 85       	ldd	r19, Y+14	; 0x0e
 87a:	8b 81       	ldd	r24, Y+3	; 0x03
 87c:	9c 81       	ldd	r25, Y+4	; 0x04
 87e:	f9 01       	movw	r30, r18
 880:	e8 0f       	add	r30, r24
 882:	f9 1f       	adc	r31, r25
 884:	80 81       	ld	r24, Z
 886:	28 2f       	mov	r18, r24
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	89 81       	ldd	r24, Y+1	; 0x01
 88c:	9a 81       	ldd	r25, Y+2	; 0x02
 88e:	28 17       	cp	r18, r24
 890:	39 07       	cpc	r19, r25
 892:	01 f4       	brne	.+0      	; 0x894 <_ZN6Stream9findUntilEPcjS0_j+0xd6>
      if(++termIndex >= termLen)
 894:	8b 81       	ldd	r24, Y+3	; 0x03
 896:	9c 81       	ldd	r25, Y+4	; 0x04
 898:	01 96       	adiw	r24, 0x01	; 1
 89a:	9c 83       	std	Y+4, r25	; 0x04
 89c:	8b 83       	std	Y+3, r24	; 0x03
 89e:	19 8a       	std	Y+17, r1	; 0x11
 8a0:	2b 81       	ldd	r18, Y+3	; 0x03
 8a2:	3c 81       	ldd	r19, Y+4	; 0x04
 8a4:	8f 85       	ldd	r24, Y+15	; 0x0f
 8a6:	98 89       	ldd	r25, Y+16	; 0x10
 8a8:	28 17       	cp	r18, r24
 8aa:	39 07       	cpc	r19, r25
 8ac:	00 f0       	brcs	.+0      	; 0x8ae <_ZN6Stream9findUntilEPcjS0_j+0xf0>
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	89 8b       	std	Y+17, r24	; 0x11
 8b2:	89 89       	ldd	r24, Y+17	; 0x11
 8b4:	88 23       	and	r24, r24
 8b6:	01 f0       	breq	.+0      	; 0x8b8 <_ZN6Stream9findUntilEPcjS0_j+0xfa>
        return false;       // return false if terminate string found before target string
 8b8:	1c 8a       	std	Y+20, r1	; 0x14
 8ba:	00 c0       	rjmp	.+0      	; 0x8bc <_ZN6Stream9findUntilEPcjS0_j+0xfe>
    }
    else
      termIndex = 0;
 8bc:	1c 82       	std	Y+4, r1	; 0x04
 8be:	1b 82       	std	Y+3, r1	; 0x03
  size_t termIndex = 0;
  int c;
  
  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
 8c0:	8f 81       	ldd	r24, Y+7	; 0x07
 8c2:	98 85       	ldd	r25, Y+8	; 0x08
 8c4:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 8c8:	9a 83       	std	Y+2, r25	; 0x02
 8ca:	89 83       	std	Y+1, r24	; 0x01
 8cc:	1b 8a       	std	Y+19, r1	; 0x13
 8ce:	89 81       	ldd	r24, Y+1	; 0x01
 8d0:	9a 81       	ldd	r25, Y+2	; 0x02
 8d2:	18 16       	cp	r1, r24
 8d4:	19 06       	cpc	r1, r25
 8d6:	04 f4       	brge	.+0      	; 0x8d8 <_ZN6Stream9findUntilEPcjS0_j+0x11a>
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	8b 8b       	std	Y+19, r24	; 0x13
 8dc:	8b 89       	ldd	r24, Y+19	; 0x13
 8de:	88 23       	and	r24, r24
 8e0:	01 f0       	breq	.+0      	; 0x8e2 <_ZN6Stream9findUntilEPcjS0_j+0x124>
 8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <_ZN6Stream9findUntilEPcjS0_j+0x126>
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
  }
  return false;
 8e4:	1c 8a       	std	Y+20, r1	; 0x14
 8e6:	8c 89       	ldd	r24, Y+20	; 0x14
}
 8e8:	64 96       	adiw	r28, 0x14	; 20
 8ea:	0f b6       	in	r0, 0x3f	; 63
 8ec:	f8 94       	cli
 8ee:	de bf       	out	0x3e, r29	; 62
 8f0:	0f be       	out	0x3f, r0	; 63
 8f2:	cd bf       	out	0x3d, r28	; 61
 8f4:	cf 91       	pop	r28
 8f6:	df 91       	pop	r29
 8f8:	1f 91       	pop	r17
 8fa:	0f 91       	pop	r16
 8fc:	08 95       	ret

000008fe <_ZN6Stream9findUntilEPcS0_>:
{
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
 8fe:	0f 93       	push	r16
 900:	1f 93       	push	r17
 902:	df 93       	push	r29
 904:	cf 93       	push	r28
 906:	00 d0       	rcall	.+0      	; 0x908 <_ZN6Stream9findUntilEPcS0_+0xa>
 908:	00 d0       	rcall	.+0      	; 0x90a <_ZN6Stream9findUntilEPcS0_+0xc>
 90a:	00 d0       	rcall	.+0      	; 0x90c <_ZN6Stream9findUntilEPcS0_+0xe>
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
 910:	9a 83       	std	Y+2, r25	; 0x02
 912:	89 83       	std	Y+1, r24	; 0x01
 914:	7c 83       	std	Y+4, r23	; 0x04
 916:	6b 83       	std	Y+3, r22	; 0x03
 918:	5e 83       	std	Y+6, r21	; 0x06
 91a:	4d 83       	std	Y+5, r20	; 0x05
{
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 91c:	8b 81       	ldd	r24, Y+3	; 0x03
 91e:	9c 81       	ldd	r25, Y+4	; 0x04
 920:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 924:	8c 01       	movw	r16, r24
 926:	8d 81       	ldd	r24, Y+5	; 0x05
 928:	9e 81       	ldd	r25, Y+6	; 0x06
 92a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
 92e:	dc 01       	movw	r26, r24
 930:	89 81       	ldd	r24, Y+1	; 0x01
 932:	9a 81       	ldd	r25, Y+2	; 0x02
 934:	2b 81       	ldd	r18, Y+3	; 0x03
 936:	3c 81       	ldd	r19, Y+4	; 0x04
 938:	ed 81       	ldd	r30, Y+5	; 0x05
 93a:	fe 81       	ldd	r31, Y+6	; 0x06
 93c:	b9 01       	movw	r22, r18
 93e:	a8 01       	movw	r20, r16
 940:	9f 01       	movw	r18, r30
 942:	8d 01       	movw	r16, r26
 944:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
}
 948:	26 96       	adiw	r28, 0x06	; 6
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	f8 94       	cli
 94e:	de bf       	out	0x3e, r29	; 62
 950:	0f be       	out	0x3f, r0	; 63
 952:	cd bf       	out	0x3d, r28	; 61
 954:	cf 91       	pop	r28
 956:	df 91       	pop	r29
 958:	1f 91       	pop	r17
 95a:	0f 91       	pop	r16
 95c:	08 95       	ret

0000095e <_ZN6Stream4findEPc>:
{
  _timeout = timeout;
}

 // find returns true if the target string is found
bool  Stream::find(char *target)
 95e:	df 93       	push	r29
 960:	cf 93       	push	r28
 962:	00 d0       	rcall	.+0      	; 0x964 <_ZN6Stream4findEPc+0x6>
 964:	00 d0       	rcall	.+0      	; 0x966 <_ZN6Stream4findEPc+0x8>
 966:	cd b7       	in	r28, 0x3d	; 61
 968:	de b7       	in	r29, 0x3e	; 62
 96a:	9a 83       	std	Y+2, r25	; 0x02
 96c:	89 83       	std	Y+1, r24	; 0x01
 96e:	7c 83       	std	Y+4, r23	; 0x04
 970:	6b 83       	std	Y+3, r22	; 0x03
{
  return findUntil(target, NULL);
 972:	89 81       	ldd	r24, Y+1	; 0x01
 974:	9a 81       	ldd	r25, Y+2	; 0x02
 976:	2b 81       	ldd	r18, Y+3	; 0x03
 978:	3c 81       	ldd	r19, Y+4	; 0x04
 97a:	b9 01       	movw	r22, r18
 97c:	40 e0       	ldi	r20, 0x00	; 0
 97e:	50 e0       	ldi	r21, 0x00	; 0
 980:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
}
 984:	0f 90       	pop	r0
 986:	0f 90       	pop	r0
 988:	0f 90       	pop	r0
 98a:	0f 90       	pop	r0
 98c:	cf 91       	pop	r28
 98e:	df 91       	pop	r29
 990:	08 95       	ret

00000992 <_ZN6Stream4findEPcj>:

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
 992:	0f 93       	push	r16
 994:	1f 93       	push	r17
 996:	df 93       	push	r29
 998:	cf 93       	push	r28
 99a:	00 d0       	rcall	.+0      	; 0x99c <_ZN6Stream4findEPcj+0xa>
 99c:	00 d0       	rcall	.+0      	; 0x99e <_ZN6Stream4findEPcj+0xc>
 99e:	00 d0       	rcall	.+0      	; 0x9a0 <_ZN6Stream4findEPcj+0xe>
 9a0:	cd b7       	in	r28, 0x3d	; 61
 9a2:	de b7       	in	r29, 0x3e	; 62
 9a4:	9a 83       	std	Y+2, r25	; 0x02
 9a6:	89 83       	std	Y+1, r24	; 0x01
 9a8:	7c 83       	std	Y+4, r23	; 0x04
 9aa:	6b 83       	std	Y+3, r22	; 0x03
 9ac:	5e 83       	std	Y+6, r21	; 0x06
 9ae:	4d 83       	std	Y+5, r20	; 0x05
{
  return findUntil(target, length, NULL, 0);
 9b0:	89 81       	ldd	r24, Y+1	; 0x01
 9b2:	9a 81       	ldd	r25, Y+2	; 0x02
 9b4:	2b 81       	ldd	r18, Y+3	; 0x03
 9b6:	3c 81       	ldd	r19, Y+4	; 0x04
 9b8:	4d 81       	ldd	r20, Y+5	; 0x05
 9ba:	5e 81       	ldd	r21, Y+6	; 0x06
 9bc:	b9 01       	movw	r22, r18
 9be:	20 e0       	ldi	r18, 0x00	; 0
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	00 e0       	ldi	r16, 0x00	; 0
 9c4:	10 e0       	ldi	r17, 0x00	; 0
 9c6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10setTimeoutEm>
}
 9ca:	26 96       	adiw	r28, 0x06	; 6
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	f8 94       	cli
 9d0:	de bf       	out	0x3e, r29	; 62
 9d2:	0f be       	out	0x3f, r0	; 63
 9d4:	cd bf       	out	0x3d, r28	; 61
 9d6:	cf 91       	pop	r28
 9d8:	df 91       	pop	r29
 9da:	1f 91       	pop	r17
 9dc:	0f 91       	pop	r16
 9de:	08 95       	ret

Tone.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ca  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000001  00000000  00000000  000008fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00000000  00000000  000008ff  2**0
                  ALLOC
  3 .stab         00000ed0  00000000  00000000  00000900  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001082  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .progmem.data 00000001  00000000  00000000  00002852  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text:

00000000 <_ZL9toneBeginh>:

#endif



static int8_t toneBegin(uint8_t _pin)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	ac 97       	sbiw	r28, 0x2c	; 44
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8a a7       	std	Y+42, r24	; 0x2a
{
  int8_t _timer = -1;
  16:	8f ef       	ldi	r24, 0xFF	; 255
  18:	89 a7       	std	Y+41, r24	; 0x29

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  1a:	18 a6       	std	Y+40, r1	; 0x28
  1c:	1f a2       	std	Y+39, r1	; 0x27
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZL9toneBeginh+0x20>
    if (tone_pins[i] == _pin) {
  20:	8f a1       	ldd	r24, Y+39	; 0x27
  22:	98 a5       	ldd	r25, Y+40	; 0x28
  24:	fc 01       	movw	r30, r24
  26:	e0 50       	subi	r30, 0x00	; 0
  28:	f0 40       	sbci	r31, 0x00	; 0
  2a:	90 81       	ld	r25, Z
  2c:	8a a5       	ldd	r24, Y+42	; 0x2a
  2e:	98 17       	cp	r25, r24
  30:	01 f4       	brne	.+0      	; 0x32 <_ZL9toneBeginh+0x32>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  32:	8f a1       	ldd	r24, Y+39	; 0x27
  34:	98 a5       	ldd	r25, Y+40	; 0x28
  36:	80 50       	subi	r24, 0x00	; 0
  38:	90 40       	sbci	r25, 0x00	; 0
  3a:	9e a3       	std	Y+38, r25	; 0x26
  3c:	8d a3       	std	Y+37, r24	; 0x25
  3e:	ed a1       	ldd	r30, Y+37	; 0x25
  40:	fe a1       	ldd	r31, Y+38	; 0x26
  42:	84 91       	lpm	r24, Z+
  44:	8c a3       	std	Y+36, r24	; 0x24
  46:	8c a1       	ldd	r24, Y+36	; 0x24
  48:	8b a7       	std	Y+43, r24	; 0x2b
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_ZL9toneBeginh+0x4c>
static int8_t toneBegin(uint8_t _pin)
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  4c:	8f a1       	ldd	r24, Y+39	; 0x27
  4e:	98 a5       	ldd	r25, Y+40	; 0x28
  50:	01 96       	adiw	r24, 0x01	; 1
  52:	98 a7       	std	Y+40, r25	; 0x28
  54:	8f a3       	std	Y+39, r24	; 0x27
  56:	8f a1       	ldd	r24, Y+39	; 0x27
  58:	98 a5       	ldd	r25, Y+40	; 0x28
  5a:	18 16       	cp	r1, r24
  5c:	19 06       	cpc	r1, r25
  5e:	04 f4       	brge	.+0      	; 0x60 <_ZL9toneBeginh+0x60>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  60:	1b a2       	std	Y+35, r1	; 0x23
  62:	1a a2       	std	Y+34, r1	; 0x22
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZL9toneBeginh+0x66>
    if (tone_pins[i] == 255) {
  66:	8a a1       	ldd	r24, Y+34	; 0x22
  68:	9b a1       	ldd	r25, Y+35	; 0x23
  6a:	fc 01       	movw	r30, r24
  6c:	e0 50       	subi	r30, 0x00	; 0
  6e:	f0 40       	sbci	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	8f 3f       	cpi	r24, 0xFF	; 255
  74:	01 f4       	brne	.+0      	; 0x76 <_ZL9toneBeginh+0x76>
      tone_pins[i] = _pin;
  76:	8a a1       	ldd	r24, Y+34	; 0x22
  78:	9b a1       	ldd	r25, Y+35	; 0x23
  7a:	fc 01       	movw	r30, r24
  7c:	e0 50       	subi	r30, 0x00	; 0
  7e:	f0 40       	sbci	r31, 0x00	; 0
  80:	8a a5       	ldd	r24, Y+42	; 0x2a
  82:	80 83       	st	Z, r24
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  84:	8a a1       	ldd	r24, Y+34	; 0x22
  86:	9b a1       	ldd	r25, Y+35	; 0x23
  88:	80 50       	subi	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	99 a3       	std	Y+33, r25	; 0x21
  8e:	88 a3       	std	Y+32, r24	; 0x20
  90:	e8 a1       	ldd	r30, Y+32	; 0x20
  92:	f9 a1       	ldd	r31, Y+33	; 0x21
  94:	84 91       	lpm	r24, Z+
  96:	8f 8f       	std	Y+31, r24	; 0x1f
  98:	8f 8d       	ldd	r24, Y+31	; 0x1f
  9a:	89 a7       	std	Y+41, r24	; 0x29
  9c:	00 c0       	rjmp	.+0      	; 0x9e <_ZL9toneBeginh+0x9e>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  9e:	8a a1       	ldd	r24, Y+34	; 0x22
  a0:	9b a1       	ldd	r25, Y+35	; 0x23
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	9b a3       	std	Y+35, r25	; 0x23
  a6:	8a a3       	std	Y+34, r24	; 0x22
  a8:	8a a1       	ldd	r24, Y+34	; 0x22
  aa:	9b a1       	ldd	r25, Y+35	; 0x23
  ac:	18 16       	cp	r1, r24
  ae:	19 06       	cpc	r1, r25
  b0:	04 f4       	brge	.+0      	; 0xb2 <_ZL9toneBeginh+0xb2>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      break;
    }
  }
  
  if (_timer != -1)
  b2:	89 a5       	ldd	r24, Y+41	; 0x29
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	01 f4       	brne	.+0      	; 0xb8 <_ZL9toneBeginh+0xb8>
  b8:	00 c0       	rjmp	.+0      	; 0xba <_ZL9toneBeginh+0xba>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
  ba:	89 a5       	ldd	r24, Y+41	; 0x29
  bc:	8c a7       	std	Y+44, r24	; 0x2c
  be:	8c a5       	ldd	r24, Y+44	; 0x2c
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	01 f4       	brne	.+0      	; 0xc4 <_ZL9toneBeginh+0xc4>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_ZL9toneBeginh+0xc6>
  c6:	8c a5       	ldd	r24, Y+44	; 0x2c
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	01 f4       	brne	.+0      	; 0xcc <_ZL9toneBeginh+0xcc>
  cc:	00 c0       	rjmp	.+0      	; 0xce <_ZL9toneBeginh+0xce>
  ce:	8c a5       	ldd	r24, Y+44	; 0x2c
  d0:	88 23       	and	r24, r24
  d2:	01 f0       	breq	.+0      	; 0xd4 <_ZL9toneBeginh+0xd4>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <_ZL9toneBeginh+0xd6>
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
  d6:	e4 e4       	ldi	r30, 0x44	; 68
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1
        TCCR0B = 0;
  dc:	e5 e4       	ldi	r30, 0x45	; 69
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
        bitWrite(TCCR0A, WGM01, 1);
  e2:	a4 e4       	ldi	r26, 0x44	; 68
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	e4 e4       	ldi	r30, 0x44	; 68
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	8c 93       	st	X, r24
        bitWrite(TCCR0B, CS00, 1);
  f0:	a5 e4       	ldi	r26, 0x45	; 69
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	e5 e4       	ldi	r30, 0x45	; 69
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	8c 93       	st	X, r24
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
  fe:	8a a5       	ldd	r24, Y+42	; 0x2a
 100:	88 2f       	mov	r24, r24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	80 50       	subi	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	9a 8f       	std	Y+26, r25	; 0x1a
 10a:	89 8f       	std	Y+25, r24	; 0x19
 10c:	e9 8d       	ldd	r30, Y+25	; 0x19
 10e:	fa 8d       	ldd	r31, Y+26	; 0x1a
 110:	84 91       	lpm	r24, Z+
 112:	88 8f       	std	Y+24, r24	; 0x18
 114:	88 8d       	ldd	r24, Y+24	; 0x18
 116:	88 2f       	mov	r24, r24
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	80 50       	subi	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	9e 8f       	std	Y+30, r25	; 0x1e
 124:	8d 8f       	std	Y+29, r24	; 0x1d
 126:	8d 8d       	ldd	r24, Y+29	; 0x1d
 128:	9e 8d       	ldd	r25, Y+30	; 0x1e
 12a:	fc 01       	movw	r30, r24
 12c:	85 91       	lpm	r24, Z+
 12e:	94 91       	lpm	r25, Z+
 130:	9c 8f       	std	Y+28, r25	; 0x1c
 132:	8b 8f       	std	Y+27, r24	; 0x1b
 134:	fe 8f       	std	Y+30, r31	; 0x1e
 136:	ed 8f       	std	Y+29, r30	; 0x1d
 138:	8b 8d       	ldd	r24, Y+27	; 0x1b
 13a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 13c:	90 93 00 00 	sts	0x0000, r25
 140:	80 93 00 00 	sts	0x0000, r24
        timer0_pin_mask = digitalPinToBitMask(_pin);
 144:	8a a5       	ldd	r24, Y+42	; 0x2a
 146:	88 2f       	mov	r24, r24
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	80 50       	subi	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	9f 8b       	std	Y+23, r25	; 0x17
 150:	8e 8b       	std	Y+22, r24	; 0x16
 152:	ee 89       	ldd	r30, Y+22	; 0x16
 154:	ff 89       	ldd	r31, Y+23	; 0x17
 156:	84 91       	lpm	r24, Z+
 158:	8d 8b       	std	Y+21, r24	; 0x15
 15a:	8d 89       	ldd	r24, Y+21	; 0x15
 15c:	80 93 00 00 	sts	0x0000, r24
 160:	00 c0       	rjmp	.+0      	; 0x162 <_ZL9toneBeginh+0x162>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
 162:	e0 e8       	ldi	r30, 0x80	; 128
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	10 82       	st	Z, r1
        TCCR1B = 0;
 168:	e1 e8       	ldi	r30, 0x81	; 129
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	10 82       	st	Z, r1
        bitWrite(TCCR1B, WGM12, 1);
 16e:	a1 e8       	ldi	r26, 0x81	; 129
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	e1 e8       	ldi	r30, 0x81	; 129
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	8c 93       	st	X, r24
        bitWrite(TCCR1B, CS10, 1);
 17c:	a1 e8       	ldi	r26, 0x81	; 129
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	e1 e8       	ldi	r30, 0x81	; 129
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	81 60       	ori	r24, 0x01	; 1
 188:	8c 93       	st	X, r24
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
 18a:	8a a5       	ldd	r24, Y+42	; 0x2a
 18c:	88 2f       	mov	r24, r24
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	80 50       	subi	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	98 8b       	std	Y+16, r25	; 0x10
 196:	8f 87       	std	Y+15, r24	; 0x0f
 198:	ef 85       	ldd	r30, Y+15	; 0x0f
 19a:	f8 89       	ldd	r31, Y+16	; 0x10
 19c:	84 91       	lpm	r24, Z+
 19e:	8e 87       	std	Y+14, r24	; 0x0e
 1a0:	8e 85       	ldd	r24, Y+14	; 0x0e
 1a2:	88 2f       	mov	r24, r24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	80 50       	subi	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	9c 8b       	std	Y+20, r25	; 0x14
 1b0:	8b 8b       	std	Y+19, r24	; 0x13
 1b2:	8b 89       	ldd	r24, Y+19	; 0x13
 1b4:	9c 89       	ldd	r25, Y+20	; 0x14
 1b6:	fc 01       	movw	r30, r24
 1b8:	85 91       	lpm	r24, Z+
 1ba:	94 91       	lpm	r25, Z+
 1bc:	9a 8b       	std	Y+18, r25	; 0x12
 1be:	89 8b       	std	Y+17, r24	; 0x11
 1c0:	fc 8b       	std	Y+20, r31	; 0x14
 1c2:	eb 8b       	std	Y+19, r30	; 0x13
 1c4:	89 89       	ldd	r24, Y+17	; 0x11
 1c6:	9a 89       	ldd	r25, Y+18	; 0x12
 1c8:	90 93 00 00 	sts	0x0000, r25
 1cc:	80 93 00 00 	sts	0x0000, r24
        timer1_pin_mask = digitalPinToBitMask(_pin);
 1d0:	8a a5       	ldd	r24, Y+42	; 0x2a
 1d2:	88 2f       	mov	r24, r24
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	80 50       	subi	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	9d 87       	std	Y+13, r25	; 0x0d
 1dc:	8c 87       	std	Y+12, r24	; 0x0c
 1de:	ec 85       	ldd	r30, Y+12	; 0x0c
 1e0:	fd 85       	ldd	r31, Y+13	; 0x0d
 1e2:	84 91       	lpm	r24, Z+
 1e4:	8b 87       	std	Y+11, r24	; 0x0b
 1e6:	8b 85       	ldd	r24, Y+11	; 0x0b
 1e8:	80 93 00 00 	sts	0x0000, r24
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_ZL9toneBeginh+0x1ee>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
 1ee:	e0 eb       	ldi	r30, 0xB0	; 176
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	10 82       	st	Z, r1
        TCCR2B = 0;
 1f4:	e1 eb       	ldi	r30, 0xB1	; 177
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	10 82       	st	Z, r1
        bitWrite(TCCR2A, WGM21, 1);
 1fa:	a0 eb       	ldi	r26, 0xB0	; 176
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	e0 eb       	ldi	r30, 0xB0	; 176
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	82 60       	ori	r24, 0x02	; 2
 206:	8c 93       	st	X, r24
        bitWrite(TCCR2B, CS20, 1);
 208:	a1 eb       	ldi	r26, 0xB1	; 177
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e1 eb       	ldi	r30, 0xB1	; 177
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	81 60       	ori	r24, 0x01	; 1
 214:	8c 93       	st	X, r24
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
 216:	8a a5       	ldd	r24, Y+42	; 0x2a
 218:	88 2f       	mov	r24, r24
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	80 50       	subi	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	9e 83       	std	Y+6, r25	; 0x06
 222:	8d 83       	std	Y+5, r24	; 0x05
 224:	ed 81       	ldd	r30, Y+5	; 0x05
 226:	fe 81       	ldd	r31, Y+6	; 0x06
 228:	84 91       	lpm	r24, Z+
 22a:	8c 83       	std	Y+4, r24	; 0x04
 22c:	8c 81       	ldd	r24, Y+4	; 0x04
 22e:	88 2f       	mov	r24, r24
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	80 50       	subi	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	9a 87       	std	Y+10, r25	; 0x0a
 23c:	89 87       	std	Y+9, r24	; 0x09
 23e:	89 85       	ldd	r24, Y+9	; 0x09
 240:	9a 85       	ldd	r25, Y+10	; 0x0a
 242:	fc 01       	movw	r30, r24
 244:	85 91       	lpm	r24, Z+
 246:	94 91       	lpm	r25, Z+
 248:	98 87       	std	Y+8, r25	; 0x08
 24a:	8f 83       	std	Y+7, r24	; 0x07
 24c:	fa 87       	std	Y+10, r31	; 0x0a
 24e:	e9 87       	std	Y+9, r30	; 0x09
 250:	8f 81       	ldd	r24, Y+7	; 0x07
 252:	98 85       	ldd	r25, Y+8	; 0x08
 254:	90 93 00 00 	sts	0x0000, r25
 258:	80 93 00 00 	sts	0x0000, r24
        timer2_pin_mask = digitalPinToBitMask(_pin);
 25c:	8a a5       	ldd	r24, Y+42	; 0x2a
 25e:	88 2f       	mov	r24, r24
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	80 50       	subi	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	9b 83       	std	Y+3, r25	; 0x03
 268:	8a 83       	std	Y+2, r24	; 0x02
 26a:	ea 81       	ldd	r30, Y+2	; 0x02
 26c:	fb 81       	ldd	r31, Y+3	; 0x03
 26e:	84 91       	lpm	r24, Z+
 270:	89 83       	std	Y+1, r24	; 0x01
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	80 93 00 00 	sts	0x0000, r24
        break;
      #endif
    }
  }

  return _timer;
 278:	89 a5       	ldd	r24, Y+41	; 0x29
 27a:	8b a7       	std	Y+43, r24	; 0x2b
 27c:	8b a5       	ldd	r24, Y+43	; 0x2b
}
 27e:	ac 96       	adiw	r28, 0x2c	; 44
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	cf 91       	pop	r28
 28c:	df 91       	pop	r29
 28e:	08 95       	ret

00000290 <_Z12disableTimerh>:


// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
 290:	df 93       	push	r29
 292:	cf 93       	push	r28
 294:	00 d0       	rcall	.+0      	; 0x296 <_Z12disableTimerh+0x6>
 296:	0f 92       	push	r0
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	89 83       	std	Y+1, r24	; 0x01
{
  switch (_timer)
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	28 2f       	mov	r18, r24
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	3b 83       	std	Y+3, r19	; 0x03
 2a6:	2a 83       	std	Y+2, r18	; 0x02
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	9b 81       	ldd	r25, Y+3	; 0x03
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	91 05       	cpc	r25, r1
 2b0:	01 f0       	breq	.+0      	; 0x2b2 <_Z12disableTimerh+0x22>
 2b2:	2a 81       	ldd	r18, Y+2	; 0x02
 2b4:	3b 81       	ldd	r19, Y+3	; 0x03
 2b6:	22 30       	cpi	r18, 0x02	; 2
 2b8:	31 05       	cpc	r19, r1
 2ba:	01 f0       	breq	.+0      	; 0x2bc <_Z12disableTimerh+0x2c>
 2bc:	8a 81       	ldd	r24, Y+2	; 0x02
 2be:	9b 81       	ldd	r25, Y+3	; 0x03
 2c0:	00 97       	sbiw	r24, 0x00	; 0
 2c2:	01 f4       	brne	.+0      	; 0x2c4 <_Z12disableTimerh+0x34>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
 2c4:	ee e6       	ldi	r30, 0x6E	; 110
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	10 82       	st	Z, r1
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <_Z12disableTimerh+0x3c>
      #endif
      break;

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
 2cc:	af e6       	ldi	r26, 0x6F	; 111
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	ef e6       	ldi	r30, 0x6F	; 111
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	8d 7f       	andi	r24, 0xFD	; 253
 2d8:	8c 93       	st	X, r24
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <_Z12disableTimerh+0x4c>
      break;
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
 2dc:	a0 e7       	ldi	r26, 0x70	; 112
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	e0 e7       	ldi	r30, 0x70	; 112
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	8d 7f       	andi	r24, 0xFD	; 253
 2e8:	8c 93       	st	X, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
 2ea:	e0 eb       	ldi	r30, 0xB0	; 176
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
 2f2:	a1 eb       	ldi	r26, 0xB1	; 177
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	e1 eb       	ldi	r30, 0xB1	; 177
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	88 7f       	andi	r24, 0xF8	; 248
 2fe:	84 60       	ori	r24, 0x04	; 4
 300:	8c 93       	st	X, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
 302:	e3 eb       	ldi	r30, 0xB3	; 179
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	10 82       	st	Z, r1
    case 5:
      TIMSK5 = 0;
      break;
#endif
  }
}
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
 30e:	cf 91       	pop	r28
 310:	df 91       	pop	r29
 312:	08 95       	ret

00000314 <_Z6noToneh>:


void noTone(uint8_t _pin)
 314:	df 93       	push	r29
 316:	cf 93       	push	r28
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	27 97       	sbiw	r28, 0x07	; 7
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	8f 83       	std	Y+7, r24	; 0x07
{
  int8_t _timer = -1;
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	8e 83       	std	Y+6, r24	; 0x06
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
 32e:	1d 82       	std	Y+5, r1	; 0x05
 330:	1c 82       	std	Y+4, r1	; 0x04
 332:	00 c0       	rjmp	.+0      	; 0x334 <_Z6noToneh+0x20>
    if (tone_pins[i] == _pin) {
 334:	8c 81       	ldd	r24, Y+4	; 0x04
 336:	9d 81       	ldd	r25, Y+5	; 0x05
 338:	fc 01       	movw	r30, r24
 33a:	e0 50       	subi	r30, 0x00	; 0
 33c:	f0 40       	sbci	r31, 0x00	; 0
 33e:	90 81       	ld	r25, Z
 340:	8f 81       	ldd	r24, Y+7	; 0x07
 342:	98 17       	cp	r25, r24
 344:	01 f4       	brne	.+0      	; 0x346 <_Z6noToneh+0x32>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 346:	8c 81       	ldd	r24, Y+4	; 0x04
 348:	9d 81       	ldd	r25, Y+5	; 0x05
 34a:	80 50       	subi	r24, 0x00	; 0
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	9b 83       	std	Y+3, r25	; 0x03
 350:	8a 83       	std	Y+2, r24	; 0x02
 352:	ea 81       	ldd	r30, Y+2	; 0x02
 354:	fb 81       	ldd	r31, Y+3	; 0x03
 356:	84 91       	lpm	r24, Z+
 358:	89 83       	std	Y+1, r24	; 0x01
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	8e 83       	std	Y+6, r24	; 0x06
      tone_pins[i] = 255;
 35e:	8c 81       	ldd	r24, Y+4	; 0x04
 360:	9d 81       	ldd	r25, Y+5	; 0x05
 362:	fc 01       	movw	r30, r24
 364:	e0 50       	subi	r30, 0x00	; 0
 366:	f0 40       	sbci	r31, 0x00	; 0
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	80 83       	st	Z, r24

void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
 36c:	8c 81       	ldd	r24, Y+4	; 0x04
 36e:	9d 81       	ldd	r25, Y+5	; 0x05
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	9d 83       	std	Y+5, r25	; 0x05
 374:	8c 83       	std	Y+4, r24	; 0x04
 376:	8c 81       	ldd	r24, Y+4	; 0x04
 378:	9d 81       	ldd	r25, Y+5	; 0x05
 37a:	18 16       	cp	r1, r24
 37c:	19 06       	cpc	r1, r25
 37e:	04 f4       	brge	.+0      	; 0x380 <_Z6noToneh+0x6c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
 380:	8e 81       	ldd	r24, Y+6	; 0x06
 382:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>

  digitalWrite(_pin, 0);
 386:	8f 81       	ldd	r24, Y+7	; 0x07
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
}
 38e:	27 96       	adiw	r28, 0x07	; 7
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	de bf       	out	0x3e, r29	; 62
 396:	0f be       	out	0x3f, r0	; 63
 398:	cd bf       	out	0x3d, r28	; 61
 39a:	cf 91       	pop	r28
 39c:	df 91       	pop	r29
 39e:	08 95       	ret

000003a0 <__vector_7>:
}
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	2f 93       	push	r18
 3ac:	3f 93       	push	r19
 3ae:	4f 93       	push	r20
 3b0:	5f 93       	push	r21
 3b2:	6f 93       	push	r22
 3b4:	7f 93       	push	r23
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
 3ba:	af 93       	push	r26
 3bc:	bf 93       	push	r27
 3be:	ef 93       	push	r30
 3c0:	ff 93       	push	r31
 3c2:	df 93       	push	r29
 3c4:	cf 93       	push	r28
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <__vector_7+0x28>
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
{

  if (timer2_toggle_count != 0)
 3cc:	80 91 00 00 	lds	r24, 0x0000
 3d0:	90 91 00 00 	lds	r25, 0x0000
 3d4:	a0 91 00 00 	lds	r26, 0x0000
 3d8:	b0 91 00 00 	lds	r27, 0x0000
 3dc:	1a 82       	std	Y+2, r1	; 0x02
 3de:	00 97       	sbiw	r24, 0x00	; 0
 3e0:	a1 05       	cpc	r26, r1
 3e2:	b1 05       	cpc	r27, r1
 3e4:	01 f0       	breq	.+0      	; 0x3e6 <__vector_7+0x46>
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	8a 83       	std	Y+2, r24	; 0x02
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	88 23       	and	r24, r24
 3ee:	01 f0       	breq	.+0      	; 0x3f0 <__vector_7+0x50>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
 3f0:	a0 91 00 00 	lds	r26, 0x0000
 3f4:	b0 91 00 00 	lds	r27, 0x0000
 3f8:	e0 91 00 00 	lds	r30, 0x0000
 3fc:	f0 91 00 00 	lds	r31, 0x0000
 400:	90 81       	ld	r25, Z
 402:	80 91 00 00 	lds	r24, 0x0000
 406:	89 27       	eor	r24, r25
 408:	8c 93       	st	X, r24

    if (timer2_toggle_count > 0)
 40a:	80 91 00 00 	lds	r24, 0x0000
 40e:	90 91 00 00 	lds	r25, 0x0000
 412:	a0 91 00 00 	lds	r26, 0x0000
 416:	b0 91 00 00 	lds	r27, 0x0000
 41a:	19 82       	std	Y+1, r1	; 0x01
 41c:	18 16       	cp	r1, r24
 41e:	19 06       	cpc	r1, r25
 420:	1a 06       	cpc	r1, r26
 422:	1b 06       	cpc	r1, r27
 424:	04 f4       	brge	.+0      	; 0x426 <__vector_7+0x86>
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	89 83       	std	Y+1, r24	; 0x01
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	88 23       	and	r24, r24
 42e:	01 f0       	breq	.+0      	; 0x430 <__vector_7+0x90>
      timer2_toggle_count--;
 430:	80 91 00 00 	lds	r24, 0x0000
 434:	90 91 00 00 	lds	r25, 0x0000
 438:	a0 91 00 00 	lds	r26, 0x0000
 43c:	b0 91 00 00 	lds	r27, 0x0000
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	a1 09       	sbc	r26, r1
 444:	b1 09       	sbc	r27, r1
 446:	80 93 00 00 	sts	0x0000, r24
 44a:	90 93 00 00 	sts	0x0000, r25
 44e:	a0 93 00 00 	sts	0x0000, r26
 452:	b0 93 00 00 	sts	0x0000, r27
 456:	00 c0       	rjmp	.+0      	; 0x458 <__vector_7+0xb8>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
 458:	80 91 00 00 	lds	r24, 0x0000
 45c:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
 460:	0f 90       	pop	r0
 462:	0f 90       	pop	r0
 464:	cf 91       	pop	r28
 466:	df 91       	pop	r29
 468:	ff 91       	pop	r31
 46a:	ef 91       	pop	r30
 46c:	bf 91       	pop	r27
 46e:	af 91       	pop	r26
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	7f 91       	pop	r23
 476:	6f 91       	pop	r22
 478:	5f 91       	pop	r21
 47a:	4f 91       	pop	r20
 47c:	3f 91       	pop	r19
 47e:	2f 91       	pop	r18
 480:	0f 90       	pop	r0
 482:	0f be       	out	0x3f, r0	; 63
 484:	0f 90       	pop	r0
 486:	1f 90       	pop	r1
 488:	18 95       	reti

0000048a <_Z4tonehjm>:



// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
 48a:	df 93       	push	r29
 48c:	cf 93       	push	r28
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	65 97       	sbiw	r28, 0x15	; 21
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	8b 87       	std	Y+11, r24	; 0x0b
 4a0:	7d 87       	std	Y+13, r23	; 0x0d
 4a2:	6c 87       	std	Y+12, r22	; 0x0c
 4a4:	2e 87       	std	Y+14, r18	; 0x0e
 4a6:	3f 87       	std	Y+15, r19	; 0x0f
 4a8:	48 8b       	std	Y+16, r20	; 0x10
 4aa:	59 8b       	std	Y+17, r21	; 0x11
{
  uint8_t prescalarbits = 0b001;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	8a 87       	std	Y+10, r24	; 0x0a
  long toggle_count = 0;
 4b0:	1e 82       	std	Y+6, r1	; 0x06
 4b2:	1f 82       	std	Y+7, r1	; 0x07
 4b4:	18 86       	std	Y+8, r1	; 0x08
 4b6:	19 86       	std	Y+9, r1	; 0x09
  uint32_t ocr = 0;
 4b8:	1a 82       	std	Y+2, r1	; 0x02
 4ba:	1b 82       	std	Y+3, r1	; 0x03
 4bc:	1c 82       	std	Y+4, r1	; 0x04
 4be:	1d 82       	std	Y+5, r1	; 0x05
  int8_t _timer;

  _timer = toneBegin(_pin);
 4c0:	8b 85       	ldd	r24, Y+11	; 0x0b
 4c2:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 4c6:	89 83       	std	Y+1, r24	; 0x01

  if (_timer >= 0)
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	88 23       	and	r24, r24
 4cc:	04 f4       	brge	.+0      	; 0x4ce <_Z4tonehjm+0x44>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <_Z4tonehjm+0x46>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
 4d0:	8b 85       	ldd	r24, Y+11	; 0x0b
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	88 23       	and	r24, r24
 4dc:	01 f0       	breq	.+0      	; 0x4de <_Z4tonehjm+0x54>
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	82 30       	cpi	r24, 0x02	; 2
 4e2:	01 f0       	breq	.+0      	; 0x4e4 <_Z4tonehjm+0x5a>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <_Z4tonehjm+0x5c>
    {
      ocr = F_CPU / frequency / 2 - 1;
 4e6:	8c 85       	ldd	r24, Y+12	; 0x0c
 4e8:	9d 85       	ldd	r25, Y+13	; 0x0d
 4ea:	9c 01       	movw	r18, r24
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	99 e0       	ldi	r25, 0x09	; 9
 4f4:	ad e3       	ldi	r26, 0x3D	; 61
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	bc 01       	movw	r22, r24
 4fa:	cd 01       	movw	r24, r26
 4fc:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 500:	da 01       	movw	r26, r20
 502:	c9 01       	movw	r24, r18
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	a1 09       	sbc	r26, r1
 508:	b1 09       	sbc	r27, r1
 50a:	8a 83       	std	Y+2, r24	; 0x02
 50c:	9b 83       	std	Y+3, r25	; 0x03
 50e:	ac 83       	std	Y+4, r26	; 0x04
 510:	bd 83       	std	Y+5, r27	; 0x05
      prescalarbits = 0b001;  // ck/1: same for both timers
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	8a 87       	std	Y+10, r24	; 0x0a
      if (ocr > 255)
 516:	8a 81       	ldd	r24, Y+2	; 0x02
 518:	9b 81       	ldd	r25, Y+3	; 0x03
 51a:	ac 81       	ldd	r26, Y+4	; 0x04
 51c:	bd 81       	ldd	r27, Y+5	; 0x05
 51e:	8f 3f       	cpi	r24, 0xFF	; 255
 520:	91 05       	cpc	r25, r1
 522:	a1 05       	cpc	r26, r1
 524:	b1 05       	cpc	r27, r1
 526:	01 f0       	breq	.+0      	; 0x528 <_Z4tonehjm+0x9e>
 528:	00 f4       	brcc	.+0      	; 0x52a <_Z4tonehjm+0xa0>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <_Z4tonehjm+0xa2>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
 52c:	8c 85       	ldd	r24, Y+12	; 0x0c
 52e:	9d 85       	ldd	r25, Y+13	; 0x0d
 530:	9c 01       	movw	r18, r24
 532:	40 e0       	ldi	r20, 0x00	; 0
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	80 e2       	ldi	r24, 0x20	; 32
 538:	91 ea       	ldi	r25, 0xA1	; 161
 53a:	a7 e0       	ldi	r26, 0x07	; 7
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	bc 01       	movw	r22, r24
 540:	cd 01       	movw	r24, r26
 542:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 546:	da 01       	movw	r26, r20
 548:	c9 01       	movw	r24, r18
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	a1 09       	sbc	r26, r1
 54e:	b1 09       	sbc	r27, r1
 550:	8a 83       	std	Y+2, r24	; 0x02
 552:	9b 83       	std	Y+3, r25	; 0x03
 554:	ac 83       	std	Y+4, r26	; 0x04
 556:	bd 83       	std	Y+5, r27	; 0x05
        prescalarbits = 0b010;  // ck/8: same for both timers
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	8a 87       	std	Y+10, r24	; 0x0a

        if (_timer == 2 && ocr > 255)
 55c:	89 81       	ldd	r24, Y+1	; 0x01
 55e:	82 30       	cpi	r24, 0x02	; 2
 560:	01 f4       	brne	.+0      	; 0x562 <_Z4tonehjm+0xd8>
 562:	8a 81       	ldd	r24, Y+2	; 0x02
 564:	9b 81       	ldd	r25, Y+3	; 0x03
 566:	ac 81       	ldd	r26, Y+4	; 0x04
 568:	bd 81       	ldd	r27, Y+5	; 0x05
 56a:	8f 3f       	cpi	r24, 0xFF	; 255
 56c:	91 05       	cpc	r25, r1
 56e:	a1 05       	cpc	r26, r1
 570:	b1 05       	cpc	r27, r1
 572:	01 f0       	breq	.+0      	; 0x574 <_Z4tonehjm+0xea>
 574:	00 f0       	brcs	.+0      	; 0x576 <_Z4tonehjm+0xec>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
 576:	8c 85       	ldd	r24, Y+12	; 0x0c
 578:	9d 85       	ldd	r25, Y+13	; 0x0d
 57a:	9c 01       	movw	r18, r24
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	50 e0       	ldi	r21, 0x00	; 0
 580:	88 e4       	ldi	r24, 0x48	; 72
 582:	98 ee       	ldi	r25, 0xE8	; 232
 584:	a1 e0       	ldi	r26, 0x01	; 1
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	bc 01       	movw	r22, r24
 58a:	cd 01       	movw	r24, r26
 58c:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 590:	da 01       	movw	r26, r20
 592:	c9 01       	movw	r24, r18
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	a1 09       	sbc	r26, r1
 598:	b1 09       	sbc	r27, r1
 59a:	8a 83       	std	Y+2, r24	; 0x02
 59c:	9b 83       	std	Y+3, r25	; 0x03
 59e:	ac 83       	std	Y+4, r26	; 0x04
 5a0:	bd 83       	std	Y+5, r27	; 0x05
          prescalarbits = 0b011;
 5a2:	83 e0       	ldi	r24, 0x03	; 3
 5a4:	8a 87       	std	Y+10, r24	; 0x0a
        }

        if (ocr > 255)
 5a6:	8a 81       	ldd	r24, Y+2	; 0x02
 5a8:	9b 81       	ldd	r25, Y+3	; 0x03
 5aa:	ac 81       	ldd	r26, Y+4	; 0x04
 5ac:	bd 81       	ldd	r27, Y+5	; 0x05
 5ae:	8f 3f       	cpi	r24, 0xFF	; 255
 5b0:	91 05       	cpc	r25, r1
 5b2:	a1 05       	cpc	r26, r1
 5b4:	b1 05       	cpc	r27, r1
 5b6:	01 f0       	breq	.+0      	; 0x5b8 <_Z4tonehjm+0x12e>
 5b8:	00 f4       	brcc	.+0      	; 0x5ba <_Z4tonehjm+0x130>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <_Z4tonehjm+0x132>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
 5bc:	8c 85       	ldd	r24, Y+12	; 0x0c
 5be:	9d 85       	ldd	r25, Y+13	; 0x0d
 5c0:	9c 01       	movw	r18, r24
 5c2:	40 e0       	ldi	r20, 0x00	; 0
 5c4:	50 e0       	ldi	r21, 0x00	; 0
 5c6:	84 e2       	ldi	r24, 0x24	; 36
 5c8:	94 ef       	ldi	r25, 0xF4	; 244
 5ca:	a0 e0       	ldi	r26, 0x00	; 0
 5cc:	b0 e0       	ldi	r27, 0x00	; 0
 5ce:	bc 01       	movw	r22, r24
 5d0:	cd 01       	movw	r24, r26
 5d2:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 5d6:	da 01       	movw	r26, r20
 5d8:	c9 01       	movw	r24, r18
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	a1 09       	sbc	r26, r1
 5de:	b1 09       	sbc	r27, r1
 5e0:	8a 83       	std	Y+2, r24	; 0x02
 5e2:	9b 83       	std	Y+3, r25	; 0x03
 5e4:	ac 83       	std	Y+4, r26	; 0x04
 5e6:	bd 83       	std	Y+5, r27	; 0x05
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
 5e8:	89 81       	ldd	r24, Y+1	; 0x01
 5ea:	88 23       	and	r24, r24
 5ec:	01 f4       	brne	.+0      	; 0x5ee <_Z4tonehjm+0x164>
 5ee:	23 e0       	ldi	r18, 0x03	; 3
 5f0:	2c 8b       	std	Y+20, r18	; 0x14
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <_Z4tonehjm+0x16a>
 5f4:	84 e0       	ldi	r24, 0x04	; 4
 5f6:	8c 8b       	std	Y+20, r24	; 0x14
 5f8:	2c 89       	ldd	r18, Y+20	; 0x14
 5fa:	2a 87       	std	Y+10, r18	; 0x0a

          if (_timer == 2 && ocr > 255)
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	82 30       	cpi	r24, 0x02	; 2
 600:	01 f4       	brne	.+0      	; 0x602 <_Z4tonehjm+0x178>
 602:	8a 81       	ldd	r24, Y+2	; 0x02
 604:	9b 81       	ldd	r25, Y+3	; 0x03
 606:	ac 81       	ldd	r26, Y+4	; 0x04
 608:	bd 81       	ldd	r27, Y+5	; 0x05
 60a:	8f 3f       	cpi	r24, 0xFF	; 255
 60c:	91 05       	cpc	r25, r1
 60e:	a1 05       	cpc	r26, r1
 610:	b1 05       	cpc	r27, r1
 612:	01 f0       	breq	.+0      	; 0x614 <_Z4tonehjm+0x18a>
 614:	00 f0       	brcs	.+0      	; 0x616 <_Z4tonehjm+0x18c>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
 616:	8c 85       	ldd	r24, Y+12	; 0x0c
 618:	9d 85       	ldd	r25, Y+13	; 0x0d
 61a:	9c 01       	movw	r18, r24
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	50 e0       	ldi	r21, 0x00	; 0
 620:	82 e1       	ldi	r24, 0x12	; 18
 622:	9a e7       	ldi	r25, 0x7A	; 122
 624:	a0 e0       	ldi	r26, 0x00	; 0
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	bc 01       	movw	r22, r24
 62a:	cd 01       	movw	r24, r26
 62c:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 630:	da 01       	movw	r26, r20
 632:	c9 01       	movw	r24, r18
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	a1 09       	sbc	r26, r1
 638:	b1 09       	sbc	r27, r1
 63a:	8a 83       	std	Y+2, r24	; 0x02
 63c:	9b 83       	std	Y+3, r25	; 0x03
 63e:	ac 83       	std	Y+4, r26	; 0x04
 640:	bd 83       	std	Y+5, r27	; 0x05
            prescalarbits = 0b101;
 642:	85 e0       	ldi	r24, 0x05	; 5
 644:	8a 87       	std	Y+10, r24	; 0x0a
          }

          if (ocr > 255)
 646:	8a 81       	ldd	r24, Y+2	; 0x02
 648:	9b 81       	ldd	r25, Y+3	; 0x03
 64a:	ac 81       	ldd	r26, Y+4	; 0x04
 64c:	bd 81       	ldd	r27, Y+5	; 0x05
 64e:	8f 3f       	cpi	r24, 0xFF	; 255
 650:	91 05       	cpc	r25, r1
 652:	a1 05       	cpc	r26, r1
 654:	b1 05       	cpc	r27, r1
 656:	01 f0       	breq	.+0      	; 0x658 <_Z4tonehjm+0x1ce>
 658:	00 f4       	brcc	.+0      	; 0x65a <_Z4tonehjm+0x1d0>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <_Z4tonehjm+0x1d2>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
 65c:	8c 85       	ldd	r24, Y+12	; 0x0c
 65e:	9d 85       	ldd	r25, Y+13	; 0x0d
 660:	9c 01       	movw	r18, r24
 662:	40 e0       	ldi	r20, 0x00	; 0
 664:	50 e0       	ldi	r21, 0x00	; 0
 666:	89 e0       	ldi	r24, 0x09	; 9
 668:	9d e3       	ldi	r25, 0x3D	; 61
 66a:	a0 e0       	ldi	r26, 0x00	; 0
 66c:	b0 e0       	ldi	r27, 0x00	; 0
 66e:	bc 01       	movw	r22, r24
 670:	cd 01       	movw	r24, r26
 672:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 676:	da 01       	movw	r26, r20
 678:	c9 01       	movw	r24, r18
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	a1 09       	sbc	r26, r1
 67e:	b1 09       	sbc	r27, r1
 680:	8a 83       	std	Y+2, r24	; 0x02
 682:	9b 83       	std	Y+3, r25	; 0x03
 684:	ac 83       	std	Y+4, r26	; 0x04
 686:	bd 83       	std	Y+5, r27	; 0x05
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
 688:	89 81       	ldd	r24, Y+1	; 0x01
 68a:	88 23       	and	r24, r24
 68c:	01 f4       	brne	.+0      	; 0x68e <_Z4tonehjm+0x204>
 68e:	84 e0       	ldi	r24, 0x04	; 4
 690:	8b 8b       	std	Y+19, r24	; 0x13
 692:	00 c0       	rjmp	.+0      	; 0x694 <_Z4tonehjm+0x20a>
 694:	26 e0       	ldi	r18, 0x06	; 6
 696:	2b 8b       	std	Y+19, r18	; 0x13
 698:	8b 89       	ldd	r24, Y+19	; 0x13
 69a:	8a 87       	std	Y+10, r24	; 0x0a
            if (ocr > 255)
 69c:	8a 81       	ldd	r24, Y+2	; 0x02
 69e:	9b 81       	ldd	r25, Y+3	; 0x03
 6a0:	ac 81       	ldd	r26, Y+4	; 0x04
 6a2:	bd 81       	ldd	r27, Y+5	; 0x05
 6a4:	8f 3f       	cpi	r24, 0xFF	; 255
 6a6:	91 05       	cpc	r25, r1
 6a8:	a1 05       	cpc	r26, r1
 6aa:	b1 05       	cpc	r27, r1
 6ac:	01 f0       	breq	.+0      	; 0x6ae <_Z4tonehjm+0x224>
 6ae:	00 f0       	brcs	.+0      	; 0x6b0 <_Z4tonehjm+0x226>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
 6b0:	8c 85       	ldd	r24, Y+12	; 0x0c
 6b2:	9d 85       	ldd	r25, Y+13	; 0x0d
 6b4:	9c 01       	movw	r18, r24
 6b6:	40 e0       	ldi	r20, 0x00	; 0
 6b8:	50 e0       	ldi	r21, 0x00	; 0
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	99 e0       	ldi	r25, 0x09	; 9
 6be:	ad e3       	ldi	r26, 0x3D	; 61
 6c0:	b0 e0       	ldi	r27, 0x00	; 0
 6c2:	bc 01       	movw	r22, r24
 6c4:	cd 01       	movw	r24, r26
 6c6:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 6ca:	da 01       	movw	r26, r20
 6cc:	c9 01       	movw	r24, r18
 6ce:	07 2e       	mov	r0, r23
 6d0:	7a e0       	ldi	r23, 0x0A	; 10
 6d2:	b6 95       	lsr	r27
 6d4:	a7 95       	ror	r26
 6d6:	97 95       	ror	r25
 6d8:	87 95       	ror	r24
 6da:	7a 95       	dec	r23
 6dc:	01 f4       	brne	.+0      	; 0x6de <_Z4tonehjm+0x254>
 6de:	70 2d       	mov	r23, r0
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	a1 09       	sbc	r26, r1
 6e4:	b1 09       	sbc	r27, r1
 6e6:	8a 83       	std	Y+2, r24	; 0x02
 6e8:	9b 83       	std	Y+3, r25	; 0x03
 6ea:	ac 83       	std	Y+4, r26	; 0x04
 6ec:	bd 83       	std	Y+5, r27	; 0x05
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
 6ee:	89 81       	ldd	r24, Y+1	; 0x01
 6f0:	88 23       	and	r24, r24
 6f2:	01 f4       	brne	.+0      	; 0x6f4 <_Z4tonehjm+0x26a>
 6f4:	25 e0       	ldi	r18, 0x05	; 5
 6f6:	2a 8b       	std	Y+18, r18	; 0x12
 6f8:	00 c0       	rjmp	.+0      	; 0x6fa <_Z4tonehjm+0x270>
 6fa:	87 e0       	ldi	r24, 0x07	; 7
 6fc:	8a 8b       	std	Y+18, r24	; 0x12
 6fe:	2a 89       	ldd	r18, Y+18	; 0x12
 700:	2a 87       	std	Y+10, r18	; 0x0a
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
 702:	89 81       	ldd	r24, Y+1	; 0x01
 704:	88 23       	and	r24, r24
 706:	01 f4       	brne	.+0      	; 0x708 <_Z4tonehjm+0x27e>
      {
        TCCR0B = prescalarbits;
 708:	e5 e4       	ldi	r30, 0x45	; 69
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	8a 85       	ldd	r24, Y+10	; 0x0a
 70e:	80 83       	st	Z, r24
 710:	00 c0       	rjmp	.+0      	; 0x712 <_Z4tonehjm+0x288>
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = prescalarbits;
 712:	e1 eb       	ldi	r30, 0xB1	; 177
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	8a 85       	ldd	r24, Y+10	; 0x0a
 718:	80 83       	st	Z, r24
 71a:	00 c0       	rjmp	.+0      	; 0x71c <_Z4tonehjm+0x292>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
 71c:	8c 85       	ldd	r24, Y+12	; 0x0c
 71e:	9d 85       	ldd	r25, Y+13	; 0x0d
 720:	9c 01       	movw	r18, r24
 722:	40 e0       	ldi	r20, 0x00	; 0
 724:	50 e0       	ldi	r21, 0x00	; 0
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	99 e0       	ldi	r25, 0x09	; 9
 72a:	ad e3       	ldi	r26, 0x3D	; 61
 72c:	b0 e0       	ldi	r27, 0x00	; 0
 72e:	bc 01       	movw	r22, r24
 730:	cd 01       	movw	r24, r26
 732:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 736:	da 01       	movw	r26, r20
 738:	c9 01       	movw	r24, r18
 73a:	01 97       	sbiw	r24, 0x01	; 1
 73c:	a1 09       	sbc	r26, r1
 73e:	b1 09       	sbc	r27, r1
 740:	8a 83       	std	Y+2, r24	; 0x02
 742:	9b 83       	std	Y+3, r25	; 0x03
 744:	ac 83       	std	Y+4, r26	; 0x04
 746:	bd 83       	std	Y+5, r27	; 0x05

      prescalarbits = 0b001;
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	8a 87       	std	Y+10, r24	; 0x0a
      if (ocr > 0xffff)
 74c:	8a 81       	ldd	r24, Y+2	; 0x02
 74e:	9b 81       	ldd	r25, Y+3	; 0x03
 750:	ac 81       	ldd	r26, Y+4	; 0x04
 752:	bd 81       	ldd	r27, Y+5	; 0x05
 754:	80 30       	cpi	r24, 0x00	; 0
 756:	20 e0       	ldi	r18, 0x00	; 0
 758:	92 07       	cpc	r25, r18
 75a:	21 e0       	ldi	r18, 0x01	; 1
 75c:	a2 07       	cpc	r26, r18
 75e:	20 e0       	ldi	r18, 0x00	; 0
 760:	b2 07       	cpc	r27, r18
 762:	00 f0       	brcs	.+0      	; 0x764 <_Z4tonehjm+0x2da>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
 764:	8c 85       	ldd	r24, Y+12	; 0x0c
 766:	9d 85       	ldd	r25, Y+13	; 0x0d
 768:	9c 01       	movw	r18, r24
 76a:	40 e0       	ldi	r20, 0x00	; 0
 76c:	50 e0       	ldi	r21, 0x00	; 0
 76e:	84 e2       	ldi	r24, 0x24	; 36
 770:	94 ef       	ldi	r25, 0xF4	; 244
 772:	a0 e0       	ldi	r26, 0x00	; 0
 774:	b0 e0       	ldi	r27, 0x00	; 0
 776:	bc 01       	movw	r22, r24
 778:	cd 01       	movw	r24, r26
 77a:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 77e:	da 01       	movw	r26, r20
 780:	c9 01       	movw	r24, r18
 782:	01 97       	sbiw	r24, 0x01	; 1
 784:	a1 09       	sbc	r26, r1
 786:	b1 09       	sbc	r27, r1
 788:	8a 83       	std	Y+2, r24	; 0x02
 78a:	9b 83       	std	Y+3, r25	; 0x03
 78c:	ac 83       	std	Y+4, r26	; 0x04
 78e:	bd 83       	std	Y+5, r27	; 0x05
        prescalarbits = 0b011;
 790:	83 e0       	ldi	r24, 0x03	; 3
 792:	8a 87       	std	Y+10, r24	; 0x0a
      }

      if (_timer == 1)
 794:	89 81       	ldd	r24, Y+1	; 0x01
 796:	81 30       	cpi	r24, 0x01	; 1
 798:	01 f4       	brne	.+0      	; 0x79a <_Z4tonehjm+0x310>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
 79a:	a1 e8       	ldi	r26, 0x81	; 129
 79c:	b0 e0       	ldi	r27, 0x00	; 0
 79e:	e1 e8       	ldi	r30, 0x81	; 129
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	98 2f       	mov	r25, r24
 7a6:	98 7f       	andi	r25, 0xF8	; 248
 7a8:	8a 85       	ldd	r24, Y+10	; 0x0a
 7aa:	89 2b       	or	r24, r25
 7ac:	8c 93       	st	X, r24

    }
    

    // Calculate the toggle count
    if (duration > 0)
 7ae:	8e 85       	ldd	r24, Y+14	; 0x0e
 7b0:	9f 85       	ldd	r25, Y+15	; 0x0f
 7b2:	a8 89       	ldd	r26, Y+16	; 0x10
 7b4:	b9 89       	ldd	r27, Y+17	; 0x11
 7b6:	00 97       	sbiw	r24, 0x00	; 0
 7b8:	a1 05       	cpc	r26, r1
 7ba:	b1 05       	cpc	r27, r1
 7bc:	01 f0       	breq	.+0      	; 0x7be <_Z4tonehjm+0x334>
    {
      toggle_count = 2 * frequency * duration / 1000;
 7be:	8c 85       	ldd	r24, Y+12	; 0x0c
 7c0:	9d 85       	ldd	r25, Y+13	; 0x0d
 7c2:	88 0f       	add	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	cc 01       	movw	r24, r24
 7c8:	a0 e0       	ldi	r26, 0x00	; 0
 7ca:	b0 e0       	ldi	r27, 0x00	; 0
 7cc:	2e 85       	ldd	r18, Y+14	; 0x0e
 7ce:	3f 85       	ldd	r19, Y+15	; 0x0f
 7d0:	48 89       	ldd	r20, Y+16	; 0x10
 7d2:	59 89       	ldd	r21, Y+17	; 0x11
 7d4:	bc 01       	movw	r22, r24
 7d6:	cd 01       	movw	r24, r26
 7d8:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 7dc:	dc 01       	movw	r26, r24
 7de:	cb 01       	movw	r24, r22
 7e0:	28 ee       	ldi	r18, 0xE8	; 232
 7e2:	33 e0       	ldi	r19, 0x03	; 3
 7e4:	40 e0       	ldi	r20, 0x00	; 0
 7e6:	50 e0       	ldi	r21, 0x00	; 0
 7e8:	bc 01       	movw	r22, r24
 7ea:	cd 01       	movw	r24, r26
 7ec:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 7f0:	da 01       	movw	r26, r20
 7f2:	c9 01       	movw	r24, r18
 7f4:	8e 83       	std	Y+6, r24	; 0x06
 7f6:	9f 83       	std	Y+7, r25	; 0x07
 7f8:	a8 87       	std	Y+8, r26	; 0x08
 7fa:	b9 87       	std	Y+9, r27	; 0x09
 7fc:	00 c0       	rjmp	.+0      	; 0x7fe <_Z4tonehjm+0x374>
    }
    else
    {
      toggle_count = -1;
 7fe:	8f ef       	ldi	r24, 0xFF	; 255
 800:	9f ef       	ldi	r25, 0xFF	; 255
 802:	af ef       	ldi	r26, 0xFF	; 255
 804:	bf ef       	ldi	r27, 0xFF	; 255
 806:	8e 83       	std	Y+6, r24	; 0x06
 808:	9f 83       	std	Y+7, r25	; 0x07
 80a:	a8 87       	std	Y+8, r26	; 0x08
 80c:	b9 87       	std	Y+9, r27	; 0x09
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
 80e:	89 81       	ldd	r24, Y+1	; 0x01
 810:	8d 8b       	std	Y+21, r24	; 0x15
 812:	2d 89       	ldd	r18, Y+21	; 0x15
 814:	21 30       	cpi	r18, 0x01	; 1
 816:	01 f0       	breq	.+0      	; 0x818 <_Z4tonehjm+0x38e>
 818:	8d 89       	ldd	r24, Y+21	; 0x15
 81a:	82 30       	cpi	r24, 0x02	; 2
 81c:	01 f0       	breq	.+0      	; 0x81e <_Z4tonehjm+0x394>
 81e:	2d 89       	ldd	r18, Y+21	; 0x15
 820:	22 23       	and	r18, r18
 822:	01 f0       	breq	.+0      	; 0x824 <_Z4tonehjm+0x39a>
 824:	00 c0       	rjmp	.+0      	; 0x826 <_Z4tonehjm+0x39c>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
 826:	e7 e4       	ldi	r30, 0x47	; 71
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	8a 81       	ldd	r24, Y+2	; 0x02
 82c:	80 83       	st	Z, r24
        timer0_toggle_count = toggle_count;
 82e:	8e 81       	ldd	r24, Y+6	; 0x06
 830:	9f 81       	ldd	r25, Y+7	; 0x07
 832:	a8 85       	ldd	r26, Y+8	; 0x08
 834:	b9 85       	ldd	r27, Y+9	; 0x09
 836:	80 93 00 00 	sts	0x0000, r24
 83a:	90 93 00 00 	sts	0x0000, r25
 83e:	a0 93 00 00 	sts	0x0000, r26
 842:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK0, OCIE0A, 1);
 846:	ae e6       	ldi	r26, 0x6E	; 110
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	ee e6       	ldi	r30, 0x6E	; 110
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	80 81       	ld	r24, Z
 850:	82 60       	ori	r24, 0x02	; 2
 852:	8c 93       	st	X, r24
 854:	00 c0       	rjmp	.+0      	; 0x856 <_Z4tonehjm+0x3cc>
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
 856:	e8 e8       	ldi	r30, 0x88	; 136
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	8a 81       	ldd	r24, Y+2	; 0x02
 85c:	9b 81       	ldd	r25, Y+3	; 0x03
 85e:	91 83       	std	Z+1, r25	; 0x01
 860:	80 83       	st	Z, r24
        timer1_toggle_count = toggle_count;
 862:	8e 81       	ldd	r24, Y+6	; 0x06
 864:	9f 81       	ldd	r25, Y+7	; 0x07
 866:	a8 85       	ldd	r26, Y+8	; 0x08
 868:	b9 85       	ldd	r27, Y+9	; 0x09
 86a:	80 93 00 00 	sts	0x0000, r24
 86e:	90 93 00 00 	sts	0x0000, r25
 872:	a0 93 00 00 	sts	0x0000, r26
 876:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK1, OCIE1A, 1);
 87a:	af e6       	ldi	r26, 0x6F	; 111
 87c:	b0 e0       	ldi	r27, 0x00	; 0
 87e:	ef e6       	ldi	r30, 0x6F	; 111
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	80 81       	ld	r24, Z
 884:	82 60       	ori	r24, 0x02	; 2
 886:	8c 93       	st	X, r24
 888:	00 c0       	rjmp	.+0      	; 0x88a <_Z4tonehjm+0x400>
#endif
        break;

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
 88a:	e3 eb       	ldi	r30, 0xB3	; 179
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	8a 81       	ldd	r24, Y+2	; 0x02
 890:	80 83       	st	Z, r24
        timer2_toggle_count = toggle_count;
 892:	8e 81       	ldd	r24, Y+6	; 0x06
 894:	9f 81       	ldd	r25, Y+7	; 0x07
 896:	a8 85       	ldd	r26, Y+8	; 0x08
 898:	b9 85       	ldd	r27, Y+9	; 0x09
 89a:	80 93 00 00 	sts	0x0000, r24
 89e:	90 93 00 00 	sts	0x0000, r25
 8a2:	a0 93 00 00 	sts	0x0000, r26
 8a6:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK2, OCIE2A, 1);
 8aa:	a0 e7       	ldi	r26, 0x70	; 112
 8ac:	b0 e0       	ldi	r27, 0x00	; 0
 8ae:	e0 e7       	ldi	r30, 0x70	; 112
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	80 81       	ld	r24, Z
 8b4:	82 60       	ori	r24, 0x02	; 2
 8b6:	8c 93       	st	X, r24
        break;
#endif

    }
  }
}
 8b8:	65 96       	adiw	r28, 0x15	; 21
 8ba:	0f b6       	in	r0, 0x3f	; 63
 8bc:	f8 94       	cli
 8be:	de bf       	out	0x3e, r29	; 62
 8c0:	0f be       	out	0x3f, r0	; 63
 8c2:	cd bf       	out	0x3d, r28	; 61
 8c4:	cf 91       	pop	r28
 8c6:	df 91       	pop	r29
 8c8:	08 95       	ret

USBCore.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000588  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000ce5  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING

WInterrupts.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fa  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000f  00000000  00000000  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00000000  00000000  0000023d  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000240  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000cc1  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <attachInterrupt>:
#include "wiring_private.h"

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	89 83       	std	Y+1, r24	; 0x01
  16:	7b 83       	std	Y+3, r23	; 0x03
  18:	6a 83       	std	Y+2, r22	; 0x02
  1a:	5d 83       	std	Y+5, r21	; 0x05
  1c:	4c 83       	std	Y+4, r20	; 0x04
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
  1e:	89 81       	ldd	r24, Y+1	; 0x01
  20:	82 30       	cpi	r24, 0x02	; 2
  22:	00 f0       	brcs	.+0      	; 0x24 <attachInterrupt+0x24>
  24:	00 c0       	rjmp	.+0      	; 0x26 <attachInterrupt+0x26>
    intFunc[interruptNum] = userFunc;
  26:	89 81       	ldd	r24, Y+1	; 0x01
  28:	88 2f       	mov	r24, r24
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	88 0f       	add	r24, r24
  2e:	99 1f       	adc	r25, r25
  30:	fc 01       	movw	r30, r24
  32:	e0 50       	subi	r30, 0x00	; 0
  34:	f0 40       	sbci	r31, 0x00	; 0
  36:	8a 81       	ldd	r24, Y+2	; 0x02
  38:	9b 81       	ldd	r25, Y+3	; 0x03
  3a:	91 83       	std	Z+1, r25	; 0x01
  3c:	80 83       	st	Z, r24
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	28 2f       	mov	r18, r24
  42:	30 e0       	ldi	r19, 0x00	; 0
  44:	3f 83       	std	Y+7, r19	; 0x07
  46:	2e 83       	std	Y+6, r18	; 0x06
  48:	8e 81       	ldd	r24, Y+6	; 0x06
  4a:	9f 81       	ldd	r25, Y+7	; 0x07
  4c:	00 97       	sbiw	r24, 0x00	; 0
  4e:	01 f0       	breq	.+0      	; 0x50 <attachInterrupt+0x50>
  50:	2e 81       	ldd	r18, Y+6	; 0x06
  52:	3f 81       	ldd	r19, Y+7	; 0x07
  54:	21 30       	cpi	r18, 0x01	; 1
  56:	31 05       	cpc	r19, r1
  58:	01 f0       	breq	.+0      	; 0x5a <attachInterrupt+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <attachInterrupt+0x5c>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
  5c:	a9 e6       	ldi	r26, 0x69	; 105
  5e:	b0 e0       	ldi	r27, 0x00	; 0
  60:	e9 e6       	ldi	r30, 0x69	; 105
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	80 81       	ld	r24, Z
  66:	98 2f       	mov	r25, r24
  68:	9c 7f       	andi	r25, 0xFC	; 252
  6a:	8c 81       	ldd	r24, Y+4	; 0x04
  6c:	89 2b       	or	r24, r25
  6e:	8c 93       	st	X, r24
      EIMSK |= (1 << INT0);
  70:	ad e3       	ldi	r26, 0x3D	; 61
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	ed e3       	ldi	r30, 0x3D	; 61
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 81       	ld	r24, Z
  7a:	81 60       	ori	r24, 0x01	; 1
  7c:	8c 93       	st	X, r24
  7e:	00 c0       	rjmp	.+0      	; 0x80 <attachInterrupt+0x80>
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
  80:	a9 e6       	ldi	r26, 0x69	; 105
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	e9 e6       	ldi	r30, 0x69	; 105
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	28 2f       	mov	r18, r24
  8c:	23 7f       	andi	r18, 0xF3	; 243
  8e:	8c 81       	ldd	r24, Y+4	; 0x04
  90:	9d 81       	ldd	r25, Y+5	; 0x05
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	82 2b       	or	r24, r18
  9c:	8c 93       	st	X, r24
      EIMSK |= (1 << INT1);
  9e:	ad e3       	ldi	r26, 0x3D	; 61
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	ed e3       	ldi	r30, 0x3D	; 61
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8c 93       	st	X, r24
    #endif
      break;
#endif
    }
  }
}
  ac:	27 96       	adiw	r28, 0x07	; 7
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <detachInterrupt>:

void detachInterrupt(uint8_t interruptNum) {
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	00 d0       	rcall	.+0      	; 0xc4 <detachInterrupt+0x6>
  c4:	0f 92       	push	r0
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	89 83       	std	Y+1, r24	; 0x01
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	00 f4       	brcc	.+0      	; 0xd2 <detachInterrupt+0x14>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	28 2f       	mov	r18, r24
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	3b 83       	std	Y+3, r19	; 0x03
  da:	2a 83       	std	Y+2, r18	; 0x02
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	9b 81       	ldd	r25, Y+3	; 0x03
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	01 f0       	breq	.+0      	; 0xe4 <detachInterrupt+0x26>
  e4:	2a 81       	ldd	r18, Y+2	; 0x02
  e6:	3b 81       	ldd	r19, Y+3	; 0x03
  e8:	21 30       	cpi	r18, 0x01	; 1
  ea:	31 05       	cpc	r19, r1
  ec:	01 f0       	breq	.+0      	; 0xee <detachInterrupt+0x30>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <detachInterrupt+0x32>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
  f0:	ad e3       	ldi	r26, 0x3D	; 61
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	ed e3       	ldi	r30, 0x3D	; 61
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	8c 93       	st	X, r24
  fe:	00 c0       	rjmp	.+0      	; 0x100 <detachInterrupt+0x42>
    #endif
      break;

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
 100:	ad e3       	ldi	r26, 0x3D	; 61
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	ed e3       	ldi	r30, 0x3D	; 61
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8d 7f       	andi	r24, 0xFD	; 253
 10c:	8c 93       	st	X, r24
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	88 2f       	mov	r24, r24
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	fc 01       	movw	r30, r24
 11a:	e0 50       	subi	r30, 0x00	; 0
 11c:	f0 40       	sbci	r31, 0x00	; 0
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
  }
}
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	cf 91       	pop	r28
 12a:	df 91       	pop	r29
 12c:	08 95       	ret

0000012e <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
 150:	df 93       	push	r29
 152:	cf 93       	push	r28
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_0])
 158:	80 91 00 00 	lds	r24, 0x0000
 15c:	90 91 00 00 	lds	r25, 0x0000
 160:	00 97       	sbiw	r24, 0x00	; 0
 162:	01 f0       	breq	.+0      	; 0x164 <__vector_1+0x36>
    intFunc[EXTERNAL_INT_0]();
 164:	e0 91 00 00 	lds	r30, 0x0000
 168:	f0 91 00 00 	lds	r31, 0x0000
 16c:	09 95       	icall
}
 16e:	cf 91       	pop	r28
 170:	df 91       	pop	r29
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	7f 91       	pop	r23
 180:	6f 91       	pop	r22
 182:	5f 91       	pop	r21
 184:	4f 91       	pop	r20
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <__vector_2>:

ISR(INT1_vect) {
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_1])
 1be:	80 91 00 00 	lds	r24, 0x0000
 1c2:	90 91 00 00 	lds	r25, 0x0000
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	01 f0       	breq	.+0      	; 0x1ca <__vector_2+0x36>
    intFunc[EXTERNAL_INT_1]();
 1ca:	e0 91 00 00 	lds	r30, 0x0000
 1ce:	f0 91 00 00 	lds	r31, 0x0000
 1d2:	09 95       	icall
}
 1d4:	cf 91       	pop	r28
 1d6:	df 91       	pop	r29
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

WMath.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002aa  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000002de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000002de  2**0
                  ALLOC
  3 .stab         000003d8  00000000  00000000  000002e0  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000005af  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	df 93       	push	r29
  12:	cf 93       	push	r28
  14:	cd b7       	in	r28, 0x3d	; 61
  16:	de b7       	in	r29, 0x3e	; 62
  18:	60 97       	sbiw	r28, 0x10	; 16
  1a:	0f b6       	in	r0, 0x3f	; 63
  1c:	f8 94       	cli
  1e:	de bf       	out	0x3e, r29	; 62
  20:	0f be       	out	0x3f, r0	; 63
  22:	cd bf       	out	0x3d, r28	; 61
  24:	69 83       	std	Y+1, r22	; 0x01
  26:	7a 83       	std	Y+2, r23	; 0x02
  28:	8b 83       	std	Y+3, r24	; 0x03
  2a:	9c 83       	std	Y+4, r25	; 0x04
  2c:	2d 83       	std	Y+5, r18	; 0x05
  2e:	3e 83       	std	Y+6, r19	; 0x06
  30:	4f 83       	std	Y+7, r20	; 0x07
  32:	58 87       	std	Y+8, r21	; 0x08
  34:	e9 86       	std	Y+9, r14	; 0x09
  36:	fa 86       	std	Y+10, r15	; 0x0a
  38:	0b 87       	std	Y+11, r16	; 0x0b
  3a:	1c 87       	std	Y+12, r17	; 0x0c
  3c:	ad 86       	std	Y+13, r10	; 0x0d
  3e:	be 86       	std	Y+14, r11	; 0x0e
  40:	cf 86       	std	Y+15, r12	; 0x0f
  42:	d8 8a       	std	Y+16, r13	; 0x10
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  44:	29 81       	ldd	r18, Y+1	; 0x01
  46:	3a 81       	ldd	r19, Y+2	; 0x02
  48:	4b 81       	ldd	r20, Y+3	; 0x03
  4a:	5c 81       	ldd	r21, Y+4	; 0x04
  4c:	8d 81       	ldd	r24, Y+5	; 0x05
  4e:	9e 81       	ldd	r25, Y+6	; 0x06
  50:	af 81       	ldd	r26, Y+7	; 0x07
  52:	b8 85       	ldd	r27, Y+8	; 0x08
  54:	79 01       	movw	r14, r18
  56:	8a 01       	movw	r16, r20
  58:	e8 1a       	sub	r14, r24
  5a:	f9 0a       	sbc	r15, r25
  5c:	0a 0b       	sbc	r16, r26
  5e:	1b 0b       	sbc	r17, r27
  60:	2d 8d       	ldd	r18, Y+29	; 0x1d
  62:	3e 8d       	ldd	r19, Y+30	; 0x1e
  64:	4f 8d       	ldd	r20, Y+31	; 0x1f
  66:	58 a1       	ldd	r21, Y+32	; 0x20
  68:	8d 85       	ldd	r24, Y+13	; 0x0d
  6a:	9e 85       	ldd	r25, Y+14	; 0x0e
  6c:	af 85       	ldd	r26, Y+15	; 0x0f
  6e:	b8 89       	ldd	r27, Y+16	; 0x10
  70:	28 1b       	sub	r18, r24
  72:	39 0b       	sbc	r19, r25
  74:	4a 0b       	sbc	r20, r26
  76:	5b 0b       	sbc	r21, r27
  78:	c8 01       	movw	r24, r16
  7a:	b7 01       	movw	r22, r14
  7c:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  80:	7b 01       	movw	r14, r22
  82:	8c 01       	movw	r16, r24
  84:	29 85       	ldd	r18, Y+9	; 0x09
  86:	3a 85       	ldd	r19, Y+10	; 0x0a
  88:	4b 85       	ldd	r20, Y+11	; 0x0b
  8a:	5c 85       	ldd	r21, Y+12	; 0x0c
  8c:	8d 81       	ldd	r24, Y+5	; 0x05
  8e:	9e 81       	ldd	r25, Y+6	; 0x06
  90:	af 81       	ldd	r26, Y+7	; 0x07
  92:	b8 85       	ldd	r27, Y+8	; 0x08
  94:	28 1b       	sub	r18, r24
  96:	39 0b       	sbc	r19, r25
  98:	4a 0b       	sbc	r20, r26
  9a:	5b 0b       	sbc	r21, r27
  9c:	c8 01       	movw	r24, r16
  9e:	b7 01       	movw	r22, r14
  a0:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  a4:	da 01       	movw	r26, r20
  a6:	c9 01       	movw	r24, r18
  a8:	9c 01       	movw	r18, r24
  aa:	ad 01       	movw	r20, r26
  ac:	8d 85       	ldd	r24, Y+13	; 0x0d
  ae:	9e 85       	ldd	r25, Y+14	; 0x0e
  b0:	af 85       	ldd	r26, Y+15	; 0x0f
  b2:	b8 89       	ldd	r27, Y+16	; 0x10
  b4:	82 0f       	add	r24, r18
  b6:	93 1f       	adc	r25, r19
  b8:	a4 1f       	adc	r26, r20
  ba:	b5 1f       	adc	r27, r21
}
  bc:	bc 01       	movw	r22, r24
  be:	cd 01       	movw	r24, r26
  c0:	60 96       	adiw	r28, 0x10	; 16
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	1f 91       	pop	r17
  d2:	0f 91       	pop	r16
  d4:	ff 90       	pop	r15
  d6:	ef 90       	pop	r14
  d8:	df 90       	pop	r13
  da:	cf 90       	pop	r12
  dc:	bf 90       	pop	r11
  de:	af 90       	pop	r10
  e0:	08 95       	ret

000000e2 <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
  e2:	df 93       	push	r29
  e4:	cf 93       	push	r28
  e6:	00 d0       	rcall	.+0      	; 0xe8 <_Z8makeWordj+0x6>
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	9a 83       	std	Y+2, r25	; 0x02
  ee:	89 83       	std	Y+1, r24	; 0x01
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	9a 81       	ldd	r25, Y+2	; 0x02
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	cf 91       	pop	r28
  fa:	df 91       	pop	r29
  fc:	08 95       	ret

000000fe <_Z8makeWordhh>:
  fe:	df 93       	push	r29
 100:	cf 93       	push	r28
 102:	00 d0       	rcall	.+0      	; 0x104 <_Z8makeWordhh+0x6>
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	89 83       	std	Y+1, r24	; 0x01
 10a:	6a 83       	std	Y+2, r22	; 0x02
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	88 2f       	mov	r24, r24
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	38 2f       	mov	r19, r24
 114:	22 27       	eor	r18, r18
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	88 2f       	mov	r24, r24
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	82 2b       	or	r24, r18
 11e:	93 2b       	or	r25, r19
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	cf 91       	pop	r28
 126:	df 91       	pop	r29
 128:	08 95       	ret

0000012a <_Z6randoml>:
  if (seed != 0) {
    srandom(seed);
  }
}

long random(long howbig)
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	28 97       	sbiw	r28, 0x08	; 8
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
 13e:	69 83       	std	Y+1, r22	; 0x01
 140:	7a 83       	std	Y+2, r23	; 0x02
 142:	8b 83       	std	Y+3, r24	; 0x03
 144:	9c 83       	std	Y+4, r25	; 0x04
{
  if (howbig == 0) {
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	9a 81       	ldd	r25, Y+2	; 0x02
 14a:	ab 81       	ldd	r26, Y+3	; 0x03
 14c:	bc 81       	ldd	r27, Y+4	; 0x04
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	a1 05       	cpc	r26, r1
 152:	b1 05       	cpc	r27, r1
 154:	01 f4       	brne	.+0      	; 0x156 <_Z6randoml+0x2c>
    return 0;
 156:	1d 82       	std	Y+5, r1	; 0x05
 158:	1e 82       	std	Y+6, r1	; 0x06
 15a:	1f 82       	std	Y+7, r1	; 0x07
 15c:	18 86       	std	Y+8, r1	; 0x08
 15e:	00 c0       	rjmp	.+0      	; 0x160 <_Z6randoml+0x36>
  }
  return random() % howbig;
 160:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
 164:	dc 01       	movw	r26, r24
 166:	cb 01       	movw	r24, r22
 168:	29 81       	ldd	r18, Y+1	; 0x01
 16a:	3a 81       	ldd	r19, Y+2	; 0x02
 16c:	4b 81       	ldd	r20, Y+3	; 0x03
 16e:	5c 81       	ldd	r21, Y+4	; 0x04
 170:	bc 01       	movw	r22, r24
 172:	cd 01       	movw	r24, r26
 174:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
 178:	dc 01       	movw	r26, r24
 17a:	cb 01       	movw	r24, r22
 17c:	8d 83       	std	Y+5, r24	; 0x05
 17e:	9e 83       	std	Y+6, r25	; 0x06
 180:	af 83       	std	Y+7, r26	; 0x07
 182:	b8 87       	std	Y+8, r27	; 0x08
 184:	8d 81       	ldd	r24, Y+5	; 0x05
 186:	9e 81       	ldd	r25, Y+6	; 0x06
 188:	af 81       	ldd	r26, Y+7	; 0x07
 18a:	b8 85       	ldd	r27, Y+8	; 0x08
}
 18c:	bc 01       	movw	r22, r24
 18e:	cd 01       	movw	r24, r26
 190:	28 96       	adiw	r28, 0x08	; 8
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
 19c:	cf 91       	pop	r28
 19e:	df 91       	pop	r29
 1a0:	08 95       	ret

000001a2 <_Z6randomll>:

long random(long howsmall, long howbig)
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	df 93       	push	r29
 1ac:	cf 93       	push	r28
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	60 97       	sbiw	r28, 0x10	; 16
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	de bf       	out	0x3e, r29	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	cd bf       	out	0x3d, r28	; 61
 1be:	6d 83       	std	Y+5, r22	; 0x05
 1c0:	7e 83       	std	Y+6, r23	; 0x06
 1c2:	8f 83       	std	Y+7, r24	; 0x07
 1c4:	98 87       	std	Y+8, r25	; 0x08
 1c6:	29 87       	std	Y+9, r18	; 0x09
 1c8:	3a 87       	std	Y+10, r19	; 0x0a
 1ca:	4b 87       	std	Y+11, r20	; 0x0b
 1cc:	5c 87       	std	Y+12, r21	; 0x0c
{
  if (howsmall >= howbig) {
 1ce:	2d 81       	ldd	r18, Y+5	; 0x05
 1d0:	3e 81       	ldd	r19, Y+6	; 0x06
 1d2:	4f 81       	ldd	r20, Y+7	; 0x07
 1d4:	58 85       	ldd	r21, Y+8	; 0x08
 1d6:	89 85       	ldd	r24, Y+9	; 0x09
 1d8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1da:	ab 85       	ldd	r26, Y+11	; 0x0b
 1dc:	bc 85       	ldd	r27, Y+12	; 0x0c
 1de:	28 17       	cp	r18, r24
 1e0:	39 07       	cpc	r19, r25
 1e2:	4a 07       	cpc	r20, r26
 1e4:	5b 07       	cpc	r21, r27
 1e6:	04 f0       	brlt	.+0      	; 0x1e8 <_Z6randomll+0x46>
    return howsmall;
 1e8:	ed 80       	ldd	r14, Y+5	; 0x05
 1ea:	fe 80       	ldd	r15, Y+6	; 0x06
 1ec:	0f 81       	ldd	r16, Y+7	; 0x07
 1ee:	18 85       	ldd	r17, Y+8	; 0x08
 1f0:	ed 86       	std	Y+13, r14	; 0x0d
 1f2:	fe 86       	std	Y+14, r15	; 0x0e
 1f4:	0f 87       	std	Y+15, r16	; 0x0f
 1f6:	18 8b       	std	Y+16, r17	; 0x10
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <_Z6randomll+0x58>
  }
  long diff = howbig - howsmall;
 1fa:	29 85       	ldd	r18, Y+9	; 0x09
 1fc:	3a 85       	ldd	r19, Y+10	; 0x0a
 1fe:	4b 85       	ldd	r20, Y+11	; 0x0b
 200:	5c 85       	ldd	r21, Y+12	; 0x0c
 202:	8d 81       	ldd	r24, Y+5	; 0x05
 204:	9e 81       	ldd	r25, Y+6	; 0x06
 206:	af 81       	ldd	r26, Y+7	; 0x07
 208:	b8 85       	ldd	r27, Y+8	; 0x08
 20a:	79 01       	movw	r14, r18
 20c:	8a 01       	movw	r16, r20
 20e:	e8 1a       	sub	r14, r24
 210:	f9 0a       	sbc	r15, r25
 212:	0a 0b       	sbc	r16, r26
 214:	1b 0b       	sbc	r17, r27
 216:	d8 01       	movw	r26, r16
 218:	c7 01       	movw	r24, r14
 21a:	89 83       	std	Y+1, r24	; 0x01
 21c:	9a 83       	std	Y+2, r25	; 0x02
 21e:	ab 83       	std	Y+3, r26	; 0x03
 220:	bc 83       	std	Y+4, r27	; 0x04
  return random(diff) + howsmall;
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
 226:	ab 81       	ldd	r26, Y+3	; 0x03
 228:	bc 81       	ldd	r27, Y+4	; 0x04
 22a:	bc 01       	movw	r22, r24
 22c:	cd 01       	movw	r24, r26
 22e:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
 232:	9b 01       	movw	r18, r22
 234:	ac 01       	movw	r20, r24
 236:	8d 81       	ldd	r24, Y+5	; 0x05
 238:	9e 81       	ldd	r25, Y+6	; 0x06
 23a:	af 81       	ldd	r26, Y+7	; 0x07
 23c:	b8 85       	ldd	r27, Y+8	; 0x08
 23e:	79 01       	movw	r14, r18
 240:	8a 01       	movw	r16, r20
 242:	e8 0e       	add	r14, r24
 244:	f9 1e       	adc	r15, r25
 246:	0a 1f       	adc	r16, r26
 248:	1b 1f       	adc	r17, r27
 24a:	ed 86       	std	Y+13, r14	; 0x0d
 24c:	fe 86       	std	Y+14, r15	; 0x0e
 24e:	0f 87       	std	Y+15, r16	; 0x0f
 250:	18 8b       	std	Y+16, r17	; 0x10
 252:	8d 85       	ldd	r24, Y+13	; 0x0d
 254:	9e 85       	ldd	r25, Y+14	; 0x0e
 256:	af 85       	ldd	r26, Y+15	; 0x0f
 258:	b8 89       	ldd	r27, Y+16	; 0x10
}
 25a:	bc 01       	movw	r22, r24
 25c:	cd 01       	movw	r24, r26
 25e:	60 96       	adiw	r28, 0x10	; 16
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	08 95       	ret

00000278 <_Z10randomSeedj>:

extern "C" {
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
 278:	df 93       	push	r29
 27a:	cf 93       	push	r28
 27c:	00 d0       	rcall	.+0      	; 0x27e <_Z10randomSeedj+0x6>
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	9a 83       	std	Y+2, r25	; 0x02
 284:	89 83       	std	Y+1, r24	; 0x01
{
  if (seed != 0) {
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	9a 81       	ldd	r25, Y+2	; 0x02
 28a:	00 97       	sbiw	r24, 0x00	; 0
 28c:	01 f0       	breq	.+0      	; 0x28e <_Z10randomSeedj+0x16>
    srandom(seed);
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	9a 81       	ldd	r25, Y+2	; 0x02
 292:	cc 01       	movw	r24, r24
 294:	a0 e0       	ldi	r26, 0x00	; 0
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	bc 01       	movw	r22, r24
 29a:	cd 01       	movw	r24, r26
 29c:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  }
}
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	cf 91       	pop	r28
 2a6:	df 91       	pop	r29
 2a8:	08 95       	ret

WString.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021ce  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000001  00000000  00000000  00002202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00000000  00000000  00002203  2**0
                  ALLOC
  3 .stab         0000294c  00000000  00000000  00002204  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001e55  00000000  00000000  00004b50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ZN6String4initEv>:

/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
       0:	df 93       	push	r29
       2:	cf 93       	push	r28
       4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String4initEv+0x6>
       6:	cd b7       	in	r28, 0x3d	; 61
       8:	de b7       	in	r29, 0x3e	; 62
       a:	9a 83       	std	Y+2, r25	; 0x02
       c:	89 83       	std	Y+1, r24	; 0x01
{
	buffer = NULL;
       e:	e9 81       	ldd	r30, Y+1	; 0x01
      10:	fa 81       	ldd	r31, Y+2	; 0x02
      12:	11 82       	std	Z+1, r1	; 0x01
      14:	10 82       	st	Z, r1
	capacity = 0;
      16:	e9 81       	ldd	r30, Y+1	; 0x01
      18:	fa 81       	ldd	r31, Y+2	; 0x02
      1a:	13 82       	std	Z+3, r1	; 0x03
      1c:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
      1e:	e9 81       	ldd	r30, Y+1	; 0x01
      20:	fa 81       	ldd	r31, Y+2	; 0x02
      22:	15 82       	std	Z+5, r1	; 0x05
      24:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
      26:	e9 81       	ldd	r30, Y+1	; 0x01
      28:	fa 81       	ldd	r31, Y+2	; 0x02
      2a:	16 82       	std	Z+6, r1	; 0x06
}
      2c:	0f 90       	pop	r0
      2e:	0f 90       	pop	r0
      30:	cf 91       	pop	r28
      32:	df 91       	pop	r29
      34:	08 95       	ret

00000036 <_ZN6String9setCharAtEjc>:
char String::charAt(unsigned int loc) const
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
      36:	df 93       	push	r29
      38:	cf 93       	push	r28
      3a:	00 d0       	rcall	.+0      	; 0x3c <_ZN6String9setCharAtEjc+0x6>
      3c:	00 d0       	rcall	.+0      	; 0x3e <_ZN6String9setCharAtEjc+0x8>
      3e:	0f 92       	push	r0
      40:	cd b7       	in	r28, 0x3d	; 61
      42:	de b7       	in	r29, 0x3e	; 62
      44:	9a 83       	std	Y+2, r25	; 0x02
      46:	89 83       	std	Y+1, r24	; 0x01
      48:	7c 83       	std	Y+4, r23	; 0x04
      4a:	6b 83       	std	Y+3, r22	; 0x03
      4c:	4d 83       	std	Y+5, r20	; 0x05
{
	if (loc < len) buffer[loc] = c;
      4e:	e9 81       	ldd	r30, Y+1	; 0x01
      50:	fa 81       	ldd	r31, Y+2	; 0x02
      52:	24 81       	ldd	r18, Z+4	; 0x04
      54:	35 81       	ldd	r19, Z+5	; 0x05
      56:	8b 81       	ldd	r24, Y+3	; 0x03
      58:	9c 81       	ldd	r25, Y+4	; 0x04
      5a:	82 17       	cp	r24, r18
      5c:	93 07       	cpc	r25, r19
      5e:	00 f4       	brcc	.+0      	; 0x60 <_ZN6String9setCharAtEjc+0x2a>
      60:	e9 81       	ldd	r30, Y+1	; 0x01
      62:	fa 81       	ldd	r31, Y+2	; 0x02
      64:	20 81       	ld	r18, Z
      66:	31 81       	ldd	r19, Z+1	; 0x01
      68:	8b 81       	ldd	r24, Y+3	; 0x03
      6a:	9c 81       	ldd	r25, Y+4	; 0x04
      6c:	f9 01       	movw	r30, r18
      6e:	e8 0f       	add	r30, r24
      70:	f9 1f       	adc	r31, r25
      72:	8d 81       	ldd	r24, Y+5	; 0x05
      74:	80 83       	st	Z, r24
}
      76:	0f 90       	pop	r0
      78:	0f 90       	pop	r0
      7a:	0f 90       	pop	r0
      7c:	0f 90       	pop	r0
      7e:	0f 90       	pop	r0
      80:	cf 91       	pop	r28
      82:	df 91       	pop	r29
      84:	08 95       	ret

00000086 <_ZN6StringixEj>:

char & String::operator[](unsigned int index)
      86:	df 93       	push	r29
      88:	cf 93       	push	r28
      8a:	00 d0       	rcall	.+0      	; 0x8c <_ZN6StringixEj+0x6>
      8c:	00 d0       	rcall	.+0      	; 0x8e <_ZN6StringixEj+0x8>
      8e:	00 d0       	rcall	.+0      	; 0x90 <_ZN6StringixEj+0xa>
      90:	cd b7       	in	r28, 0x3d	; 61
      92:	de b7       	in	r29, 0x3e	; 62
      94:	9a 83       	std	Y+2, r25	; 0x02
      96:	89 83       	std	Y+1, r24	; 0x01
      98:	7c 83       	std	Y+4, r23	; 0x04
      9a:	6b 83       	std	Y+3, r22	; 0x03
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
      9c:	e9 81       	ldd	r30, Y+1	; 0x01
      9e:	fa 81       	ldd	r31, Y+2	; 0x02
      a0:	24 81       	ldd	r18, Z+4	; 0x04
      a2:	35 81       	ldd	r19, Z+5	; 0x05
      a4:	8b 81       	ldd	r24, Y+3	; 0x03
      a6:	9c 81       	ldd	r25, Y+4	; 0x04
      a8:	82 17       	cp	r24, r18
      aa:	93 07       	cpc	r25, r19
      ac:	00 f4       	brcc	.+0      	; 0xae <_ZN6StringixEj+0x28>
      ae:	e9 81       	ldd	r30, Y+1	; 0x01
      b0:	fa 81       	ldd	r31, Y+2	; 0x02
      b2:	80 81       	ld	r24, Z
      b4:	91 81       	ldd	r25, Z+1	; 0x01
      b6:	00 97       	sbiw	r24, 0x00	; 0
      b8:	01 f4       	brne	.+0      	; 0xba <_ZN6StringixEj+0x34>
		dummy_writable_char = 0;
      ba:	10 92 00 00 	sts	0x0000, r1
		return dummy_writable_char;
      be:	40 e0       	ldi	r20, 0x00	; 0
      c0:	50 e0       	ldi	r21, 0x00	; 0
      c2:	5e 83       	std	Y+6, r21	; 0x06
      c4:	4d 83       	std	Y+5, r20	; 0x05
      c6:	00 c0       	rjmp	.+0      	; 0xc8 <_ZN6StringixEj+0x42>
	}
	return buffer[index];
      c8:	e9 81       	ldd	r30, Y+1	; 0x01
      ca:	fa 81       	ldd	r31, Y+2	; 0x02
      cc:	20 81       	ld	r18, Z
      ce:	31 81       	ldd	r19, Z+1	; 0x01
      d0:	8b 81       	ldd	r24, Y+3	; 0x03
      d2:	9c 81       	ldd	r25, Y+4	; 0x04
      d4:	a9 01       	movw	r20, r18
      d6:	48 0f       	add	r20, r24
      d8:	59 1f       	adc	r21, r25
      da:	5e 83       	std	Y+6, r21	; 0x06
      dc:	4d 83       	std	Y+5, r20	; 0x05
      de:	8d 81       	ldd	r24, Y+5	; 0x05
      e0:	9e 81       	ldd	r25, Y+6	; 0x06
}
      e2:	26 96       	adiw	r28, 0x06	; 6
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	f8 94       	cli
      e8:	de bf       	out	0x3e, r29	; 62
      ea:	0f be       	out	0x3f, r0	; 63
      ec:	cd bf       	out	0x3d, r28	; 61
      ee:	cf 91       	pop	r28
      f0:	df 91       	pop	r29
      f2:	08 95       	ret

000000f4 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
      f4:	df 93       	push	r29
      f6:	cf 93       	push	r28
      f8:	00 d0       	rcall	.+0      	; 0xfa <_ZNK6StringixEj+0x6>
      fa:	00 d0       	rcall	.+0      	; 0xfc <_ZNK6StringixEj+0x8>
      fc:	0f 92       	push	r0
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
     102:	9a 83       	std	Y+2, r25	; 0x02
     104:	89 83       	std	Y+1, r24	; 0x01
     106:	7c 83       	std	Y+4, r23	; 0x04
     108:	6b 83       	std	Y+3, r22	; 0x03
{
	if (index >= len || !buffer) return 0;
     10a:	e9 81       	ldd	r30, Y+1	; 0x01
     10c:	fa 81       	ldd	r31, Y+2	; 0x02
     10e:	24 81       	ldd	r18, Z+4	; 0x04
     110:	35 81       	ldd	r19, Z+5	; 0x05
     112:	8b 81       	ldd	r24, Y+3	; 0x03
     114:	9c 81       	ldd	r25, Y+4	; 0x04
     116:	82 17       	cp	r24, r18
     118:	93 07       	cpc	r25, r19
     11a:	00 f4       	brcc	.+0      	; 0x11c <_ZNK6StringixEj+0x28>
     11c:	e9 81       	ldd	r30, Y+1	; 0x01
     11e:	fa 81       	ldd	r31, Y+2	; 0x02
     120:	80 81       	ld	r24, Z
     122:	91 81       	ldd	r25, Z+1	; 0x01
     124:	00 97       	sbiw	r24, 0x00	; 0
     126:	01 f4       	brne	.+0      	; 0x128 <_ZNK6StringixEj+0x34>
     128:	1d 82       	std	Y+5, r1	; 0x05
     12a:	00 c0       	rjmp	.+0      	; 0x12c <_ZNK6StringixEj+0x38>
	return buffer[index];
     12c:	e9 81       	ldd	r30, Y+1	; 0x01
     12e:	fa 81       	ldd	r31, Y+2	; 0x02
     130:	20 81       	ld	r18, Z
     132:	31 81       	ldd	r19, Z+1	; 0x01
     134:	8b 81       	ldd	r24, Y+3	; 0x03
     136:	9c 81       	ldd	r25, Y+4	; 0x04
     138:	f9 01       	movw	r30, r18
     13a:	e8 0f       	add	r30, r24
     13c:	f9 1f       	adc	r31, r25
     13e:	80 81       	ld	r24, Z
     140:	8d 83       	std	Y+5, r24	; 0x05
     142:	8d 81       	ldd	r24, Y+5	; 0x05
}
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	0f 90       	pop	r0
     14a:	0f 90       	pop	r0
     14c:	0f 90       	pop	r0
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <_ZNK6String6charAtEj>:

/*********************************************/
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
     154:	df 93       	push	r29
     156:	cf 93       	push	r28
     158:	00 d0       	rcall	.+0      	; 0x15a <_ZNK6String6charAtEj+0x6>
     15a:	00 d0       	rcall	.+0      	; 0x15c <_ZNK6String6charAtEj+0x8>
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	9a 83       	std	Y+2, r25	; 0x02
     162:	89 83       	std	Y+1, r24	; 0x01
     164:	7c 83       	std	Y+4, r23	; 0x04
     166:	6b 83       	std	Y+3, r22	; 0x03
{
	return operator[](loc);
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	9a 81       	ldd	r25, Y+2	; 0x02
     16c:	2b 81       	ldd	r18, Y+3	; 0x03
     16e:	3c 81       	ldd	r19, Y+4	; 0x04
     170:	b9 01       	movw	r22, r18
     172:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
     176:	0f 90       	pop	r0
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	cf 91       	pop	r28
     180:	df 91       	pop	r29
     182:	08 95       	ret

00000184 <_ZN6String7replaceEcc>:

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
     184:	df 93       	push	r29
     186:	cf 93       	push	r28
     188:	00 d0       	rcall	.+0      	; 0x18a <_ZN6String7replaceEcc+0x6>
     18a:	00 d0       	rcall	.+0      	; 0x18c <_ZN6String7replaceEcc+0x8>
     18c:	00 d0       	rcall	.+0      	; 0x18e <_ZN6String7replaceEcc+0xa>
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	9c 83       	std	Y+4, r25	; 0x04
     194:	8b 83       	std	Y+3, r24	; 0x03
     196:	6d 83       	std	Y+5, r22	; 0x05
     198:	4e 83       	std	Y+6, r20	; 0x06
{
	if (!buffer) return;
     19a:	eb 81       	ldd	r30, Y+3	; 0x03
     19c:	fc 81       	ldd	r31, Y+4	; 0x04
     19e:	80 81       	ld	r24, Z
     1a0:	91 81       	ldd	r25, Z+1	; 0x01
     1a2:	00 97       	sbiw	r24, 0x00	; 0
     1a4:	01 f0       	breq	.+0      	; 0x1a6 <_ZN6String7replaceEcc+0x22>
	for (char *p = buffer; *p; p++) {
     1a6:	eb 81       	ldd	r30, Y+3	; 0x03
     1a8:	fc 81       	ldd	r31, Y+4	; 0x04
     1aa:	80 81       	ld	r24, Z
     1ac:	91 81       	ldd	r25, Z+1	; 0x01
     1ae:	9a 83       	std	Y+2, r25	; 0x02
     1b0:	89 83       	std	Y+1, r24	; 0x01
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_ZN6String7replaceEcc+0x30>
		if (*p == find) *p = replace;
     1b4:	e9 81       	ldd	r30, Y+1	; 0x01
     1b6:	fa 81       	ldd	r31, Y+2	; 0x02
     1b8:	90 81       	ld	r25, Z
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	98 17       	cp	r25, r24
     1be:	01 f4       	brne	.+0      	; 0x1c0 <_ZN6String7replaceEcc+0x3c>
     1c0:	e9 81       	ldd	r30, Y+1	; 0x01
     1c2:	fa 81       	ldd	r31, Y+2	; 0x02
     1c4:	8e 81       	ldd	r24, Y+6	; 0x06
     1c6:	80 83       	st	Z, r24
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	9a 81       	ldd	r25, Y+2	; 0x02
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	9a 83       	std	Y+2, r25	; 0x02
     1d0:	89 83       	std	Y+1, r24	; 0x01
     1d2:	e9 81       	ldd	r30, Y+1	; 0x01
     1d4:	fa 81       	ldd	r31, Y+2	; 0x02
     1d6:	80 81       	ld	r24, Z
     1d8:	88 23       	and	r24, r24
     1da:	01 f4       	brne	.+0      	; 0x1dc <_ZN6String7replaceEcc+0x58>
		if (*p == find) *p = replace;
	}
}
     1dc:	26 96       	adiw	r28, 0x06	; 6
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <_ZNK6String5toIntEv>:

/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <_ZNK6String5toIntEv+0x6>
     1f4:	00 d0       	rcall	.+0      	; 0x1f6 <_ZNK6String5toIntEv+0x8>
     1f6:	00 d0       	rcall	.+0      	; 0x1f8 <_ZNK6String5toIntEv+0xa>
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	9a 83       	std	Y+2, r25	; 0x02
     1fe:	89 83       	std	Y+1, r24	; 0x01
{
	if (buffer) return atol(buffer);
     200:	e9 81       	ldd	r30, Y+1	; 0x01
     202:	fa 81       	ldd	r31, Y+2	; 0x02
     204:	80 81       	ld	r24, Z
     206:	91 81       	ldd	r25, Z+1	; 0x01
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	01 f0       	breq	.+0      	; 0x20c <_ZNK6String5toIntEv+0x1e>
     20c:	e9 81       	ldd	r30, Y+1	; 0x01
     20e:	fa 81       	ldd	r31, Y+2	; 0x02
     210:	80 81       	ld	r24, Z
     212:	91 81       	ldd	r25, Z+1	; 0x01
     214:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     218:	6b 83       	std	Y+3, r22	; 0x03
     21a:	7c 83       	std	Y+4, r23	; 0x04
     21c:	8d 83       	std	Y+5, r24	; 0x05
     21e:	9e 83       	std	Y+6, r25	; 0x06
     220:	00 c0       	rjmp	.+0      	; 0x222 <_ZNK6String5toIntEv+0x34>
	return 0;
     222:	1b 82       	std	Y+3, r1	; 0x03
     224:	1c 82       	std	Y+4, r1	; 0x04
     226:	1d 82       	std	Y+5, r1	; 0x05
     228:	1e 82       	std	Y+6, r1	; 0x06
     22a:	8b 81       	ldd	r24, Y+3	; 0x03
     22c:	9c 81       	ldd	r25, Y+4	; 0x04
     22e:	ad 81       	ldd	r26, Y+5	; 0x05
     230:	be 81       	ldd	r27, Y+6	; 0x06
}
     232:	bc 01       	movw	r22, r24
     234:	cd 01       	movw	r24, r26
     236:	26 96       	adiw	r28, 0x06	; 6
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
     242:	cf 91       	pop	r28
     244:	df 91       	pop	r29
     246:	08 95       	ret

00000248 <_ZN6String4trimEv>:
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}

void String::trim(void)
     248:	df 93       	push	r29
     24a:	cf 93       	push	r28
     24c:	00 d0       	rcall	.+0      	; 0x24e <_ZN6String4trimEv+0x6>
     24e:	00 d0       	rcall	.+0      	; 0x250 <_ZN6String4trimEv+0x8>
     250:	00 d0       	rcall	.+0      	; 0x252 <_ZN6String4trimEv+0xa>
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
     256:	9e 83       	std	Y+6, r25	; 0x06
     258:	8d 83       	std	Y+5, r24	; 0x05
{
	if (!buffer || len == 0) return;
     25a:	ed 81       	ldd	r30, Y+5	; 0x05
     25c:	fe 81       	ldd	r31, Y+6	; 0x06
     25e:	80 81       	ld	r24, Z
     260:	91 81       	ldd	r25, Z+1	; 0x01
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	01 f4       	brne	.+0      	; 0x266 <_ZN6String4trimEv+0x1e>
     266:	00 c0       	rjmp	.+0      	; 0x268 <_ZN6String4trimEv+0x20>
     268:	ed 81       	ldd	r30, Y+5	; 0x05
     26a:	fe 81       	ldd	r31, Y+6	; 0x06
     26c:	84 81       	ldd	r24, Z+4	; 0x04
     26e:	95 81       	ldd	r25, Z+5	; 0x05
     270:	00 97       	sbiw	r24, 0x00	; 0
     272:	01 f4       	brne	.+0      	; 0x274 <_ZN6String4trimEv+0x2c>
     274:	00 c0       	rjmp	.+0      	; 0x276 <_ZN6String4trimEv+0x2e>
	char *begin = buffer;
     276:	ed 81       	ldd	r30, Y+5	; 0x05
     278:	fe 81       	ldd	r31, Y+6	; 0x06
     27a:	80 81       	ld	r24, Z
     27c:	91 81       	ldd	r25, Z+1	; 0x01
     27e:	9c 83       	std	Y+4, r25	; 0x04
     280:	8b 83       	std	Y+3, r24	; 0x03
     282:	00 c0       	rjmp	.+0      	; 0x284 <_ZN6String4trimEv+0x3c>
	while (isspace(*begin)) begin++;
     284:	8b 81       	ldd	r24, Y+3	; 0x03
     286:	9c 81       	ldd	r25, Y+4	; 0x04
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	9c 83       	std	Y+4, r25	; 0x04
     28c:	8b 83       	std	Y+3, r24	; 0x03
     28e:	eb 81       	ldd	r30, Y+3	; 0x03
     290:	fc 81       	ldd	r31, Y+4	; 0x04
     292:	80 81       	ld	r24, Z
     294:	88 2f       	mov	r24, r24
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     29c:	00 97       	sbiw	r24, 0x00	; 0
     29e:	01 f4       	brne	.+0      	; 0x2a0 <_ZN6String4trimEv+0x58>
	char *end = buffer + len - 1;
     2a0:	ed 81       	ldd	r30, Y+5	; 0x05
     2a2:	fe 81       	ldd	r31, Y+6	; 0x06
     2a4:	20 81       	ld	r18, Z
     2a6:	31 81       	ldd	r19, Z+1	; 0x01
     2a8:	ed 81       	ldd	r30, Y+5	; 0x05
     2aa:	fe 81       	ldd	r31, Y+6	; 0x06
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	95 81       	ldd	r25, Z+5	; 0x05
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	82 0f       	add	r24, r18
     2b4:	93 1f       	adc	r25, r19
     2b6:	9a 83       	std	Y+2, r25	; 0x02
     2b8:	89 83       	std	Y+1, r24	; 0x01
     2ba:	00 c0       	rjmp	.+0      	; 0x2bc <_ZN6String4trimEv+0x74>
	while (isspace(*end) && end >= begin) end--;
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	9a 81       	ldd	r25, Y+2	; 0x02
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	9a 83       	std	Y+2, r25	; 0x02
     2c4:	89 83       	std	Y+1, r24	; 0x01
     2c6:	e9 81       	ldd	r30, Y+1	; 0x01
     2c8:	fa 81       	ldd	r31, Y+2	; 0x02
     2ca:	80 81       	ld	r24, Z
     2cc:	88 2f       	mov	r24, r24
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     2d4:	00 97       	sbiw	r24, 0x00	; 0
     2d6:	01 f0       	breq	.+0      	; 0x2d8 <_ZN6String4trimEv+0x90>
     2d8:	29 81       	ldd	r18, Y+1	; 0x01
     2da:	3a 81       	ldd	r19, Y+2	; 0x02
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	9c 81       	ldd	r25, Y+4	; 0x04
     2e0:	28 17       	cp	r18, r24
     2e2:	39 07       	cpc	r19, r25
     2e4:	00 f4       	brcc	.+0      	; 0x2e6 <_ZN6String4trimEv+0x9e>
	len = end + 1 - begin;
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ea:	01 96       	adiw	r24, 0x01	; 1
     2ec:	9c 01       	movw	r18, r24
     2ee:	8b 81       	ldd	r24, Y+3	; 0x03
     2f0:	9c 81       	ldd	r25, Y+4	; 0x04
     2f2:	a9 01       	movw	r20, r18
     2f4:	48 1b       	sub	r20, r24
     2f6:	59 0b       	sbc	r21, r25
     2f8:	ca 01       	movw	r24, r20
     2fa:	ed 81       	ldd	r30, Y+5	; 0x05
     2fc:	fe 81       	ldd	r31, Y+6	; 0x06
     2fe:	95 83       	std	Z+5, r25	; 0x05
     300:	84 83       	std	Z+4, r24	; 0x04
	if (begin > buffer) memcpy(buffer, begin, len);
     302:	ed 81       	ldd	r30, Y+5	; 0x05
     304:	fe 81       	ldd	r31, Y+6	; 0x06
     306:	20 81       	ld	r18, Z
     308:	31 81       	ldd	r19, Z+1	; 0x01
     30a:	8b 81       	ldd	r24, Y+3	; 0x03
     30c:	9c 81       	ldd	r25, Y+4	; 0x04
     30e:	28 17       	cp	r18, r24
     310:	39 07       	cpc	r19, r25
     312:	00 f4       	brcc	.+0      	; 0x314 <_ZN6String4trimEv+0xcc>
     314:	ed 81       	ldd	r30, Y+5	; 0x05
     316:	fe 81       	ldd	r31, Y+6	; 0x06
     318:	80 81       	ld	r24, Z
     31a:	91 81       	ldd	r25, Z+1	; 0x01
     31c:	ed 81       	ldd	r30, Y+5	; 0x05
     31e:	fe 81       	ldd	r31, Y+6	; 0x06
     320:	44 81       	ldd	r20, Z+4	; 0x04
     322:	55 81       	ldd	r21, Z+5	; 0x05
     324:	2b 81       	ldd	r18, Y+3	; 0x03
     326:	3c 81       	ldd	r19, Y+4	; 0x04
     328:	b9 01       	movw	r22, r18
     32a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	buffer[len] = 0;
     32e:	ed 81       	ldd	r30, Y+5	; 0x05
     330:	fe 81       	ldd	r31, Y+6	; 0x06
     332:	20 81       	ld	r18, Z
     334:	31 81       	ldd	r19, Z+1	; 0x01
     336:	ed 81       	ldd	r30, Y+5	; 0x05
     338:	fe 81       	ldd	r31, Y+6	; 0x06
     33a:	84 81       	ldd	r24, Z+4	; 0x04
     33c:	95 81       	ldd	r25, Z+5	; 0x05
     33e:	f9 01       	movw	r30, r18
     340:	e8 0f       	add	r30, r24
     342:	f9 1f       	adc	r31, r25
     344:	10 82       	st	Z, r1
}
     346:	26 96       	adiw	r28, 0x06	; 6
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	cd bf       	out	0x3d, r28	; 61
     352:	cf 91       	pop	r28
     354:	df 91       	pop	r29
     356:	08 95       	ret

00000358 <_ZN6String11toUpperCaseEv>:
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
     358:	df 93       	push	r29
     35a:	cf 93       	push	r28
     35c:	00 d0       	rcall	.+0      	; 0x35e <_ZN6String11toUpperCaseEv+0x6>
     35e:	00 d0       	rcall	.+0      	; 0x360 <_ZN6String11toUpperCaseEv+0x8>
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	9c 83       	std	Y+4, r25	; 0x04
     366:	8b 83       	std	Y+3, r24	; 0x03
{
	if (!buffer) return;
     368:	eb 81       	ldd	r30, Y+3	; 0x03
     36a:	fc 81       	ldd	r31, Y+4	; 0x04
     36c:	80 81       	ld	r24, Z
     36e:	91 81       	ldd	r25, Z+1	; 0x01
     370:	00 97       	sbiw	r24, 0x00	; 0
     372:	01 f0       	breq	.+0      	; 0x374 <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
     374:	eb 81       	ldd	r30, Y+3	; 0x03
     376:	fc 81       	ldd	r31, Y+4	; 0x04
     378:	80 81       	ld	r24, Z
     37a:	91 81       	ldd	r25, Z+1	; 0x01
     37c:	9a 83       	std	Y+2, r25	; 0x02
     37e:	89 83       	std	Y+1, r24	; 0x01
     380:	00 c0       	rjmp	.+0      	; 0x382 <_ZN6String11toUpperCaseEv+0x2a>
		*p = toupper(*p);
     382:	e9 81       	ldd	r30, Y+1	; 0x01
     384:	fa 81       	ldd	r31, Y+2	; 0x02
     386:	80 81       	ld	r24, Z
     388:	88 2f       	mov	r24, r24
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     390:	e9 81       	ldd	r30, Y+1	; 0x01
     392:	fa 81       	ldd	r31, Y+2	; 0x02
     394:	80 83       	st	Z, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	9a 81       	ldd	r25, Y+2	; 0x02
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	9a 83       	std	Y+2, r25	; 0x02
     39e:	89 83       	std	Y+1, r24	; 0x01
     3a0:	e9 81       	ldd	r30, Y+1	; 0x01
     3a2:	fa 81       	ldd	r31, Y+2	; 0x02
     3a4:	80 81       	ld	r24, Z
     3a6:	88 23       	and	r24, r24
     3a8:	01 f4       	brne	.+0      	; 0x3aa <_ZN6String11toUpperCaseEv+0x52>
		*p = toupper(*p);
	}
}
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	08 95       	ret

000003b8 <_ZN6String11toLowerCaseEv>:
			index--;
		}
	}
}

void String::toLowerCase(void)
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	00 d0       	rcall	.+0      	; 0x3be <_ZN6String11toLowerCaseEv+0x6>
     3be:	00 d0       	rcall	.+0      	; 0x3c0 <_ZN6String11toLowerCaseEv+0x8>
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	9c 83       	std	Y+4, r25	; 0x04
     3c6:	8b 83       	std	Y+3, r24	; 0x03
{
	if (!buffer) return;
     3c8:	eb 81       	ldd	r30, Y+3	; 0x03
     3ca:	fc 81       	ldd	r31, Y+4	; 0x04
     3cc:	80 81       	ld	r24, Z
     3ce:	91 81       	ldd	r25, Z+1	; 0x01
     3d0:	00 97       	sbiw	r24, 0x00	; 0
     3d2:	01 f0       	breq	.+0      	; 0x3d4 <_ZN6String11toLowerCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
     3d4:	eb 81       	ldd	r30, Y+3	; 0x03
     3d6:	fc 81       	ldd	r31, Y+4	; 0x04
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	9a 83       	std	Y+2, r25	; 0x02
     3de:	89 83       	std	Y+1, r24	; 0x01
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <_ZN6String11toLowerCaseEv+0x2a>
		*p = tolower(*p);
     3e2:	e9 81       	ldd	r30, Y+1	; 0x01
     3e4:	fa 81       	ldd	r31, Y+2	; 0x02
     3e6:	80 81       	ld	r24, Z
     3e8:	88 2f       	mov	r24, r24
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     3f0:	e9 81       	ldd	r30, Y+1	; 0x01
     3f2:	fa 81       	ldd	r31, Y+2	; 0x02
     3f4:	80 83       	st	Z, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	9a 81       	ldd	r25, Y+2	; 0x02
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	9a 83       	std	Y+2, r25	; 0x02
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	e9 81       	ldd	r30, Y+1	; 0x01
     402:	fa 81       	ldd	r31, Y+2	; 0x02
     404:	80 81       	ld	r24, Z
     406:	88 23       	and	r24, r24
     408:	01 f4       	brne	.+0      	; 0x40a <_ZN6String11toLowerCaseEv+0x52>
		*p = tolower(*p);
	}
}
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	cf 91       	pop	r28
     414:	df 91       	pop	r29
     416:	08 95       	ret

00000418 <_ZNK6String16equalsIgnoreCaseERKS_>:
unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	df 93       	push	r29
     41e:	cf 93       	push	r28
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	2a 97       	sbiw	r28, 0x0a	; 10
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	9e 83       	std	Y+6, r25	; 0x06
     432:	8d 83       	std	Y+5, r24	; 0x05
     434:	78 87       	std	Y+8, r23	; 0x08
     436:	6f 83       	std	Y+7, r22	; 0x07
{
	if (this == &s2) return 1;
     438:	2d 81       	ldd	r18, Y+5	; 0x05
     43a:	3e 81       	ldd	r19, Y+6	; 0x06
     43c:	8f 81       	ldd	r24, Y+7	; 0x07
     43e:	98 85       	ldd	r25, Y+8	; 0x08
     440:	28 17       	cp	r18, r24
     442:	39 07       	cpc	r19, r25
     444:	01 f4       	brne	.+0      	; 0x446 <_ZNK6String16equalsIgnoreCaseERKS_+0x2e>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	8a 87       	std	Y+10, r24	; 0x0a
     44a:	00 c0       	rjmp	.+0      	; 0x44c <_ZNK6String16equalsIgnoreCaseERKS_+0x34>
	if (len != s2.len) return 0;
     44c:	ed 81       	ldd	r30, Y+5	; 0x05
     44e:	fe 81       	ldd	r31, Y+6	; 0x06
     450:	24 81       	ldd	r18, Z+4	; 0x04
     452:	35 81       	ldd	r19, Z+5	; 0x05
     454:	ef 81       	ldd	r30, Y+7	; 0x07
     456:	f8 85       	ldd	r31, Y+8	; 0x08
     458:	84 81       	ldd	r24, Z+4	; 0x04
     45a:	95 81       	ldd	r25, Z+5	; 0x05
     45c:	28 17       	cp	r18, r24
     45e:	39 07       	cpc	r19, r25
     460:	01 f0       	breq	.+0      	; 0x462 <_ZNK6String16equalsIgnoreCaseERKS_+0x4a>
     462:	1a 86       	std	Y+10, r1	; 0x0a
     464:	00 c0       	rjmp	.+0      	; 0x466 <_ZNK6String16equalsIgnoreCaseERKS_+0x4e>
	if (len == 0) return 1;
     466:	ed 81       	ldd	r30, Y+5	; 0x05
     468:	fe 81       	ldd	r31, Y+6	; 0x06
     46a:	84 81       	ldd	r24, Z+4	; 0x04
     46c:	95 81       	ldd	r25, Z+5	; 0x05
     46e:	00 97       	sbiw	r24, 0x00	; 0
     470:	01 f4       	brne	.+0      	; 0x472 <_ZNK6String16equalsIgnoreCaseERKS_+0x5a>
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	8a 87       	std	Y+10, r24	; 0x0a
     476:	00 c0       	rjmp	.+0      	; 0x478 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
	const char *p1 = buffer;
     478:	ed 81       	ldd	r30, Y+5	; 0x05
     47a:	fe 81       	ldd	r31, Y+6	; 0x06
     47c:	80 81       	ld	r24, Z
     47e:	91 81       	ldd	r25, Z+1	; 0x01
     480:	9c 83       	std	Y+4, r25	; 0x04
     482:	8b 83       	std	Y+3, r24	; 0x03
	const char *p2 = s2.buffer;
     484:	ef 81       	ldd	r30, Y+7	; 0x07
     486:	f8 85       	ldd	r31, Y+8	; 0x08
     488:	80 81       	ld	r24, Z
     48a:	91 81       	ldd	r25, Z+1	; 0x01
     48c:	9a 83       	std	Y+2, r25	; 0x02
     48e:	89 83       	std	Y+1, r24	; 0x01
     490:	00 c0       	rjmp	.+0      	; 0x492 <_ZNK6String16equalsIgnoreCaseERKS_+0x7a>
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
     492:	eb 81       	ldd	r30, Y+3	; 0x03
     494:	fc 81       	ldd	r31, Y+4	; 0x04
     496:	80 81       	ld	r24, Z
     498:	28 2f       	mov	r18, r24
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	9c 81       	ldd	r25, Y+4	; 0x04
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	9c 83       	std	Y+4, r25	; 0x04
     4a4:	8b 83       	std	Y+3, r24	; 0x03
     4a6:	c9 01       	movw	r24, r18
     4a8:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     4ac:	8c 01       	movw	r16, r24
     4ae:	e9 81       	ldd	r30, Y+1	; 0x01
     4b0:	fa 81       	ldd	r31, Y+2	; 0x02
     4b2:	80 81       	ld	r24, Z
     4b4:	28 2f       	mov	r18, r24
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	9a 81       	ldd	r25, Y+2	; 0x02
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	89 83       	std	Y+1, r24	; 0x01
     4c2:	c9 01       	movw	r24, r18
     4c4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     4c8:	19 86       	std	Y+9, r1	; 0x09
     4ca:	08 17       	cp	r16, r24
     4cc:	19 07       	cpc	r17, r25
     4ce:	01 f0       	breq	.+0      	; 0x4d0 <_ZNK6String16equalsIgnoreCaseERKS_+0xb8>
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	89 87       	std	Y+9, r24	; 0x09
     4d4:	89 85       	ldd	r24, Y+9	; 0x09
     4d6:	88 23       	and	r24, r24
     4d8:	01 f0       	breq	.+0      	; 0x4da <_ZNK6String16equalsIgnoreCaseERKS_+0xc2>
     4da:	1a 86       	std	Y+10, r1	; 0x0a
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <_ZNK6String16equalsIgnoreCaseERKS_+0xc6>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
     4de:	eb 81       	ldd	r30, Y+3	; 0x03
     4e0:	fc 81       	ldd	r31, Y+4	; 0x04
     4e2:	80 81       	ld	r24, Z
     4e4:	88 23       	and	r24, r24
     4e6:	01 f4       	brne	.+0      	; 0x4e8 <_ZNK6String16equalsIgnoreCaseERKS_+0xd0>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	8a 87       	std	Y+10, r24	; 0x0a
     4ec:	8a 85       	ldd	r24, Y+10	; 0x0a
}
     4ee:	2a 96       	adiw	r28, 0x0a	; 10
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	f8 94       	cli
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	cf 91       	pop	r28
     4fc:	df 91       	pop	r29
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	08 95       	ret

00000504 <_ZNK6String11lastIndexOfERKS_j>:
int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
     504:	df 93       	push	r29
     506:	cf 93       	push	r28
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
     50c:	2c 97       	sbiw	r28, 0x0c	; 12
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	f8 94       	cli
     512:	de bf       	out	0x3e, r29	; 62
     514:	0f be       	out	0x3f, r0	; 63
     516:	cd bf       	out	0x3d, r28	; 61
     518:	9e 83       	std	Y+6, r25	; 0x06
     51a:	8d 83       	std	Y+5, r24	; 0x05
     51c:	78 87       	std	Y+8, r23	; 0x08
     51e:	6f 83       	std	Y+7, r22	; 0x07
     520:	5a 87       	std	Y+10, r21	; 0x0a
     522:	49 87       	std	Y+9, r20	; 0x09
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
     524:	ef 81       	ldd	r30, Y+7	; 0x07
     526:	f8 85       	ldd	r31, Y+8	; 0x08
     528:	84 81       	ldd	r24, Z+4	; 0x04
     52a:	95 81       	ldd	r25, Z+5	; 0x05
     52c:	00 97       	sbiw	r24, 0x00	; 0
     52e:	01 f0       	breq	.+0      	; 0x530 <_ZNK6String11lastIndexOfERKS_j+0x2c>
     530:	ed 81       	ldd	r30, Y+5	; 0x05
     532:	fe 81       	ldd	r31, Y+6	; 0x06
     534:	84 81       	ldd	r24, Z+4	; 0x04
     536:	95 81       	ldd	r25, Z+5	; 0x05
     538:	00 97       	sbiw	r24, 0x00	; 0
     53a:	01 f0       	breq	.+0      	; 0x53c <_ZNK6String11lastIndexOfERKS_j+0x38>
     53c:	ef 81       	ldd	r30, Y+7	; 0x07
     53e:	f8 85       	ldd	r31, Y+8	; 0x08
     540:	24 81       	ldd	r18, Z+4	; 0x04
     542:	35 81       	ldd	r19, Z+5	; 0x05
     544:	ed 81       	ldd	r30, Y+5	; 0x05
     546:	fe 81       	ldd	r31, Y+6	; 0x06
     548:	84 81       	ldd	r24, Z+4	; 0x04
     54a:	95 81       	ldd	r25, Z+5	; 0x05
     54c:	82 17       	cp	r24, r18
     54e:	93 07       	cpc	r25, r19
     550:	00 f4       	brcc	.+0      	; 0x552 <_ZNK6String11lastIndexOfERKS_j+0x4e>
     552:	4f ef       	ldi	r20, 0xFF	; 255
     554:	5f ef       	ldi	r21, 0xFF	; 255
     556:	5c 87       	std	Y+12, r21	; 0x0c
     558:	4b 87       	std	Y+11, r20	; 0x0b
     55a:	00 c0       	rjmp	.+0      	; 0x55c <_ZNK6String11lastIndexOfERKS_j+0x58>
	if (fromIndex >= len) fromIndex = len - 1;
     55c:	ed 81       	ldd	r30, Y+5	; 0x05
     55e:	fe 81       	ldd	r31, Y+6	; 0x06
     560:	24 81       	ldd	r18, Z+4	; 0x04
     562:	35 81       	ldd	r19, Z+5	; 0x05
     564:	89 85       	ldd	r24, Y+9	; 0x09
     566:	9a 85       	ldd	r25, Y+10	; 0x0a
     568:	82 17       	cp	r24, r18
     56a:	93 07       	cpc	r25, r19
     56c:	00 f0       	brcs	.+0      	; 0x56e <_ZNK6String11lastIndexOfERKS_j+0x6a>
     56e:	ed 81       	ldd	r30, Y+5	; 0x05
     570:	fe 81       	ldd	r31, Y+6	; 0x06
     572:	84 81       	ldd	r24, Z+4	; 0x04
     574:	95 81       	ldd	r25, Z+5	; 0x05
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	9a 87       	std	Y+10, r25	; 0x0a
     57a:	89 87       	std	Y+9, r24	; 0x09
	int found = -1;
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	9f ef       	ldi	r25, 0xFF	; 255
     580:	9c 83       	std	Y+4, r25	; 0x04
     582:	8b 83       	std	Y+3, r24	; 0x03
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
     584:	ed 81       	ldd	r30, Y+5	; 0x05
     586:	fe 81       	ldd	r31, Y+6	; 0x06
     588:	80 81       	ld	r24, Z
     58a:	91 81       	ldd	r25, Z+1	; 0x01
     58c:	9a 83       	std	Y+2, r25	; 0x02
     58e:	89 83       	std	Y+1, r24	; 0x01
     590:	00 c0       	rjmp	.+0      	; 0x592 <_ZNK6String11lastIndexOfERKS_j+0x8e>
		p = strstr(p, s2.buffer);
     592:	ef 81       	ldd	r30, Y+7	; 0x07
     594:	f8 85       	ldd	r31, Y+8	; 0x08
     596:	20 81       	ld	r18, Z
     598:	31 81       	ldd	r19, Z+1	; 0x01
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	9a 81       	ldd	r25, Y+2	; 0x02
     59e:	b9 01       	movw	r22, r18
     5a0:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     5a4:	9a 83       	std	Y+2, r25	; 0x02
     5a6:	89 83       	std	Y+1, r24	; 0x01
		if (!p) break;
     5a8:	89 81       	ldd	r24, Y+1	; 0x01
     5aa:	9a 81       	ldd	r25, Y+2	; 0x02
     5ac:	00 97       	sbiw	r24, 0x00	; 0
     5ae:	01 f0       	breq	.+0      	; 0x5b0 <_ZNK6String11lastIndexOfERKS_j+0xac>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
     5b0:	29 81       	ldd	r18, Y+1	; 0x01
     5b2:	3a 81       	ldd	r19, Y+2	; 0x02
     5b4:	ed 81       	ldd	r30, Y+5	; 0x05
     5b6:	fe 81       	ldd	r31, Y+6	; 0x06
     5b8:	80 81       	ld	r24, Z
     5ba:	91 81       	ldd	r25, Z+1	; 0x01
     5bc:	a9 01       	movw	r20, r18
     5be:	48 1b       	sub	r20, r24
     5c0:	59 0b       	sbc	r21, r25
     5c2:	ca 01       	movw	r24, r20
     5c4:	9c 01       	movw	r18, r24
     5c6:	89 85       	ldd	r24, Y+9	; 0x09
     5c8:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ca:	82 17       	cp	r24, r18
     5cc:	93 07       	cpc	r25, r19
     5ce:	00 f0       	brcs	.+0      	; 0x5d0 <_ZNK6String11lastIndexOfERKS_j+0xcc>
     5d0:	29 81       	ldd	r18, Y+1	; 0x01
     5d2:	3a 81       	ldd	r19, Y+2	; 0x02
     5d4:	ed 81       	ldd	r30, Y+5	; 0x05
     5d6:	fe 81       	ldd	r31, Y+6	; 0x06
     5d8:	80 81       	ld	r24, Z
     5da:	91 81       	ldd	r25, Z+1	; 0x01
     5dc:	a9 01       	movw	r20, r18
     5de:	48 1b       	sub	r20, r24
     5e0:	59 0b       	sbc	r21, r25
     5e2:	ca 01       	movw	r24, r20
     5e4:	9c 83       	std	Y+4, r25	; 0x04
     5e6:	8b 83       	std	Y+3, r24	; 0x03
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	9a 81       	ldd	r25, Y+2	; 0x02
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	9a 83       	std	Y+2, r25	; 0x02
     5f0:	89 83       	std	Y+1, r24	; 0x01
     5f2:	ed 81       	ldd	r30, Y+5	; 0x05
     5f4:	fe 81       	ldd	r31, Y+6	; 0x06
     5f6:	20 81       	ld	r18, Z
     5f8:	31 81       	ldd	r19, Z+1	; 0x01
     5fa:	89 85       	ldd	r24, Y+9	; 0x09
     5fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5fe:	28 0f       	add	r18, r24
     600:	39 1f       	adc	r19, r25
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	9a 81       	ldd	r25, Y+2	; 0x02
     606:	28 17       	cp	r18, r24
     608:	39 07       	cpc	r19, r25
     60a:	00 f4       	brcc	.+0      	; 0x60c <_ZNK6String11lastIndexOfERKS_j+0x108>
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
     60c:	8b 81       	ldd	r24, Y+3	; 0x03
     60e:	9c 81       	ldd	r25, Y+4	; 0x04
     610:	9c 87       	std	Y+12, r25	; 0x0c
     612:	8b 87       	std	Y+11, r24	; 0x0b
     614:	8b 85       	ldd	r24, Y+11	; 0x0b
     616:	9c 85       	ldd	r25, Y+12	; 0x0c
}
     618:	2c 96       	adiw	r28, 0x0c	; 12
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
     624:	cf 91       	pop	r28
     626:	df 91       	pop	r29
     628:	08 95       	ret

0000062a <_ZNK6String11lastIndexOfERKS_>:
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
     62a:	df 93       	push	r29
     62c:	cf 93       	push	r28
     62e:	00 d0       	rcall	.+0      	; 0x630 <_ZNK6String11lastIndexOfERKS_+0x6>
     630:	00 d0       	rcall	.+0      	; 0x632 <_ZNK6String11lastIndexOfERKS_+0x8>
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	9a 83       	std	Y+2, r25	; 0x02
     638:	89 83       	std	Y+1, r24	; 0x01
     63a:	7c 83       	std	Y+4, r23	; 0x04
     63c:	6b 83       	std	Y+3, r22	; 0x03
{
	return lastIndexOf(s2, len - s2.len);
     63e:	e9 81       	ldd	r30, Y+1	; 0x01
     640:	fa 81       	ldd	r31, Y+2	; 0x02
     642:	24 81       	ldd	r18, Z+4	; 0x04
     644:	35 81       	ldd	r19, Z+5	; 0x05
     646:	eb 81       	ldd	r30, Y+3	; 0x03
     648:	fc 81       	ldd	r31, Y+4	; 0x04
     64a:	84 81       	ldd	r24, Z+4	; 0x04
     64c:	95 81       	ldd	r25, Z+5	; 0x05
     64e:	a9 01       	movw	r20, r18
     650:	48 1b       	sub	r20, r24
     652:	59 0b       	sbc	r21, r25
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	9a 81       	ldd	r25, Y+2	; 0x02
     658:	2b 81       	ldd	r18, Y+3	; 0x03
     65a:	3c 81       	ldd	r19, Y+4	; 0x04
     65c:	b9 01       	movw	r22, r18
     65e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	cf 91       	pop	r28
     66c:	df 91       	pop	r29
     66e:	08 95       	ret

00000670 <_ZNK6String7indexOfERKS_j>:
int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
     670:	df 93       	push	r29
     672:	cf 93       	push	r28
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	2a 97       	sbiw	r28, 0x0a	; 10
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	9c 83       	std	Y+4, r25	; 0x04
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	7e 83       	std	Y+6, r23	; 0x06
     68a:	6d 83       	std	Y+5, r22	; 0x05
     68c:	58 87       	std	Y+8, r21	; 0x08
     68e:	4f 83       	std	Y+7, r20	; 0x07
{
	if (fromIndex >= len) return -1;
     690:	eb 81       	ldd	r30, Y+3	; 0x03
     692:	fc 81       	ldd	r31, Y+4	; 0x04
     694:	24 81       	ldd	r18, Z+4	; 0x04
     696:	35 81       	ldd	r19, Z+5	; 0x05
     698:	8f 81       	ldd	r24, Y+7	; 0x07
     69a:	98 85       	ldd	r25, Y+8	; 0x08
     69c:	82 17       	cp	r24, r18
     69e:	93 07       	cpc	r25, r19
     6a0:	00 f0       	brcs	.+0      	; 0x6a2 <_ZNK6String7indexOfERKS_j+0x32>
     6a2:	4f ef       	ldi	r20, 0xFF	; 255
     6a4:	5f ef       	ldi	r21, 0xFF	; 255
     6a6:	5a 87       	std	Y+10, r21	; 0x0a
     6a8:	49 87       	std	Y+9, r20	; 0x09
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <_ZNK6String7indexOfERKS_j+0x3c>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
     6ac:	eb 81       	ldd	r30, Y+3	; 0x03
     6ae:	fc 81       	ldd	r31, Y+4	; 0x04
     6b0:	20 81       	ld	r18, Z
     6b2:	31 81       	ldd	r19, Z+1	; 0x01
     6b4:	8f 81       	ldd	r24, Y+7	; 0x07
     6b6:	98 85       	ldd	r25, Y+8	; 0x08
     6b8:	82 0f       	add	r24, r18
     6ba:	93 1f       	adc	r25, r19
     6bc:	ed 81       	ldd	r30, Y+5	; 0x05
     6be:	fe 81       	ldd	r31, Y+6	; 0x06
     6c0:	20 81       	ld	r18, Z
     6c2:	31 81       	ldd	r19, Z+1	; 0x01
     6c4:	b9 01       	movw	r22, r18
     6c6:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     6ca:	9a 83       	std	Y+2, r25	; 0x02
     6cc:	89 83       	std	Y+1, r24	; 0x01
	if (found == NULL) return -1;
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	9a 81       	ldd	r25, Y+2	; 0x02
     6d2:	00 97       	sbiw	r24, 0x00	; 0
     6d4:	01 f4       	brne	.+0      	; 0x6d6 <_ZNK6String7indexOfERKS_j+0x66>
     6d6:	8f ef       	ldi	r24, 0xFF	; 255
     6d8:	9f ef       	ldi	r25, 0xFF	; 255
     6da:	9a 87       	std	Y+10, r25	; 0x0a
     6dc:	89 87       	std	Y+9, r24	; 0x09
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <_ZNK6String7indexOfERKS_j+0x70>
	return found - buffer;
     6e0:	29 81       	ldd	r18, Y+1	; 0x01
     6e2:	3a 81       	ldd	r19, Y+2	; 0x02
     6e4:	eb 81       	ldd	r30, Y+3	; 0x03
     6e6:	fc 81       	ldd	r31, Y+4	; 0x04
     6e8:	80 81       	ld	r24, Z
     6ea:	91 81       	ldd	r25, Z+1	; 0x01
     6ec:	a9 01       	movw	r20, r18
     6ee:	48 1b       	sub	r20, r24
     6f0:	59 0b       	sbc	r21, r25
     6f2:	5a 87       	std	Y+10, r21	; 0x0a
     6f4:	49 87       	std	Y+9, r20	; 0x09
     6f6:	89 85       	ldd	r24, Y+9	; 0x09
     6f8:	9a 85       	ldd	r25, Y+10	; 0x0a
}
     6fa:	2a 96       	adiw	r28, 0x0a	; 10
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	cf 91       	pop	r28
     708:	df 91       	pop	r29
     70a:	08 95       	ret

0000070c <_ZNK6String7indexOfERKS_>:
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::indexOf(const String &s2) const
     70c:	df 93       	push	r29
     70e:	cf 93       	push	r28
     710:	00 d0       	rcall	.+0      	; 0x712 <_ZNK6String7indexOfERKS_+0x6>
     712:	00 d0       	rcall	.+0      	; 0x714 <_ZNK6String7indexOfERKS_+0x8>
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	9a 83       	std	Y+2, r25	; 0x02
     71a:	89 83       	std	Y+1, r24	; 0x01
     71c:	7c 83       	std	Y+4, r23	; 0x04
     71e:	6b 83       	std	Y+3, r22	; 0x03
{
	return indexOf(s2, 0);
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	9a 81       	ldd	r25, Y+2	; 0x02
     724:	2b 81       	ldd	r18, Y+3	; 0x03
     726:	3c 81       	ldd	r19, Y+4	; 0x04
     728:	b9 01       	movw	r22, r18
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	cf 91       	pop	r28
     73c:	df 91       	pop	r29
     73e:	08 95       	ret

00000740 <_ZNK6String11lastIndexOfEcj>:
int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
     740:	df 93       	push	r29
     742:	cf 93       	push	r28
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	2a 97       	sbiw	r28, 0x0a	; 10
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	9d 83       	std	Y+5, r25	; 0x05
     756:	8c 83       	std	Y+4, r24	; 0x04
     758:	6e 83       	std	Y+6, r22	; 0x06
     75a:	58 87       	std	Y+8, r21	; 0x08
     75c:	4f 83       	std	Y+7, r20	; 0x07
{
	if (fromIndex >= len) return -1;
     75e:	ec 81       	ldd	r30, Y+4	; 0x04
     760:	fd 81       	ldd	r31, Y+5	; 0x05
     762:	24 81       	ldd	r18, Z+4	; 0x04
     764:	35 81       	ldd	r19, Z+5	; 0x05
     766:	8f 81       	ldd	r24, Y+7	; 0x07
     768:	98 85       	ldd	r25, Y+8	; 0x08
     76a:	82 17       	cp	r24, r18
     76c:	93 07       	cpc	r25, r19
     76e:	00 f0       	brcs	.+0      	; 0x770 <_ZNK6String11lastIndexOfEcj+0x30>
     770:	4f ef       	ldi	r20, 0xFF	; 255
     772:	5f ef       	ldi	r21, 0xFF	; 255
     774:	5a 87       	std	Y+10, r21	; 0x0a
     776:	49 87       	std	Y+9, r20	; 0x09
     778:	00 c0       	rjmp	.+0      	; 0x77a <_ZNK6String11lastIndexOfEcj+0x3a>
	char tempchar = buffer[fromIndex + 1];
     77a:	ec 81       	ldd	r30, Y+4	; 0x04
     77c:	fd 81       	ldd	r31, Y+5	; 0x05
     77e:	20 81       	ld	r18, Z
     780:	31 81       	ldd	r19, Z+1	; 0x01
     782:	8f 81       	ldd	r24, Y+7	; 0x07
     784:	98 85       	ldd	r25, Y+8	; 0x08
     786:	01 96       	adiw	r24, 0x01	; 1
     788:	f9 01       	movw	r30, r18
     78a:	e8 0f       	add	r30, r24
     78c:	f9 1f       	adc	r31, r25
     78e:	80 81       	ld	r24, Z
     790:	8b 83       	std	Y+3, r24	; 0x03
	buffer[fromIndex + 1] = '\0';
     792:	ec 81       	ldd	r30, Y+4	; 0x04
     794:	fd 81       	ldd	r31, Y+5	; 0x05
     796:	20 81       	ld	r18, Z
     798:	31 81       	ldd	r19, Z+1	; 0x01
     79a:	8f 81       	ldd	r24, Y+7	; 0x07
     79c:	98 85       	ldd	r25, Y+8	; 0x08
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	f9 01       	movw	r30, r18
     7a2:	e8 0f       	add	r30, r24
     7a4:	f9 1f       	adc	r31, r25
     7a6:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
     7a8:	ec 81       	ldd	r30, Y+4	; 0x04
     7aa:	fd 81       	ldd	r31, Y+5	; 0x05
     7ac:	40 81       	ld	r20, Z
     7ae:	51 81       	ldd	r21, Z+1	; 0x01
     7b0:	8e 81       	ldd	r24, Y+6	; 0x06
     7b2:	28 2f       	mov	r18, r24
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	ca 01       	movw	r24, r20
     7b8:	b9 01       	movw	r22, r18
     7ba:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     7be:	9a 83       	std	Y+2, r25	; 0x02
     7c0:	89 83       	std	Y+1, r24	; 0x01
	buffer[fromIndex + 1] = tempchar;
     7c2:	ec 81       	ldd	r30, Y+4	; 0x04
     7c4:	fd 81       	ldd	r31, Y+5	; 0x05
     7c6:	20 81       	ld	r18, Z
     7c8:	31 81       	ldd	r19, Z+1	; 0x01
     7ca:	8f 81       	ldd	r24, Y+7	; 0x07
     7cc:	98 85       	ldd	r25, Y+8	; 0x08
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	f9 01       	movw	r30, r18
     7d2:	e8 0f       	add	r30, r24
     7d4:	f9 1f       	adc	r31, r25
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	80 83       	st	Z, r24
	if (temp == NULL) return -1;
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	9a 81       	ldd	r25, Y+2	; 0x02
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	01 f4       	brne	.+0      	; 0x7e2 <_ZNK6String11lastIndexOfEcj+0xa2>
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	9f ef       	ldi	r25, 0xFF	; 255
     7e6:	9a 87       	std	Y+10, r25	; 0x0a
     7e8:	89 87       	std	Y+9, r24	; 0x09
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <_ZNK6String11lastIndexOfEcj+0xac>
	return temp - buffer;
     7ec:	29 81       	ldd	r18, Y+1	; 0x01
     7ee:	3a 81       	ldd	r19, Y+2	; 0x02
     7f0:	ec 81       	ldd	r30, Y+4	; 0x04
     7f2:	fd 81       	ldd	r31, Y+5	; 0x05
     7f4:	80 81       	ld	r24, Z
     7f6:	91 81       	ldd	r25, Z+1	; 0x01
     7f8:	a9 01       	movw	r20, r18
     7fa:	48 1b       	sub	r20, r24
     7fc:	59 0b       	sbc	r21, r25
     7fe:	5a 87       	std	Y+10, r21	; 0x0a
     800:	49 87       	std	Y+9, r20	; 0x09
     802:	89 85       	ldd	r24, Y+9	; 0x09
     804:	9a 85       	ldd	r25, Y+10	; 0x0a
}
     806:	2a 96       	adiw	r28, 0x0a	; 10
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	0f be       	out	0x3f, r0	; 63
     810:	cd bf       	out	0x3d, r28	; 61
     812:	cf 91       	pop	r28
     814:	df 91       	pop	r29
     816:	08 95       	ret

00000818 <_ZNK6String11lastIndexOfEc>:
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
     818:	df 93       	push	r29
     81a:	cf 93       	push	r28
     81c:	00 d0       	rcall	.+0      	; 0x81e <_ZNK6String11lastIndexOfEc+0x6>
     81e:	0f 92       	push	r0
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	9a 83       	std	Y+2, r25	; 0x02
     826:	89 83       	std	Y+1, r24	; 0x01
     828:	6b 83       	std	Y+3, r22	; 0x03
{
	return lastIndexOf(theChar, len - 1);
     82a:	e9 81       	ldd	r30, Y+1	; 0x01
     82c:	fa 81       	ldd	r31, Y+2	; 0x02
     82e:	84 81       	ldd	r24, Z+4	; 0x04
     830:	95 81       	ldd	r25, Z+5	; 0x05
     832:	9c 01       	movw	r18, r24
     834:	21 50       	subi	r18, 0x01	; 1
     836:	30 40       	sbci	r19, 0x00	; 0
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	6b 81       	ldd	r22, Y+3	; 0x03
     83e:	a9 01       	movw	r20, r18
     840:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	cf 91       	pop	r28
     84c:	df 91       	pop	r29
     84e:	08 95       	ret

00000850 <_ZNK6String7indexOfEcj>:
int String::indexOf(char c) const
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
     850:	df 93       	push	r29
     852:	cf 93       	push	r28
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	29 97       	sbiw	r28, 0x09	; 9
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
     864:	9c 83       	std	Y+4, r25	; 0x04
     866:	8b 83       	std	Y+3, r24	; 0x03
     868:	6d 83       	std	Y+5, r22	; 0x05
     86a:	5f 83       	std	Y+7, r21	; 0x07
     86c:	4e 83       	std	Y+6, r20	; 0x06
{
	if (fromIndex >= len) return -1;
     86e:	eb 81       	ldd	r30, Y+3	; 0x03
     870:	fc 81       	ldd	r31, Y+4	; 0x04
     872:	24 81       	ldd	r18, Z+4	; 0x04
     874:	35 81       	ldd	r19, Z+5	; 0x05
     876:	8e 81       	ldd	r24, Y+6	; 0x06
     878:	9f 81       	ldd	r25, Y+7	; 0x07
     87a:	82 17       	cp	r24, r18
     87c:	93 07       	cpc	r25, r19
     87e:	00 f0       	brcs	.+0      	; 0x880 <_ZNK6String7indexOfEcj+0x30>
     880:	4f ef       	ldi	r20, 0xFF	; 255
     882:	5f ef       	ldi	r21, 0xFF	; 255
     884:	59 87       	std	Y+9, r21	; 0x09
     886:	48 87       	std	Y+8, r20	; 0x08
     888:	00 c0       	rjmp	.+0      	; 0x88a <_ZNK6String7indexOfEcj+0x3a>
	const char* temp = strchr(buffer + fromIndex, ch);
     88a:	eb 81       	ldd	r30, Y+3	; 0x03
     88c:	fc 81       	ldd	r31, Y+4	; 0x04
     88e:	20 81       	ld	r18, Z
     890:	31 81       	ldd	r19, Z+1	; 0x01
     892:	8e 81       	ldd	r24, Y+6	; 0x06
     894:	9f 81       	ldd	r25, Y+7	; 0x07
     896:	a9 01       	movw	r20, r18
     898:	48 0f       	add	r20, r24
     89a:	59 1f       	adc	r21, r25
     89c:	8d 81       	ldd	r24, Y+5	; 0x05
     89e:	28 2f       	mov	r18, r24
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	ca 01       	movw	r24, r20
     8a4:	b9 01       	movw	r22, r18
     8a6:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     8aa:	9a 83       	std	Y+2, r25	; 0x02
     8ac:	89 83       	std	Y+1, r24	; 0x01
	if (temp == NULL) return -1;
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	9a 81       	ldd	r25, Y+2	; 0x02
     8b2:	00 97       	sbiw	r24, 0x00	; 0
     8b4:	01 f4       	brne	.+0      	; 0x8b6 <_ZNK6String7indexOfEcj+0x66>
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	9f ef       	ldi	r25, 0xFF	; 255
     8ba:	99 87       	std	Y+9, r25	; 0x09
     8bc:	88 87       	std	Y+8, r24	; 0x08
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <_ZNK6String7indexOfEcj+0x70>
	return temp - buffer;
     8c0:	29 81       	ldd	r18, Y+1	; 0x01
     8c2:	3a 81       	ldd	r19, Y+2	; 0x02
     8c4:	eb 81       	ldd	r30, Y+3	; 0x03
     8c6:	fc 81       	ldd	r31, Y+4	; 0x04
     8c8:	80 81       	ld	r24, Z
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	a9 01       	movw	r20, r18
     8ce:	48 1b       	sub	r20, r24
     8d0:	59 0b       	sbc	r21, r25
     8d2:	59 87       	std	Y+9, r21	; 0x09
     8d4:	48 87       	std	Y+8, r20	; 0x08
     8d6:	88 85       	ldd	r24, Y+8	; 0x08
     8d8:	99 85       	ldd	r25, Y+9	; 0x09
}
     8da:	29 96       	adiw	r28, 0x09	; 9
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	de bf       	out	0x3e, r29	; 62
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	cd bf       	out	0x3d, r28	; 61
     8e6:	cf 91       	pop	r28
     8e8:	df 91       	pop	r29
     8ea:	08 95       	ret

000008ec <_ZNK6String7indexOfEc>:

/*********************************************/
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
     8ec:	df 93       	push	r29
     8ee:	cf 93       	push	r28
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <_ZNK6String7indexOfEc+0x6>
     8f2:	0f 92       	push	r0
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	9a 83       	std	Y+2, r25	; 0x02
     8fa:	89 83       	std	Y+1, r24	; 0x01
     8fc:	6b 83       	std	Y+3, r22	; 0x03
{
	return indexOf(c, 0);
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	9a 81       	ldd	r25, Y+2	; 0x02
     902:	6b 81       	ldd	r22, Y+3	; 0x03
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	cf 91       	pop	r28
     914:	df 91       	pop	r29
     916:	08 95       	ret

00000918 <_ZNK6String8getBytesEPhjj>:
{
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
     918:	df 93       	push	r29
     91a:	cf 93       	push	r28
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	2a 97       	sbiw	r28, 0x0a	; 10
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	9c 83       	std	Y+4, r25	; 0x04
     92e:	8b 83       	std	Y+3, r24	; 0x03
     930:	7e 83       	std	Y+6, r23	; 0x06
     932:	6d 83       	std	Y+5, r22	; 0x05
     934:	58 87       	std	Y+8, r21	; 0x08
     936:	4f 83       	std	Y+7, r20	; 0x07
     938:	3a 87       	std	Y+10, r19	; 0x0a
     93a:	29 87       	std	Y+9, r18	; 0x09
{
	if (!bufsize || !buf) return;
     93c:	8f 81       	ldd	r24, Y+7	; 0x07
     93e:	98 85       	ldd	r25, Y+8	; 0x08
     940:	00 97       	sbiw	r24, 0x00	; 0
     942:	01 f4       	brne	.+0      	; 0x944 <_ZNK6String8getBytesEPhjj+0x2c>
     944:	00 c0       	rjmp	.+0      	; 0x946 <_ZNK6String8getBytesEPhjj+0x2e>
     946:	8d 81       	ldd	r24, Y+5	; 0x05
     948:	9e 81       	ldd	r25, Y+6	; 0x06
     94a:	00 97       	sbiw	r24, 0x00	; 0
     94c:	01 f4       	brne	.+0      	; 0x94e <_ZNK6String8getBytesEPhjj+0x36>
     94e:	00 c0       	rjmp	.+0      	; 0x950 <_ZNK6String8getBytesEPhjj+0x38>
	if (index >= len) {
     950:	eb 81       	ldd	r30, Y+3	; 0x03
     952:	fc 81       	ldd	r31, Y+4	; 0x04
     954:	24 81       	ldd	r18, Z+4	; 0x04
     956:	35 81       	ldd	r19, Z+5	; 0x05
     958:	89 85       	ldd	r24, Y+9	; 0x09
     95a:	9a 85       	ldd	r25, Y+10	; 0x0a
     95c:	82 17       	cp	r24, r18
     95e:	93 07       	cpc	r25, r19
     960:	00 f0       	brcs	.+0      	; 0x962 <_ZNK6String8getBytesEPhjj+0x4a>
		buf[0] = 0;
     962:	ed 81       	ldd	r30, Y+5	; 0x05
     964:	fe 81       	ldd	r31, Y+6	; 0x06
     966:	10 82       	st	Z, r1
     968:	00 c0       	rjmp	.+0      	; 0x96a <_ZNK6String8getBytesEPhjj+0x52>
		return;
	}
	unsigned int n = bufsize - 1;
     96a:	8f 81       	ldd	r24, Y+7	; 0x07
     96c:	98 85       	ldd	r25, Y+8	; 0x08
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	9a 83       	std	Y+2, r25	; 0x02
     972:	89 83       	std	Y+1, r24	; 0x01
	if (n > len - index) n = len - index;
     974:	eb 81       	ldd	r30, Y+3	; 0x03
     976:	fc 81       	ldd	r31, Y+4	; 0x04
     978:	24 81       	ldd	r18, Z+4	; 0x04
     97a:	35 81       	ldd	r19, Z+5	; 0x05
     97c:	89 85       	ldd	r24, Y+9	; 0x09
     97e:	9a 85       	ldd	r25, Y+10	; 0x0a
     980:	28 1b       	sub	r18, r24
     982:	39 0b       	sbc	r19, r25
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	28 17       	cp	r18, r24
     98a:	39 07       	cpc	r19, r25
     98c:	00 f4       	brcc	.+0      	; 0x98e <_ZNK6String8getBytesEPhjj+0x76>
     98e:	eb 81       	ldd	r30, Y+3	; 0x03
     990:	fc 81       	ldd	r31, Y+4	; 0x04
     992:	24 81       	ldd	r18, Z+4	; 0x04
     994:	35 81       	ldd	r19, Z+5	; 0x05
     996:	89 85       	ldd	r24, Y+9	; 0x09
     998:	9a 85       	ldd	r25, Y+10	; 0x0a
     99a:	a9 01       	movw	r20, r18
     99c:	48 1b       	sub	r20, r24
     99e:	59 0b       	sbc	r21, r25
     9a0:	ca 01       	movw	r24, r20
     9a2:	9a 83       	std	Y+2, r25	; 0x02
     9a4:	89 83       	std	Y+1, r24	; 0x01
	strncpy((char *)buf, buffer + index, n);
     9a6:	eb 81       	ldd	r30, Y+3	; 0x03
     9a8:	fc 81       	ldd	r31, Y+4	; 0x04
     9aa:	20 81       	ld	r18, Z
     9ac:	31 81       	ldd	r19, Z+1	; 0x01
     9ae:	89 85       	ldd	r24, Y+9	; 0x09
     9b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b2:	a9 01       	movw	r20, r18
     9b4:	48 0f       	add	r20, r24
     9b6:	59 1f       	adc	r21, r25
     9b8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ba:	9e 81       	ldd	r25, Y+6	; 0x06
     9bc:	29 81       	ldd	r18, Y+1	; 0x01
     9be:	3a 81       	ldd	r19, Y+2	; 0x02
     9c0:	ba 01       	movw	r22, r20
     9c2:	a9 01       	movw	r20, r18
     9c4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	buf[n] = 0;
     9c8:	2d 81       	ldd	r18, Y+5	; 0x05
     9ca:	3e 81       	ldd	r19, Y+6	; 0x06
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	9a 81       	ldd	r25, Y+2	; 0x02
     9d0:	f9 01       	movw	r30, r18
     9d2:	e8 0f       	add	r30, r24
     9d4:	f9 1f       	adc	r31, r25
     9d6:	10 82       	st	Z, r1
}
     9d8:	2a 96       	adiw	r28, 0x0a	; 10
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	cd bf       	out	0x3d, r28	; 61
     9e4:	cf 91       	pop	r28
     9e6:	df 91       	pop	r29
     9e8:	08 95       	ret

000009ea <_ZNK6String8endsWithERKS_>:
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
     9ea:	df 93       	push	r29
     9ec:	cf 93       	push	r28
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <_ZNK6String8endsWithERKS_+0x6>
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <_ZNK6String8endsWithERKS_+0x8>
     9f2:	0f 92       	push	r0
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	9a 83       	std	Y+2, r25	; 0x02
     9fa:	89 83       	std	Y+1, r24	; 0x01
     9fc:	7c 83       	std	Y+4, r23	; 0x04
     9fe:	6b 83       	std	Y+3, r22	; 0x03
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
     a00:	e9 81       	ldd	r30, Y+1	; 0x01
     a02:	fa 81       	ldd	r31, Y+2	; 0x02
     a04:	24 81       	ldd	r18, Z+4	; 0x04
     a06:	35 81       	ldd	r19, Z+5	; 0x05
     a08:	eb 81       	ldd	r30, Y+3	; 0x03
     a0a:	fc 81       	ldd	r31, Y+4	; 0x04
     a0c:	84 81       	ldd	r24, Z+4	; 0x04
     a0e:	95 81       	ldd	r25, Z+5	; 0x05
     a10:	28 17       	cp	r18, r24
     a12:	39 07       	cpc	r19, r25
     a14:	00 f0       	brcs	.+0      	; 0xa16 <_ZNK6String8endsWithERKS_+0x2c>
     a16:	e9 81       	ldd	r30, Y+1	; 0x01
     a18:	fa 81       	ldd	r31, Y+2	; 0x02
     a1a:	80 81       	ld	r24, Z
     a1c:	91 81       	ldd	r25, Z+1	; 0x01
     a1e:	00 97       	sbiw	r24, 0x00	; 0
     a20:	01 f0       	breq	.+0      	; 0xa22 <_ZNK6String8endsWithERKS_+0x38>
     a22:	eb 81       	ldd	r30, Y+3	; 0x03
     a24:	fc 81       	ldd	r31, Y+4	; 0x04
     a26:	80 81       	ld	r24, Z
     a28:	91 81       	ldd	r25, Z+1	; 0x01
     a2a:	00 97       	sbiw	r24, 0x00	; 0
     a2c:	01 f4       	brne	.+0      	; 0xa2e <_ZNK6String8endsWithERKS_+0x44>
     a2e:	1d 82       	std	Y+5, r1	; 0x05
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <_ZNK6String8endsWithERKS_+0x48>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
     a32:	e9 81       	ldd	r30, Y+1	; 0x01
     a34:	fa 81       	ldd	r31, Y+2	; 0x02
     a36:	40 81       	ld	r20, Z
     a38:	51 81       	ldd	r21, Z+1	; 0x01
     a3a:	e9 81       	ldd	r30, Y+1	; 0x01
     a3c:	fa 81       	ldd	r31, Y+2	; 0x02
     a3e:	24 81       	ldd	r18, Z+4	; 0x04
     a40:	35 81       	ldd	r19, Z+5	; 0x05
     a42:	eb 81       	ldd	r30, Y+3	; 0x03
     a44:	fc 81       	ldd	r31, Y+4	; 0x04
     a46:	84 81       	ldd	r24, Z+4	; 0x04
     a48:	95 81       	ldd	r25, Z+5	; 0x05
     a4a:	b9 01       	movw	r22, r18
     a4c:	68 1b       	sub	r22, r24
     a4e:	79 0b       	sbc	r23, r25
     a50:	cb 01       	movw	r24, r22
     a52:	84 0f       	add	r24, r20
     a54:	95 1f       	adc	r25, r21
     a56:	eb 81       	ldd	r30, Y+3	; 0x03
     a58:	fc 81       	ldd	r31, Y+4	; 0x04
     a5a:	20 81       	ld	r18, Z
     a5c:	31 81       	ldd	r19, Z+1	; 0x01
     a5e:	b9 01       	movw	r22, r18
     a60:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     a64:	1d 82       	std	Y+5, r1	; 0x05
     a66:	00 97       	sbiw	r24, 0x00	; 0
     a68:	01 f4       	brne	.+0      	; 0xa6a <_ZNK6String8endsWithERKS_+0x80>
     a6a:	71 e0       	ldi	r23, 0x01	; 1
     a6c:	7d 83       	std	Y+5, r23	; 0x05
     a6e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	cf 91       	pop	r28
     a7c:	df 91       	pop	r29
     a7e:	08 95       	ret

00000a80 <_ZNK6String6equalsEPKc>:
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
     a80:	df 93       	push	r29
     a82:	cf 93       	push	r28
     a84:	00 d0       	rcall	.+0      	; 0xa86 <_ZNK6String6equalsEPKc+0x6>
     a86:	00 d0       	rcall	.+0      	; 0xa88 <_ZNK6String6equalsEPKc+0x8>
     a88:	00 d0       	rcall	.+0      	; 0xa8a <_ZNK6String6equalsEPKc+0xa>
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	9a 83       	std	Y+2, r25	; 0x02
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	7c 83       	std	Y+4, r23	; 0x04
     a94:	6b 83       	std	Y+3, r22	; 0x03
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
     a96:	e9 81       	ldd	r30, Y+1	; 0x01
     a98:	fa 81       	ldd	r31, Y+2	; 0x02
     a9a:	84 81       	ldd	r24, Z+4	; 0x04
     a9c:	95 81       	ldd	r25, Z+5	; 0x05
     a9e:	00 97       	sbiw	r24, 0x00	; 0
     aa0:	01 f4       	brne	.+0      	; 0xaa2 <_ZNK6String6equalsEPKc+0x22>
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	9c 81       	ldd	r25, Y+4	; 0x04
     aa6:	00 97       	sbiw	r24, 0x00	; 0
     aa8:	01 f0       	breq	.+0      	; 0xaaa <_ZNK6String6equalsEPKc+0x2a>
     aaa:	eb 81       	ldd	r30, Y+3	; 0x03
     aac:	fc 81       	ldd	r31, Y+4	; 0x04
     aae:	80 81       	ld	r24, Z
     ab0:	88 23       	and	r24, r24
     ab2:	01 f4       	brne	.+0      	; 0xab4 <_ZNK6String6equalsEPKc+0x34>
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	8d 83       	std	Y+5, r24	; 0x05
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <_ZNK6String6equalsEPKc+0x3a>
     aba:	1d 82       	std	Y+5, r1	; 0x05
     abc:	8d 81       	ldd	r24, Y+5	; 0x05
     abe:	8e 83       	std	Y+6, r24	; 0x06
     ac0:	00 c0       	rjmp	.+0      	; 0xac2 <_ZNK6String6equalsEPKc+0x42>
	if (cstr == NULL) return buffer[0] == 0;
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	9c 81       	ldd	r25, Y+4	; 0x04
     ac6:	00 97       	sbiw	r24, 0x00	; 0
     ac8:	01 f4       	brne	.+0      	; 0xaca <_ZNK6String6equalsEPKc+0x4a>
     aca:	e9 81       	ldd	r30, Y+1	; 0x01
     acc:	fa 81       	ldd	r31, Y+2	; 0x02
     ace:	01 90       	ld	r0, Z+
     ad0:	f0 81       	ld	r31, Z
     ad2:	e0 2d       	mov	r30, r0
     ad4:	80 81       	ld	r24, Z
     ad6:	1e 82       	std	Y+6, r1	; 0x06
     ad8:	88 23       	and	r24, r24
     ada:	01 f4       	brne	.+0      	; 0xadc <_ZNK6String6equalsEPKc+0x5c>
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	8e 83       	std	Y+6, r24	; 0x06
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <_ZNK6String6equalsEPKc+0x62>
	return strcmp(buffer, cstr) == 0;
     ae2:	e9 81       	ldd	r30, Y+1	; 0x01
     ae4:	fa 81       	ldd	r31, Y+2	; 0x02
     ae6:	80 81       	ld	r24, Z
     ae8:	91 81       	ldd	r25, Z+1	; 0x01
     aea:	2b 81       	ldd	r18, Y+3	; 0x03
     aec:	3c 81       	ldd	r19, Y+4	; 0x04
     aee:	b9 01       	movw	r22, r18
     af0:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     af4:	1e 82       	std	Y+6, r1	; 0x06
     af6:	00 97       	sbiw	r24, 0x00	; 0
     af8:	01 f4       	brne	.+0      	; 0xafa <_ZNK6String6equalsEPKc+0x7a>
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	8e 83       	std	Y+6, r24	; 0x06
     afe:	8e 81       	ldd	r24, Y+6	; 0x06
}
     b00:	26 96       	adiw	r28, 0x06	; 6
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	cf 91       	pop	r28
     b0e:	df 91       	pop	r29
     b10:	08 95       	ret

00000b12 <_ZNK6String9compareToERKS_>:

/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
     b12:	df 93       	push	r29
     b14:	cf 93       	push	r28
     b16:	00 d0       	rcall	.+0      	; 0xb18 <_ZNK6String9compareToERKS_+0x6>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <_ZNK6String9compareToERKS_+0x8>
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <_ZNK6String9compareToERKS_+0xa>
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	9a 83       	std	Y+2, r25	; 0x02
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	7c 83       	std	Y+4, r23	; 0x04
     b26:	6b 83       	std	Y+3, r22	; 0x03
{
	if (!buffer || !s.buffer) {
     b28:	e9 81       	ldd	r30, Y+1	; 0x01
     b2a:	fa 81       	ldd	r31, Y+2	; 0x02
     b2c:	80 81       	ld	r24, Z
     b2e:	91 81       	ldd	r25, Z+1	; 0x01
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	01 f0       	breq	.+0      	; 0xb34 <_ZNK6String9compareToERKS_+0x22>
     b34:	eb 81       	ldd	r30, Y+3	; 0x03
     b36:	fc 81       	ldd	r31, Y+4	; 0x04
     b38:	80 81       	ld	r24, Z
     b3a:	91 81       	ldd	r25, Z+1	; 0x01
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	01 f4       	brne	.+0      	; 0xb40 <_ZNK6String9compareToERKS_+0x2e>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
     b40:	eb 81       	ldd	r30, Y+3	; 0x03
     b42:	fc 81       	ldd	r31, Y+4	; 0x04
     b44:	80 81       	ld	r24, Z
     b46:	91 81       	ldd	r25, Z+1	; 0x01
     b48:	00 97       	sbiw	r24, 0x00	; 0
     b4a:	01 f0       	breq	.+0      	; 0xb4c <_ZNK6String9compareToERKS_+0x3a>
     b4c:	eb 81       	ldd	r30, Y+3	; 0x03
     b4e:	fc 81       	ldd	r31, Y+4	; 0x04
     b50:	84 81       	ldd	r24, Z+4	; 0x04
     b52:	95 81       	ldd	r25, Z+5	; 0x05
     b54:	00 97       	sbiw	r24, 0x00	; 0
     b56:	01 f0       	breq	.+0      	; 0xb58 <_ZNK6String9compareToERKS_+0x46>
     b58:	eb 81       	ldd	r30, Y+3	; 0x03
     b5a:	fc 81       	ldd	r31, Y+4	; 0x04
     b5c:	01 90       	ld	r0, Z+
     b5e:	f0 81       	ld	r31, Z
     b60:	e0 2d       	mov	r30, r0
     b62:	80 81       	ld	r24, Z
     b64:	88 2f       	mov	r24, r24
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	22 27       	eor	r18, r18
     b6a:	33 27       	eor	r19, r19
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	3e 83       	std	Y+6, r19	; 0x06
     b72:	2d 83       	std	Y+5, r18	; 0x05
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <_ZNK6String9compareToERKS_+0x64>
		if (buffer && len > 0) return *(unsigned char *)buffer;
     b76:	e9 81       	ldd	r30, Y+1	; 0x01
     b78:	fa 81       	ldd	r31, Y+2	; 0x02
     b7a:	80 81       	ld	r24, Z
     b7c:	91 81       	ldd	r25, Z+1	; 0x01
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	01 f0       	breq	.+0      	; 0xb82 <_ZNK6String9compareToERKS_+0x70>
     b82:	e9 81       	ldd	r30, Y+1	; 0x01
     b84:	fa 81       	ldd	r31, Y+2	; 0x02
     b86:	84 81       	ldd	r24, Z+4	; 0x04
     b88:	95 81       	ldd	r25, Z+5	; 0x05
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	01 f0       	breq	.+0      	; 0xb8e <_ZNK6String9compareToERKS_+0x7c>
     b8e:	e9 81       	ldd	r30, Y+1	; 0x01
     b90:	fa 81       	ldd	r31, Y+2	; 0x02
     b92:	01 90       	ld	r0, Z+
     b94:	f0 81       	ld	r31, Z
     b96:	e0 2d       	mov	r30, r0
     b98:	80 81       	ld	r24, Z
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	3e 83       	std	Y+6, r19	; 0x06
     ba0:	2d 83       	std	Y+5, r18	; 0x05
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <_ZNK6String9compareToERKS_+0x92>
		return 0;
     ba4:	1e 82       	std	Y+6, r1	; 0x06
     ba6:	1d 82       	std	Y+5, r1	; 0x05
     ba8:	00 c0       	rjmp	.+0      	; 0xbaa <_ZNK6String9compareToERKS_+0x98>
	}
	return strcmp(buffer, s.buffer);
     baa:	e9 81       	ldd	r30, Y+1	; 0x01
     bac:	fa 81       	ldd	r31, Y+2	; 0x02
     bae:	80 81       	ld	r24, Z
     bb0:	91 81       	ldd	r25, Z+1	; 0x01
     bb2:	eb 81       	ldd	r30, Y+3	; 0x03
     bb4:	fc 81       	ldd	r31, Y+4	; 0x04
     bb6:	20 81       	ld	r18, Z
     bb8:	31 81       	ldd	r19, Z+1	; 0x01
     bba:	b9 01       	movw	r22, r18
     bbc:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     bc0:	9e 83       	std	Y+6, r25	; 0x06
     bc2:	8d 83       	std	Y+5, r24	; 0x05
     bc4:	8d 81       	ldd	r24, Y+5	; 0x05
     bc6:	9e 81       	ldd	r25, Y+6	; 0x06
}
     bc8:	26 96       	adiw	r28, 0x06	; 6
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <_ZNK6StringgeERKS_>:
unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
}

unsigned char String::operator>=(const String &rhs) const
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <_ZNK6StringgeERKS_+0x6>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <_ZNK6StringgeERKS_+0x8>
     be2:	0f 92       	push	r0
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	9a 83       	std	Y+2, r25	; 0x02
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	7c 83       	std	Y+4, r23	; 0x04
     bee:	6b 83       	std	Y+3, r22	; 0x03
{
	return compareTo(rhs) >= 0;
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	2b 81       	ldd	r18, Y+3	; 0x03
     bf6:	3c 81       	ldd	r19, Y+4	; 0x04
     bf8:	b9 01       	movw	r22, r18
     bfa:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     bfe:	1d 82       	std	Y+5, r1	; 0x05
     c00:	99 23       	and	r25, r25
     c02:	04 f0       	brlt	.+0      	; 0xc04 <_ZNK6StringgeERKS_+0x2a>
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	8d 83       	std	Y+5, r24	; 0x05
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <_ZNK6StringleERKS_>:
unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
}

unsigned char String::operator<=(const String &rhs) const
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <_ZNK6StringleERKS_+0x6>
     c20:	00 d0       	rcall	.+0      	; 0xc22 <_ZNK6StringleERKS_+0x8>
     c22:	0f 92       	push	r0
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	7c 83       	std	Y+4, r23	; 0x04
     c2e:	6b 83       	std	Y+3, r22	; 0x03
{
	return compareTo(rhs) <= 0;
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	9a 81       	ldd	r25, Y+2	; 0x02
     c34:	2b 81       	ldd	r18, Y+3	; 0x03
     c36:	3c 81       	ldd	r19, Y+4	; 0x04
     c38:	b9 01       	movw	r22, r18
     c3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     c3e:	1d 82       	std	Y+5, r1	; 0x05
     c40:	18 16       	cp	r1, r24
     c42:	19 06       	cpc	r1, r25
     c44:	04 f0       	brlt	.+0      	; 0xc46 <_ZNK6StringleERKS_+0x2c>
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	8d 83       	std	Y+5, r24	; 0x05
     c4a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <_ZNK6StringgtERKS_>:
unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
}

unsigned char String::operator>(const String &rhs) const
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	00 d0       	rcall	.+0      	; 0xc62 <_ZNK6StringgtERKS_+0x6>
     c62:	00 d0       	rcall	.+0      	; 0xc64 <_ZNK6StringgtERKS_+0x8>
     c64:	0f 92       	push	r0
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	9a 83       	std	Y+2, r25	; 0x02
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	7c 83       	std	Y+4, r23	; 0x04
     c70:	6b 83       	std	Y+3, r22	; 0x03
{
	return compareTo(rhs) > 0;
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	9a 81       	ldd	r25, Y+2	; 0x02
     c76:	2b 81       	ldd	r18, Y+3	; 0x03
     c78:	3c 81       	ldd	r19, Y+4	; 0x04
     c7a:	b9 01       	movw	r22, r18
     c7c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     c80:	1d 82       	std	Y+5, r1	; 0x05
     c82:	18 16       	cp	r1, r24
     c84:	19 06       	cpc	r1, r25
     c86:	04 f4       	brge	.+0      	; 0xc88 <_ZNK6StringgtERKS_+0x2c>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	8d 83       	std	Y+5, r24	; 0x05
     c8c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <_ZNK6StringltERKS_>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
}

unsigned char String::operator<(const String &rhs) const
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <_ZNK6StringltERKS_+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <_ZNK6StringltERKS_+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	7c 83       	std	Y+4, r23	; 0x04
     cb2:	6b 83       	std	Y+3, r22	; 0x03
{
	return compareTo(rhs) < 0;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	2b 81       	ldd	r18, Y+3	; 0x03
     cba:	3c 81       	ldd	r19, Y+4	; 0x04
     cbc:	b9 01       	movw	r22, r18
     cbe:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     cc2:	1d 82       	std	Y+5, r1	; 0x05
     cc4:	99 23       	and	r25, r25
     cc6:	04 f4       	brge	.+0      	; 0xcc8 <_ZNK6StringltERKS_+0x2a>
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	8d 83       	std	Y+5, r24	; 0x05
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
}
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <_ZNK6String6equalsERKS_>:
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <_ZNK6String6equalsERKS_+0x6>
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <_ZNK6String6equalsERKS_+0x8>
     ce6:	0f 92       	push	r0
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	9a 83       	std	Y+2, r25	; 0x02
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	7c 83       	std	Y+4, r23	; 0x04
     cf2:	6b 83       	std	Y+3, r22	; 0x03
{
	return (len == s2.len && compareTo(s2) == 0);
     cf4:	e9 81       	ldd	r30, Y+1	; 0x01
     cf6:	fa 81       	ldd	r31, Y+2	; 0x02
     cf8:	24 81       	ldd	r18, Z+4	; 0x04
     cfa:	35 81       	ldd	r19, Z+5	; 0x05
     cfc:	eb 81       	ldd	r30, Y+3	; 0x03
     cfe:	fc 81       	ldd	r31, Y+4	; 0x04
     d00:	84 81       	ldd	r24, Z+4	; 0x04
     d02:	95 81       	ldd	r25, Z+5	; 0x05
     d04:	28 17       	cp	r18, r24
     d06:	39 07       	cpc	r19, r25
     d08:	01 f4       	brne	.+0      	; 0xd0a <_ZNK6String6equalsERKS_+0x2c>
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	9a 81       	ldd	r25, Y+2	; 0x02
     d0e:	2b 81       	ldd	r18, Y+3	; 0x03
     d10:	3c 81       	ldd	r19, Y+4	; 0x04
     d12:	b9 01       	movw	r22, r18
     d14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	01 f4       	brne	.+0      	; 0xd1c <_ZNK6String6equalsERKS_+0x3e>
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	8d 83       	std	Y+5, r24	; 0x05
     d20:	00 c0       	rjmp	.+0      	; 0xd22 <_ZNK6String6equalsERKS_+0x44>
     d22:	1d 82       	std	Y+5, r1	; 0x05
     d24:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <_ZNK6String10startsWithERKS_j>:
{
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	27 97       	sbiw	r28, 0x07	; 7
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	9a 83       	std	Y+2, r25	; 0x02
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	7c 83       	std	Y+4, r23	; 0x04
     d50:	6b 83       	std	Y+3, r22	; 0x03
     d52:	5e 83       	std	Y+6, r21	; 0x06
     d54:	4d 83       	std	Y+5, r20	; 0x05
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     d56:	e9 81       	ldd	r30, Y+1	; 0x01
     d58:	fa 81       	ldd	r31, Y+2	; 0x02
     d5a:	24 81       	ldd	r18, Z+4	; 0x04
     d5c:	35 81       	ldd	r19, Z+5	; 0x05
     d5e:	eb 81       	ldd	r30, Y+3	; 0x03
     d60:	fc 81       	ldd	r31, Y+4	; 0x04
     d62:	84 81       	ldd	r24, Z+4	; 0x04
     d64:	95 81       	ldd	r25, Z+5	; 0x05
     d66:	28 1b       	sub	r18, r24
     d68:	39 0b       	sbc	r19, r25
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	9e 81       	ldd	r25, Y+6	; 0x06
     d6e:	28 17       	cp	r18, r24
     d70:	39 07       	cpc	r19, r25
     d72:	00 f0       	brcs	.+0      	; 0xd74 <_ZNK6String10startsWithERKS_j+0x3e>
     d74:	e9 81       	ldd	r30, Y+1	; 0x01
     d76:	fa 81       	ldd	r31, Y+2	; 0x02
     d78:	80 81       	ld	r24, Z
     d7a:	91 81       	ldd	r25, Z+1	; 0x01
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	01 f0       	breq	.+0      	; 0xd80 <_ZNK6String10startsWithERKS_j+0x4a>
     d80:	eb 81       	ldd	r30, Y+3	; 0x03
     d82:	fc 81       	ldd	r31, Y+4	; 0x04
     d84:	80 81       	ld	r24, Z
     d86:	91 81       	ldd	r25, Z+1	; 0x01
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	01 f4       	brne	.+0      	; 0xd8c <_ZNK6String10startsWithERKS_j+0x56>
     d8c:	1f 82       	std	Y+7, r1	; 0x07
     d8e:	00 c0       	rjmp	.+0      	; 0xd90 <_ZNK6String10startsWithERKS_j+0x5a>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
     d90:	e9 81       	ldd	r30, Y+1	; 0x01
     d92:	fa 81       	ldd	r31, Y+2	; 0x02
     d94:	20 81       	ld	r18, Z
     d96:	31 81       	ldd	r19, Z+1	; 0x01
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	9e 81       	ldd	r25, Y+6	; 0x06
     d9c:	82 0f       	add	r24, r18
     d9e:	93 1f       	adc	r25, r19
     da0:	eb 81       	ldd	r30, Y+3	; 0x03
     da2:	fc 81       	ldd	r31, Y+4	; 0x04
     da4:	40 81       	ld	r20, Z
     da6:	51 81       	ldd	r21, Z+1	; 0x01
     da8:	eb 81       	ldd	r30, Y+3	; 0x03
     daa:	fc 81       	ldd	r31, Y+4	; 0x04
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	ba 01       	movw	r22, r20
     db2:	a9 01       	movw	r20, r18
     db4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     db8:	1f 82       	std	Y+7, r1	; 0x07
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	01 f4       	brne	.+0      	; 0xdbe <_ZNK6String10startsWithERKS_j+0x88>
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	8f 83       	std	Y+7, r24	; 0x07
     dc2:	8f 81       	ldd	r24, Y+7	; 0x07
}
     dc4:	27 96       	adiw	r28, 0x07	; 7
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <_ZNK6String10startsWithERKS_>:
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	00 d0       	rcall	.+0      	; 0xddc <_ZNK6String10startsWithERKS_+0x6>
     ddc:	00 d0       	rcall	.+0      	; 0xdde <_ZNK6String10startsWithERKS_+0x8>
     dde:	0f 92       	push	r0
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
     de8:	7c 83       	std	Y+4, r23	; 0x04
     dea:	6b 83       	std	Y+3, r22	; 0x03
{
	if (len < s2.len) return 0;
     dec:	e9 81       	ldd	r30, Y+1	; 0x01
     dee:	fa 81       	ldd	r31, Y+2	; 0x02
     df0:	24 81       	ldd	r18, Z+4	; 0x04
     df2:	35 81       	ldd	r19, Z+5	; 0x05
     df4:	eb 81       	ldd	r30, Y+3	; 0x03
     df6:	fc 81       	ldd	r31, Y+4	; 0x04
     df8:	84 81       	ldd	r24, Z+4	; 0x04
     dfa:	95 81       	ldd	r25, Z+5	; 0x05
     dfc:	28 17       	cp	r18, r24
     dfe:	39 07       	cpc	r19, r25
     e00:	00 f4       	brcc	.+0      	; 0xe02 <_ZNK6String10startsWithERKS_+0x2c>
     e02:	1d 82       	std	Y+5, r1	; 0x05
     e04:	00 c0       	rjmp	.+0      	; 0xe06 <_ZNK6String10startsWithERKS_+0x30>
	return startsWith(s2, 0);
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	9a 81       	ldd	r25, Y+2	; 0x02
     e0a:	2b 81       	ldd	r18, Y+3	; 0x03
     e0c:	3c 81       	ldd	r19, Y+4	; 0x04
     e0e:	b9 01       	movw	r22, r18
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     e18:	8d 83       	std	Y+5, r24	; 0x05
     e1a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	27 97       	sbiw	r28, 0x07	; 7
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	9c 83       	std	Y+4, r25	; 0x04
     e42:	8b 83       	std	Y+3, r24	; 0x03
     e44:	7e 83       	std	Y+6, r23	; 0x06
     e46:	6d 83       	std	Y+5, r22	; 0x05
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     e48:	eb 81       	ldd	r30, Y+3	; 0x03
     e4a:	fc 81       	ldd	r31, Y+4	; 0x04
     e4c:	40 81       	ld	r20, Z
     e4e:	51 81       	ldd	r21, Z+1	; 0x01
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	9e 81       	ldd	r25, Y+6	; 0x06
     e54:	9c 01       	movw	r18, r24
     e56:	2f 5f       	subi	r18, 0xFF	; 255
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	ca 01       	movw	r24, r20
     e5c:	b9 01       	movw	r22, r18
     e5e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
	if (newbuffer) {
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	01 f0       	breq	.+0      	; 0xe6e <_ZN6String12changeBufferEj+0x42>
		buffer = newbuffer;
     e6e:	eb 81       	ldd	r30, Y+3	; 0x03
     e70:	fc 81       	ldd	r31, Y+4	; 0x04
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	80 83       	st	Z, r24
		capacity = maxStrLen;
     e7a:	eb 81       	ldd	r30, Y+3	; 0x03
     e7c:	fc 81       	ldd	r31, Y+4	; 0x04
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	9e 81       	ldd	r25, Y+6	; 0x06
     e82:	93 83       	std	Z+3, r25	; 0x03
     e84:	82 83       	std	Z+2, r24	; 0x02
		return 1;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	8f 83       	std	Y+7, r24	; 0x07
     e8a:	00 c0       	rjmp	.+0      	; 0xe8c <_ZN6String12changeBufferEj+0x60>
	}
	return 0;
     e8c:	1f 82       	std	Y+7, r1	; 0x07
     e8e:	8f 81       	ldd	r24, Y+7	; 0x07
}
     e90:	27 96       	adiw	r28, 0x07	; 7
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <_ZN6String7replaceERKS_S1_>:
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	69 97       	sbiw	r28, 0x19	; 25
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	98 8b       	std	Y+16, r25	; 0x10
     eb8:	8f 87       	std	Y+15, r24	; 0x0f
     eba:	7a 8b       	std	Y+18, r23	; 0x12
     ebc:	69 8b       	std	Y+17, r22	; 0x11
     ebe:	5c 8b       	std	Y+20, r21	; 0x14
     ec0:	4b 8b       	std	Y+19, r20	; 0x13
{
	if (len == 0 || find.len == 0) return;
     ec2:	ef 85       	ldd	r30, Y+15	; 0x0f
     ec4:	f8 89       	ldd	r31, Y+16	; 0x10
     ec6:	84 81       	ldd	r24, Z+4	; 0x04
     ec8:	95 81       	ldd	r25, Z+5	; 0x05
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	01 f4       	brne	.+0      	; 0xece <_ZN6String7replaceERKS_S1_+0x2c>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <_ZN6String7replaceERKS_S1_+0x2e>
     ed0:	e9 89       	ldd	r30, Y+17	; 0x11
     ed2:	fa 89       	ldd	r31, Y+18	; 0x12
     ed4:	84 81       	ldd	r24, Z+4	; 0x04
     ed6:	95 81       	ldd	r25, Z+5	; 0x05
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	01 f4       	brne	.+0      	; 0xedc <_ZN6String7replaceERKS_S1_+0x3a>
     edc:	00 c0       	rjmp	.+0      	; 0xede <_ZN6String7replaceERKS_S1_+0x3c>
	int diff = replace.len - find.len;
     ede:	eb 89       	ldd	r30, Y+19	; 0x13
     ee0:	fc 89       	ldd	r31, Y+20	; 0x14
     ee2:	24 81       	ldd	r18, Z+4	; 0x04
     ee4:	35 81       	ldd	r19, Z+5	; 0x05
     ee6:	e9 89       	ldd	r30, Y+17	; 0x11
     ee8:	fa 89       	ldd	r31, Y+18	; 0x12
     eea:	84 81       	ldd	r24, Z+4	; 0x04
     eec:	95 81       	ldd	r25, Z+5	; 0x05
     eee:	a9 01       	movw	r20, r18
     ef0:	48 1b       	sub	r20, r24
     ef2:	59 0b       	sbc	r21, r25
     ef4:	ca 01       	movw	r24, r20
     ef6:	9e 87       	std	Y+14, r25	; 0x0e
     ef8:	8d 87       	std	Y+13, r24	; 0x0d
	char *readFrom = buffer;
     efa:	ef 85       	ldd	r30, Y+15	; 0x0f
     efc:	f8 89       	ldd	r31, Y+16	; 0x10
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	9c 87       	std	Y+12, r25	; 0x0c
     f04:	8b 87       	std	Y+11, r24	; 0x0b
	char *foundAt;
	if (diff == 0) {
     f06:	8d 85       	ldd	r24, Y+13	; 0x0d
     f08:	9e 85       	ldd	r25, Y+14	; 0x0e
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	01 f4       	brne	.+0      	; 0xf0e <_ZN6String7replaceERKS_S1_+0x6c>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <_ZN6String7replaceERKS_S1_+0x6e>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
     f10:	eb 89       	ldd	r30, Y+19	; 0x13
     f12:	fc 89       	ldd	r31, Y+20	; 0x14
     f14:	40 81       	ld	r20, Z
     f16:	51 81       	ldd	r21, Z+1	; 0x01
     f18:	eb 89       	ldd	r30, Y+19	; 0x13
     f1a:	fc 89       	ldd	r31, Y+20	; 0x14
     f1c:	24 81       	ldd	r18, Z+4	; 0x04
     f1e:	35 81       	ldd	r19, Z+5	; 0x05
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	9a 85       	ldd	r25, Y+10	; 0x0a
     f24:	ba 01       	movw	r22, r20
     f26:	a9 01       	movw	r20, r18
     f28:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
			readFrom = foundAt + replace.len;
     f2c:	eb 89       	ldd	r30, Y+19	; 0x13
     f2e:	fc 89       	ldd	r31, Y+20	; 0x14
     f30:	24 81       	ldd	r18, Z+4	; 0x04
     f32:	35 81       	ldd	r19, Z+5	; 0x05
     f34:	89 85       	ldd	r24, Y+9	; 0x09
     f36:	9a 85       	ldd	r25, Y+10	; 0x0a
     f38:	82 0f       	add	r24, r18
     f3a:	93 1f       	adc	r25, r19
     f3c:	9c 87       	std	Y+12, r25	; 0x0c
     f3e:	8b 87       	std	Y+11, r24	; 0x0b
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
     f40:	e9 89       	ldd	r30, Y+17	; 0x11
     f42:	fa 89       	ldd	r31, Y+18	; 0x12
     f44:	20 81       	ld	r18, Z
     f46:	31 81       	ldd	r19, Z+1	; 0x01
     f48:	8b 85       	ldd	r24, Y+11	; 0x0b
     f4a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f4c:	b9 01       	movw	r22, r18
     f4e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
     f52:	9a 87       	std	Y+10, r25	; 0x0a
     f54:	89 87       	std	Y+9, r24	; 0x09
     f56:	19 8e       	std	Y+25, r1	; 0x19
     f58:	89 85       	ldd	r24, Y+9	; 0x09
     f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	01 f0       	breq	.+0      	; 0xf60 <_ZN6String7replaceERKS_S1_+0xbe>
     f60:	51 e0       	ldi	r21, 0x01	; 1
     f62:	59 8f       	std	Y+25, r21	; 0x19
     f64:	89 8d       	ldd	r24, Y+25	; 0x19
     f66:	88 23       	and	r24, r24
     f68:	01 f4       	brne	.+0      	; 0xf6a <_ZN6String7replaceERKS_S1_+0xc8>
     f6a:	00 c0       	rjmp	.+0      	; 0xf6c <_ZN6String7replaceERKS_S1_+0xca>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
     f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f70:	99 23       	and	r25, r25
     f72:	04 f0       	brlt	.+0      	; 0xf74 <_ZN6String7replaceERKS_S1_+0xd2>
     f74:	00 c0       	rjmp	.+0      	; 0xf76 <_ZN6String7replaceERKS_S1_+0xd4>
		char *writeTo = buffer;
     f76:	ef 85       	ldd	r30, Y+15	; 0x0f
     f78:	f8 89       	ldd	r31, Y+16	; 0x10
     f7a:	80 81       	ld	r24, Z
     f7c:	91 81       	ldd	r25, Z+1	; 0x01
     f7e:	98 87       	std	Y+8, r25	; 0x08
     f80:	8f 83       	std	Y+7, r24	; 0x07
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <_ZN6String7replaceERKS_S1_+0xe2>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
     f84:	29 85       	ldd	r18, Y+9	; 0x09
     f86:	3a 85       	ldd	r19, Y+10	; 0x0a
     f88:	8b 85       	ldd	r24, Y+11	; 0x0b
     f8a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f8c:	f9 01       	movw	r30, r18
     f8e:	e8 1b       	sub	r30, r24
     f90:	f9 0b       	sbc	r31, r25
     f92:	cf 01       	movw	r24, r30
     f94:	9e 83       	std	Y+6, r25	; 0x06
     f96:	8d 83       	std	Y+5, r24	; 0x05
			memcpy(writeTo, readFrom, n);
     f98:	8f 81       	ldd	r24, Y+7	; 0x07
     f9a:	98 85       	ldd	r25, Y+8	; 0x08
     f9c:	2b 85       	ldd	r18, Y+11	; 0x0b
     f9e:	3c 85       	ldd	r19, Y+12	; 0x0c
     fa0:	4d 81       	ldd	r20, Y+5	; 0x05
     fa2:	5e 81       	ldd	r21, Y+6	; 0x06
     fa4:	b9 01       	movw	r22, r18
     fa6:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
			writeTo += n;
     faa:	2f 81       	ldd	r18, Y+7	; 0x07
     fac:	38 85       	ldd	r19, Y+8	; 0x08
     fae:	8d 81       	ldd	r24, Y+5	; 0x05
     fb0:	9e 81       	ldd	r25, Y+6	; 0x06
     fb2:	82 0f       	add	r24, r18
     fb4:	93 1f       	adc	r25, r19
     fb6:	98 87       	std	Y+8, r25	; 0x08
     fb8:	8f 83       	std	Y+7, r24	; 0x07
			memcpy(writeTo, replace.buffer, replace.len);
     fba:	eb 89       	ldd	r30, Y+19	; 0x13
     fbc:	fc 89       	ldd	r31, Y+20	; 0x14
     fbe:	40 81       	ld	r20, Z
     fc0:	51 81       	ldd	r21, Z+1	; 0x01
     fc2:	eb 89       	ldd	r30, Y+19	; 0x13
     fc4:	fc 89       	ldd	r31, Y+20	; 0x14
     fc6:	24 81       	ldd	r18, Z+4	; 0x04
     fc8:	35 81       	ldd	r19, Z+5	; 0x05
     fca:	8f 81       	ldd	r24, Y+7	; 0x07
     fcc:	98 85       	ldd	r25, Y+8	; 0x08
     fce:	ba 01       	movw	r22, r20
     fd0:	a9 01       	movw	r20, r18
     fd2:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
			writeTo += replace.len;
     fd6:	eb 89       	ldd	r30, Y+19	; 0x13
     fd8:	fc 89       	ldd	r31, Y+20	; 0x14
     fda:	24 81       	ldd	r18, Z+4	; 0x04
     fdc:	35 81       	ldd	r19, Z+5	; 0x05
     fde:	8f 81       	ldd	r24, Y+7	; 0x07
     fe0:	98 85       	ldd	r25, Y+8	; 0x08
     fe2:	82 0f       	add	r24, r18
     fe4:	93 1f       	adc	r25, r19
     fe6:	98 87       	std	Y+8, r25	; 0x08
     fe8:	8f 83       	std	Y+7, r24	; 0x07
			readFrom = foundAt + find.len;
     fea:	e9 89       	ldd	r30, Y+17	; 0x11
     fec:	fa 89       	ldd	r31, Y+18	; 0x12
     fee:	24 81       	ldd	r18, Z+4	; 0x04
     ff0:	35 81       	ldd	r19, Z+5	; 0x05
     ff2:	89 85       	ldd	r24, Y+9	; 0x09
     ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff6:	82 0f       	add	r24, r18
     ff8:	93 1f       	adc	r25, r19
     ffa:	9c 87       	std	Y+12, r25	; 0x0c
     ffc:	8b 87       	std	Y+11, r24	; 0x0b
			len += diff;
     ffe:	ef 85       	ldd	r30, Y+15	; 0x0f
    1000:	f8 89       	ldd	r31, Y+16	; 0x10
    1002:	24 81       	ldd	r18, Z+4	; 0x04
    1004:	35 81       	ldd	r19, Z+5	; 0x05
    1006:	8d 85       	ldd	r24, Y+13	; 0x0d
    1008:	9e 85       	ldd	r25, Y+14	; 0x0e
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1010:	f8 89       	ldd	r31, Y+16	; 0x10
    1012:	95 83       	std	Z+5, r25	; 0x05
    1014:	84 83       	std	Z+4, r24	; 0x04
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    1016:	e9 89       	ldd	r30, Y+17	; 0x11
    1018:	fa 89       	ldd	r31, Y+18	; 0x12
    101a:	20 81       	ld	r18, Z
    101c:	31 81       	ldd	r19, Z+1	; 0x01
    101e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1020:	9c 85       	ldd	r25, Y+12	; 0x0c
    1022:	b9 01       	movw	r22, r18
    1024:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1028:	9a 87       	std	Y+10, r25	; 0x0a
    102a:	89 87       	std	Y+9, r24	; 0x09
    102c:	18 8e       	std	Y+24, r1	; 0x18
    102e:	89 85       	ldd	r24, Y+9	; 0x09
    1030:	9a 85       	ldd	r25, Y+10	; 0x0a
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	01 f0       	breq	.+0      	; 0x1036 <_ZN6String7replaceERKS_S1_+0x194>
    1036:	f1 e0       	ldi	r31, 0x01	; 1
    1038:	f8 8f       	std	Y+24, r31	; 0x18
    103a:	48 8d       	ldd	r20, Y+24	; 0x18
    103c:	44 23       	and	r20, r20
    103e:	01 f0       	breq	.+0      	; 0x1040 <_ZN6String7replaceERKS_S1_+0x19e>
    1040:	00 c0       	rjmp	.+0      	; 0x1042 <_ZN6String7replaceERKS_S1_+0x1a0>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    1042:	8f 81       	ldd	r24, Y+7	; 0x07
    1044:	98 85       	ldd	r25, Y+8	; 0x08
    1046:	2b 85       	ldd	r18, Y+11	; 0x0b
    1048:	3c 85       	ldd	r19, Y+12	; 0x0c
    104a:	b9 01       	movw	r22, r18
    104c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1050:	00 c0       	rjmp	.+0      	; 0x1052 <_ZN6String7replaceERKS_S1_+0x1b0>
	} else {
		unsigned int size = len; // compute size needed for result
    1052:	ef 85       	ldd	r30, Y+15	; 0x0f
    1054:	f8 89       	ldd	r31, Y+16	; 0x10
    1056:	84 81       	ldd	r24, Z+4	; 0x04
    1058:	95 81       	ldd	r25, Z+5	; 0x05
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	8b 83       	std	Y+3, r24	; 0x03
    105e:	00 c0       	rjmp	.+0      	; 0x1060 <_ZN6String7replaceERKS_S1_+0x1be>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    1060:	e9 89       	ldd	r30, Y+17	; 0x11
    1062:	fa 89       	ldd	r31, Y+18	; 0x12
    1064:	24 81       	ldd	r18, Z+4	; 0x04
    1066:	35 81       	ldd	r19, Z+5	; 0x05
    1068:	89 85       	ldd	r24, Y+9	; 0x09
    106a:	9a 85       	ldd	r25, Y+10	; 0x0a
    106c:	82 0f       	add	r24, r18
    106e:	93 1f       	adc	r25, r19
    1070:	9c 87       	std	Y+12, r25	; 0x0c
    1072:	8b 87       	std	Y+11, r24	; 0x0b
			size += diff;
    1074:	2d 85       	ldd	r18, Y+13	; 0x0d
    1076:	3e 85       	ldd	r19, Y+14	; 0x0e
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	82 0f       	add	r24, r18
    107e:	93 1f       	adc	r25, r19
    1080:	9c 83       	std	Y+4, r25	; 0x04
    1082:	8b 83       	std	Y+3, r24	; 0x03
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    1084:	e9 89       	ldd	r30, Y+17	; 0x11
    1086:	fa 89       	ldd	r31, Y+18	; 0x12
    1088:	20 81       	ld	r18, Z
    108a:	31 81       	ldd	r19, Z+1	; 0x01
    108c:	8b 85       	ldd	r24, Y+11	; 0x0b
    108e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1090:	b9 01       	movw	r22, r18
    1092:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1096:	9a 87       	std	Y+10, r25	; 0x0a
    1098:	89 87       	std	Y+9, r24	; 0x09
    109a:	1f 8a       	std	Y+23, r1	; 0x17
    109c:	89 85       	ldd	r24, Y+9	; 0x09
    109e:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	01 f0       	breq	.+0      	; 0x10a4 <_ZN6String7replaceERKS_S1_+0x202>
    10a4:	51 e0       	ldi	r21, 0x01	; 1
    10a6:	5f 8b       	std	Y+23, r21	; 0x17
    10a8:	8f 89       	ldd	r24, Y+23	; 0x17
    10aa:	88 23       	and	r24, r24
    10ac:	01 f4       	brne	.+0      	; 0x10ae <_ZN6String7replaceERKS_S1_+0x20c>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    10ae:	ef 85       	ldd	r30, Y+15	; 0x0f
    10b0:	f8 89       	ldd	r31, Y+16	; 0x10
    10b2:	24 81       	ldd	r18, Z+4	; 0x04
    10b4:	35 81       	ldd	r19, Z+5	; 0x05
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	28 17       	cp	r18, r24
    10bc:	39 07       	cpc	r19, r25
    10be:	01 f4       	brne	.+0      	; 0x10c0 <_ZN6String7replaceERKS_S1_+0x21e>
    10c0:	00 c0       	rjmp	.+0      	; 0x10c2 <_ZN6String7replaceERKS_S1_+0x220>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    10c2:	ef 85       	ldd	r30, Y+15	; 0x0f
    10c4:	f8 89       	ldd	r31, Y+16	; 0x10
    10c6:	22 81       	ldd	r18, Z+2	; 0x02
    10c8:	33 81       	ldd	r19, Z+3	; 0x03
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	28 17       	cp	r18, r24
    10d0:	39 07       	cpc	r19, r25
    10d2:	00 f4       	brcc	.+0      	; 0x10d4 <_ZN6String7replaceERKS_S1_+0x232>
    10d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10d6:	98 89       	ldd	r25, Y+16	; 0x10
    10d8:	2b 81       	ldd	r18, Y+3	; 0x03
    10da:	3c 81       	ldd	r19, Y+4	; 0x04
    10dc:	b9 01       	movw	r22, r18
    10de:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    10e2:	88 23       	and	r24, r24
    10e4:	01 f4       	brne	.+0      	; 0x10e6 <_ZN6String7replaceERKS_S1_+0x244>
    10e6:	e1 e0       	ldi	r30, 0x01	; 1
    10e8:	ee 8b       	std	Y+22, r30	; 0x16
    10ea:	00 c0       	rjmp	.+0      	; 0x10ec <_ZN6String7replaceERKS_S1_+0x24a>
    10ec:	1e 8a       	std	Y+22, r1	; 0x16
    10ee:	8e 89       	ldd	r24, Y+22	; 0x16
    10f0:	88 23       	and	r24, r24
    10f2:	01 f0       	breq	.+0      	; 0x10f4 <_ZN6String7replaceERKS_S1_+0x252>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <_ZN6String7replaceERKS_S1_+0x254>
		int index = len - 1;
    10f6:	ef 85       	ldd	r30, Y+15	; 0x0f
    10f8:	f8 89       	ldd	r31, Y+16	; 0x10
    10fa:	84 81       	ldd	r24, Z+4	; 0x04
    10fc:	95 81       	ldd	r25, Z+5	; 0x05
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	9a 83       	std	Y+2, r25	; 0x02
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	00 c0       	rjmp	.+0      	; 0x1106 <_ZN6String7replaceERKS_S1_+0x264>
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
    1106:	ef 85       	ldd	r30, Y+15	; 0x0f
    1108:	f8 89       	ldd	r31, Y+16	; 0x10
    110a:	40 81       	ld	r20, Z
    110c:	51 81       	ldd	r21, Z+1	; 0x01
    110e:	e9 89       	ldd	r30, Y+17	; 0x11
    1110:	fa 89       	ldd	r31, Y+18	; 0x12
    1112:	24 81       	ldd	r18, Z+4	; 0x04
    1114:	35 81       	ldd	r19, Z+5	; 0x05
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	9a 81       	ldd	r25, Y+2	; 0x02
    111a:	82 0f       	add	r24, r18
    111c:	93 1f       	adc	r25, r19
    111e:	84 0f       	add	r24, r20
    1120:	95 1f       	adc	r25, r21
    1122:	9c 87       	std	Y+12, r25	; 0x0c
    1124:	8b 87       	std	Y+11, r24	; 0x0b
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    1126:	2d 85       	ldd	r18, Y+13	; 0x0d
    1128:	3e 85       	ldd	r19, Y+14	; 0x0e
    112a:	8b 85       	ldd	r24, Y+11	; 0x0b
    112c:	9c 85       	ldd	r25, Y+12	; 0x0c
    112e:	bc 01       	movw	r22, r24
    1130:	62 0f       	add	r22, r18
    1132:	73 1f       	adc	r23, r19
    1134:	ef 85       	ldd	r30, Y+15	; 0x0f
    1136:	f8 89       	ldd	r31, Y+16	; 0x10
    1138:	44 81       	ldd	r20, Z+4	; 0x04
    113a:	55 81       	ldd	r21, Z+5	; 0x05
    113c:	ef 85       	ldd	r30, Y+15	; 0x0f
    113e:	f8 89       	ldd	r31, Y+16	; 0x10
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	9c 01       	movw	r18, r24
    1146:	8b 85       	ldd	r24, Y+11	; 0x0b
    1148:	9c 85       	ldd	r25, Y+12	; 0x0c
    114a:	f9 01       	movw	r30, r18
    114c:	e8 1b       	sub	r30, r24
    114e:	f9 0b       	sbc	r31, r25
    1150:	cf 01       	movw	r24, r30
    1152:	48 0f       	add	r20, r24
    1154:	59 1f       	adc	r21, r25
    1156:	2b 85       	ldd	r18, Y+11	; 0x0b
    1158:	3c 85       	ldd	r19, Y+12	; 0x0c
    115a:	cb 01       	movw	r24, r22
    115c:	b9 01       	movw	r22, r18
    115e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
			len += diff;
    1162:	ef 85       	ldd	r30, Y+15	; 0x0f
    1164:	f8 89       	ldd	r31, Y+16	; 0x10
    1166:	24 81       	ldd	r18, Z+4	; 0x04
    1168:	35 81       	ldd	r19, Z+5	; 0x05
    116a:	8d 85       	ldd	r24, Y+13	; 0x0d
    116c:	9e 85       	ldd	r25, Y+14	; 0x0e
    116e:	82 0f       	add	r24, r18
    1170:	93 1f       	adc	r25, r19
    1172:	ef 85       	ldd	r30, Y+15	; 0x0f
    1174:	f8 89       	ldd	r31, Y+16	; 0x10
    1176:	95 83       	std	Z+5, r25	; 0x05
    1178:	84 83       	std	Z+4, r24	; 0x04
			buffer[len] = 0;
    117a:	ef 85       	ldd	r30, Y+15	; 0x0f
    117c:	f8 89       	ldd	r31, Y+16	; 0x10
    117e:	20 81       	ld	r18, Z
    1180:	31 81       	ldd	r19, Z+1	; 0x01
    1182:	ef 85       	ldd	r30, Y+15	; 0x0f
    1184:	f8 89       	ldd	r31, Y+16	; 0x10
    1186:	84 81       	ldd	r24, Z+4	; 0x04
    1188:	95 81       	ldd	r25, Z+5	; 0x05
    118a:	f9 01       	movw	r30, r18
    118c:	e8 0f       	add	r30, r24
    118e:	f9 1f       	adc	r31, r25
    1190:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    1192:	ef 85       	ldd	r30, Y+15	; 0x0f
    1194:	f8 89       	ldd	r31, Y+16	; 0x10
    1196:	20 81       	ld	r18, Z
    1198:	31 81       	ldd	r19, Z+1	; 0x01
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	82 0f       	add	r24, r18
    11a0:	93 1f       	adc	r25, r19
    11a2:	eb 89       	ldd	r30, Y+19	; 0x13
    11a4:	fc 89       	ldd	r31, Y+20	; 0x14
    11a6:	40 81       	ld	r20, Z
    11a8:	51 81       	ldd	r21, Z+1	; 0x01
    11aa:	eb 89       	ldd	r30, Y+19	; 0x13
    11ac:	fc 89       	ldd	r31, Y+20	; 0x14
    11ae:	24 81       	ldd	r18, Z+4	; 0x04
    11b0:	35 81       	ldd	r19, Z+5	; 0x05
    11b2:	ba 01       	movw	r22, r20
    11b4:	a9 01       	movw	r20, r18
    11b6:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
			index--;
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	9a 81       	ldd	r25, Y+2	; 0x02
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	9a 83       	std	Y+2, r25	; 0x02
    11c2:	89 83       	std	Y+1, r24	; 0x01
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	99 23       	and	r25, r25
    11ca:	04 f0       	brlt	.+0      	; 0x11cc <_ZN6String7replaceERKS_S1_+0x32a>
    11cc:	49 81       	ldd	r20, Y+1	; 0x01
    11ce:	5a 81       	ldd	r21, Y+2	; 0x02
    11d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d2:	98 89       	ldd	r25, Y+16	; 0x10
    11d4:	29 89       	ldd	r18, Y+17	; 0x11
    11d6:	3a 89       	ldd	r19, Y+18	; 0x12
    11d8:	b9 01       	movw	r22, r18
    11da:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    11de:	9a 83       	std	Y+2, r25	; 0x02
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	99 23       	and	r25, r25
    11e8:	04 f0       	brlt	.+0      	; 0x11ea <_ZN6String7replaceERKS_S1_+0x348>
    11ea:	f1 e0       	ldi	r31, 0x01	; 1
    11ec:	fd 8b       	std	Y+21, r31	; 0x15
    11ee:	00 c0       	rjmp	.+0      	; 0x11f0 <_ZN6String7replaceERKS_S1_+0x34e>
    11f0:	1d 8a       	std	Y+21, r1	; 0x15
    11f2:	8d 89       	ldd	r24, Y+21	; 0x15
    11f4:	88 23       	and	r24, r24
    11f6:	01 f0       	breq	.+0      	; 0x11f8 <_ZN6String7replaceERKS_S1_+0x356>
    11f8:	00 c0       	rjmp	.+0      	; 0x11fa <_ZN6String7replaceERKS_S1_+0x358>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    11fa:	69 96       	adiw	r28, 0x19	; 25
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <_ZN6String7reserveEj+0x6>
    1212:	00 d0       	rcall	.+0      	; 0x1214 <_ZN6String7reserveEj+0x8>
    1214:	00 d0       	rcall	.+0      	; 0x1216 <_ZN6String7reserveEj+0xa>
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	89 83       	std	Y+1, r24	; 0x01
    121e:	7c 83       	std	Y+4, r23	; 0x04
    1220:	6b 83       	std	Y+3, r22	; 0x03
{
	if (buffer && capacity >= size) return 1;
    1222:	e9 81       	ldd	r30, Y+1	; 0x01
    1224:	fa 81       	ldd	r31, Y+2	; 0x02
    1226:	80 81       	ld	r24, Z
    1228:	91 81       	ldd	r25, Z+1	; 0x01
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	01 f0       	breq	.+0      	; 0x122e <_ZN6String7reserveEj+0x22>
    122e:	e9 81       	ldd	r30, Y+1	; 0x01
    1230:	fa 81       	ldd	r31, Y+2	; 0x02
    1232:	22 81       	ldd	r18, Z+2	; 0x02
    1234:	33 81       	ldd	r19, Z+3	; 0x03
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	9c 81       	ldd	r25, Y+4	; 0x04
    123a:	28 17       	cp	r18, r24
    123c:	39 07       	cpc	r19, r25
    123e:	00 f0       	brcs	.+0      	; 0x1240 <_ZN6String7reserveEj+0x34>
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	8d 83       	std	Y+5, r24	; 0x05
    1244:	00 c0       	rjmp	.+0      	; 0x1246 <_ZN6String7reserveEj+0x3a>
	if (changeBuffer(size)) {
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	2b 81       	ldd	r18, Y+3	; 0x03
    124c:	3c 81       	ldd	r19, Y+4	; 0x04
    124e:	b9 01       	movw	r22, r18
    1250:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1254:	8e 83       	std	Y+6, r24	; 0x06
    1256:	8e 81       	ldd	r24, Y+6	; 0x06
    1258:	88 23       	and	r24, r24
    125a:	01 f0       	breq	.+0      	; 0x125c <_ZN6String7reserveEj+0x50>
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	8e 83       	std	Y+6, r24	; 0x06
    1260:	8e 81       	ldd	r24, Y+6	; 0x06
    1262:	88 23       	and	r24, r24
    1264:	01 f0       	breq	.+0      	; 0x1266 <_ZN6String7reserveEj+0x5a>
		if (len == 0) buffer[0] = 0;
    1266:	e9 81       	ldd	r30, Y+1	; 0x01
    1268:	fa 81       	ldd	r31, Y+2	; 0x02
    126a:	84 81       	ldd	r24, Z+4	; 0x04
    126c:	95 81       	ldd	r25, Z+5	; 0x05
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	01 f4       	brne	.+0      	; 0x1272 <_ZN6String7reserveEj+0x66>
    1272:	e9 81       	ldd	r30, Y+1	; 0x01
    1274:	fa 81       	ldd	r31, Y+2	; 0x02
    1276:	01 90       	ld	r0, Z+
    1278:	f0 81       	ld	r31, Z
    127a:	e0 2d       	mov	r30, r0
    127c:	10 82       	st	Z, r1
		return 1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	8d 83       	std	Y+5, r24	; 0x05
    1282:	00 c0       	rjmp	.+0      	; 0x1284 <_ZN6String7reserveEj+0x78>
	}
	return 0;
    1284:	1d 82       	std	Y+5, r1	; 0x05
    1286:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1288:	26 96       	adiw	r28, 0x06	; 6
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	2a 97       	sbiw	r28, 0x0a	; 10
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	9c 83       	std	Y+4, r25	; 0x04
    12b0:	8b 83       	std	Y+3, r24	; 0x03
    12b2:	7e 83       	std	Y+6, r23	; 0x06
    12b4:	6d 83       	std	Y+5, r22	; 0x05
    12b6:	58 87       	std	Y+8, r21	; 0x08
    12b8:	4f 83       	std	Y+7, r20	; 0x07
{
	unsigned int newlen = len + length;
    12ba:	eb 81       	ldd	r30, Y+3	; 0x03
    12bc:	fc 81       	ldd	r31, Y+4	; 0x04
    12be:	24 81       	ldd	r18, Z+4	; 0x04
    12c0:	35 81       	ldd	r19, Z+5	; 0x05
    12c2:	8f 81       	ldd	r24, Y+7	; 0x07
    12c4:	98 85       	ldd	r25, Y+8	; 0x08
    12c6:	82 0f       	add	r24, r18
    12c8:	93 1f       	adc	r25, r19
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01
	if (!cstr) return 0;
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	01 f4       	brne	.+0      	; 0x12d6 <_ZN6String6concatEPKcj+0x3c>
    12d6:	1a 86       	std	Y+10, r1	; 0x0a
    12d8:	00 c0       	rjmp	.+0      	; 0x12da <_ZN6String6concatEPKcj+0x40>
	if (length == 0) return 1;
    12da:	8f 81       	ldd	r24, Y+7	; 0x07
    12dc:	98 85       	ldd	r25, Y+8	; 0x08
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	01 f4       	brne	.+0      	; 0x12e2 <_ZN6String6concatEPKcj+0x48>
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	8a 87       	std	Y+10, r24	; 0x0a
    12e6:	00 c0       	rjmp	.+0      	; 0x12e8 <_ZN6String6concatEPKcj+0x4e>
	if (!reserve(newlen)) return 0;
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	29 81       	ldd	r18, Y+1	; 0x01
    12ee:	3a 81       	ldd	r19, Y+2	; 0x02
    12f0:	b9 01       	movw	r22, r18
    12f2:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    12f6:	19 86       	std	Y+9, r1	; 0x09
    12f8:	88 23       	and	r24, r24
    12fa:	01 f4       	brne	.+0      	; 0x12fc <_ZN6String6concatEPKcj+0x62>
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 87       	std	Y+9, r24	; 0x09
    1300:	89 85       	ldd	r24, Y+9	; 0x09
    1302:	88 23       	and	r24, r24
    1304:	01 f0       	breq	.+0      	; 0x1306 <_ZN6String6concatEPKcj+0x6c>
    1306:	1a 86       	std	Y+10, r1	; 0x0a
    1308:	00 c0       	rjmp	.+0      	; 0x130a <_ZN6String6concatEPKcj+0x70>
	strcpy(buffer + len, cstr);
    130a:	eb 81       	ldd	r30, Y+3	; 0x03
    130c:	fc 81       	ldd	r31, Y+4	; 0x04
    130e:	20 81       	ld	r18, Z
    1310:	31 81       	ldd	r19, Z+1	; 0x01
    1312:	eb 81       	ldd	r30, Y+3	; 0x03
    1314:	fc 81       	ldd	r31, Y+4	; 0x04
    1316:	84 81       	ldd	r24, Z+4	; 0x04
    1318:	95 81       	ldd	r25, Z+5	; 0x05
    131a:	82 0f       	add	r24, r18
    131c:	93 1f       	adc	r25, r19
    131e:	2d 81       	ldd	r18, Y+5	; 0x05
    1320:	3e 81       	ldd	r19, Y+6	; 0x06
    1322:	b9 01       	movw	r22, r18
    1324:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	len = newlen;
    1328:	eb 81       	ldd	r30, Y+3	; 0x03
    132a:	fc 81       	ldd	r31, Y+4	; 0x04
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	9a 81       	ldd	r25, Y+2	; 0x02
    1330:	95 83       	std	Z+5, r25	; 0x05
    1332:	84 83       	std	Z+4, r24	; 0x04
	return 1;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	8a 87       	std	Y+10, r24	; 0x0a
    1338:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    133a:	2a 96       	adiw	r28, 0x0a	; 10
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <_ZN6String6concatEm>:
	char buf[12];
	ltoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned long num)
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	61 97       	sbiw	r28, 0x11	; 17
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	9d 87       	std	Y+13, r25	; 0x0d
    1362:	8c 87       	std	Y+12, r24	; 0x0c
    1364:	4e 87       	std	Y+14, r20	; 0x0e
    1366:	5f 87       	std	Y+15, r21	; 0x0f
    1368:	68 8b       	std	Y+16, r22	; 0x10
    136a:	79 8b       	std	Y+17, r23	; 0x11
{
	char buf[11];
	ultoa(num, buf, 10);
    136c:	8e 85       	ldd	r24, Y+14	; 0x0e
    136e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1370:	a8 89       	ldd	r26, Y+16	; 0x10
    1372:	b9 89       	ldd	r27, Y+17	; 0x11
    1374:	bc 01       	movw	r22, r24
    1376:	cd 01       	movw	r24, r26
    1378:	9e 01       	movw	r18, r28
    137a:	2f 5f       	subi	r18, 0xFF	; 255
    137c:	3f 4f       	sbci	r19, 0xFF	; 255
    137e:	a9 01       	movw	r20, r18
    1380:	2a e0       	ldi	r18, 0x0A	; 10
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	return concat(buf, strlen(buf));
    1388:	ce 01       	movw	r24, r28
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1390:	ac 01       	movw	r20, r24
    1392:	8c 85       	ldd	r24, Y+12	; 0x0c
    1394:	9d 85       	ldd	r25, Y+13	; 0x0d
    1396:	9e 01       	movw	r18, r28
    1398:	2f 5f       	subi	r18, 0xFF	; 255
    139a:	3f 4f       	sbci	r19, 0xFF	; 255
    139c:	b9 01       	movw	r22, r18
    139e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    13a2:	61 96       	adiw	r28, 0x11	; 17
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <_ZN6String6concatEl>:
	char buf[6];
	utoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(long num)
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	62 97       	sbiw	r28, 0x12	; 18
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	9e 87       	std	Y+14, r25	; 0x0e
    13ca:	8d 87       	std	Y+13, r24	; 0x0d
    13cc:	4f 87       	std	Y+15, r20	; 0x0f
    13ce:	58 8b       	std	Y+16, r21	; 0x10
    13d0:	69 8b       	std	Y+17, r22	; 0x11
    13d2:	7a 8b       	std	Y+18, r23	; 0x12
{
	char buf[12];
	ltoa(num, buf, 10);
    13d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d6:	98 89       	ldd	r25, Y+16	; 0x10
    13d8:	a9 89       	ldd	r26, Y+17	; 0x11
    13da:	ba 89       	ldd	r27, Y+18	; 0x12
    13dc:	bc 01       	movw	r22, r24
    13de:	cd 01       	movw	r24, r26
    13e0:	9e 01       	movw	r18, r28
    13e2:	2f 5f       	subi	r18, 0xFF	; 255
    13e4:	3f 4f       	sbci	r19, 0xFF	; 255
    13e6:	a9 01       	movw	r20, r18
    13e8:	2a e0       	ldi	r18, 0x0A	; 10
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	return concat(buf, strlen(buf));
    13f0:	ce 01       	movw	r24, r28
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    13f8:	ac 01       	movw	r20, r24
    13fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fe:	9e 01       	movw	r18, r28
    1400:	2f 5f       	subi	r18, 0xFF	; 255
    1402:	3f 4f       	sbci	r19, 0xFF	; 255
    1404:	b9 01       	movw	r22, r18
    1406:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    140a:	62 96       	adiw	r28, 0x12	; 18
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <_ZN6String6concatEj>:
	char buf[7];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned int num)
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	2a 97       	sbiw	r28, 0x0a	; 10
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	98 87       	std	Y+8, r25	; 0x08
    1432:	8f 83       	std	Y+7, r24	; 0x07
    1434:	7a 87       	std	Y+10, r23	; 0x0a
    1436:	69 87       	std	Y+9, r22	; 0x09
{
	char buf[6];
	utoa(num, buf, 10);
    1438:	89 85       	ldd	r24, Y+9	; 0x09
    143a:	9a 85       	ldd	r25, Y+10	; 0x0a
    143c:	9e 01       	movw	r18, r28
    143e:	2f 5f       	subi	r18, 0xFF	; 255
    1440:	3f 4f       	sbci	r19, 0xFF	; 255
    1442:	b9 01       	movw	r22, r18
    1444:	4a e0       	ldi	r20, 0x0A	; 10
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	return concat(buf, strlen(buf));
    144c:	ce 01       	movw	r24, r28
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1454:	ac 01       	movw	r20, r24
    1456:	8f 81       	ldd	r24, Y+7	; 0x07
    1458:	98 85       	ldd	r25, Y+8	; 0x08
    145a:	9e 01       	movw	r18, r28
    145c:	2f 5f       	subi	r18, 0xFF	; 255
    145e:	3f 4f       	sbci	r19, 0xFF	; 255
    1460:	b9 01       	movw	r22, r18
    1462:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1466:	2a 96       	adiw	r28, 0x0a	; 10
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <_ZN6String6concatEi>:
	char buf[4];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	2b 97       	sbiw	r28, 0x0b	; 11
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	99 87       	std	Y+9, r25	; 0x09
    148e:	88 87       	std	Y+8, r24	; 0x08
    1490:	7b 87       	std	Y+11, r23	; 0x0b
    1492:	6a 87       	std	Y+10, r22	; 0x0a
{
	char buf[7];
	itoa(num, buf, 10);
    1494:	8a 85       	ldd	r24, Y+10	; 0x0a
    1496:	9b 85       	ldd	r25, Y+11	; 0x0b
    1498:	9e 01       	movw	r18, r28
    149a:	2f 5f       	subi	r18, 0xFF	; 255
    149c:	3f 4f       	sbci	r19, 0xFF	; 255
    149e:	b9 01       	movw	r22, r18
    14a0:	4a e0       	ldi	r20, 0x0A	; 10
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	return concat(buf, strlen(buf));
    14a8:	ce 01       	movw	r24, r28
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    14b0:	ac 01       	movw	r20, r24
    14b2:	88 85       	ldd	r24, Y+8	; 0x08
    14b4:	99 85       	ldd	r25, Y+9	; 0x09
    14b6:	9e 01       	movw	r18, r28
    14b8:	2f 5f       	subi	r18, 0xFF	; 255
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	b9 01       	movw	r22, r18
    14be:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    14c2:	2b 96       	adiw	r28, 0x0b	; 11
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <_ZN6String6concatEh>:
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}

unsigned char String::concat(unsigned char num)
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	27 97       	sbiw	r28, 0x07	; 7
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	6f 83       	std	Y+7, r22	; 0x07
{
	char buf[4];
	itoa(num, buf, 10);
    14ee:	8f 81       	ldd	r24, Y+7	; 0x07
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	9e 01       	movw	r18, r28
    14f6:	2f 5f       	subi	r18, 0xFF	; 255
    14f8:	3f 4f       	sbci	r19, 0xFF	; 255
    14fa:	b9 01       	movw	r22, r18
    14fc:	4a e0       	ldi	r20, 0x0A	; 10
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	return concat(buf, strlen(buf));
    1504:	ce 01       	movw	r24, r28
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    150c:	ac 01       	movw	r20, r24
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	9e 81       	ldd	r25, Y+6	; 0x06
    1512:	9e 01       	movw	r18, r28
    1514:	2f 5f       	subi	r18, 0xFF	; 255
    1516:	3f 4f       	sbci	r19, 0xFF	; 255
    1518:	b9 01       	movw	r22, r18
    151a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    151e:	27 96       	adiw	r28, 0x07	; 7
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <_ZN6String6concatEc>:
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	00 d0       	rcall	.+0      	; 0x1536 <_ZN6String6concatEc+0x6>
    1536:	00 d0       	rcall	.+0      	; 0x1538 <_ZN6String6concatEc+0x8>
    1538:	0f 92       	push	r0
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	9c 83       	std	Y+4, r25	; 0x04
    1540:	8b 83       	std	Y+3, r24	; 0x03
    1542:	6d 83       	std	Y+5, r22	; 0x05
{
	char buf[2];
	buf[0] = c;
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0;
    1548:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	9c 81       	ldd	r25, Y+4	; 0x04
    154e:	9e 01       	movw	r18, r28
    1550:	2f 5f       	subi	r18, 0xFF	; 255
    1552:	3f 4f       	sbci	r19, 0xFF	; 255
    1554:	b9 01       	movw	r22, r18
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <_ZN6String6concatEPKc>:
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	00 d0       	rcall	.+0      	; 0x1574 <_ZN6String6concatEPKc+0x6>
    1574:	00 d0       	rcall	.+0      	; 0x1576 <_ZN6String6concatEPKc+0x8>
    1576:	0f 92       	push	r0
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	7c 83       	std	Y+4, r23	; 0x04
    1582:	6b 83       	std	Y+3, r22	; 0x03
{
	if (!cstr) return 0;
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	01 f4       	brne	.+0      	; 0x158c <_ZN6String6concatEPKc+0x1e>
    158c:	1d 82       	std	Y+5, r1	; 0x05
    158e:	00 c0       	rjmp	.+0      	; 0x1590 <_ZN6String6concatEPKc+0x22>
	return concat(cstr, strlen(cstr));
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1598:	ac 01       	movw	r20, r24
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	9a 81       	ldd	r25, Y+2	; 0x02
    159e:	2b 81       	ldd	r18, Y+3	; 0x03
    15a0:	3c 81       	ldd	r19, Y+4	; 0x04
    15a2:	b9 01       	movw	r22, r18
    15a4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    15a8:	8d 83       	std	Y+5, r24	; 0x05
    15aa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <_ZN6String6concatERKS_>:

/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <_ZN6String6concatERKS_+0x6>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <_ZN6String6concatERKS_+0x8>
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	7c 83       	std	Y+4, r23	; 0x04
    15ce:	6b 83       	std	Y+3, r22	; 0x03
{
	return concat(s.buffer, s.len);
    15d0:	eb 81       	ldd	r30, Y+3	; 0x03
    15d2:	fc 81       	ldd	r31, Y+4	; 0x04
    15d4:	40 81       	ld	r20, Z
    15d6:	51 81       	ldd	r21, Z+1	; 0x01
    15d8:	eb 81       	ldd	r30, Y+3	; 0x03
    15da:	fc 81       	ldd	r31, Y+4	; 0x04
    15dc:	24 81       	ldd	r18, Z+4	; 0x04
    15de:	35 81       	ldd	r19, Z+5	; 0x05
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	ba 01       	movw	r22, r20
    15e6:	a9 01       	movw	r20, r18
    15e8:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <_ZN6String10invalidateEv+0x6>
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	89 83       	std	Y+1, r24	; 0x01
{
	if (buffer) free(buffer);
    1608:	e9 81       	ldd	r30, Y+1	; 0x01
    160a:	fa 81       	ldd	r31, Y+2	; 0x02
    160c:	80 81       	ld	r24, Z
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	01 f0       	breq	.+0      	; 0x1614 <_ZN6String10invalidateEv+0x1a>
    1614:	e9 81       	ldd	r30, Y+1	; 0x01
    1616:	fa 81       	ldd	r31, Y+2	; 0x02
    1618:	80 81       	ld	r24, Z
    161a:	91 81       	ldd	r25, Z+1	; 0x01
    161c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	buffer = NULL;
    1620:	e9 81       	ldd	r30, Y+1	; 0x01
    1622:	fa 81       	ldd	r31, Y+2	; 0x02
    1624:	11 82       	std	Z+1, r1	; 0x01
    1626:	10 82       	st	Z, r1
	capacity = len = 0;
    1628:	e9 81       	ldd	r30, Y+1	; 0x01
    162a:	fa 81       	ldd	r31, Y+2	; 0x02
    162c:	15 82       	std	Z+5, r1	; 0x05
    162e:	14 82       	std	Z+4, r1	; 0x04
    1630:	e9 81       	ldd	r30, Y+1	; 0x01
    1632:	fa 81       	ldd	r31, Y+2	; 0x02
    1634:	84 81       	ldd	r24, Z+4	; 0x04
    1636:	95 81       	ldd	r25, Z+5	; 0x05
    1638:	e9 81       	ldd	r30, Y+1	; 0x01
    163a:	fa 81       	ldd	r31, Y+2	; 0x02
    163c:	93 83       	std	Z+3, r25	; 0x03
    163e:	82 83       	std	Z+2, r24	; 0x02
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <_ZplRK15StringSumHelperm>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	29 97       	sbiw	r28, 0x09	; 9
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	9c 83       	std	Y+4, r25	; 0x04
    1660:	8b 83       	std	Y+3, r24	; 0x03
    1662:	4d 83       	std	Y+5, r20	; 0x05
    1664:	5e 83       	std	Y+6, r21	; 0x06
    1666:	6f 83       	std	Y+7, r22	; 0x07
    1668:	78 87       	std	Y+8, r23	; 0x08
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	9a 83       	std	Y+2, r25	; 0x02
    1670:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	9a 81       	ldd	r25, Y+2	; 0x02
    1676:	2d 81       	ldd	r18, Y+5	; 0x05
    1678:	3e 81       	ldd	r19, Y+6	; 0x06
    167a:	4f 81       	ldd	r20, Y+7	; 0x07
    167c:	58 85       	ldd	r21, Y+8	; 0x08
    167e:	ba 01       	movw	r22, r20
    1680:	a9 01       	movw	r20, r18
    1682:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1686:	19 86       	std	Y+9, r1	; 0x09
    1688:	88 23       	and	r24, r24
    168a:	01 f4       	brne	.+0      	; 0x168c <_ZplRK15StringSumHelperm+0x42>
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	89 87       	std	Y+9, r24	; 0x09
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	88 23       	and	r24, r24
    1694:	01 f0       	breq	.+0      	; 0x1696 <_ZplRK15StringSumHelperm+0x4c>
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
    169a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	return a;
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    16a2:	29 96       	adiw	r28, 0x09	; 9
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <_ZplRK15StringSumHelperl>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	29 97       	sbiw	r28, 0x09	; 9
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	9c 83       	std	Y+4, r25	; 0x04
    16ca:	8b 83       	std	Y+3, r24	; 0x03
    16cc:	4d 83       	std	Y+5, r20	; 0x05
    16ce:	5e 83       	std	Y+6, r21	; 0x06
    16d0:	6f 83       	std	Y+7, r22	; 0x07
    16d2:	78 87       	std	Y+8, r23	; 0x08
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	9c 81       	ldd	r25, Y+4	; 0x04
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	9a 81       	ldd	r25, Y+2	; 0x02
    16e0:	2d 81       	ldd	r18, Y+5	; 0x05
    16e2:	3e 81       	ldd	r19, Y+6	; 0x06
    16e4:	4f 81       	ldd	r20, Y+7	; 0x07
    16e6:	58 85       	ldd	r21, Y+8	; 0x08
    16e8:	ba 01       	movw	r22, r20
    16ea:	a9 01       	movw	r20, r18
    16ec:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    16f0:	19 86       	std	Y+9, r1	; 0x09
    16f2:	88 23       	and	r24, r24
    16f4:	01 f4       	brne	.+0      	; 0x16f6 <_ZplRK15StringSumHelperl+0x42>
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	89 87       	std	Y+9, r24	; 0x09
    16fa:	89 85       	ldd	r24, Y+9	; 0x09
    16fc:	88 23       	and	r24, r24
    16fe:	01 f0       	breq	.+0      	; 0x1700 <_ZplRK15StringSumHelperl+0x4c>
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	9a 81       	ldd	r25, Y+2	; 0x02
    1704:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	return a;
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    170c:	29 96       	adiw	r28, 0x09	; 9
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <_ZplRK15StringSumHelperj>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	27 97       	sbiw	r28, 0x07	; 7
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	8b 83       	std	Y+3, r24	; 0x03
    1736:	7e 83       	std	Y+6, r23	; 0x06
    1738:	6d 83       	std	Y+5, r22	; 0x05
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	9a 81       	ldd	r25, Y+2	; 0x02
    1746:	2d 81       	ldd	r18, Y+5	; 0x05
    1748:	3e 81       	ldd	r19, Y+6	; 0x06
    174a:	b9 01       	movw	r22, r18
    174c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1750:	1f 82       	std	Y+7, r1	; 0x07
    1752:	88 23       	and	r24, r24
    1754:	01 f4       	brne	.+0      	; 0x1756 <_ZplRK15StringSumHelperj+0x38>
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	8f 83       	std	Y+7, r24	; 0x07
    175a:	8f 81       	ldd	r24, Y+7	; 0x07
    175c:	88 23       	and	r24, r24
    175e:	01 f0       	breq	.+0      	; 0x1760 <_ZplRK15StringSumHelperj+0x42>
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	return a;
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    176c:	27 96       	adiw	r28, 0x07	; 7
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <_ZplRK15StringSumHelperi>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	27 97       	sbiw	r28, 0x07	; 7
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	9c 83       	std	Y+4, r25	; 0x04
    1794:	8b 83       	std	Y+3, r24	; 0x03
    1796:	7e 83       	std	Y+6, r23	; 0x06
    1798:	6d 83       	std	Y+5, r22	; 0x05
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	2d 81       	ldd	r18, Y+5	; 0x05
    17a8:	3e 81       	ldd	r19, Y+6	; 0x06
    17aa:	b9 01       	movw	r22, r18
    17ac:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    17b0:	1f 82       	std	Y+7, r1	; 0x07
    17b2:	88 23       	and	r24, r24
    17b4:	01 f4       	brne	.+0      	; 0x17b6 <_ZplRK15StringSumHelperi+0x38>
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	8f 83       	std	Y+7, r24	; 0x07
    17ba:	8f 81       	ldd	r24, Y+7	; 0x07
    17bc:	88 23       	and	r24, r24
    17be:	01 f0       	breq	.+0      	; 0x17c0 <_ZplRK15StringSumHelperi+0x42>
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	return a;
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
}
    17cc:	27 96       	adiw	r28, 0x07	; 7
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <_ZplRK15StringSumHelperh>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <_ZplRK15StringSumHelperh+0x6>
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <_ZplRK15StringSumHelperh+0x8>
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <_ZplRK15StringSumHelperh+0xa>
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	9c 83       	std	Y+4, r25	; 0x04
    17ee:	8b 83       	std	Y+3, r24	; 0x03
    17f0:	6d 83       	std	Y+5, r22	; 0x05
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	9a 83       	std	Y+2, r25	; 0x02
    17f8:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1800:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1804:	1e 82       	std	Y+6, r1	; 0x06
    1806:	88 23       	and	r24, r24
    1808:	01 f4       	brne	.+0      	; 0x180a <_ZplRK15StringSumHelperh+0x2c>
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	8e 83       	std	Y+6, r24	; 0x06
    180e:	8e 81       	ldd	r24, Y+6	; 0x06
    1810:	88 23       	and	r24, r24
    1812:	01 f0       	breq	.+0      	; 0x1814 <_ZplRK15StringSumHelperh+0x36>
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	return a;
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1820:	26 96       	adiw	r28, 0x06	; 6
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <_ZplRK15StringSumHelperc>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	00 d0       	rcall	.+0      	; 0x1838 <_ZplRK15StringSumHelperc+0x6>
    1838:	00 d0       	rcall	.+0      	; 0x183a <_ZplRK15StringSumHelperc+0x8>
    183a:	00 d0       	rcall	.+0      	; 0x183c <_ZplRK15StringSumHelperc+0xa>
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	9c 83       	std	Y+4, r25	; 0x04
    1842:	8b 83       	std	Y+3, r24	; 0x03
    1844:	6d 83       	std	Y+5, r22	; 0x05
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(c)) a.invalidate();
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	9a 81       	ldd	r25, Y+2	; 0x02
    1852:	6d 81       	ldd	r22, Y+5	; 0x05
    1854:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1858:	1e 82       	std	Y+6, r1	; 0x06
    185a:	88 23       	and	r24, r24
    185c:	01 f4       	brne	.+0      	; 0x185e <_ZplRK15StringSumHelperc+0x2c>
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	8e 83       	std	Y+6, r24	; 0x06
    1862:	8e 81       	ldd	r24, Y+6	; 0x06
    1864:	88 23       	and	r24, r24
    1866:	01 f0       	breq	.+0      	; 0x1868 <_ZplRK15StringSumHelperc+0x36>
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	9a 81       	ldd	r25, Y+2	; 0x02
    186c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	return a;
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1874:	26 96       	adiw	r28, 0x06	; 6
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <_ZplRK15StringSumHelperPKc>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	27 97       	sbiw	r28, 0x07	; 7
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	9c 83       	std	Y+4, r25	; 0x04
    18a0:	8b 83       	std	Y+3, r24	; 0x03
    18a2:	7e 83       	std	Y+6, r23	; 0x06
    18a4:	6d 83       	std	Y+5, r22	; 0x05
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	9a 83       	std	Y+2, r25	; 0x02
    18ac:	89 83       	std	Y+1, r24	; 0x01
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    18ae:	8d 81       	ldd	r24, Y+5	; 0x05
    18b0:	9e 81       	ldd	r25, Y+6	; 0x06
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	01 f0       	breq	.+0      	; 0x18b6 <_ZplRK15StringSumHelperPKc+0x30>
    18b6:	09 81       	ldd	r16, Y+1	; 0x01
    18b8:	1a 81       	ldd	r17, Y+2	; 0x02
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	9e 81       	ldd	r25, Y+6	; 0x06
    18be:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    18c2:	ac 01       	movw	r20, r24
    18c4:	2d 81       	ldd	r18, Y+5	; 0x05
    18c6:	3e 81       	ldd	r19, Y+6	; 0x06
    18c8:	c8 01       	movw	r24, r16
    18ca:	b9 01       	movw	r22, r18
    18cc:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    18d0:	88 23       	and	r24, r24
    18d2:	01 f4       	brne	.+0      	; 0x18d4 <_ZplRK15StringSumHelperPKc+0x4e>
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	8f 83       	std	Y+7, r24	; 0x07
    18d8:	00 c0       	rjmp	.+0      	; 0x18da <_ZplRK15StringSumHelperPKc+0x54>
    18da:	1f 82       	std	Y+7, r1	; 0x07
    18dc:	8f 81       	ldd	r24, Y+7	; 0x07
    18de:	88 23       	and	r24, r24
    18e0:	01 f0       	breq	.+0      	; 0x18e2 <_ZplRK15StringSumHelperPKc+0x5c>
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	9a 81       	ldd	r25, Y+2	; 0x02
    18e6:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	return a;
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	9a 81       	ldd	r25, Y+2	; 0x02
}
    18ee:	27 96       	adiw	r28, 0x07	; 7
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	08 95       	ret

00001904 <_ZplRK15StringSumHelperRK6String>:

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	27 97       	sbiw	r28, 0x07	; 7
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	9c 83       	std	Y+4, r25	; 0x04
    191a:	8b 83       	std	Y+3, r24	; 0x03
    191c:	7e 83       	std	Y+6, r23	; 0x06
    191e:	6d 83       	std	Y+5, r22	; 0x05
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	ed 81       	ldd	r30, Y+5	; 0x05
    192e:	fe 81       	ldd	r31, Y+6	; 0x06
    1930:	40 81       	ld	r20, Z
    1932:	51 81       	ldd	r21, Z+1	; 0x01
    1934:	ed 81       	ldd	r30, Y+5	; 0x05
    1936:	fe 81       	ldd	r31, Y+6	; 0x06
    1938:	24 81       	ldd	r18, Z+4	; 0x04
    193a:	35 81       	ldd	r19, Z+5	; 0x05
    193c:	ba 01       	movw	r22, r20
    193e:	a9 01       	movw	r20, r18
    1940:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1944:	1f 82       	std	Y+7, r1	; 0x07
    1946:	88 23       	and	r24, r24
    1948:	01 f4       	brne	.+0      	; 0x194a <_ZplRK15StringSumHelperRK6String+0x46>
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	8f 83       	std	Y+7, r24	; 0x07
    194e:	8f 81       	ldd	r24, Y+7	; 0x07
    1950:	88 23       	and	r24, r24
    1952:	01 f0       	breq	.+0      	; 0x1954 <_ZplRK15StringSumHelperRK6String+0x50>
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	9a 81       	ldd	r25, Y+2	; 0x02
    1958:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	return a;
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1960:	27 96       	adiw	r28, 0x07	; 7
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	29 97       	sbiw	r28, 0x09	; 9
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	9a 83       	std	Y+2, r25	; 0x02
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	7c 83       	std	Y+4, r23	; 0x04
    198c:	6b 83       	std	Y+3, r22	; 0x03
    198e:	5e 83       	std	Y+6, r21	; 0x06
    1990:	4d 83       	std	Y+5, r20	; 0x05
{
	if (!reserve(length)) {
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	2d 81       	ldd	r18, Y+5	; 0x05
    1998:	3e 81       	ldd	r19, Y+6	; 0x06
    199a:	b9 01       	movw	r22, r18
    199c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    19a0:	19 86       	std	Y+9, r1	; 0x09
    19a2:	88 23       	and	r24, r24
    19a4:	01 f4       	brne	.+0      	; 0x19a6 <_ZN6String4copyEPKcj+0x34>
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	89 87       	std	Y+9, r24	; 0x09
    19aa:	99 85       	ldd	r25, Y+9	; 0x09
    19ac:	99 23       	and	r25, r25
    19ae:	01 f0       	breq	.+0      	; 0x19b0 <_ZN6String4copyEPKcj+0x3e>
		invalidate();
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
		return *this;
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	98 87       	std	Y+8, r25	; 0x08
    19be:	8f 83       	std	Y+7, r24	; 0x07
    19c0:	00 c0       	rjmp	.+0      	; 0x19c2 <_ZN6String4copyEPKcj+0x50>
	}
	len = length;
    19c2:	e9 81       	ldd	r30, Y+1	; 0x01
    19c4:	fa 81       	ldd	r31, Y+2	; 0x02
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
    19c8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ca:	95 83       	std	Z+5, r25	; 0x05
    19cc:	84 83       	std	Z+4, r24	; 0x04
	strcpy(buffer, cstr);
    19ce:	e9 81       	ldd	r30, Y+1	; 0x01
    19d0:	fa 81       	ldd	r31, Y+2	; 0x02
    19d2:	80 81       	ld	r24, Z
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	2b 81       	ldd	r18, Y+3	; 0x03
    19d8:	3c 81       	ldd	r19, Y+4	; 0x04
    19da:	b9 01       	movw	r22, r18
    19dc:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	return *this;
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	98 87       	std	Y+8, r25	; 0x08
    19e6:	8f 83       	std	Y+7, r24	; 0x07
    19e8:	8f 81       	ldd	r24, Y+7	; 0x07
    19ea:	98 85       	ldd	r25, Y+8	; 0x08
}
    19ec:	29 96       	adiw	r28, 0x09	; 9
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <_ZN6StringC1EPKc+0x6>
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <_ZN6StringC1EPKc+0x8>
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	9a 83       	std	Y+2, r25	; 0x02
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	7c 83       	std	Y+4, r23	; 0x04
    1a10:	6b 83       	std	Y+3, r22	; 0x03
{
	init();
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	if (cstr) copy(cstr, strlen(cstr));
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	01 f0       	breq	.+0      	; 0x1a22 <_ZN6StringC1EPKc+0x24>
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1a2a:	ac 01       	movw	r20, r24
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a30:	2b 81       	ldd	r18, Y+3	; 0x03
    1a32:	3c 81       	ldd	r19, Y+4	; 0x04
    1a34:	b9 01       	movw	r22, r18
    1a36:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <_ZN6StringC2EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <_ZN6StringC2EPKc+0x6>
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <_ZN6StringC2EPKc+0x8>
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	7c 83       	std	Y+4, r23	; 0x04
    1a5a:	6b 83       	std	Y+3, r22	; 0x03
{
	init();
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a60:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	if (cstr) copy(cstr, strlen(cstr));
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	9c 81       	ldd	r25, Y+4	; 0x04
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	01 f0       	breq	.+0      	; 0x1a6c <_ZN6StringC2EPKc+0x24>
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1a74:	ac 01       	movw	r20, r24
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7e:	b9 01       	movw	r22, r18
    1a80:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <_ZN6StringaSEPKc+0x6>
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <_ZN6StringaSEPKc+0x8>
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	7c 83       	std	Y+4, r23	; 0x04
    1aa4:	6b 83       	std	Y+3, r22	; 0x03
{
	if (cstr) copy(cstr, strlen(cstr));
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	01 f0       	breq	.+0      	; 0x1aae <_ZN6StringaSEPKc+0x1c>
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1ab6:	ac 01       	movw	r20, r24
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	9a 81       	ldd	r25, Y+2	; 0x02
    1abc:	2b 81       	ldd	r18, Y+3	; 0x03
    1abe:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac0:	b9 01       	movw	r22, r18
    1ac2:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    1ac6:	00 c0       	rjmp	.+0      	; 0x1ac8 <_ZN6StringaSEPKc+0x36>
	else invalidate();
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	9a 81       	ldd	r25, Y+2	; 0x02
    1acc:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	
	return *this;
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	a8 97       	sbiw	r28, 0x28	; 40
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	9b a3       	std	Y+35, r25	; 0x23
    1af8:	8a a3       	std	Y+34, r24	; 0x22
    1afa:	4c a3       	std	Y+36, r20	; 0x24
    1afc:	5d a3       	std	Y+37, r21	; 0x25
    1afe:	6e a3       	std	Y+38, r22	; 0x26
    1b00:	7f a3       	std	Y+39, r23	; 0x27
    1b02:	28 a7       	std	Y+40, r18	; 0x28
{
	init();
    1b04:	8a a1       	ldd	r24, Y+34	; 0x22
    1b06:	9b a1       	ldd	r25, Y+35	; 0x23
    1b08:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	char buf[33];
	ultoa(value, buf, base);
    1b0c:	88 a5       	ldd	r24, Y+40	; 0x28
    1b0e:	e8 2f       	mov	r30, r24
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	8c a1       	ldd	r24, Y+36	; 0x24
    1b14:	9d a1       	ldd	r25, Y+37	; 0x25
    1b16:	ae a1       	ldd	r26, Y+38	; 0x26
    1b18:	bf a1       	ldd	r27, Y+39	; 0x27
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	9e 01       	movw	r18, r28
    1b20:	2f 5f       	subi	r18, 0xFF	; 255
    1b22:	3f 4f       	sbci	r19, 0xFF	; 255
    1b24:	a9 01       	movw	r20, r18
    1b26:	9f 01       	movw	r18, r30
    1b28:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	*this = buf;
    1b2c:	8a a1       	ldd	r24, Y+34	; 0x22
    1b2e:	9b a1       	ldd	r25, Y+35	; 0x23
    1b30:	9e 01       	movw	r18, r28
    1b32:	2f 5f       	subi	r18, 0xFF	; 255
    1b34:	3f 4f       	sbci	r19, 0xFF	; 255
    1b36:	b9 01       	movw	r22, r18
    1b38:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1b3c:	a8 96       	adiw	r28, 0x28	; 40
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <_ZN6StringC2Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	a8 97       	sbiw	r28, 0x28	; 40
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	9b a3       	std	Y+35, r25	; 0x23
    1b64:	8a a3       	std	Y+34, r24	; 0x22
    1b66:	4c a3       	std	Y+36, r20	; 0x24
    1b68:	5d a3       	std	Y+37, r21	; 0x25
    1b6a:	6e a3       	std	Y+38, r22	; 0x26
    1b6c:	7f a3       	std	Y+39, r23	; 0x27
    1b6e:	28 a7       	std	Y+40, r18	; 0x28
{
	init();
    1b70:	8a a1       	ldd	r24, Y+34	; 0x22
    1b72:	9b a1       	ldd	r25, Y+35	; 0x23
    1b74:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	char buf[33];
	ultoa(value, buf, base);
    1b78:	88 a5       	ldd	r24, Y+40	; 0x28
    1b7a:	e8 2f       	mov	r30, r24
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	8c a1       	ldd	r24, Y+36	; 0x24
    1b80:	9d a1       	ldd	r25, Y+37	; 0x25
    1b82:	ae a1       	ldd	r26, Y+38	; 0x26
    1b84:	bf a1       	ldd	r27, Y+39	; 0x27
    1b86:	bc 01       	movw	r22, r24
    1b88:	cd 01       	movw	r24, r26
    1b8a:	9e 01       	movw	r18, r28
    1b8c:	2f 5f       	subi	r18, 0xFF	; 255
    1b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b90:	a9 01       	movw	r20, r18
    1b92:	9f 01       	movw	r18, r30
    1b94:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	*this = buf;
    1b98:	8a a1       	ldd	r24, Y+34	; 0x22
    1b9a:	9b a1       	ldd	r25, Y+35	; 0x23
    1b9c:	9e 01       	movw	r18, r28
    1b9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba2:	b9 01       	movw	r22, r18
    1ba4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1ba8:	a8 96       	adiw	r28, 0x28	; 40
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	a9 97       	sbiw	r28, 0x29	; 41
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	9c a3       	std	Y+36, r25	; 0x24
    1bd0:	8b a3       	std	Y+35, r24	; 0x23
    1bd2:	4d a3       	std	Y+37, r20	; 0x25
    1bd4:	5e a3       	std	Y+38, r21	; 0x26
    1bd6:	6f a3       	std	Y+39, r22	; 0x27
    1bd8:	78 a7       	std	Y+40, r23	; 0x28
    1bda:	29 a7       	std	Y+41, r18	; 0x29
{
	init();
    1bdc:	8b a1       	ldd	r24, Y+35	; 0x23
    1bde:	9c a1       	ldd	r25, Y+36	; 0x24
    1be0:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	char buf[34];
	ltoa(value, buf, base);
    1be4:	89 a5       	ldd	r24, Y+41	; 0x29
    1be6:	e8 2f       	mov	r30, r24
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	8d a1       	ldd	r24, Y+37	; 0x25
    1bec:	9e a1       	ldd	r25, Y+38	; 0x26
    1bee:	af a1       	ldd	r26, Y+39	; 0x27
    1bf0:	b8 a5       	ldd	r27, Y+40	; 0x28
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	9e 01       	movw	r18, r28
    1bf8:	2f 5f       	subi	r18, 0xFF	; 255
    1bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfc:	a9 01       	movw	r20, r18
    1bfe:	9f 01       	movw	r18, r30
    1c00:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	*this = buf;
    1c04:	8b a1       	ldd	r24, Y+35	; 0x23
    1c06:	9c a1       	ldd	r25, Y+36	; 0x24
    1c08:	9e 01       	movw	r18, r28
    1c0a:	2f 5f       	subi	r18, 0xFF	; 255
    1c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0e:	b9 01       	movw	r22, r18
    1c10:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1c14:	a9 96       	adiw	r28, 0x29	; 41
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <_ZN6StringC2Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	a9 97       	sbiw	r28, 0x29	; 41
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	9c a3       	std	Y+36, r25	; 0x24
    1c3c:	8b a3       	std	Y+35, r24	; 0x23
    1c3e:	4d a3       	std	Y+37, r20	; 0x25
    1c40:	5e a3       	std	Y+38, r21	; 0x26
    1c42:	6f a3       	std	Y+39, r22	; 0x27
    1c44:	78 a7       	std	Y+40, r23	; 0x28
    1c46:	29 a7       	std	Y+41, r18	; 0x29
{
	init();
    1c48:	8b a1       	ldd	r24, Y+35	; 0x23
    1c4a:	9c a1       	ldd	r25, Y+36	; 0x24
    1c4c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	char buf[34];
	ltoa(value, buf, base);
    1c50:	89 a5       	ldd	r24, Y+41	; 0x29
    1c52:	e8 2f       	mov	r30, r24
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	8d a1       	ldd	r24, Y+37	; 0x25
    1c58:	9e a1       	ldd	r25, Y+38	; 0x26
    1c5a:	af a1       	ldd	r26, Y+39	; 0x27
    1c5c:	b8 a5       	ldd	r27, Y+40	; 0x28
    1c5e:	bc 01       	movw	r22, r24
    1c60:	cd 01       	movw	r24, r26
    1c62:	9e 01       	movw	r18, r28
    1c64:	2f 5f       	subi	r18, 0xFF	; 255
    1c66:	3f 4f       	sbci	r19, 0xFF	; 255
    1c68:	a9 01       	movw	r20, r18
    1c6a:	9f 01       	movw	r18, r30
    1c6c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	*this = buf;
    1c70:	8b a1       	ldd	r24, Y+35	; 0x23
    1c72:	9c a1       	ldd	r25, Y+36	; 0x24
    1c74:	9e 01       	movw	r18, r28
    1c76:	2f 5f       	subi	r18, 0xFF	; 255
    1c78:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7a:	b9 01       	movw	r22, r18
    1c7c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1c80:	a9 96       	adiw	r28, 0x29	; 41
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	66 97       	sbiw	r28, 0x16	; 22
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	9b 8b       	std	Y+19, r25	; 0x13
    1ca8:	8a 8b       	std	Y+18, r24	; 0x12
    1caa:	7d 8b       	std	Y+21, r23	; 0x15
    1cac:	6c 8b       	std	Y+20, r22	; 0x14
    1cae:	4e 8b       	std	Y+22, r20	; 0x16
{
	init();
    1cb0:	8a 89       	ldd	r24, Y+18	; 0x12
    1cb2:	9b 89       	ldd	r25, Y+19	; 0x13
    1cb4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	char buf[17];
	utoa(value, buf, base);
    1cb8:	8e 89       	ldd	r24, Y+22	; 0x16
    1cba:	48 2f       	mov	r20, r24
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	8c 89       	ldd	r24, Y+20	; 0x14
    1cc0:	9d 89       	ldd	r25, Y+21	; 0x15
    1cc2:	9e 01       	movw	r18, r28
    1cc4:	2f 5f       	subi	r18, 0xFF	; 255
    1cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc8:	b9 01       	movw	r22, r18
    1cca:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	*this = buf;
    1cce:	8a 89       	ldd	r24, Y+18	; 0x12
    1cd0:	9b 89       	ldd	r25, Y+19	; 0x13
    1cd2:	9e 01       	movw	r18, r28
    1cd4:	2f 5f       	subi	r18, 0xFF	; 255
    1cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd8:	b9 01       	movw	r22, r18
    1cda:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1cde:	66 96       	adiw	r28, 0x16	; 22
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <_ZN6StringC2Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	66 97       	sbiw	r28, 0x16	; 22
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	9b 8b       	std	Y+19, r25	; 0x13
    1d06:	8a 8b       	std	Y+18, r24	; 0x12
    1d08:	7d 8b       	std	Y+21, r23	; 0x15
    1d0a:	6c 8b       	std	Y+20, r22	; 0x14
    1d0c:	4e 8b       	std	Y+22, r20	; 0x16
{
	init();
    1d0e:	8a 89       	ldd	r24, Y+18	; 0x12
    1d10:	9b 89       	ldd	r25, Y+19	; 0x13
    1d12:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	char buf[17];
	utoa(value, buf, base);
    1d16:	8e 89       	ldd	r24, Y+22	; 0x16
    1d18:	48 2f       	mov	r20, r24
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	8c 89       	ldd	r24, Y+20	; 0x14
    1d1e:	9d 89       	ldd	r25, Y+21	; 0x15
    1d20:	9e 01       	movw	r18, r28
    1d22:	2f 5f       	subi	r18, 0xFF	; 255
    1d24:	3f 4f       	sbci	r19, 0xFF	; 255
    1d26:	b9 01       	movw	r22, r18
    1d28:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	*this = buf;
    1d2c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d2e:	9b 89       	ldd	r25, Y+19	; 0x13
    1d30:	9e 01       	movw	r18, r28
    1d32:	2f 5f       	subi	r18, 0xFF	; 255
    1d34:	3f 4f       	sbci	r19, 0xFF	; 255
    1d36:	b9 01       	movw	r22, r18
    1d38:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1d3c:	66 96       	adiw	r28, 0x16	; 22
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	67 97       	sbiw	r28, 0x17	; 23
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	9c 8b       	std	Y+20, r25	; 0x14
    1d64:	8b 8b       	std	Y+19, r24	; 0x13
    1d66:	7e 8b       	std	Y+22, r23	; 0x16
    1d68:	6d 8b       	std	Y+21, r22	; 0x15
    1d6a:	4f 8b       	std	Y+23, r20	; 0x17
{
	init();
    1d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d70:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	char buf[18];
	itoa(value, buf, base);
    1d74:	8f 89       	ldd	r24, Y+23	; 0x17
    1d76:	48 2f       	mov	r20, r24
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	8d 89       	ldd	r24, Y+21	; 0x15
    1d7c:	9e 89       	ldd	r25, Y+22	; 0x16
    1d7e:	9e 01       	movw	r18, r28
    1d80:	2f 5f       	subi	r18, 0xFF	; 255
    1d82:	3f 4f       	sbci	r19, 0xFF	; 255
    1d84:	b9 01       	movw	r22, r18
    1d86:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	*this = buf;
    1d8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8e:	9e 01       	movw	r18, r28
    1d90:	2f 5f       	subi	r18, 0xFF	; 255
    1d92:	3f 4f       	sbci	r19, 0xFF	; 255
    1d94:	b9 01       	movw	r22, r18
    1d96:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1d9a:	67 96       	adiw	r28, 0x17	; 23
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <_ZN6StringC2Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	67 97       	sbiw	r28, 0x17	; 23
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	9c 8b       	std	Y+20, r25	; 0x14
    1dc2:	8b 8b       	std	Y+19, r24	; 0x13
    1dc4:	7e 8b       	std	Y+22, r23	; 0x16
    1dc6:	6d 8b       	std	Y+21, r22	; 0x15
    1dc8:	4f 8b       	std	Y+23, r20	; 0x17
{
	init();
    1dca:	8b 89       	ldd	r24, Y+19	; 0x13
    1dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dce:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	char buf[18];
	itoa(value, buf, base);
    1dd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd4:	48 2f       	mov	r20, r24
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	8d 89       	ldd	r24, Y+21	; 0x15
    1dda:	9e 89       	ldd	r25, Y+22	; 0x16
    1ddc:	9e 01       	movw	r18, r28
    1dde:	2f 5f       	subi	r18, 0xFF	; 255
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	b9 01       	movw	r22, r18
    1de4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	*this = buf;
    1de8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dea:	9c 89       	ldd	r25, Y+20	; 0x14
    1dec:	9e 01       	movw	r18, r28
    1dee:	2f 5f       	subi	r18, 0xFF	; 255
    1df0:	3f 4f       	sbci	r19, 0xFF	; 255
    1df2:	b9 01       	movw	r22, r18
    1df4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1df8:	67 96       	adiw	r28, 0x17	; 23
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	2d 97       	sbiw	r28, 0x0d	; 13
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	9b 87       	std	Y+11, r25	; 0x0b
    1e20:	8a 87       	std	Y+10, r24	; 0x0a
    1e22:	6c 87       	std	Y+12, r22	; 0x0c
    1e24:	4d 87       	std	Y+13, r20	; 0x0d
{
	init();
    1e26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	char buf[9];
	utoa(value, buf, base);
    1e2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e36:	48 2f       	mov	r20, r24
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	c9 01       	movw	r24, r18
    1e3c:	9e 01       	movw	r18, r28
    1e3e:	2f 5f       	subi	r18, 0xFF	; 255
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	b9 01       	movw	r22, r18
    1e44:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	*this = buf;
    1e48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e4c:	9e 01       	movw	r18, r28
    1e4e:	2f 5f       	subi	r18, 0xFF	; 255
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
    1e52:	b9 01       	movw	r22, r18
    1e54:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1e58:	2d 96       	adiw	r28, 0x0d	; 13
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <_ZN6StringC2Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	2d 97       	sbiw	r28, 0x0d	; 13
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	9b 87       	std	Y+11, r25	; 0x0b
    1e80:	8a 87       	std	Y+10, r24	; 0x0a
    1e82:	6c 87       	std	Y+12, r22	; 0x0c
    1e84:	4d 87       	std	Y+13, r20	; 0x0d
{
	init();
    1e86:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e88:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e8a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	char buf[9];
	utoa(value, buf, base);
    1e8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e96:	48 2f       	mov	r20, r24
    1e98:	50 e0       	ldi	r21, 0x00	; 0
    1e9a:	c9 01       	movw	r24, r18
    1e9c:	9e 01       	movw	r18, r28
    1e9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea2:	b9 01       	movw	r22, r18
    1ea4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	*this = buf;
    1ea8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eaa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eac:	9e 01       	movw	r18, r28
    1eae:	2f 5f       	subi	r18, 0xFF	; 255
    1eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb2:	b9 01       	movw	r22, r18
    1eb4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1eb8:	2d 96       	adiw	r28, 0x0d	; 13
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <_ZN6StringC1Ec+0x6>
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <_ZN6StringC1Ec+0x8>
    1ed2:	0f 92       	push	r0
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	9c 83       	std	Y+4, r25	; 0x04
    1eda:	8b 83       	std	Y+3, r24	; 0x03
    1edc:	6d 83       	std	Y+5, r22	; 0x05
{
	init();
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	char buf[2];
	buf[0] = c;
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0;
    1eea:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	9e 01       	movw	r18, r28
    1ef2:	2f 5f       	subi	r18, 0xFF	; 255
    1ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef6:	b9 01       	movw	r22, r18
    1ef8:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <_ZN6StringC2Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <_ZN6StringC2Ec+0x6>
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <_ZN6StringC2Ec+0x8>
    1f14:	0f 92       	push	r0
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	9c 83       	std	Y+4, r25	; 0x04
    1f1c:	8b 83       	std	Y+3, r24	; 0x03
    1f1e:	6d 83       	std	Y+5, r22	; 0x05
{
	init();
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	char buf[2];
	buf[0] = c;
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2a:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0;
    1f2c:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	9e 01       	movw	r18, r28
    1f34:	2f 5f       	subi	r18, 0xFF	; 255
    1f36:	3f 4f       	sbci	r19, 0xFF	; 255
    1f38:	b9 01       	movw	r22, r18
    1f3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	62 97       	sbiw	r28, 0x12	; 18
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	9a 8b       	std	Y+18, r25	; 0x12
    1f64:	89 8b       	std	Y+17, r24	; 0x11
    1f66:	7c 87       	std	Y+12, r23	; 0x0c
    1f68:	6b 87       	std	Y+11, r22	; 0x0b
    1f6a:	5e 87       	std	Y+14, r21	; 0x0e
    1f6c:	4d 87       	std	Y+13, r20	; 0x0d
    1f6e:	38 8b       	std	Y+16, r19	; 0x10
    1f70:	2f 87       	std	Y+15, r18	; 0x0f
{
	if (left > right) {
    1f72:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f74:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f78:	98 89       	ldd	r25, Y+16	; 0x10
    1f7a:	82 17       	cp	r24, r18
    1f7c:	93 07       	cpc	r25, r19
    1f7e:	00 f4       	brcc	.+0      	; 0x1f80 <_ZNK6String9substringEjj+0x32>
		unsigned int temp = right;
    1f80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f82:	98 89       	ldd	r25, Y+16	; 0x10
    1f84:	9a 83       	std	Y+2, r25	; 0x02
    1f86:	89 83       	std	Y+1, r24	; 0x01
		right = left;
    1f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8c:	98 8b       	std	Y+16, r25	; 0x10
    1f8e:	8f 87       	std	Y+15, r24	; 0x0f
		left = temp;
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	9a 81       	ldd	r25, Y+2	; 0x02
    1f94:	9e 87       	std	Y+14, r25	; 0x0e
    1f96:	8d 87       	std	Y+13, r24	; 0x0d
	}
	String out;
    1f98:	89 89       	ldd	r24, Y+17	; 0x11
    1f9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	b9 01       	movw	r22, r18
    1fa2:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	if (left > len) return out;
    1fa6:	eb 85       	ldd	r30, Y+11	; 0x0b
    1fa8:	fc 85       	ldd	r31, Y+12	; 0x0c
    1faa:	24 81       	ldd	r18, Z+4	; 0x04
    1fac:	35 81       	ldd	r19, Z+5	; 0x05
    1fae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb2:	28 17       	cp	r18, r24
    1fb4:	39 07       	cpc	r19, r25
    1fb6:	00 f0       	brcs	.+0      	; 0x1fb8 <_ZNK6String9substringEjj+0x6a>
	if (right > len) right = len;
    1fb8:	eb 85       	ldd	r30, Y+11	; 0x0b
    1fba:	fc 85       	ldd	r31, Y+12	; 0x0c
    1fbc:	24 81       	ldd	r18, Z+4	; 0x04
    1fbe:	35 81       	ldd	r19, Z+5	; 0x05
    1fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc2:	98 89       	ldd	r25, Y+16	; 0x10
    1fc4:	28 17       	cp	r18, r24
    1fc6:	39 07       	cpc	r19, r25
    1fc8:	00 f4       	brcc	.+0      	; 0x1fca <_ZNK6String9substringEjj+0x7c>
    1fca:	eb 85       	ldd	r30, Y+11	; 0x0b
    1fcc:	fc 85       	ldd	r31, Y+12	; 0x0c
    1fce:	84 81       	ldd	r24, Z+4	; 0x04
    1fd0:	95 81       	ldd	r25, Z+5	; 0x05
    1fd2:	98 8b       	std	Y+16, r25	; 0x10
    1fd4:	8f 87       	std	Y+15, r24	; 0x0f
	char temp = buffer[right];  // save the replaced character
    1fd6:	eb 85       	ldd	r30, Y+11	; 0x0b
    1fd8:	fc 85       	ldd	r31, Y+12	; 0x0c
    1fda:	20 81       	ld	r18, Z
    1fdc:	31 81       	ldd	r19, Z+1	; 0x01
    1fde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe0:	98 89       	ldd	r25, Y+16	; 0x10
    1fe2:	f9 01       	movw	r30, r18
    1fe4:	e8 0f       	add	r30, r24
    1fe6:	f9 1f       	adc	r31, r25
    1fe8:	80 81       	ld	r24, Z
    1fea:	8b 83       	std	Y+3, r24	; 0x03
	buffer[right] = '\0';	
    1fec:	eb 85       	ldd	r30, Y+11	; 0x0b
    1fee:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ff0:	20 81       	ld	r18, Z
    1ff2:	31 81       	ldd	r19, Z+1	; 0x01
    1ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff6:	98 89       	ldd	r25, Y+16	; 0x10
    1ff8:	f9 01       	movw	r30, r18
    1ffa:	e8 0f       	add	r30, r24
    1ffc:	f9 1f       	adc	r31, r25
    1ffe:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    2000:	49 89       	ldd	r20, Y+17	; 0x11
    2002:	5a 89       	ldd	r21, Y+18	; 0x12
    2004:	eb 85       	ldd	r30, Y+11	; 0x0b
    2006:	fc 85       	ldd	r31, Y+12	; 0x0c
    2008:	20 81       	ld	r18, Z
    200a:	31 81       	ldd	r19, Z+1	; 0x01
    200c:	8d 85       	ldd	r24, Y+13	; 0x0d
    200e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2010:	28 0f       	add	r18, r24
    2012:	39 1f       	adc	r19, r25
    2014:	ca 01       	movw	r24, r20
    2016:	b9 01       	movw	r22, r18
    2018:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	buffer[right] = temp;  //restore character
    201c:	eb 85       	ldd	r30, Y+11	; 0x0b
    201e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2020:	20 81       	ld	r18, Z
    2022:	31 81       	ldd	r19, Z+1	; 0x01
    2024:	8f 85       	ldd	r24, Y+15	; 0x0f
    2026:	98 89       	ldd	r25, Y+16	; 0x10
    2028:	f9 01       	movw	r30, r18
    202a:	e8 0f       	add	r30, r24
    202c:	f9 1f       	adc	r31, r25
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	80 83       	st	Z, r24
	return out;
}
    2032:	89 89       	ldd	r24, Y+17	; 0x11
    2034:	9a 89       	ldd	r25, Y+18	; 0x12
    2036:	89 89       	ldd	r24, Y+17	; 0x11
    2038:	9a 89       	ldd	r25, Y+18	; 0x12
    203a:	62 96       	adiw	r28, 0x12	; 18
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <_ZNK6String9substringEj>:
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}

String String::substring( unsigned int left ) const
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	00 d0       	rcall	.+0      	; 0x2056 <_ZNK6String9substringEj+0xa>
    2056:	00 d0       	rcall	.+0      	; 0x2058 <_ZNK6String9substringEj+0xc>
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	8c 01       	movw	r16, r24
    205e:	7a 83       	std	Y+2, r23	; 0x02
    2060:	69 83       	std	Y+1, r22	; 0x01
    2062:	5c 83       	std	Y+4, r21	; 0x04
    2064:	4b 83       	std	Y+3, r20	; 0x03
{
	return substring(left, len);
    2066:	c8 01       	movw	r24, r16
    2068:	e9 81       	ldd	r30, Y+1	; 0x01
    206a:	fa 81       	ldd	r31, Y+2	; 0x02
    206c:	04 80       	ldd	r0, Z+4	; 0x04
    206e:	f5 81       	ldd	r31, Z+5	; 0x05
    2070:	e0 2d       	mov	r30, r0
    2072:	29 81       	ldd	r18, Y+1	; 0x01
    2074:	3a 81       	ldd	r19, Y+2	; 0x02
    2076:	4b 81       	ldd	r20, Y+3	; 0x03
    2078:	5c 81       	ldd	r21, Y+4	; 0x04
    207a:	b9 01       	movw	r22, r18
    207c:	9f 01       	movw	r18, r30
    207e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    2082:	c8 01       	movw	r24, r16
    2084:	c8 01       	movw	r24, r16
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	08 95       	ret

00002098 <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	00 d0       	rcall	.+0      	; 0x209e <_ZN6StringaSERKS_+0x6>
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <_ZN6StringaSERKS_+0x8>
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <_ZN6StringaSERKS_+0xa>
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	9a 83       	std	Y+2, r25	; 0x02
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	7c 83       	std	Y+4, r23	; 0x04
    20ac:	6b 83       	std	Y+3, r22	; 0x03
{
	if (this == &rhs) return *this;
    20ae:	29 81       	ldd	r18, Y+1	; 0x01
    20b0:	3a 81       	ldd	r19, Y+2	; 0x02
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	9c 81       	ldd	r25, Y+4	; 0x04
    20b6:	28 17       	cp	r18, r24
    20b8:	39 07       	cpc	r19, r25
    20ba:	01 f4       	brne	.+0      	; 0x20bc <_ZN6StringaSERKS_+0x24>
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	9a 81       	ldd	r25, Y+2	; 0x02
    20c0:	9e 83       	std	Y+6, r25	; 0x06
    20c2:	8d 83       	std	Y+5, r24	; 0x05
    20c4:	00 c0       	rjmp	.+0      	; 0x20c6 <_ZN6StringaSERKS_+0x2e>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    20c6:	eb 81       	ldd	r30, Y+3	; 0x03
    20c8:	fc 81       	ldd	r31, Y+4	; 0x04
    20ca:	80 81       	ld	r24, Z
    20cc:	91 81       	ldd	r25, Z+1	; 0x01
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	01 f0       	breq	.+0      	; 0x20d2 <_ZN6StringaSERKS_+0x3a>
    20d2:	eb 81       	ldd	r30, Y+3	; 0x03
    20d4:	fc 81       	ldd	r31, Y+4	; 0x04
    20d6:	40 81       	ld	r20, Z
    20d8:	51 81       	ldd	r21, Z+1	; 0x01
    20da:	eb 81       	ldd	r30, Y+3	; 0x03
    20dc:	fc 81       	ldd	r31, Y+4	; 0x04
    20de:	24 81       	ldd	r18, Z+4	; 0x04
    20e0:	35 81       	ldd	r19, Z+5	; 0x05
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	ba 01       	movw	r22, r20
    20e8:	a9 01       	movw	r20, r18
    20ea:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
    20ee:	00 c0       	rjmp	.+0      	; 0x20f0 <_ZN6StringaSERKS_+0x58>
	else invalidate();
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	
	return *this;
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
}
    2104:	26 96       	adiw	r28, 0x06	; 6
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	00 d0       	rcall	.+0      	; 0x211c <_ZN6StringC1ERKS_+0x6>
    211c:	00 d0       	rcall	.+0      	; 0x211e <_ZN6StringC1ERKS_+0x8>
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	9a 83       	std	Y+2, r25	; 0x02
    2124:	89 83       	std	Y+1, r24	; 0x01
    2126:	7c 83       	std	Y+4, r23	; 0x04
    2128:	6b 83       	std	Y+3, r22	; 0x03
{
	init();
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	*this = value;
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	9a 81       	ldd	r25, Y+2	; 0x02
    2136:	2b 81       	ldd	r18, Y+3	; 0x03
    2138:	3c 81       	ldd	r19, Y+4	; 0x04
    213a:	b9 01       	movw	r22, r18
    213c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	00 d0       	rcall	.+0      	; 0x2154 <_ZN6StringC2ERKS_+0x6>
    2154:	00 d0       	rcall	.+0      	; 0x2156 <_ZN6StringC2ERKS_+0x8>
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	9a 83       	std	Y+2, r25	; 0x02
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	7c 83       	std	Y+4, r23	; 0x04
    2160:	6b 83       	std	Y+3, r22	; 0x03
{
	init();
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
	*this = value;
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	2b 81       	ldd	r18, Y+3	; 0x03
    2170:	3c 81       	ldd	r19, Y+4	; 0x04
    2172:	b9 01       	movw	r22, r18
    2174:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	00 d0       	rcall	.+0      	; 0x218c <_ZN6StringD1Ev+0x6>
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	89 83       	std	Y+1, r24	; 0x01
{
	free(buffer);
    2194:	e9 81       	ldd	r30, Y+1	; 0x01
    2196:	fa 81       	ldd	r31, Y+2	; 0x02
    2198:	80 81       	ld	r24, Z
    219a:	91 81       	ldd	r25, Z+1	; 0x01
    219c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <_ZN6StringD2Ev+0x6>
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
{
	free(buffer);
    21b8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ba:	fa 81       	ldd	r31, Y+2	; 0x02
    21bc:	80 81       	ld	r24, Z
    21be:	91 81       	ldd	r25, Z+1	; 0x01
    21c0:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4initEv>
}
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

Wire.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000838  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000028  00000000  00000000  0000086c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          00000056  00000000  00000000  00000894  2**0
                  ALLOC
  3 .stab         000010f8  00000000  00000000  00000894  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001695  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .dtors        00000002  00000000  00000000  00003021  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  6 .ctors        00000002  00000000  00000000  00003023  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text:

00000000 <_ZN5Print13setWriteErrorEi>:
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5Print13setWriteErrorEi+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN5Print13setWriteErrorEi+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	e9 81       	ldd	r30, Y+1	; 0x01
  16:	fa 81       	ldd	r31, Y+2	; 0x02
  18:	8b 81       	ldd	r24, Y+3	; 0x03
  1a:	9c 81       	ldd	r25, Y+4	; 0x04
  1c:	93 83       	std	Z+3, r25	; 0x03
  1e:	82 83       	std	Z+2, r24	; 0x02
  20:	0f 90       	pop	r0
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	0f 90       	pop	r0
  28:	cf 91       	pop	r28
  2a:	df 91       	pop	r29
  2c:	08 95       	ret

0000002e <_ZN5PrintC2Ev>:
  public:
    Print() : write_error(0) {}
  2e:	df 93       	push	r29
  30:	cf 93       	push	r28
  32:	00 d0       	rcall	.+0      	; 0x34 <_ZN5PrintC2Ev+0x6>
  34:	cd b7       	in	r28, 0x3d	; 61
  36:	de b7       	in	r29, 0x3e	; 62
  38:	9a 83       	std	Y+2, r25	; 0x02
  3a:	89 83       	std	Y+1, r24	; 0x01
  3c:	e9 81       	ldd	r30, Y+1	; 0x01
  3e:	fa 81       	ldd	r31, Y+2	; 0x02
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	91 83       	std	Z+1, r25	; 0x01
  46:	80 83       	st	Z, r24
  48:	e9 81       	ldd	r30, Y+1	; 0x01
  4a:	fa 81       	ldd	r31, Y+2	; 0x02
  4c:	13 82       	std	Z+3, r1	; 0x03
  4e:	12 82       	std	Z+2, r1	; 0x02
  50:	0f 90       	pop	r0
  52:	0f 90       	pop	r0
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	08 95       	ret

0000005a <_ZN6StreamC2Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
  5a:	df 93       	push	r29
  5c:	cf 93       	push	r28
  5e:	00 d0       	rcall	.+0      	; 0x60 <_ZN6StreamC2Ev+0x6>
  60:	cd b7       	in	r28, 0x3d	; 61
  62:	de b7       	in	r29, 0x3e	; 62
  64:	9a 83       	std	Y+2, r25	; 0x02
  66:	89 83       	std	Y+1, r24	; 0x01
  68:	89 81       	ldd	r24, Y+1	; 0x01
  6a:	9a 81       	ldd	r25, Y+2	; 0x02
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
  70:	e9 81       	ldd	r30, Y+1	; 0x01
  72:	fa 81       	ldd	r31, Y+2	; 0x02
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	91 83       	std	Z+1, r25	; 0x01
  7a:	80 83       	st	Z, r24
  7c:	e9 81       	ldd	r30, Y+1	; 0x01
  7e:	fa 81       	ldd	r31, Y+2	; 0x02
  80:	88 ee       	ldi	r24, 0xE8	; 232
  82:	93 e0       	ldi	r25, 0x03	; 3
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	84 83       	std	Z+4, r24	; 0x04
  8a:	95 83       	std	Z+5, r25	; 0x05
  8c:	a6 83       	std	Z+6, r26	; 0x06
  8e:	b7 83       	std	Z+7, r27	; 0x07
  90:	0f 90       	pop	r0
  92:	0f 90       	pop	r0
  94:	cf 91       	pop	r28
  96:	df 91       	pop	r29
  98:	08 95       	ret

0000009a <_ZN7TwoWireC2Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
  9a:	df 93       	push	r29
  9c:	cf 93       	push	r28
  9e:	00 d0       	rcall	.+0      	; 0xa0 <_ZN7TwoWireC2Ev+0x6>
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	9a 83       	std	Y+2, r25	; 0x02
  a6:	89 83       	std	Y+1, r24	; 0x01
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	9a 81       	ldd	r25, Y+2	; 0x02
  ac:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
  b0:	e9 81       	ldd	r30, Y+1	; 0x01
  b2:	fa 81       	ldd	r31, Y+2	; 0x02
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	91 83       	std	Z+1, r25	; 0x01
  ba:	80 83       	st	Z, r24
{
}
  bc:	0f 90       	pop	r0
  be:	0f 90       	pop	r0
  c0:	cf 91       	pop	r28
  c2:	df 91       	pop	r29
  c4:	08 95       	ret

000000c6 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	00 d0       	rcall	.+0      	; 0xcc <_ZN7TwoWireC1Ev+0x6>
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	9a 83       	std	Y+2, r25	; 0x02
  d2:	89 83       	std	Y+1, r24	; 0x01
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	9a 81       	ldd	r25, Y+2	; 0x02
  d8:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
  dc:	e9 81       	ldd	r30, Y+1	; 0x01
  de:	fa 81       	ldd	r31, Y+2	; 0x02
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	91 83       	std	Z+1, r25	; 0x01
  e6:	80 83       	st	Z, r24
{
}
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	cf 91       	pop	r28
  ee:	df 91       	pop	r29
  f0:	08 95       	ret

000000f2 <_ZN7TwoWire17beginTransmissionEh>:
uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
  f2:	df 93       	push	r29
  f4:	cf 93       	push	r28
  f6:	00 d0       	rcall	.+0      	; 0xf8 <_ZN7TwoWire17beginTransmissionEh+0x6>
  f8:	0f 92       	push	r0
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	9a 83       	std	Y+2, r25	; 0x02
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	6b 83       	std	Y+3, r22	; 0x03
{
  // indicate that we are transmitting
  transmitting = 1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 00 00 	sts	0x0000, r24
  // set address of targeted slave
  txAddress = address;
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	80 93 00 00 	sts	0x0000, r24
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 110:	10 92 00 00 	sts	0x0000, r1
  txBufferLength = 0;
 114:	10 92 00 00 	sts	0x0000, r1
}
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	08 95       	ret

00000124 <_ZN7TwoWire17beginTransmissionEi>:

void TwoWire::beginTransmission(int address)
 124:	df 93       	push	r29
 126:	cf 93       	push	r28
 128:	00 d0       	rcall	.+0      	; 0x12a <_ZN7TwoWire17beginTransmissionEi+0x6>
 12a:	00 d0       	rcall	.+0      	; 0x12c <_ZN7TwoWire17beginTransmissionEi+0x8>
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	9a 83       	std	Y+2, r25	; 0x02
 132:	89 83       	std	Y+1, r24	; 0x01
 134:	7c 83       	std	Y+4, r23	; 0x04
 136:	6b 83       	std	Y+3, r22	; 0x03
{
  beginTransmission((uint8_t)address);
 138:	2b 81       	ldd	r18, Y+3	; 0x03
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	9a 81       	ldd	r25, Y+2	; 0x02
 13e:	62 2f       	mov	r22, r18
 140:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
}
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	cf 91       	pop	r28
 14e:	df 91       	pop	r29
 150:	08 95       	ret

00000152 <_ZN7TwoWire9availableEv>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	00 d0       	rcall	.+0      	; 0x158 <_ZN7TwoWire9availableEv+0x6>
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	9a 83       	std	Y+2, r25	; 0x02
 15e:	89 83       	std	Y+1, r24	; 0x01
{
  return rxBufferLength - rxBufferIndex;
 160:	80 91 00 00 	lds	r24, 0x0000
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	80 91 00 00 	lds	r24, 0x0000
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	a9 01       	movw	r20, r18
 172:	48 1b       	sub	r20, r24
 174:	59 0b       	sbc	r21, r25
 176:	ca 01       	movw	r24, r20
}
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	cf 91       	pop	r28
 17e:	df 91       	pop	r29
 180:	08 95       	ret

00000182 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
 182:	df 93       	push	r29
 184:	cf 93       	push	r28
 186:	00 d0       	rcall	.+0      	; 0x188 <_ZN7TwoWire4readEv+0x6>
 188:	00 d0       	rcall	.+0      	; 0x18a <_ZN7TwoWire4readEv+0x8>
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	9c 83       	std	Y+4, r25	; 0x04
 190:	8b 83       	std	Y+3, r24	; 0x03
{
  int value = -1;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	9f ef       	ldi	r25, 0xFF	; 255
 196:	9a 83       	std	Y+2, r25	; 0x02
 198:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 19a:	90 91 00 00 	lds	r25, 0x0000
 19e:	80 91 00 00 	lds	r24, 0x0000
 1a2:	98 17       	cp	r25, r24
 1a4:	00 f4       	brcc	.+0      	; 0x1a6 <_ZN7TwoWire4readEv+0x24>
    value = rxBuffer[rxBufferIndex];
 1a6:	80 91 00 00 	lds	r24, 0x0000
 1aa:	88 2f       	mov	r24, r24
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	fc 01       	movw	r30, r24
 1b0:	e0 50       	subi	r30, 0x00	; 0
 1b2:	f0 40       	sbci	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	88 2f       	mov	r24, r24
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	9a 83       	std	Y+2, r25	; 0x02
 1bc:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
 1be:	80 91 00 00 	lds	r24, 0x0000
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 00 00 	sts	0x0000, r24
  }

  return value;
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	9a 81       	ldd	r25, Y+2	; 0x02
}
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	cf 91       	pop	r28
 1d6:	df 91       	pop	r29
 1d8:	08 95       	ret

000001da <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
 1da:	df 93       	push	r29
 1dc:	cf 93       	push	r28
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <_ZN7TwoWire4peekEv+0x6>
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <_ZN7TwoWire4peekEv+0x8>
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	9c 83       	std	Y+4, r25	; 0x04
 1e8:	8b 83       	std	Y+3, r24	; 0x03
{
  int value = -1;
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	9f ef       	ldi	r25, 0xFF	; 255
 1ee:	9a 83       	std	Y+2, r25	; 0x02
 1f0:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
 1f2:	90 91 00 00 	lds	r25, 0x0000
 1f6:	80 91 00 00 	lds	r24, 0x0000
 1fa:	98 17       	cp	r25, r24
 1fc:	00 f4       	brcc	.+0      	; 0x1fe <_ZN7TwoWire4peekEv+0x24>
    value = rxBuffer[rxBufferIndex];
 1fe:	80 91 00 00 	lds	r24, 0x0000
 202:	88 2f       	mov	r24, r24
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	e0 50       	subi	r30, 0x00	; 0
 20a:	f0 40       	sbci	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	88 2f       	mov	r24, r24
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	9a 83       	std	Y+2, r25	; 0x02
 214:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	9a 81       	ldd	r25, Y+2	; 0x02
}
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	cf 91       	pop	r28
 224:	df 91       	pop	r29
 226:	08 95       	ret

00000228 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
 228:	df 93       	push	r29
 22a:	cf 93       	push	r28
 22c:	00 d0       	rcall	.+0      	; 0x22e <_ZN7TwoWire5flushEv+0x6>
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	9a 83       	std	Y+2, r25	; 0x02
 234:	89 83       	std	Y+1, r24	; 0x01
{
  // XXX: to be implemented.
}
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	cf 91       	pop	r28
 23c:	df 91       	pop	r29
 23e:	08 95       	ret

00000240 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
 240:	df 93       	push	r29
 242:	cf 93       	push	r28
 244:	00 d0       	rcall	.+0      	; 0x246 <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
 246:	00 d0       	rcall	.+0      	; 0x248 <_ZN7TwoWire16onReceiveServiceEPhi+0x8>
 248:	0f 92       	push	r0
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	9b 83       	std	Y+3, r25	; 0x03
 250:	8a 83       	std	Y+2, r24	; 0x02
 252:	7d 83       	std	Y+5, r23	; 0x05
 254:	6c 83       	std	Y+4, r22	; 0x04
{
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
 256:	80 91 00 00 	lds	r24, 0x0000
 25a:	90 91 00 00 	lds	r25, 0x0000
 25e:	00 97       	sbiw	r24, 0x00	; 0
 260:	01 f0       	breq	.+0      	; 0x262 <_ZN7TwoWire16onReceiveServiceEPhi+0x22>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
 262:	90 91 00 00 	lds	r25, 0x0000
 266:	80 91 00 00 	lds	r24, 0x0000
 26a:	98 17       	cp	r25, r24
 26c:	00 f0       	brcs	.+0      	; 0x26e <_ZN7TwoWire16onReceiveServiceEPhi+0x2e>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
 26e:	19 82       	std	Y+1, r1	; 0x01
 270:	00 c0       	rjmp	.+0      	; 0x272 <_ZN7TwoWire16onReceiveServiceEPhi+0x32>
    rxBuffer[i] = inBytes[i];    
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	48 2f       	mov	r20, r24
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	28 2f       	mov	r18, r24
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	8a 81       	ldd	r24, Y+2	; 0x02
 280:	9b 81       	ldd	r25, Y+3	; 0x03
 282:	fc 01       	movw	r30, r24
 284:	e2 0f       	add	r30, r18
 286:	f3 1f       	adc	r31, r19
 288:	80 81       	ld	r24, Z
 28a:	fa 01       	movw	r30, r20
 28c:	e0 50       	subi	r30, 0x00	; 0
 28e:	f0 40       	sbci	r31, 0x00	; 0
 290:	80 83       	st	Z, r24
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	89 83       	std	Y+1, r24	; 0x01
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	28 2f       	mov	r18, r24
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	8c 81       	ldd	r24, Y+4	; 0x04
 2a0:	9d 81       	ldd	r25, Y+5	; 0x05
 2a2:	28 17       	cp	r18, r24
 2a4:	39 07       	cpc	r19, r25
 2a6:	04 f0       	brlt	.+0      	; 0x2a8 <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
 2a8:	10 92 00 00 	sts	0x0000, r1
  rxBufferLength = numBytes;
 2ac:	8c 81       	ldd	r24, Y+4	; 0x04
 2ae:	80 93 00 00 	sts	0x0000, r24
  // alert user program
  user_onReceive(numBytes);
 2b2:	e0 91 00 00 	lds	r30, 0x0000
 2b6:	f0 91 00 00 	lds	r31, 0x0000
 2ba:	8c 81       	ldd	r24, Y+4	; 0x04
 2bc:	9d 81       	ldd	r25, Y+5	; 0x05
 2be:	09 95       	icall
}
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	cf 91       	pop	r28
 2cc:	df 91       	pop	r29
 2ce:	08 95       	ret

000002d0 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
 2d0:	df 93       	push	r29
 2d2:	cf 93       	push	r28
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
 2d8:	80 91 00 00 	lds	r24, 0x0000
 2dc:	90 91 00 00 	lds	r25, 0x0000
 2e0:	00 97       	sbiw	r24, 0x00	; 0
 2e2:	01 f0       	breq	.+0      	; 0x2e4 <_ZN7TwoWire16onRequestServiceEv+0x14>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
 2e4:	10 92 00 00 	sts	0x0000, r1
  txBufferLength = 0;
 2e8:	10 92 00 00 	sts	0x0000, r1
  // alert user program
  user_onRequest();
 2ec:	e0 91 00 00 	lds	r30, 0x0000
 2f0:	f0 91 00 00 	lds	r31, 0x0000
 2f4:	09 95       	icall
}
 2f6:	cf 91       	pop	r28
 2f8:	df 91       	pop	r29
 2fa:	08 95       	ret

000002fc <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
 2fc:	df 93       	push	r29
 2fe:	cf 93       	push	r28
 300:	00 d0       	rcall	.+0      	; 0x302 <_ZN7TwoWire9onReceiveEPFviE+0x6>
 302:	00 d0       	rcall	.+0      	; 0x304 <_ZN7TwoWire9onReceiveEPFviE+0x8>
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	9a 83       	std	Y+2, r25	; 0x02
 30a:	89 83       	std	Y+1, r24	; 0x01
 30c:	7c 83       	std	Y+4, r23	; 0x04
 30e:	6b 83       	std	Y+3, r22	; 0x03
{
  user_onReceive = function;
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	9c 81       	ldd	r25, Y+4	; 0x04
 314:	90 93 00 00 	sts	0x0000, r25
 318:	80 93 00 00 	sts	0x0000, r24
}
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	cf 91       	pop	r28
 326:	df 91       	pop	r29
 328:	08 95       	ret

0000032a <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
 32a:	df 93       	push	r29
 32c:	cf 93       	push	r28
 32e:	00 d0       	rcall	.+0      	; 0x330 <_ZN7TwoWire9onRequestEPFvvE+0x6>
 330:	00 d0       	rcall	.+0      	; 0x332 <_ZN7TwoWire9onRequestEPFvvE+0x8>
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
 336:	9a 83       	std	Y+2, r25	; 0x02
 338:	89 83       	std	Y+1, r24	; 0x01
 33a:	7c 83       	std	Y+4, r23	; 0x04
 33c:	6b 83       	std	Y+3, r22	; 0x03
{
  user_onRequest = function;
 33e:	8b 81       	ldd	r24, Y+3	; 0x03
 340:	9c 81       	ldd	r25, Y+4	; 0x04
 342:	90 93 00 00 	sts	0x0000, r25
 346:	80 93 00 00 	sts	0x0000, r24
}
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	cf 91       	pop	r28
 354:	df 91       	pop	r29
 356:	08 95       	ret

00000358 <_ZN6StreamD2Ev>:
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
{
 358:	df 93       	push	r29
 35a:	cf 93       	push	r28
 35c:	00 d0       	rcall	.+0      	; 0x35e <_ZN6StreamD2Ev+0x6>
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	9a 83       	std	Y+2, r25	; 0x02
 364:	89 83       	std	Y+1, r24	; 0x01
 366:	e9 81       	ldd	r30, Y+1	; 0x01
 368:	fa 81       	ldd	r31, Y+2	; 0x02
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	91 83       	std	Z+1, r25	; 0x01
 370:	80 83       	st	Z, r24
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	9a 81       	ldd	r25, Y+2	; 0x02
 376:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	88 23       	and	r24, r24
 380:	01 f0       	breq	.+0      	; 0x382 <_ZN6StreamD2Ev+0x2a>
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	9a 81       	ldd	r25, Y+2	; 0x02
 386:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	cf 91       	pop	r28
 390:	df 91       	pop	r29
 392:	08 95       	ret

00000394 <_ZN7TwoWireD0Ev>:
#include "Stream.h"

#define BUFFER_LENGTH 32

class TwoWire : public Stream
{
 394:	df 93       	push	r29
 396:	cf 93       	push	r28
 398:	00 d0       	rcall	.+0      	; 0x39a <_ZN7TwoWireD0Ev+0x6>
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
 39e:	9a 83       	std	Y+2, r25	; 0x02
 3a0:	89 83       	std	Y+1, r24	; 0x01
 3a2:	e9 81       	ldd	r30, Y+1	; 0x01
 3a4:	fa 81       	ldd	r31, Y+2	; 0x02
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	91 83       	std	Z+1, r25	; 0x01
 3ac:	80 83       	st	Z, r24
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	9a 81       	ldd	r25, Y+2	; 0x02
 3b2:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	88 23       	and	r24, r24
 3bc:	01 f0       	breq	.+0      	; 0x3be <_ZN7TwoWireD0Ev+0x2a>
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	9a 81       	ldd	r25, Y+2	; 0x02
 3c2:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	cf 91       	pop	r28
 3cc:	df 91       	pop	r29
 3ce:	08 95       	ret

000003d0 <_ZN7TwoWireD1Ev>:
 3d0:	df 93       	push	r29
 3d2:	cf 93       	push	r28
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <_ZN7TwoWireD1Ev+0x6>
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
 3da:	9a 83       	std	Y+2, r25	; 0x02
 3dc:	89 83       	std	Y+1, r24	; 0x01
 3de:	e9 81       	ldd	r30, Y+1	; 0x01
 3e0:	fa 81       	ldd	r31, Y+2	; 0x02
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	91 83       	std	Z+1, r25	; 0x01
 3e8:	80 83       	st	Z, r24
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	9a 81       	ldd	r25, Y+2	; 0x02
 3ee:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	88 23       	and	r24, r24
 3f8:	01 f0       	breq	.+0      	; 0x3fa <_ZN7TwoWireD1Ev+0x2a>
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	9a 81       	ldd	r25, Y+2	; 0x02
 3fe:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	cf 91       	pop	r28
 408:	df 91       	pop	r29
 40a:	08 95       	ret

0000040c <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
 40c:	df 93       	push	r29
 40e:	cf 93       	push	r28
 410:	00 d0       	rcall	.+0      	; 0x412 <_Z41__static_initialization_and_destruction_0ii+0x6>
 412:	00 d0       	rcall	.+0      	; 0x414 <_Z41__static_initialization_and_destruction_0ii+0x8>
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
 418:	9a 83       	std	Y+2, r25	; 0x02
 41a:	89 83       	std	Y+1, r24	; 0x01
 41c:	7c 83       	std	Y+4, r23	; 0x04
 41e:	6b 83       	std	Y+3, r22	; 0x03
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	9a 81       	ldd	r25, Y+2	; 0x02
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	91 05       	cpc	r25, r1
 428:	01 f4       	brne	.+0      	; 0x42a <_Z41__static_initialization_and_destruction_0ii+0x1e>
 42a:	8b 81       	ldd	r24, Y+3	; 0x03
 42c:	9c 81       	ldd	r25, Y+4	; 0x04
 42e:	2f ef       	ldi	r18, 0xFF	; 255
 430:	8f 3f       	cpi	r24, 0xFF	; 255
 432:	92 07       	cpc	r25, r18
 434:	01 f4       	brne	.+0      	; 0x436 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	9a 81       	ldd	r25, Y+2	; 0x02
 442:	00 97       	sbiw	r24, 0x00	; 0
 444:	01 f4       	brne	.+0      	; 0x446 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 446:	8b 81       	ldd	r24, Y+3	; 0x03
 448:	9c 81       	ldd	r25, Y+4	; 0x04
 44a:	2f ef       	ldi	r18, 0xFF	; 255
 44c:	8f 3f       	cpi	r24, 0xFF	; 255
 44e:	92 07       	cpc	r25, r18
 450:	01 f4       	brne	.+0      	; 0x452 <_Z41__static_initialization_and_destruction_0ii+0x46>
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	cf 91       	pop	r28
 464:	df 91       	pop	r29
 466:	08 95       	ret

00000468 <_GLOBAL__D__ZN7TwoWire8rxBufferE>:
 468:	df 93       	push	r29
 46a:	cf 93       	push	r28
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	6f ef       	ldi	r22, 0xFF	; 255
 476:	7f ef       	ldi	r23, 0xFF	; 255
 478:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 47c:	cf 91       	pop	r28
 47e:	df 91       	pop	r29
 480:	08 95       	ret

00000482 <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
 482:	df 93       	push	r29
 484:	cf 93       	push	r28
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	6f ef       	ldi	r22, 0xFF	; 255
 490:	7f ef       	ldi	r23, 0xFF	; 255
 492:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 496:	cf 91       	pop	r28
 498:	df 91       	pop	r29
 49a:	08 95       	ret

0000049c <_ZN6StreamD0Ev>:
 49c:	df 93       	push	r29
 49e:	cf 93       	push	r28
 4a0:	00 d0       	rcall	.+0      	; 0x4a2 <_ZN6StreamD0Ev+0x6>
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
 4a6:	9a 83       	std	Y+2, r25	; 0x02
 4a8:	89 83       	std	Y+1, r24	; 0x01
 4aa:	e9 81       	ldd	r30, Y+1	; 0x01
 4ac:	fa 81       	ldd	r31, Y+2	; 0x02
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	91 83       	std	Z+1, r25	; 0x01
 4b4:	80 83       	st	Z, r24
 4b6:	89 81       	ldd	r24, Y+1	; 0x01
 4b8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ba:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	88 23       	and	r24, r24
 4c4:	01 f0       	breq	.+0      	; 0x4c6 <_ZN6StreamD0Ev+0x2a>
 4c6:	89 81       	ldd	r24, Y+1	; 0x01
 4c8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ca:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 4ce:	0f 90       	pop	r0
 4d0:	0f 90       	pop	r0
 4d2:	cf 91       	pop	r28
 4d4:	df 91       	pop	r29
 4d6:	08 95       	ret

000004d8 <_ZN6StreamD1Ev>:
 4d8:	df 93       	push	r29
 4da:	cf 93       	push	r28
 4dc:	00 d0       	rcall	.+0      	; 0x4de <_ZN6StreamD1Ev+0x6>
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	9a 83       	std	Y+2, r25	; 0x02
 4e4:	89 83       	std	Y+1, r24	; 0x01
 4e6:	e9 81       	ldd	r30, Y+1	; 0x01
 4e8:	fa 81       	ldd	r31, Y+2	; 0x02
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	91 83       	std	Z+1, r25	; 0x01
 4f0:	80 83       	st	Z, r24
 4f2:	89 81       	ldd	r24, Y+1	; 0x01
 4f4:	9a 81       	ldd	r25, Y+2	; 0x02
 4f6:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	88 23       	and	r24, r24
 500:	01 f0       	breq	.+0      	; 0x502 <_ZN6StreamD1Ev+0x2a>
 502:	89 81       	ldd	r24, Y+1	; 0x01
 504:	9a 81       	ldd	r25, Y+2	; 0x02
 506:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	cf 91       	pop	r28
 510:	df 91       	pop	r29
 512:	08 95       	ret

00000514 <_ZN7TwoWire5writeEPKhj>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
 514:	df 93       	push	r29
 516:	cf 93       	push	r28
 518:	cd b7       	in	r28, 0x3d	; 61
 51a:	de b7       	in	r29, 0x3e	; 62
 51c:	28 97       	sbiw	r28, 0x08	; 8
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	f8 94       	cli
 522:	de bf       	out	0x3e, r29	; 62
 524:	0f be       	out	0x3f, r0	; 63
 526:	cd bf       	out	0x3d, r28	; 61
 528:	9c 83       	std	Y+4, r25	; 0x04
 52a:	8b 83       	std	Y+3, r24	; 0x03
 52c:	7e 83       	std	Y+6, r23	; 0x06
 52e:	6d 83       	std	Y+5, r22	; 0x05
 530:	58 87       	std	Y+8, r21	; 0x08
 532:	4f 83       	std	Y+7, r20	; 0x07
{
  if(transmitting){
 534:	80 91 00 00 	lds	r24, 0x0000
 538:	88 23       	and	r24, r24
 53a:	01 f0       	breq	.+0      	; 0x53c <_ZN7TwoWire5writeEPKhj+0x28>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 53c:	1a 82       	std	Y+2, r1	; 0x02
 53e:	19 82       	std	Y+1, r1	; 0x01
 540:	00 c0       	rjmp	.+0      	; 0x542 <_ZN7TwoWire5writeEPKhj+0x2e>
      write(data[i]);
 542:	eb 81       	ldd	r30, Y+3	; 0x03
 544:	fc 81       	ldd	r31, Y+4	; 0x04
 546:	80 81       	ld	r24, Z
 548:	91 81       	ldd	r25, Z+1	; 0x01
 54a:	fc 01       	movw	r30, r24
 54c:	34 96       	adiw	r30, 0x04	; 4
 54e:	40 81       	ld	r20, Z
 550:	51 81       	ldd	r21, Z+1	; 0x01
 552:	2d 81       	ldd	r18, Y+5	; 0x05
 554:	3e 81       	ldd	r19, Y+6	; 0x06
 556:	89 81       	ldd	r24, Y+1	; 0x01
 558:	9a 81       	ldd	r25, Y+2	; 0x02
 55a:	f9 01       	movw	r30, r18
 55c:	e8 0f       	add	r30, r24
 55e:	f9 1f       	adc	r31, r25
 560:	20 81       	ld	r18, Z
 562:	8b 81       	ldd	r24, Y+3	; 0x03
 564:	9c 81       	ldd	r25, Y+4	; 0x04
 566:	62 2f       	mov	r22, r18
 568:	fa 01       	movw	r30, r20
 56a:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 56c:	89 81       	ldd	r24, Y+1	; 0x01
 56e:	9a 81       	ldd	r25, Y+2	; 0x02
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	9a 83       	std	Y+2, r25	; 0x02
 574:	89 83       	std	Y+1, r24	; 0x01
 576:	29 81       	ldd	r18, Y+1	; 0x01
 578:	3a 81       	ldd	r19, Y+2	; 0x02
 57a:	8f 81       	ldd	r24, Y+7	; 0x07
 57c:	98 85       	ldd	r25, Y+8	; 0x08
 57e:	28 17       	cp	r18, r24
 580:	39 07       	cpc	r19, r25
 582:	00 f0       	brcs	.+0      	; 0x584 <_ZN7TwoWire5writeEPKhj+0x70>
 584:	00 c0       	rjmp	.+0      	; 0x586 <_ZN7TwoWire5writeEPKhj+0x72>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
 586:	2f 81       	ldd	r18, Y+7	; 0x07
 588:	8d 81       	ldd	r24, Y+5	; 0x05
 58a:	9e 81       	ldd	r25, Y+6	; 0x06
 58c:	62 2f       	mov	r22, r18
 58e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
  }
  return quantity;
 592:	8f 81       	ldd	r24, Y+7	; 0x07
 594:	98 85       	ldd	r25, Y+8	; 0x08
}
 596:	28 96       	adiw	r28, 0x08	; 8
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	f8 94       	cli
 59c:	de bf       	out	0x3e, r29	; 62
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	cd bf       	out	0x3d, r28	; 61
 5a2:	cf 91       	pop	r28
 5a4:	df 91       	pop	r29
 5a6:	08 95       	ret

000005a8 <_ZN7TwoWire5writeEh>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
 5a8:	df 93       	push	r29
 5aa:	cf 93       	push	r28
 5ac:	00 d0       	rcall	.+0      	; 0x5ae <_ZN7TwoWire5writeEh+0x6>
 5ae:	00 d0       	rcall	.+0      	; 0x5b0 <_ZN7TwoWire5writeEh+0x8>
 5b0:	0f 92       	push	r0
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	9a 83       	std	Y+2, r25	; 0x02
 5b8:	89 83       	std	Y+1, r24	; 0x01
 5ba:	6b 83       	std	Y+3, r22	; 0x03
{
  if(transmitting){
 5bc:	80 91 00 00 	lds	r24, 0x0000
 5c0:	88 23       	and	r24, r24
 5c2:	01 f0       	breq	.+0      	; 0x5c4 <_ZN7TwoWire5writeEh+0x1c>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 5c4:	80 91 00 00 	lds	r24, 0x0000
 5c8:	80 32       	cpi	r24, 0x20	; 32
 5ca:	00 f0       	brcs	.+0      	; 0x5cc <_ZN7TwoWire5writeEh+0x24>
      setWriteError();
 5cc:	89 81       	ldd	r24, Y+1	; 0x01
 5ce:	9a 81       	ldd	r25, Y+2	; 0x02
 5d0:	61 e0       	ldi	r22, 0x01	; 1
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
      return 0;
 5d8:	1d 82       	std	Y+5, r1	; 0x05
 5da:	1c 82       	std	Y+4, r1	; 0x04
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <_ZN7TwoWire5writeEh+0x36>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 5de:	80 91 00 00 	lds	r24, 0x0000
 5e2:	88 2f       	mov	r24, r24
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	2b 81       	ldd	r18, Y+3	; 0x03
 5e8:	fc 01       	movw	r30, r24
 5ea:	e0 50       	subi	r30, 0x00	; 0
 5ec:	f0 40       	sbci	r31, 0x00	; 0
 5ee:	20 83       	st	Z, r18
    ++txBufferIndex;
 5f0:	80 91 00 00 	lds	r24, 0x0000
 5f4:	8f 5f       	subi	r24, 0xFF	; 255
 5f6:	80 93 00 00 	sts	0x0000, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
 5fa:	80 91 00 00 	lds	r24, 0x0000
 5fe:	80 93 00 00 	sts	0x0000, r24
 602:	00 c0       	rjmp	.+0      	; 0x604 <_ZN7TwoWire5writeEh+0x5c>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
 604:	ce 01       	movw	r24, r28
 606:	03 96       	adiw	r24, 0x03	; 3
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
  }
  return 1;
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	9d 83       	std	Y+5, r25	; 0x05
 614:	8c 83       	std	Y+4, r24	; 0x04
 616:	8c 81       	ldd	r24, Y+4	; 0x04
 618:	9d 81       	ldd	r25, Y+5	; 0x05
}
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	0f 90       	pop	r0
 622:	0f 90       	pop	r0
 624:	cf 91       	pop	r28
 626:	df 91       	pop	r29
 628:	08 95       	ret

0000062a <_ZN7TwoWire15endTransmissionEh>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
 62a:	0f 93       	push	r16
 62c:	df 93       	push	r29
 62e:	cf 93       	push	r28
 630:	00 d0       	rcall	.+0      	; 0x632 <_ZN7TwoWire15endTransmissionEh+0x8>
 632:	00 d0       	rcall	.+0      	; 0x634 <_ZN7TwoWire15endTransmissionEh+0xa>
 634:	cd b7       	in	r28, 0x3d	; 61
 636:	de b7       	in	r29, 0x3e	; 62
 638:	9b 83       	std	Y+3, r25	; 0x03
 63a:	8a 83       	std	Y+2, r24	; 0x02
 63c:	6c 83       	std	Y+4, r22	; 0x04
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
 63e:	80 91 00 00 	lds	r24, 0x0000
 642:	90 91 00 00 	lds	r25, 0x0000
 646:	20 e0       	ldi	r18, 0x00	; 0
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	b9 01       	movw	r22, r18
 64c:	49 2f       	mov	r20, r25
 64e:	21 e0       	ldi	r18, 0x01	; 1
 650:	0c 81       	ldd	r16, Y+4	; 0x04
 652:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 656:	89 83       	std	Y+1, r24	; 0x01
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 658:	10 92 00 00 	sts	0x0000, r1
  txBufferLength = 0;
 65c:	10 92 00 00 	sts	0x0000, r1
  // indicate that we are done transmitting
  transmitting = 0;
 660:	10 92 00 00 	sts	0x0000, r1
  return ret;
 664:	89 81       	ldd	r24, Y+1	; 0x01
}
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	cf 91       	pop	r28
 670:	df 91       	pop	r29
 672:	0f 91       	pop	r16
 674:	08 95       	ret

00000676 <_ZN7TwoWire15endTransmissionEv>:

//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
 676:	df 93       	push	r29
 678:	cf 93       	push	r28
 67a:	00 d0       	rcall	.+0      	; 0x67c <_ZN7TwoWire15endTransmissionEv+0x6>
 67c:	cd b7       	in	r28, 0x3d	; 61
 67e:	de b7       	in	r29, 0x3e	; 62
 680:	9a 83       	std	Y+2, r25	; 0x02
 682:	89 83       	std	Y+1, r24	; 0x01
{
  return endTransmission(true);
 684:	89 81       	ldd	r24, Y+1	; 0x01
 686:	9a 81       	ldd	r25, Y+2	; 0x02
 688:	61 e0       	ldi	r22, 0x01	; 1
 68a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
}
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	cf 91       	pop	r28
 694:	df 91       	pop	r29
 696:	08 95       	ret

00000698 <_ZN7TwoWire11requestFromEhhh>:
void TwoWire::begin(int address)
{
  begin((uint8_t)address);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
 698:	df 93       	push	r29
 69a:	cf 93       	push	r28
 69c:	00 d0       	rcall	.+0      	; 0x69e <_ZN7TwoWire11requestFromEhhh+0x6>
 69e:	00 d0       	rcall	.+0      	; 0x6a0 <_ZN7TwoWire11requestFromEhhh+0x8>
 6a0:	00 d0       	rcall	.+0      	; 0x6a2 <_ZN7TwoWire11requestFromEhhh+0xa>
 6a2:	cd b7       	in	r28, 0x3d	; 61
 6a4:	de b7       	in	r29, 0x3e	; 62
 6a6:	9b 83       	std	Y+3, r25	; 0x03
 6a8:	8a 83       	std	Y+2, r24	; 0x02
 6aa:	6c 83       	std	Y+4, r22	; 0x04
 6ac:	4d 83       	std	Y+5, r20	; 0x05
 6ae:	2e 83       	std	Y+6, r18	; 0x06
{
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 6b0:	8d 81       	ldd	r24, Y+5	; 0x05
 6b2:	81 32       	cpi	r24, 0x21	; 33
 6b4:	00 f0       	brcs	.+0      	; 0x6b6 <_ZN7TwoWire11requestFromEhhh+0x1e>
    quantity = BUFFER_LENGTH;
 6b6:	80 e2       	ldi	r24, 0x20	; 32
 6b8:	8d 83       	std	Y+5, r24	; 0x05
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
 6ba:	20 e0       	ldi	r18, 0x00	; 0
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	8c 81       	ldd	r24, Y+4	; 0x04
 6c0:	b9 01       	movw	r22, r18
 6c2:	4d 81       	ldd	r20, Y+5	; 0x05
 6c4:	2e 81       	ldd	r18, Y+6	; 0x06
 6c6:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
 6ca:	89 83       	std	Y+1, r24	; 0x01
  // set rx buffer iterator vars
  rxBufferIndex = 0;
 6cc:	10 92 00 00 	sts	0x0000, r1
  rxBufferLength = read;
 6d0:	89 81       	ldd	r24, Y+1	; 0x01
 6d2:	80 93 00 00 	sts	0x0000, r24

  return read;
 6d6:	89 81       	ldd	r24, Y+1	; 0x01
}
 6d8:	26 96       	adiw	r28, 0x06	; 6
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	f8 94       	cli
 6de:	de bf       	out	0x3e, r29	; 62
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	cd bf       	out	0x3d, r28	; 61
 6e4:	cf 91       	pop	r28
 6e6:	df 91       	pop	r29
 6e8:	08 95       	ret

000006ea <_ZN7TwoWire11requestFromEiii>:
uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
 6ea:	df 93       	push	r29
 6ec:	cf 93       	push	r28
 6ee:	cd b7       	in	r28, 0x3d	; 61
 6f0:	de b7       	in	r29, 0x3e	; 62
 6f2:	28 97       	sbiw	r28, 0x08	; 8
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	f8 94       	cli
 6f8:	de bf       	out	0x3e, r29	; 62
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	cd bf       	out	0x3d, r28	; 61
 6fe:	9a 83       	std	Y+2, r25	; 0x02
 700:	89 83       	std	Y+1, r24	; 0x01
 702:	7c 83       	std	Y+4, r23	; 0x04
 704:	6b 83       	std	Y+3, r22	; 0x03
 706:	5e 83       	std	Y+6, r21	; 0x06
 708:	4d 83       	std	Y+5, r20	; 0x05
 70a:	38 87       	std	Y+8, r19	; 0x08
 70c:	2f 83       	std	Y+7, r18	; 0x07
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 70e:	2b 81       	ldd	r18, Y+3	; 0x03
 710:	3d 81       	ldd	r19, Y+5	; 0x05
 712:	5f 81       	ldd	r21, Y+7	; 0x07
 714:	89 81       	ldd	r24, Y+1	; 0x01
 716:	9a 81       	ldd	r25, Y+2	; 0x02
 718:	62 2f       	mov	r22, r18
 71a:	43 2f       	mov	r20, r19
 71c:	25 2f       	mov	r18, r21
 71e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
}
 722:	28 96       	adiw	r28, 0x08	; 8
 724:	0f b6       	in	r0, 0x3f	; 63
 726:	f8 94       	cli
 728:	de bf       	out	0x3e, r29	; 62
 72a:	0f be       	out	0x3f, r0	; 63
 72c:	cd bf       	out	0x3d, r28	; 61
 72e:	cf 91       	pop	r28
 730:	df 91       	pop	r29
 732:	08 95       	ret

00000734 <_ZN7TwoWire11requestFromEii>:
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
 734:	df 93       	push	r29
 736:	cf 93       	push	r28
 738:	00 d0       	rcall	.+0      	; 0x73a <_ZN7TwoWire11requestFromEii+0x6>
 73a:	00 d0       	rcall	.+0      	; 0x73c <_ZN7TwoWire11requestFromEii+0x8>
 73c:	00 d0       	rcall	.+0      	; 0x73e <_ZN7TwoWire11requestFromEii+0xa>
 73e:	cd b7       	in	r28, 0x3d	; 61
 740:	de b7       	in	r29, 0x3e	; 62
 742:	9a 83       	std	Y+2, r25	; 0x02
 744:	89 83       	std	Y+1, r24	; 0x01
 746:	7c 83       	std	Y+4, r23	; 0x04
 748:	6b 83       	std	Y+3, r22	; 0x03
 74a:	5e 83       	std	Y+6, r21	; 0x06
 74c:	4d 83       	std	Y+5, r20	; 0x05
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 74e:	2b 81       	ldd	r18, Y+3	; 0x03
 750:	3d 81       	ldd	r19, Y+5	; 0x05
 752:	89 81       	ldd	r24, Y+1	; 0x01
 754:	9a 81       	ldd	r25, Y+2	; 0x02
 756:	62 2f       	mov	r22, r18
 758:	43 2f       	mov	r20, r19
 75a:	21 e0       	ldi	r18, 0x01	; 1
 75c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
}
 760:	26 96       	adiw	r28, 0x06	; 6
 762:	0f b6       	in	r0, 0x3f	; 63
 764:	f8 94       	cli
 766:	de bf       	out	0x3e, r29	; 62
 768:	0f be       	out	0x3f, r0	; 63
 76a:	cd bf       	out	0x3d, r28	; 61
 76c:	cf 91       	pop	r28
 76e:	df 91       	pop	r29
 770:	08 95       	ret

00000772 <_ZN7TwoWire11requestFromEhh>:
  rxBufferLength = read;

  return read;
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
 772:	df 93       	push	r29
 774:	cf 93       	push	r28
 776:	00 d0       	rcall	.+0      	; 0x778 <_ZN7TwoWire11requestFromEhh+0x6>
 778:	00 d0       	rcall	.+0      	; 0x77a <_ZN7TwoWire11requestFromEhh+0x8>
 77a:	cd b7       	in	r28, 0x3d	; 61
 77c:	de b7       	in	r29, 0x3e	; 62
 77e:	9a 83       	std	Y+2, r25	; 0x02
 780:	89 83       	std	Y+1, r24	; 0x01
 782:	6b 83       	std	Y+3, r22	; 0x03
 784:	4c 83       	std	Y+4, r20	; 0x04
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 786:	89 81       	ldd	r24, Y+1	; 0x01
 788:	9a 81       	ldd	r25, Y+2	; 0x02
 78a:	6b 81       	ldd	r22, Y+3	; 0x03
 78c:	4c 81       	ldd	r20, Y+4	; 0x04
 78e:	21 e0       	ldi	r18, 0x01	; 1
 790:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
}
 794:	0f 90       	pop	r0
 796:	0f 90       	pop	r0
 798:	0f 90       	pop	r0
 79a:	0f 90       	pop	r0
 79c:	cf 91       	pop	r28
 79e:	df 91       	pop	r29
 7a0:	08 95       	ret

000007a2 <_ZN7TwoWire5beginEv>:
{
}

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
 7a2:	df 93       	push	r29
 7a4:	cf 93       	push	r28
 7a6:	00 d0       	rcall	.+0      	; 0x7a8 <_ZN7TwoWire5beginEv+0x6>
 7a8:	cd b7       	in	r28, 0x3d	; 61
 7aa:	de b7       	in	r29, 0x3e	; 62
 7ac:	9a 83       	std	Y+2, r25	; 0x02
 7ae:	89 83       	std	Y+1, r24	; 0x01
{
  rxBufferIndex = 0;
 7b0:	10 92 00 00 	sts	0x0000, r1
  rxBufferLength = 0;
 7b4:	10 92 00 00 	sts	0x0000, r1

  txBufferIndex = 0;
 7b8:	10 92 00 00 	sts	0x0000, r1
  txBufferLength = 0;
 7bc:	10 92 00 00 	sts	0x0000, r1

  twi_init();
 7c0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
}
 7c4:	0f 90       	pop	r0
 7c6:	0f 90       	pop	r0
 7c8:	cf 91       	pop	r28
 7ca:	df 91       	pop	r29
 7cc:	08 95       	ret

000007ce <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
 7ce:	df 93       	push	r29
 7d0:	cf 93       	push	r28
 7d2:	00 d0       	rcall	.+0      	; 0x7d4 <_ZN7TwoWire5beginEh+0x6>
 7d4:	0f 92       	push	r0
 7d6:	cd b7       	in	r28, 0x3d	; 61
 7d8:	de b7       	in	r29, 0x3e	; 62
 7da:	9a 83       	std	Y+2, r25	; 0x02
 7dc:	89 83       	std	Y+1, r24	; 0x01
 7de:	6b 83       	std	Y+3, r22	; 0x03
{
  twi_setAddress(address);
 7e0:	8b 81       	ldd	r24, Y+3	; 0x03
 7e2:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
  twi_attachSlaveTxEvent(onRequestService);
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
  twi_attachSlaveRxEvent(onReceiveService);
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
  begin();
 7f6:	89 81       	ldd	r24, Y+1	; 0x01
 7f8:	9a 81       	ldd	r25, Y+2	; 0x02
 7fa:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
}
 7fe:	0f 90       	pop	r0
 800:	0f 90       	pop	r0
 802:	0f 90       	pop	r0
 804:	cf 91       	pop	r28
 806:	df 91       	pop	r29
 808:	08 95       	ret

0000080a <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
 80a:	df 93       	push	r29
 80c:	cf 93       	push	r28
 80e:	00 d0       	rcall	.+0      	; 0x810 <_ZN7TwoWire5beginEi+0x6>
 810:	00 d0       	rcall	.+0      	; 0x812 <_ZN7TwoWire5beginEi+0x8>
 812:	cd b7       	in	r28, 0x3d	; 61
 814:	de b7       	in	r29, 0x3e	; 62
 816:	9a 83       	std	Y+2, r25	; 0x02
 818:	89 83       	std	Y+1, r24	; 0x01
 81a:	7c 83       	std	Y+4, r23	; 0x04
 81c:	6b 83       	std	Y+3, r22	; 0x03
{
  begin((uint8_t)address);
 81e:	2b 81       	ldd	r18, Y+3	; 0x03
 820:	89 81       	ldd	r24, Y+1	; 0x01
 822:	9a 81       	ldd	r25, Y+2	; 0x02
 824:	62 2f       	mov	r22, r18
 826:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print13setWriteErrorEi>
}
 82a:	0f 90       	pop	r0
 82c:	0f 90       	pop	r0
 82e:	0f 90       	pop	r0
 830:	0f 90       	pop	r0
 832:	cf 91       	pop	r28
 834:	df 91       	pop	r29
 836:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000174  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000003a9  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING

new.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000124  2**0
                  ALLOC
  3 .stab         0000036c  00000000  00000000  00000124  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000568  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__cxa_guard_acquire>:
void operator delete[](void * ptr)
{
	free(ptr);
}

int __cxa_guard_acquire(__guard *g)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <__cxa_guard_acquire+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <__cxa_guard_acquire+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
{
	return !*(char *)(g);
  10:	e9 81       	ldd	r30, Y+1	; 0x01
  12:	fa 81       	ldd	r31, Y+2	; 0x02
  14:	80 81       	ld	r24, Z
  16:	1c 82       	std	Y+4, r1	; 0x04
  18:	1b 82       	std	Y+3, r1	; 0x03
  1a:	88 23       	and	r24, r24
  1c:	01 f4       	brne	.+0      	; 0x1e <__cxa_guard_acquire+0x1e>
  1e:	81 e0       	ldi	r24, 0x01	; 1
  20:	90 e0       	ldi	r25, 0x00	; 0
  22:	9c 83       	std	Y+4, r25	; 0x04
  24:	8b 83       	std	Y+3, r24	; 0x03
  26:	8b 81       	ldd	r24, Y+3	; 0x03
  28:	9c 81       	ldd	r25, Y+4	; 0x04
}
  2a:	0f 90       	pop	r0
  2c:	0f 90       	pop	r0
  2e:	0f 90       	pop	r0
  30:	0f 90       	pop	r0
  32:	cf 91       	pop	r28
  34:	df 91       	pop	r29
  36:	08 95       	ret

00000038 <__cxa_guard_release>:

void __cxa_guard_release (__guard *g)
  38:	df 93       	push	r29
  3a:	cf 93       	push	r28
  3c:	00 d0       	rcall	.+0      	; 0x3e <__cxa_guard_release+0x6>
  3e:	cd b7       	in	r28, 0x3d	; 61
  40:	de b7       	in	r29, 0x3e	; 62
  42:	9a 83       	std	Y+2, r25	; 0x02
  44:	89 83       	std	Y+1, r24	; 0x01
{
	*(char *)g = 1;
  46:	e9 81       	ldd	r30, Y+1	; 0x01
  48:	fa 81       	ldd	r31, Y+2	; 0x02
  4a:	81 e0       	ldi	r24, 0x01	; 1
  4c:	80 83       	st	Z, r24
}
  4e:	0f 90       	pop	r0
  50:	0f 90       	pop	r0
  52:	cf 91       	pop	r28
  54:	df 91       	pop	r29
  56:	08 95       	ret

00000058 <__cxa_guard_abort>:

void __cxa_guard_abort (__guard *)
  58:	df 93       	push	r29
  5a:	cf 93       	push	r28
  5c:	00 d0       	rcall	.+0      	; 0x5e <__cxa_guard_abort+0x6>
  5e:	cd b7       	in	r28, 0x3d	; 61
  60:	de b7       	in	r29, 0x3e	; 62
  62:	9a 83       	std	Y+2, r25	; 0x02
  64:	89 83       	std	Y+1, r24	; 0x01
{
}
  66:	0f 90       	pop	r0
  68:	0f 90       	pop	r0
  6a:	cf 91       	pop	r28
  6c:	df 91       	pop	r29
  6e:	08 95       	ret

00000070 <_ZdaPv>:
void operator delete(void * ptr)
{
	free(ptr);
}

void operator delete[](void * ptr)
  70:	df 93       	push	r29
  72:	cf 93       	push	r28
  74:	00 d0       	rcall	.+0      	; 0x76 <_ZdaPv+0x6>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	9a 83       	std	Y+2, r25	; 0x02
  7c:	89 83       	std	Y+1, r24	; 0x01
{
	free(ptr);
  7e:	89 81       	ldd	r24, Y+1	; 0x01
  80:	9a 81       	ldd	r25, Y+2	; 0x02
  82:	0e 94 00 00 	call	0	; 0x0 <__cxa_guard_acquire>
}
  86:	0f 90       	pop	r0
  88:	0f 90       	pop	r0
  8a:	cf 91       	pop	r28
  8c:	df 91       	pop	r29
  8e:	08 95       	ret

00000090 <_ZdlPv>:
void * operator new[](size_t size)
{
	return malloc(size);
}

void operator delete(void * ptr)
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	00 d0       	rcall	.+0      	; 0x96 <_ZdlPv+0x6>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	9a 83       	std	Y+2, r25	; 0x02
  9c:	89 83       	std	Y+1, r24	; 0x01
{
	free(ptr);
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	9a 81       	ldd	r25, Y+2	; 0x02
  a2:	0e 94 00 00 	call	0	; 0x0 <__cxa_guard_acquire>
}
  a6:	0f 90       	pop	r0
  a8:	0f 90       	pop	r0
  aa:	cf 91       	pop	r28
  ac:	df 91       	pop	r29
  ae:	08 95       	ret

000000b0 <_Znaj>:
void * operator new(size_t size)
{
	return malloc(size);
}

void * operator new[](size_t size)
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	00 d0       	rcall	.+0      	; 0xb6 <_Znaj+0x6>
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	9a 83       	std	Y+2, r25	; 0x02
  bc:	89 83       	std	Y+1, r24	; 0x01
{
	return malloc(size);
  be:	89 81       	ldd	r24, Y+1	; 0x01
  c0:	9a 81       	ldd	r25, Y+2	; 0x02
  c2:	0e 94 00 00 	call	0	; 0x0 <__cxa_guard_acquire>
}
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	08 95       	ret

000000d0 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
  d0:	df 93       	push	r29
  d2:	cf 93       	push	r28
  d4:	00 d0       	rcall	.+0      	; 0xd6 <_Znwj+0x6>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	9a 83       	std	Y+2, r25	; 0x02
  dc:	89 83       	std	Y+1, r24	; 0x01
{
	return malloc(size);
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	9a 81       	ldd	r25, Y+2	; 0x02
  e2:	0e 94 00 00 	call	0	; 0x0 <__cxa_guard_acquire>
}
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	cf 91       	pop	r28
  ec:	df 91       	pop	r29
  ee:	08 95       	ret

twi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007cc  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000f  00000000  00000000  00000800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006e  00000000  00000000  0000080f  2**0
                  ALLOC
  3 .stab         00000e58  00000000  00000000  00000810  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000d76  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <twi_init>:
 * Desc     readys twi pins and sets twi bitrate
 * Input    none
 * Output   none
 */
void twi_init(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
  // initialize state
  twi_state = TWI_READY;
   8:	10 92 00 00 	sts	0x0000, r1
  twi_sendStop = true;		// default value
   c:	81 e0       	ldi	r24, 0x01	; 1
   e:	80 93 00 00 	sts	0x0000, r24
  twi_inRepStart = false;
  12:	10 92 00 00 	sts	0x0000, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
  16:	80 91 00 00 	lds	r24, 0x0000
  1a:	61 e0       	ldi	r22, 0x01	; 1
  1c:	0e 94 00 00 	call	0	; 0x0 <twi_init>
  digitalWrite(SCL, 1);
  20:	80 91 00 00 	lds	r24, 0x0000
  24:	61 e0       	ldi	r22, 0x01	; 1
  26:	0e 94 00 00 	call	0	; 0x0 <twi_init>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
  2a:	a9 eb       	ldi	r26, 0xB9	; 185
  2c:	b0 e0       	ldi	r27, 0x00	; 0
  2e:	e9 eb       	ldi	r30, 0xB9	; 185
  30:	f0 e0       	ldi	r31, 0x00	; 0
  32:	80 81       	ld	r24, Z
  34:	8e 7f       	andi	r24, 0xFE	; 254
  36:	8c 93       	st	X, r24
  cbi(TWSR, TWPS1);
  38:	a9 eb       	ldi	r26, 0xB9	; 185
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e9 eb       	ldi	r30, 0xB9	; 185
  3e:	f0 e0       	ldi	r31, 0x00	; 0
  40:	80 81       	ld	r24, Z
  42:	8d 7f       	andi	r24, 0xFD	; 253
  44:	8c 93       	st	X, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
  46:	e8 eb       	ldi	r30, 0xB8	; 184
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	80 e2       	ldi	r24, 0x20	; 32
  4c:	80 83       	st	Z, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
  4e:	ec eb       	ldi	r30, 0xBC	; 188
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	85 e4       	ldi	r24, 0x45	; 69
  54:	80 83       	st	Z, r24
}
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	08 95       	ret

0000005c <twi_setAddress>:
 * Desc     sets slave address and enables interrupt
 * Input    none
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  5c:	df 93       	push	r29
  5e:	cf 93       	push	r28
  60:	0f 92       	push	r0
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
  66:	89 83       	std	Y+1, r24	; 0x01
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
  68:	ea eb       	ldi	r30, 0xBA	; 186
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	89 81       	ldd	r24, Y+1	; 0x01
  6e:	88 0f       	add	r24, r24
  70:	80 83       	st	Z, r24
}
  72:	0f 90       	pop	r0
  74:	cf 91       	pop	r28
  76:	df 91       	pop	r29
  78:	08 95       	ret

0000007a <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  7a:	df 93       	push	r29
  7c:	cf 93       	push	r28
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	de b7       	in	r29, 0x3e	; 62
  82:	27 97       	sbiw	r28, 0x07	; 7
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	f8 94       	cli
  88:	de bf       	out	0x3e, r29	; 62
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	cd bf       	out	0x3d, r28	; 61
  8e:	8a 83       	std	Y+2, r24	; 0x02
  90:	7c 83       	std	Y+4, r23	; 0x04
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4d 83       	std	Y+5, r20	; 0x05
  96:	2e 83       	std	Y+6, r18	; 0x06
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
  98:	8d 81       	ldd	r24, Y+5	; 0x05
  9a:	81 32       	cpi	r24, 0x21	; 33
  9c:	00 f0       	brcs	.+0      	; 0x9e <twi_readFrom+0x24>
    return 0;
  9e:	1f 82       	std	Y+7, r1	; 0x07
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <twi_readFrom+0x28>
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
  a2:	80 91 00 00 	lds	r24, 0x0000
  a6:	88 23       	and	r24, r24
  a8:	01 f4       	brne	.+0      	; 0xaa <twi_readFrom+0x30>
    continue;
  }
  twi_state = TWI_MRX;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	80 93 00 00 	sts	0x0000, r24
  twi_sendStop = sendStop;
  b0:	8e 81       	ldd	r24, Y+6	; 0x06
  b2:	80 93 00 00 	sts	0x0000, r24
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	80 93 00 00 	sts	0x0000, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  bc:	10 92 00 00 	sts	0x0000, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
  c0:	8d 81       	ldd	r24, Y+5	; 0x05
  c2:	81 50       	subi	r24, 0x01	; 1
  c4:	80 93 00 00 	sts	0x0000, r24
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 00 00 	sts	0x0000, r24
  twi_slarw |= address << 1;
  ce:	8a 81       	ldd	r24, Y+2	; 0x02
  d0:	88 2f       	mov	r24, r24
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	98 2f       	mov	r25, r24
  da:	80 91 00 00 	lds	r24, 0x0000
  de:	89 2b       	or	r24, r25
  e0:	80 93 00 00 	sts	0x0000, r24

  if (true == twi_inRepStart) {
  e4:	80 91 00 00 	lds	r24, 0x0000
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	01 f4       	brne	.+0      	; 0xec <twi_readFrom+0x72>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
  ec:	10 92 00 00 	sts	0x0000, r1
    TWDR = twi_slarw;
  f0:	eb eb       	ldi	r30, 0xBB	; 187
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 91 00 00 	lds	r24, 0x0000
  f8:	80 83       	st	Z, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
  fa:	ec eb       	ldi	r30, 0xBC	; 188
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	85 ec       	ldi	r24, 0xC5	; 197
 100:	80 83       	st	Z, r24
 102:	00 c0       	rjmp	.+0      	; 0x104 <twi_readFrom+0x8a>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
 104:	ec eb       	ldi	r30, 0xBC	; 188
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	85 ee       	ldi	r24, 0xE5	; 229
 10a:	80 83       	st	Z, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
 10c:	80 91 00 00 	lds	r24, 0x0000
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	01 f0       	breq	.+0      	; 0x114 <twi_readFrom+0x9a>
    continue;
  }

  if (twi_masterBufferIndex < length)
 114:	90 91 00 00 	lds	r25, 0x0000
 118:	8d 81       	ldd	r24, Y+5	; 0x05
 11a:	98 17       	cp	r25, r24
 11c:	00 f4       	brcc	.+0      	; 0x11e <twi_readFrom+0xa4>
    length = twi_masterBufferIndex;
 11e:	80 91 00 00 	lds	r24, 0x0000
 122:	8d 83       	std	Y+5, r24	; 0x05

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
 124:	19 82       	std	Y+1, r1	; 0x01
 126:	00 c0       	rjmp	.+0      	; 0x128 <twi_readFrom+0xae>
    data[i] = twi_masterBuffer[i];
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	28 2f       	mov	r18, r24
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	9c 81       	ldd	r25, Y+4	; 0x04
 132:	dc 01       	movw	r26, r24
 134:	a2 0f       	add	r26, r18
 136:	b3 1f       	adc	r27, r19
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	e0 50       	subi	r30, 0x00	; 0
 142:	f0 40       	sbci	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	8c 93       	st	X, r24

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	89 83       	std	Y+1, r24	; 0x01
 14e:	99 81       	ldd	r25, Y+1	; 0x01
 150:	8d 81       	ldd	r24, Y+5	; 0x05
 152:	98 17       	cp	r25, r24
 154:	00 f0       	brcs	.+0      	; 0x156 <twi_readFrom+0xdc>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
 156:	8d 81       	ldd	r24, Y+5	; 0x05
 158:	8f 83       	std	Y+7, r24	; 0x07
 15a:	8f 81       	ldd	r24, Y+7	; 0x07
}
 15c:	27 96       	adiw	r28, 0x07	; 7
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	f8 94       	cli
 162:	de bf       	out	0x3e, r29	; 62
 164:	0f be       	out	0x3f, r0	; 63
 166:	cd bf       	out	0x3d, r28	; 61
 168:	cf 91       	pop	r28
 16a:	df 91       	pop	r29
 16c:	08 95       	ret

0000016e <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
 16e:	0f 93       	push	r16
 170:	df 93       	push	r29
 172:	cf 93       	push	r28
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	28 97       	sbiw	r28, 0x08	; 8
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
 17e:	de bf       	out	0x3e, r29	; 62
 180:	0f be       	out	0x3f, r0	; 63
 182:	cd bf       	out	0x3d, r28	; 61
 184:	8a 83       	std	Y+2, r24	; 0x02
 186:	7c 83       	std	Y+4, r23	; 0x04
 188:	6b 83       	std	Y+3, r22	; 0x03
 18a:	4d 83       	std	Y+5, r20	; 0x05
 18c:	2e 83       	std	Y+6, r18	; 0x06
 18e:	0f 83       	std	Y+7, r16	; 0x07
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
 190:	8d 81       	ldd	r24, Y+5	; 0x05
 192:	81 32       	cpi	r24, 0x21	; 33
 194:	00 f0       	brcs	.+0      	; 0x196 <twi_writeTo+0x28>
    return 1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	88 87       	std	Y+8, r24	; 0x08
 19a:	00 c0       	rjmp	.+0      	; 0x19c <twi_writeTo+0x2e>
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
 19c:	80 91 00 00 	lds	r24, 0x0000
 1a0:	88 23       	and	r24, r24
 1a2:	01 f4       	brne	.+0      	; 0x1a4 <twi_writeTo+0x36>
    continue;
  }
  twi_state = TWI_MTX;
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	80 93 00 00 	sts	0x0000, r24
  twi_sendStop = sendStop;
 1aa:	8f 81       	ldd	r24, Y+7	; 0x07
 1ac:	80 93 00 00 	sts	0x0000, r24
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	80 93 00 00 	sts	0x0000, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
 1b6:	10 92 00 00 	sts	0x0000, r1
  twi_masterBufferLength = length;
 1ba:	8d 81       	ldd	r24, Y+5	; 0x05
 1bc:	80 93 00 00 	sts	0x0000, r24
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
 1c0:	19 82       	std	Y+1, r1	; 0x01
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <twi_writeTo+0x56>
    twi_masterBuffer[i] = data[i];
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	48 2f       	mov	r20, r24
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	9c 81       	ldd	r25, Y+4	; 0x04
 1d4:	fc 01       	movw	r30, r24
 1d6:	e2 0f       	add	r30, r18
 1d8:	f3 1f       	adc	r31, r19
 1da:	80 81       	ld	r24, Z
 1dc:	fa 01       	movw	r30, r20
 1de:	e0 50       	subi	r30, 0x00	; 0
 1e0:	f0 40       	sbci	r31, 0x00	; 0
 1e2:	80 83       	st	Z, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	89 83       	std	Y+1, r24	; 0x01
 1ea:	99 81       	ldd	r25, Y+1	; 0x01
 1ec:	8d 81       	ldd	r24, Y+5	; 0x05
 1ee:	98 17       	cp	r25, r24
 1f0:	00 f0       	brcs	.+0      	; 0x1f2 <twi_writeTo+0x84>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
 1f2:	10 92 00 00 	sts	0x0000, r1
  twi_slarw |= address << 1;
 1f6:	8a 81       	ldd	r24, Y+2	; 0x02
 1f8:	88 2f       	mov	r24, r24
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	98 2f       	mov	r25, r24
 202:	80 91 00 00 	lds	r24, 0x0000
 206:	89 2b       	or	r24, r25
 208:	80 93 00 00 	sts	0x0000, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
 20c:	80 91 00 00 	lds	r24, 0x0000
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	01 f4       	brne	.+0      	; 0x214 <twi_writeTo+0xa6>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
 214:	10 92 00 00 	sts	0x0000, r1
    TWDR = twi_slarw;				
 218:	eb eb       	ldi	r30, 0xBB	; 187
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 91 00 00 	lds	r24, 0x0000
 220:	80 83       	st	Z, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
 222:	ec eb       	ldi	r30, 0xBC	; 188
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	85 ec       	ldi	r24, 0xC5	; 197
 228:	80 83       	st	Z, r24
 22a:	00 c0       	rjmp	.+0      	; 0x22c <twi_writeTo+0xbe>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
 22c:	ec eb       	ldi	r30, 0xBC	; 188
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	85 ee       	ldi	r24, 0xE5	; 229
 232:	80 83       	st	Z, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
 234:	8e 81       	ldd	r24, Y+6	; 0x06
 236:	88 23       	and	r24, r24
 238:	01 f0       	breq	.+0      	; 0x23a <twi_writeTo+0xcc>
 23a:	80 91 00 00 	lds	r24, 0x0000
 23e:	82 30       	cpi	r24, 0x02	; 2
 240:	01 f0       	breq	.+0      	; 0x242 <twi_writeTo+0xd4>
    continue;
  }
  
  if (twi_error == 0xFF)
 242:	80 91 00 00 	lds	r24, 0x0000
 246:	8f 3f       	cpi	r24, 0xFF	; 255
 248:	01 f4       	brne	.+0      	; 0x24a <twi_writeTo+0xdc>
    return 0;	// success
 24a:	18 86       	std	Y+8, r1	; 0x08
 24c:	00 c0       	rjmp	.+0      	; 0x24e <twi_writeTo+0xe0>
  else if (twi_error == TW_MT_SLA_NACK)
 24e:	80 91 00 00 	lds	r24, 0x0000
 252:	80 32       	cpi	r24, 0x20	; 32
 254:	01 f4       	brne	.+0      	; 0x256 <twi_writeTo+0xe8>
    return 2;	// error: address send, nack received
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	88 87       	std	Y+8, r24	; 0x08
 25a:	00 c0       	rjmp	.+0      	; 0x25c <twi_writeTo+0xee>
  else if (twi_error == TW_MT_DATA_NACK)
 25c:	80 91 00 00 	lds	r24, 0x0000
 260:	80 33       	cpi	r24, 0x30	; 48
 262:	01 f4       	brne	.+0      	; 0x264 <twi_writeTo+0xf6>
    return 3;	// error: data send, nack received
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	88 87       	std	Y+8, r24	; 0x08
 268:	00 c0       	rjmp	.+0      	; 0x26a <twi_writeTo+0xfc>
  else
    return 4;	// other twi error
 26a:	84 e0       	ldi	r24, 0x04	; 4
 26c:	88 87       	std	Y+8, r24	; 0x08
 26e:	88 85       	ldd	r24, Y+8	; 0x08
}
 270:	28 96       	adiw	r28, 0x08	; 8
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	de bf       	out	0x3e, r29	; 62
 278:	0f be       	out	0x3f, r0	; 63
 27a:	cd bf       	out	0x3d, r28	; 61
 27c:	cf 91       	pop	r28
 27e:	df 91       	pop	r29
 280:	0f 91       	pop	r16
 282:	08 95       	ret

00000284 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
 284:	df 93       	push	r29
 286:	cf 93       	push	r28
 288:	00 d0       	rcall	.+0      	; 0x28a <twi_transmit+0x6>
 28a:	00 d0       	rcall	.+0      	; 0x28c <twi_transmit+0x8>
 28c:	0f 92       	push	r0
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	9b 83       	std	Y+3, r25	; 0x03
 294:	8a 83       	std	Y+2, r24	; 0x02
 296:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
 298:	8c 81       	ldd	r24, Y+4	; 0x04
 29a:	81 32       	cpi	r24, 0x21	; 33
 29c:	00 f0       	brcs	.+0      	; 0x29e <twi_transmit+0x1a>
    return 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	8d 83       	std	Y+5, r24	; 0x05
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <twi_transmit+0x20>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
 2a4:	80 91 00 00 	lds	r24, 0x0000
 2a8:	84 30       	cpi	r24, 0x04	; 4
 2aa:	01 f0       	breq	.+0      	; 0x2ac <twi_transmit+0x28>
    return 2;
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	8d 83       	std	Y+5, r24	; 0x05
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <twi_transmit+0x2e>
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
 2b2:	8c 81       	ldd	r24, Y+4	; 0x04
 2b4:	80 93 00 00 	sts	0x0000, r24
  for(i = 0; i < length; ++i){
 2b8:	19 82       	std	Y+1, r1	; 0x01
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <twi_transmit+0x38>
    twi_txBuffer[i] = data[i];
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	48 2f       	mov	r20, r24
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	28 2f       	mov	r18, r24
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	9b 81       	ldd	r25, Y+3	; 0x03
 2cc:	fc 01       	movw	r30, r24
 2ce:	e2 0f       	add	r30, r18
 2d0:	f3 1f       	adc	r31, r19
 2d2:	80 81       	ld	r24, Z
 2d4:	fa 01       	movw	r30, r20
 2d6:	e0 50       	subi	r30, 0x00	; 0
 2d8:	f0 40       	sbci	r31, 0x00	; 0
 2da:	80 83       	st	Z, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	89 83       	std	Y+1, r24	; 0x01
 2e2:	99 81       	ldd	r25, Y+1	; 0x01
 2e4:	8c 81       	ldd	r24, Y+4	; 0x04
 2e6:	98 17       	cp	r25, r24
 2e8:	00 f0       	brcs	.+0      	; 0x2ea <twi_transmit+0x66>
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
 2ea:	1d 82       	std	Y+5, r1	; 0x05
 2ec:	8d 81       	ldd	r24, Y+5	; 0x05
}
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	cf 91       	pop	r28
 2fa:	df 91       	pop	r29
 2fc:	08 95       	ret

000002fe <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
 2fe:	df 93       	push	r29
 300:	cf 93       	push	r28
 302:	00 d0       	rcall	.+0      	; 0x304 <twi_attachSlaveRxEvent+0x6>
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	9a 83       	std	Y+2, r25	; 0x02
 30a:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	9a 81       	ldd	r25, Y+2	; 0x02
 310:	90 93 00 00 	sts	0x0000, r25
 314:	80 93 00 00 	sts	0x0000, r24
}
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	cf 91       	pop	r28
 31e:	df 91       	pop	r29
 320:	08 95       	ret

00000322 <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
 322:	df 93       	push	r29
 324:	cf 93       	push	r28
 326:	00 d0       	rcall	.+0      	; 0x328 <twi_attachSlaveTxEvent+0x6>
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	9a 83       	std	Y+2, r25	; 0x02
 32e:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	9a 81       	ldd	r25, Y+2	; 0x02
 334:	90 93 00 00 	sts	0x0000, r25
 338:	80 93 00 00 	sts	0x0000, r24
}
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	cf 91       	pop	r28
 342:	df 91       	pop	r29
 344:	08 95       	ret

00000346 <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
 346:	df 93       	push	r29
 348:	cf 93       	push	r28
 34a:	0f 92       	push	r0
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
 350:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	88 23       	and	r24, r24
 356:	01 f0       	breq	.+0      	; 0x358 <twi_reply+0x12>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 358:	ec eb       	ldi	r30, 0xBC	; 188
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	85 ec       	ldi	r24, 0xC5	; 197
 35e:	80 83       	st	Z, r24
 360:	00 c0       	rjmp	.+0      	; 0x362 <twi_reply+0x1c>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 362:	ec eb       	ldi	r30, 0xBC	; 188
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	85 e8       	ldi	r24, 0x85	; 133
 368:	80 83       	st	Z, r24
  }
}
 36a:	0f 90       	pop	r0
 36c:	cf 91       	pop	r28
 36e:	df 91       	pop	r29
 370:	08 95       	ret

00000372 <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
 372:	df 93       	push	r29
 374:	cf 93       	push	r28
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 37a:	ec eb       	ldi	r30, 0xBC	; 188
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	85 ed       	ldi	r24, 0xD5	; 213
 380:	80 83       	st	Z, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
 382:	ec eb       	ldi	r30, 0xBC	; 188
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	88 2f       	mov	r24, r24
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	80 71       	andi	r24, 0x10	; 16
 38e:	90 70       	andi	r25, 0x00	; 0
 390:	00 97       	sbiw	r24, 0x00	; 0
 392:	01 f4       	brne	.+0      	; 0x394 <twi_stop+0x22>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
 394:	10 92 00 00 	sts	0x0000, r1
}
 398:	cf 91       	pop	r28
 39a:	df 91       	pop	r29
 39c:	08 95       	ret

0000039e <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
 39e:	df 93       	push	r29
 3a0:	cf 93       	push	r28
 3a2:	cd b7       	in	r28, 0x3d	; 61
 3a4:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 3a6:	ec eb       	ldi	r30, 0xBC	; 188
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	85 ec       	ldi	r24, 0xC5	; 197
 3ac:	80 83       	st	Z, r24

  // update twi state
  twi_state = TWI_READY;
 3ae:	10 92 00 00 	sts	0x0000, r1
}
 3b2:	cf 91       	pop	r28
 3b4:	df 91       	pop	r29
 3b6:	08 95       	ret

000003b8 <__vector_24>:

ISR(TWI_vect)
{
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	2f 93       	push	r18
 3c4:	3f 93       	push	r19
 3c6:	4f 93       	push	r20
 3c8:	5f 93       	push	r21
 3ca:	6f 93       	push	r22
 3cc:	7f 93       	push	r23
 3ce:	8f 93       	push	r24
 3d0:	9f 93       	push	r25
 3d2:	af 93       	push	r26
 3d4:	bf 93       	push	r27
 3d6:	ef 93       	push	r30
 3d8:	ff 93       	push	r31
 3da:	df 93       	push	r29
 3dc:	cf 93       	push	r28
 3de:	00 d0       	rcall	.+0      	; 0x3e0 <__vector_24+0x28>
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
 3e4:	e9 eb       	ldi	r30, 0xB9	; 185
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	88 2f       	mov	r24, r24
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	9c 01       	movw	r18, r24
 3f0:	28 7f       	andi	r18, 0xF8	; 248
 3f2:	30 70       	andi	r19, 0x00	; 0
 3f4:	3a 83       	std	Y+2, r19	; 0x02
 3f6:	29 83       	std	Y+1, r18	; 0x01
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	9a 81       	ldd	r25, Y+2	; 0x02
 3fc:	88 36       	cpi	r24, 0x68	; 104
 3fe:	91 05       	cpc	r25, r1
 400:	01 f4       	brne	.+0      	; 0x402 <__vector_24+0x4a>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__vector_24+0x4c>
 404:	29 81       	ldd	r18, Y+1	; 0x01
 406:	3a 81       	ldd	r19, Y+2	; 0x02
 408:	29 36       	cpi	r18, 0x69	; 105
 40a:	31 05       	cpc	r19, r1
 40c:	04 f0       	brlt	.+0      	; 0x40e <__vector_24+0x56>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__vector_24+0x58>
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	9a 81       	ldd	r25, Y+2	; 0x02
 414:	80 33       	cpi	r24, 0x30	; 48
 416:	91 05       	cpc	r25, r1
 418:	01 f4       	brne	.+0      	; 0x41a <__vector_24+0x62>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__vector_24+0x64>
 41c:	29 81       	ldd	r18, Y+1	; 0x01
 41e:	3a 81       	ldd	r19, Y+2	; 0x02
 420:	21 33       	cpi	r18, 0x31	; 49
 422:	31 05       	cpc	r19, r1
 424:	04 f4       	brge	.+0      	; 0x426 <__vector_24+0x6e>
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	9a 81       	ldd	r25, Y+2	; 0x02
 42a:	80 31       	cpi	r24, 0x10	; 16
 42c:	91 05       	cpc	r25, r1
 42e:	01 f4       	brne	.+0      	; 0x430 <__vector_24+0x78>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__vector_24+0x7a>
 432:	29 81       	ldd	r18, Y+1	; 0x01
 434:	3a 81       	ldd	r19, Y+2	; 0x02
 436:	21 31       	cpi	r18, 0x11	; 17
 438:	31 05       	cpc	r19, r1
 43a:	04 f4       	brge	.+0      	; 0x43c <__vector_24+0x84>
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	9a 81       	ldd	r25, Y+2	; 0x02
 440:	00 97       	sbiw	r24, 0x00	; 0
 442:	01 f4       	brne	.+0      	; 0x444 <__vector_24+0x8c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__vector_24+0x8e>
 446:	29 81       	ldd	r18, Y+1	; 0x01
 448:	3a 81       	ldd	r19, Y+2	; 0x02
 44a:	28 30       	cpi	r18, 0x08	; 8
 44c:	31 05       	cpc	r19, r1
 44e:	01 f4       	brne	.+0      	; 0x450 <__vector_24+0x98>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__vector_24+0x9a>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__vector_24+0x9c>
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	9a 81       	ldd	r25, Y+2	; 0x02
 458:	80 32       	cpi	r24, 0x20	; 32
 45a:	91 05       	cpc	r25, r1
 45c:	01 f4       	brne	.+0      	; 0x45e <__vector_24+0xa6>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__vector_24+0xa8>
 460:	29 81       	ldd	r18, Y+1	; 0x01
 462:	3a 81       	ldd	r19, Y+2	; 0x02
 464:	28 32       	cpi	r18, 0x28	; 40
 466:	31 05       	cpc	r19, r1
 468:	01 f4       	brne	.+0      	; 0x46a <__vector_24+0xb2>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__vector_24+0xb4>
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	9a 81       	ldd	r25, Y+2	; 0x02
 470:	88 31       	cpi	r24, 0x18	; 24
 472:	91 05       	cpc	r25, r1
 474:	01 f4       	brne	.+0      	; 0x476 <__vector_24+0xbe>
 476:	00 c0       	rjmp	.+0      	; 0x478 <__vector_24+0xc0>
 478:	00 c0       	rjmp	.+0      	; 0x47a <__vector_24+0xc2>
 47a:	29 81       	ldd	r18, Y+1	; 0x01
 47c:	3a 81       	ldd	r19, Y+2	; 0x02
 47e:	28 34       	cpi	r18, 0x48	; 72
 480:	31 05       	cpc	r19, r1
 482:	01 f4       	brne	.+0      	; 0x484 <__vector_24+0xcc>
 484:	00 c0       	rjmp	.+0      	; 0x486 <__vector_24+0xce>
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	9a 81       	ldd	r25, Y+2	; 0x02
 48a:	89 34       	cpi	r24, 0x49	; 73
 48c:	91 05       	cpc	r25, r1
 48e:	04 f4       	brge	.+0      	; 0x490 <__vector_24+0xd8>
 490:	29 81       	ldd	r18, Y+1	; 0x01
 492:	3a 81       	ldd	r19, Y+2	; 0x02
 494:	28 33       	cpi	r18, 0x38	; 56
 496:	31 05       	cpc	r19, r1
 498:	01 f4       	brne	.+0      	; 0x49a <__vector_24+0xe2>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <__vector_24+0xe4>
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	9a 81       	ldd	r25, Y+2	; 0x02
 4a0:	80 34       	cpi	r24, 0x40	; 64
 4a2:	91 05       	cpc	r25, r1
 4a4:	01 f4       	brne	.+0      	; 0x4a6 <__vector_24+0xee>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__vector_24+0xf0>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <__vector_24+0xf2>
 4aa:	29 81       	ldd	r18, Y+1	; 0x01
 4ac:	3a 81       	ldd	r19, Y+2	; 0x02
 4ae:	28 35       	cpi	r18, 0x58	; 88
 4b0:	31 05       	cpc	r19, r1
 4b2:	01 f4       	brne	.+0      	; 0x4b4 <__vector_24+0xfc>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <__vector_24+0xfe>
 4b6:	89 81       	ldd	r24, Y+1	; 0x01
 4b8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ba:	80 36       	cpi	r24, 0x60	; 96
 4bc:	91 05       	cpc	r25, r1
 4be:	01 f4       	brne	.+0      	; 0x4c0 <__vector_24+0x108>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__vector_24+0x10a>
 4c2:	29 81       	ldd	r18, Y+1	; 0x01
 4c4:	3a 81       	ldd	r19, Y+2	; 0x02
 4c6:	20 35       	cpi	r18, 0x50	; 80
 4c8:	31 05       	cpc	r19, r1
 4ca:	01 f4       	brne	.+0      	; 0x4cc <__vector_24+0x114>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <__vector_24+0x116>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <__vector_24+0x118>
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	9a 81       	ldd	r25, Y+2	; 0x02
 4d4:	80 3a       	cpi	r24, 0xA0	; 160
 4d6:	91 05       	cpc	r25, r1
 4d8:	01 f4       	brne	.+0      	; 0x4da <__vector_24+0x122>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <__vector_24+0x124>
 4dc:	29 81       	ldd	r18, Y+1	; 0x01
 4de:	3a 81       	ldd	r19, Y+2	; 0x02
 4e0:	21 3a       	cpi	r18, 0xA1	; 161
 4e2:	31 05       	cpc	r19, r1
 4e4:	04 f4       	brge	.+0      	; 0x4e6 <__vector_24+0x12e>
 4e6:	89 81       	ldd	r24, Y+1	; 0x01
 4e8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ea:	80 38       	cpi	r24, 0x80	; 128
 4ec:	91 05       	cpc	r25, r1
 4ee:	01 f4       	brne	.+0      	; 0x4f0 <__vector_24+0x138>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <__vector_24+0x13a>
 4f2:	29 81       	ldd	r18, Y+1	; 0x01
 4f4:	3a 81       	ldd	r19, Y+2	; 0x02
 4f6:	21 38       	cpi	r18, 0x81	; 129
 4f8:	31 05       	cpc	r19, r1
 4fa:	04 f4       	brge	.+0      	; 0x4fc <__vector_24+0x144>
 4fc:	89 81       	ldd	r24, Y+1	; 0x01
 4fe:	9a 81       	ldd	r25, Y+2	; 0x02
 500:	80 37       	cpi	r24, 0x70	; 112
 502:	91 05       	cpc	r25, r1
 504:	01 f4       	brne	.+0      	; 0x506 <__vector_24+0x14e>
 506:	00 c0       	rjmp	.+0      	; 0x508 <__vector_24+0x150>
 508:	29 81       	ldd	r18, Y+1	; 0x01
 50a:	3a 81       	ldd	r19, Y+2	; 0x02
 50c:	28 37       	cpi	r18, 0x78	; 120
 50e:	31 05       	cpc	r19, r1
 510:	01 f4       	brne	.+0      	; 0x512 <__vector_24+0x15a>
 512:	00 c0       	rjmp	.+0      	; 0x514 <__vector_24+0x15c>
 514:	00 c0       	rjmp	.+0      	; 0x516 <__vector_24+0x15e>
 516:	89 81       	ldd	r24, Y+1	; 0x01
 518:	9a 81       	ldd	r25, Y+2	; 0x02
 51a:	80 39       	cpi	r24, 0x90	; 144
 51c:	91 05       	cpc	r25, r1
 51e:	01 f4       	brne	.+0      	; 0x520 <__vector_24+0x168>
 520:	00 c0       	rjmp	.+0      	; 0x522 <__vector_24+0x16a>
 522:	29 81       	ldd	r18, Y+1	; 0x01
 524:	3a 81       	ldd	r19, Y+2	; 0x02
 526:	28 39       	cpi	r18, 0x98	; 152
 528:	31 05       	cpc	r19, r1
 52a:	01 f4       	brne	.+0      	; 0x52c <__vector_24+0x174>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <__vector_24+0x176>
 52e:	89 81       	ldd	r24, Y+1	; 0x01
 530:	9a 81       	ldd	r25, Y+2	; 0x02
 532:	88 38       	cpi	r24, 0x88	; 136
 534:	91 05       	cpc	r25, r1
 536:	01 f4       	brne	.+0      	; 0x538 <__vector_24+0x180>
 538:	00 c0       	rjmp	.+0      	; 0x53a <__vector_24+0x182>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <__vector_24+0x184>
 53c:	29 81       	ldd	r18, Y+1	; 0x01
 53e:	3a 81       	ldd	r19, Y+2	; 0x02
 540:	28 3b       	cpi	r18, 0xB8	; 184
 542:	31 05       	cpc	r19, r1
 544:	01 f4       	brne	.+0      	; 0x546 <__vector_24+0x18e>
 546:	00 c0       	rjmp	.+0      	; 0x548 <__vector_24+0x190>
 548:	89 81       	ldd	r24, Y+1	; 0x01
 54a:	9a 81       	ldd	r25, Y+2	; 0x02
 54c:	89 3b       	cpi	r24, 0xB9	; 185
 54e:	91 05       	cpc	r25, r1
 550:	04 f4       	brge	.+0      	; 0x552 <__vector_24+0x19a>
 552:	29 81       	ldd	r18, Y+1	; 0x01
 554:	3a 81       	ldd	r19, Y+2	; 0x02
 556:	28 3a       	cpi	r18, 0xA8	; 168
 558:	31 05       	cpc	r19, r1
 55a:	01 f4       	brne	.+0      	; 0x55c <__vector_24+0x1a4>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <__vector_24+0x1a6>
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	9a 81       	ldd	r25, Y+2	; 0x02
 562:	80 3b       	cpi	r24, 0xB0	; 176
 564:	91 05       	cpc	r25, r1
 566:	01 f4       	brne	.+0      	; 0x568 <__vector_24+0x1b0>
 568:	00 c0       	rjmp	.+0      	; 0x56a <__vector_24+0x1b2>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <__vector_24+0x1b4>
 56c:	29 81       	ldd	r18, Y+1	; 0x01
 56e:	3a 81       	ldd	r19, Y+2	; 0x02
 570:	28 3c       	cpi	r18, 0xC8	; 200
 572:	31 05       	cpc	r19, r1
 574:	01 f4       	brne	.+0      	; 0x576 <__vector_24+0x1be>
 576:	00 c0       	rjmp	.+0      	; 0x578 <__vector_24+0x1c0>
 578:	89 81       	ldd	r24, Y+1	; 0x01
 57a:	9a 81       	ldd	r25, Y+2	; 0x02
 57c:	88 3f       	cpi	r24, 0xF8	; 248
 57e:	91 05       	cpc	r25, r1
 580:	01 f4       	brne	.+0      	; 0x582 <__vector_24+0x1ca>
 582:	00 c0       	rjmp	.+0      	; 0x584 <__vector_24+0x1cc>
 584:	29 81       	ldd	r18, Y+1	; 0x01
 586:	3a 81       	ldd	r19, Y+2	; 0x02
 588:	20 3c       	cpi	r18, 0xC0	; 192
 58a:	31 05       	cpc	r19, r1
 58c:	01 f4       	brne	.+0      	; 0x58e <__vector_24+0x1d6>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <__vector_24+0x1d8>
 590:	00 c0       	rjmp	.+0      	; 0x592 <__vector_24+0x1da>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 592:	eb eb       	ldi	r30, 0xBB	; 187
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 91 00 00 	lds	r24, 0x0000
 59a:	80 83       	st	Z, r24
      twi_reply(1);
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <__vector_24+0x1ec>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 5a4:	90 91 00 00 	lds	r25, 0x0000
 5a8:	80 91 00 00 	lds	r24, 0x0000
 5ac:	98 17       	cp	r25, r24
 5ae:	00 f4       	brcc	.+0      	; 0x5b0 <__vector_24+0x1f8>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 5b0:	ab eb       	ldi	r26, 0xBB	; 187
 5b2:	b0 e0       	ldi	r27, 0x00	; 0
 5b4:	20 91 00 00 	lds	r18, 0x0000
 5b8:	82 2f       	mov	r24, r18
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	fc 01       	movw	r30, r24
 5be:	e0 50       	subi	r30, 0x00	; 0
 5c0:	f0 40       	sbci	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	8c 93       	st	X, r24
 5c6:	82 2f       	mov	r24, r18
 5c8:	8f 5f       	subi	r24, 0xFF	; 255
 5ca:	80 93 00 00 	sts	0x0000, r24
        twi_reply(1);
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <__vector_24+0x21e>
      }else{
	if (twi_sendStop)
 5d6:	80 91 00 00 	lds	r24, 0x0000
 5da:	88 23       	and	r24, r24
 5dc:	01 f0       	breq	.+0      	; 0x5de <__vector_24+0x226>
          twi_stop();
 5de:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <__vector_24+0x22c>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	80 93 00 00 	sts	0x0000, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 5ea:	ec eb       	ldi	r30, 0xBC	; 188
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	84 ea       	ldi	r24, 0xA4	; 164
 5f0:	80 83       	st	Z, r24
	  twi_state = TWI_READY;
 5f2:	10 92 00 00 	sts	0x0000, r1
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <__vector_24+0x240>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
 5f8:	80 e2       	ldi	r24, 0x20	; 32
 5fa:	80 93 00 00 	sts	0x0000, r24
      twi_stop();
 5fe:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 602:	00 c0       	rjmp	.+0      	; 0x604 <__vector_24+0x24c>
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 604:	80 e3       	ldi	r24, 0x30	; 48
 606:	80 93 00 00 	sts	0x0000, r24
      twi_stop();
 60a:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <__vector_24+0x258>
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 610:	88 e3       	ldi	r24, 0x38	; 56
 612:	80 93 00 00 	sts	0x0000, r24
      twi_releaseBus();
 616:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <__vector_24+0x264>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 61c:	30 91 00 00 	lds	r19, 0x0000
 620:	83 2f       	mov	r24, r19
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	eb eb       	ldi	r30, 0xBB	; 187
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	20 81       	ld	r18, Z
 62a:	fc 01       	movw	r30, r24
 62c:	e0 50       	subi	r30, 0x00	; 0
 62e:	f0 40       	sbci	r31, 0x00	; 0
 630:	20 83       	st	Z, r18
 632:	83 2f       	mov	r24, r19
 634:	8f 5f       	subi	r24, 0xFF	; 255
 636:	80 93 00 00 	sts	0x0000, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 63a:	90 91 00 00 	lds	r25, 0x0000
 63e:	80 91 00 00 	lds	r24, 0x0000
 642:	98 17       	cp	r25, r24
 644:	00 f4       	brcc	.+0      	; 0x646 <__vector_24+0x28e>
        twi_reply(1);
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <__vector_24+0x296>
      }else{
        twi_reply(0);
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 654:	00 c0       	rjmp	.+0      	; 0x656 <__vector_24+0x29e>
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 656:	30 91 00 00 	lds	r19, 0x0000
 65a:	83 2f       	mov	r24, r19
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	eb eb       	ldi	r30, 0xBB	; 187
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	20 81       	ld	r18, Z
 664:	fc 01       	movw	r30, r24
 666:	e0 50       	subi	r30, 0x00	; 0
 668:	f0 40       	sbci	r31, 0x00	; 0
 66a:	20 83       	st	Z, r18
 66c:	83 2f       	mov	r24, r19
 66e:	8f 5f       	subi	r24, 0xFF	; 255
 670:	80 93 00 00 	sts	0x0000, r24
	if (twi_sendStop)
 674:	80 91 00 00 	lds	r24, 0x0000
 678:	88 23       	and	r24, r24
 67a:	01 f0       	breq	.+0      	; 0x67c <__vector_24+0x2c4>
          twi_stop();
 67c:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 680:	00 c0       	rjmp	.+0      	; 0x682 <__vector_24+0x2ca>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	80 93 00 00 	sts	0x0000, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 688:	ec eb       	ldi	r30, 0xBC	; 188
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	84 ea       	ldi	r24, 0xA4	; 164
 68e:	80 83       	st	Z, r24
	  twi_state = TWI_READY;
 690:	10 92 00 00 	sts	0x0000, r1
 694:	00 c0       	rjmp	.+0      	; 0x696 <__vector_24+0x2de>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
 696:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <__vector_24+0x2e4>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 69c:	83 e0       	ldi	r24, 0x03	; 3
 69e:	80 93 00 00 	sts	0x0000, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 6a2:	10 92 00 00 	sts	0x0000, r1
      twi_reply(1);
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <__vector_24+0x2f6>
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 6ae:	80 91 00 00 	lds	r24, 0x0000
 6b2:	80 32       	cpi	r24, 0x20	; 32
 6b4:	00 f4       	brcc	.+0      	; 0x6b6 <__vector_24+0x2fe>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 6b6:	30 91 00 00 	lds	r19, 0x0000
 6ba:	83 2f       	mov	r24, r19
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	eb eb       	ldi	r30, 0xBB	; 187
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	20 81       	ld	r18, Z
 6c4:	fc 01       	movw	r30, r24
 6c6:	e0 50       	subi	r30, 0x00	; 0
 6c8:	f0 40       	sbci	r31, 0x00	; 0
 6ca:	20 83       	st	Z, r18
 6cc:	83 2f       	mov	r24, r19
 6ce:	8f 5f       	subi	r24, 0xFF	; 255
 6d0:	80 93 00 00 	sts	0x0000, r24
        twi_reply(1);
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <__vector_24+0x324>
      }else{
        // otherwise nack
        twi_reply(0);
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <__vector_24+0x32c>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 6e4:	80 91 00 00 	lds	r24, 0x0000
 6e8:	80 32       	cpi	r24, 0x20	; 32
 6ea:	00 f4       	brcc	.+0      	; 0x6ec <__vector_24+0x334>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 6ec:	80 91 00 00 	lds	r24, 0x0000
 6f0:	88 2f       	mov	r24, r24
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	fc 01       	movw	r30, r24
 6f6:	e0 50       	subi	r30, 0x00	; 0
 6f8:	f0 40       	sbci	r31, 0x00	; 0
 6fa:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
 6fc:	0e 94 00 00 	call	0	; 0x0 <twi_init>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 700:	e0 91 00 00 	lds	r30, 0x0000
 704:	f0 91 00 00 	lds	r31, 0x0000
 708:	80 91 00 00 	lds	r24, 0x0000
 70c:	28 2f       	mov	r18, r24
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	b9 01       	movw	r22, r18
 716:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 718:	10 92 00 00 	sts	0x0000, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
 71c:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 720:	00 c0       	rjmp	.+0      	; 0x722 <__vector_24+0x36a>
      break;
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 728:	00 c0       	rjmp	.+0      	; 0x72a <__vector_24+0x372>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 72a:	84 e0       	ldi	r24, 0x04	; 4
 72c:	80 93 00 00 	sts	0x0000, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 730:	10 92 00 00 	sts	0x0000, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 734:	10 92 00 00 	sts	0x0000, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 738:	e0 91 00 00 	lds	r30, 0x0000
 73c:	f0 91 00 00 	lds	r31, 0x0000
 740:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 742:	80 91 00 00 	lds	r24, 0x0000
 746:	88 23       	and	r24, r24
 748:	01 f4       	brne	.+0      	; 0x74a <__vector_24+0x392>
        twi_txBufferLength = 1;
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	80 93 00 00 	sts	0x0000, r24
        twi_txBuffer[0] = 0x00;
 750:	10 92 00 00 	sts	0x0000, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 754:	ab eb       	ldi	r26, 0xBB	; 187
 756:	b0 e0       	ldi	r27, 0x00	; 0
 758:	20 91 00 00 	lds	r18, 0x0000
 75c:	82 2f       	mov	r24, r18
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	fc 01       	movw	r30, r24
 762:	e0 50       	subi	r30, 0x00	; 0
 764:	f0 40       	sbci	r31, 0x00	; 0
 766:	80 81       	ld	r24, Z
 768:	8c 93       	st	X, r24
 76a:	82 2f       	mov	r24, r18
 76c:	8f 5f       	subi	r24, 0xFF	; 255
 76e:	80 93 00 00 	sts	0x0000, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 772:	90 91 00 00 	lds	r25, 0x0000
 776:	80 91 00 00 	lds	r24, 0x0000
 77a:	98 17       	cp	r25, r24
 77c:	00 f4       	brcc	.+0      	; 0x77e <__vector_24+0x3c6>
        twi_reply(1);
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 784:	00 c0       	rjmp	.+0      	; 0x786 <__vector_24+0x3ce>
      }else{
        twi_reply(0);
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <__vector_24+0x3d6>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	0e 94 00 00 	call	0	; 0x0 <twi_init>
      // leave slave receiver state
      twi_state = TWI_READY;
 794:	10 92 00 00 	sts	0x0000, r1
 798:	00 c0       	rjmp	.+0      	; 0x79a <__vector_24+0x3e2>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 79a:	10 92 00 00 	sts	0x0000, r1
      twi_stop();
 79e:	0e 94 00 00 	call	0	; 0x0 <twi_init>
      break;
  }
}
 7a2:	0f 90       	pop	r0
 7a4:	0f 90       	pop	r0
 7a6:	cf 91       	pop	r28
 7a8:	df 91       	pop	r29
 7aa:	ff 91       	pop	r31
 7ac:	ef 91       	pop	r30
 7ae:	bf 91       	pop	r27
 7b0:	af 91       	pop	r26
 7b2:	9f 91       	pop	r25
 7b4:	8f 91       	pop	r24
 7b6:	7f 91       	pop	r23
 7b8:	6f 91       	pop	r22
 7ba:	5f 91       	pop	r21
 7bc:	4f 91       	pop	r20
 7be:	3f 91       	pop	r19
 7c0:	2f 91       	pop	r18
 7c2:	0f 90       	pop	r0
 7c4:	0f be       	out	0x3f, r0	; 63
 7c6:	0f 90       	pop	r0
 7c8:	1f 90       	pop	r1
 7ca:	18 95       	reti

wiring.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b6  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000f  00000000  00000000  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00000000  00000000  000003f9  2**0
                  ALLOC
  3 .stab         00000984  00000000  00000000  000003fc  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000d4a  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	8f 93       	push	r24
   c:	9f 93       	push	r25
   e:	af 93       	push	r26
  10:	bf 93       	push	r27
  12:	df 93       	push	r29
  14:	cf 93       	push	r28
  16:	00 d0       	rcall	.+0      	; 0x18 <__vector_16+0x18>
  18:	00 d0       	rcall	.+0      	; 0x1a <__vector_16+0x1a>
  1a:	0f 92       	push	r0
  1c:	cd b7       	in	r28, 0x3d	; 61
  1e:	de b7       	in	r29, 0x3e	; 62
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  20:	80 91 00 00 	lds	r24, 0x0000
  24:	90 91 00 00 	lds	r25, 0x0000
  28:	a0 91 00 00 	lds	r26, 0x0000
  2c:	b0 91 00 00 	lds	r27, 0x0000
  30:	8a 83       	std	Y+2, r24	; 0x02
  32:	9b 83       	std	Y+3, r25	; 0x03
  34:	ac 83       	std	Y+4, r26	; 0x04
  36:	bd 83       	std	Y+5, r27	; 0x05
	unsigned char f = timer0_fract;
  38:	80 91 00 00 	lds	r24, 0x0000
  3c:	89 83       	std	Y+1, r24	; 0x01

	m += MILLIS_INC;
  3e:	8a 81       	ldd	r24, Y+2	; 0x02
  40:	9b 81       	ldd	r25, Y+3	; 0x03
  42:	ac 81       	ldd	r26, Y+4	; 0x04
  44:	bd 81       	ldd	r27, Y+5	; 0x05
  46:	02 96       	adiw	r24, 0x02	; 2
  48:	a1 1d       	adc	r26, r1
  4a:	b1 1d       	adc	r27, r1
  4c:	8a 83       	std	Y+2, r24	; 0x02
  4e:	9b 83       	std	Y+3, r25	; 0x03
  50:	ac 83       	std	Y+4, r26	; 0x04
  52:	bd 83       	std	Y+5, r27	; 0x05
	f += FRACT_INC;
  54:	89 81       	ldd	r24, Y+1	; 0x01
  56:	8a 5f       	subi	r24, 0xFA	; 250
  58:	89 83       	std	Y+1, r24	; 0x01
	if (f >= FRACT_MAX) {
  5a:	89 81       	ldd	r24, Y+1	; 0x01
  5c:	8d 37       	cpi	r24, 0x7D	; 125
  5e:	00 f0       	brcs	.+0      	; 0x60 <__vector_16+0x60>
		f -= FRACT_MAX;
  60:	89 81       	ldd	r24, Y+1	; 0x01
  62:	8d 57       	subi	r24, 0x7D	; 125
  64:	89 83       	std	Y+1, r24	; 0x01
		m += 1;
  66:	8a 81       	ldd	r24, Y+2	; 0x02
  68:	9b 81       	ldd	r25, Y+3	; 0x03
  6a:	ac 81       	ldd	r26, Y+4	; 0x04
  6c:	bd 81       	ldd	r27, Y+5	; 0x05
  6e:	01 96       	adiw	r24, 0x01	; 1
  70:	a1 1d       	adc	r26, r1
  72:	b1 1d       	adc	r27, r1
  74:	8a 83       	std	Y+2, r24	; 0x02
  76:	9b 83       	std	Y+3, r25	; 0x03
  78:	ac 83       	std	Y+4, r26	; 0x04
  7a:	bd 83       	std	Y+5, r27	; 0x05
	}

	timer0_fract = f;
  7c:	89 81       	ldd	r24, Y+1	; 0x01
  7e:	80 93 00 00 	sts	0x0000, r24
	timer0_millis = m;
  82:	8a 81       	ldd	r24, Y+2	; 0x02
  84:	9b 81       	ldd	r25, Y+3	; 0x03
  86:	ac 81       	ldd	r26, Y+4	; 0x04
  88:	bd 81       	ldd	r27, Y+5	; 0x05
  8a:	80 93 00 00 	sts	0x0000, r24
  8e:	90 93 00 00 	sts	0x0000, r25
  92:	a0 93 00 00 	sts	0x0000, r26
  96:	b0 93 00 00 	sts	0x0000, r27
	timer0_overflow_count++;
  9a:	80 91 00 00 	lds	r24, 0x0000
  9e:	90 91 00 00 	lds	r25, 0x0000
  a2:	a0 91 00 00 	lds	r26, 0x0000
  a6:	b0 91 00 00 	lds	r27, 0x0000
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	a1 1d       	adc	r26, r1
  ae:	b1 1d       	adc	r27, r1
  b0:	80 93 00 00 	sts	0x0000, r24
  b4:	90 93 00 00 	sts	0x0000, r25
  b8:	a0 93 00 00 	sts	0x0000, r26
  bc:	b0 93 00 00 	sts	0x0000, r27
}
  c0:	0f 90       	pop	r0
  c2:	0f 90       	pop	r0
  c4:	0f 90       	pop	r0
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	bf 91       	pop	r27
  d0:	af 91       	pop	r26
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <millis>:

unsigned long millis()
{
  e0:	df 93       	push	r29
  e2:	cf 93       	push	r28
  e4:	00 d0       	rcall	.+0      	; 0xe6 <millis+0x6>
  e6:	00 d0       	rcall	.+0      	; 0xe8 <millis+0x8>
  e8:	0f 92       	push	r0
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	uint8_t oldSREG = SREG;
  ee:	ef e5       	ldi	r30, 0x5F	; 95
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	89 83       	std	Y+1, r24	; 0x01

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
  f6:	f8 94       	cli
	m = timer0_millis;
  f8:	80 91 00 00 	lds	r24, 0x0000
  fc:	90 91 00 00 	lds	r25, 0x0000
 100:	a0 91 00 00 	lds	r26, 0x0000
 104:	b0 91 00 00 	lds	r27, 0x0000
 108:	8a 83       	std	Y+2, r24	; 0x02
 10a:	9b 83       	std	Y+3, r25	; 0x03
 10c:	ac 83       	std	Y+4, r26	; 0x04
 10e:	bd 83       	std	Y+5, r27	; 0x05
	SREG = oldSREG;
 110:	ef e5       	ldi	r30, 0x5F	; 95
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	80 83       	st	Z, r24

	return m;
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	9b 81       	ldd	r25, Y+3	; 0x03
 11c:	ac 81       	ldd	r26, Y+4	; 0x04
 11e:	bd 81       	ldd	r27, Y+5	; 0x05
}
 120:	bc 01       	movw	r22, r24
 122:	cd 01       	movw	r24, r26
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	cf 91       	pop	r28
 130:	df 91       	pop	r29
 132:	08 95       	ret

00000134 <micros>:

unsigned long micros() {
 134:	df 93       	push	r29
 136:	cf 93       	push	r28
 138:	00 d0       	rcall	.+0      	; 0x13a <micros+0x6>
 13a:	00 d0       	rcall	.+0      	; 0x13c <micros+0x8>
 13c:	00 d0       	rcall	.+0      	; 0x13e <micros+0xa>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 142:	ef e5       	ldi	r30, 0x5F	; 95
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	8a 83       	std	Y+2, r24	; 0x02
	
	cli();
 14a:	f8 94       	cli
	m = timer0_overflow_count;
 14c:	80 91 00 00 	lds	r24, 0x0000
 150:	90 91 00 00 	lds	r25, 0x0000
 154:	a0 91 00 00 	lds	r26, 0x0000
 158:	b0 91 00 00 	lds	r27, 0x0000
 15c:	8b 83       	std	Y+3, r24	; 0x03
 15e:	9c 83       	std	Y+4, r25	; 0x04
 160:	ad 83       	std	Y+5, r26	; 0x05
 162:	be 83       	std	Y+6, r27	; 0x06
#if defined(TCNT0)
	t = TCNT0;
 164:	e6 e4       	ldi	r30, 0x46	; 70
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	89 83       	std	Y+1, r24	; 0x01
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 16c:	e5 e3       	ldi	r30, 0x35	; 53
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	88 2f       	mov	r24, r24
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	81 70       	andi	r24, 0x01	; 1
 178:	90 70       	andi	r25, 0x00	; 0
 17a:	88 23       	and	r24, r24
 17c:	01 f0       	breq	.+0      	; 0x17e <micros+0x4a>
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	8f 3f       	cpi	r24, 0xFF	; 255
 182:	01 f0       	breq	.+0      	; 0x184 <micros+0x50>
		m++;
 184:	8b 81       	ldd	r24, Y+3	; 0x03
 186:	9c 81       	ldd	r25, Y+4	; 0x04
 188:	ad 81       	ldd	r26, Y+5	; 0x05
 18a:	be 81       	ldd	r27, Y+6	; 0x06
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	a1 1d       	adc	r26, r1
 190:	b1 1d       	adc	r27, r1
 192:	8b 83       	std	Y+3, r24	; 0x03
 194:	9c 83       	std	Y+4, r25	; 0x04
 196:	ad 83       	std	Y+5, r26	; 0x05
 198:	be 83       	std	Y+6, r27	; 0x06
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 19a:	ef e5       	ldi	r30, 0x5F	; 95
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	80 83       	st	Z, r24
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	9c 81       	ldd	r25, Y+4	; 0x04
 1a6:	ad 81       	ldd	r26, Y+5	; 0x05
 1a8:	be 81       	ldd	r27, Y+6	; 0x06
 1aa:	22 27       	eor	r18, r18
 1ac:	38 2f       	mov	r19, r24
 1ae:	49 2f       	mov	r20, r25
 1b0:	5a 2f       	mov	r21, r26
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	88 2f       	mov	r24, r24
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	a0 e0       	ldi	r26, 0x00	; 0
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	82 0f       	add	r24, r18
 1be:	93 1f       	adc	r25, r19
 1c0:	a4 1f       	adc	r26, r20
 1c2:	b5 1f       	adc	r27, r21
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	aa 1f       	adc	r26, r26
 1ca:	bb 1f       	adc	r27, r27
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	aa 1f       	adc	r26, r26
 1d2:	bb 1f       	adc	r27, r27
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	aa 1f       	adc	r26, r26
 1da:	bb 1f       	adc	r27, r27
}
 1dc:	bc 01       	movw	r22, r24
 1de:	cd 01       	movw	r24, r26
 1e0:	26 96       	adiw	r28, 0x06	; 6
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	f8 94       	cli
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	cd bf       	out	0x3d, r28	; 61
 1ec:	cf 91       	pop	r28
 1ee:	df 91       	pop	r29
 1f0:	08 95       	ret

000001f2 <delay>:

void delay(unsigned long ms)
{
 1f2:	df 93       	push	r29
 1f4:	cf 93       	push	r28
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <delay+0x6>
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <delay+0x8>
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <delay+0xa>
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	6b 83       	std	Y+3, r22	; 0x03
 202:	7c 83       	std	Y+4, r23	; 0x04
 204:	8d 83       	std	Y+5, r24	; 0x05
 206:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t start = (uint16_t)micros();
 208:	0e 94 00 00 	call	0	; 0x0 <__vector_16>
 20c:	dc 01       	movw	r26, r24
 20e:	cb 01       	movw	r24, r22
 210:	9a 83       	std	Y+2, r25	; 0x02
 212:	89 83       	std	Y+1, r24	; 0x01
 214:	00 c0       	rjmp	.+0      	; 0x216 <delay+0x24>

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 216:	0e 94 00 00 	call	0	; 0x0 <__vector_16>
 21a:	dc 01       	movw	r26, r24
 21c:	cb 01       	movw	r24, r22
 21e:	9c 01       	movw	r18, r24
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	9a 81       	ldd	r25, Y+2	; 0x02
 224:	a9 01       	movw	r20, r18
 226:	48 1b       	sub	r20, r24
 228:	59 0b       	sbc	r21, r25
 22a:	ca 01       	movw	r24, r20
 22c:	53 e0       	ldi	r21, 0x03	; 3
 22e:	88 3e       	cpi	r24, 0xE8	; 232
 230:	95 07       	cpc	r25, r21
 232:	00 f0       	brcs	.+0      	; 0x234 <delay+0x42>
			ms--;
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	9c 81       	ldd	r25, Y+4	; 0x04
 238:	ad 81       	ldd	r26, Y+5	; 0x05
 23a:	be 81       	ldd	r27, Y+6	; 0x06
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	a1 09       	sbc	r26, r1
 240:	b1 09       	sbc	r27, r1
 242:	8b 83       	std	Y+3, r24	; 0x03
 244:	9c 83       	std	Y+4, r25	; 0x04
 246:	ad 83       	std	Y+5, r26	; 0x05
 248:	be 83       	std	Y+6, r27	; 0x06
			start += 1000;
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	9a 81       	ldd	r25, Y+2	; 0x02
 24e:	88 51       	subi	r24, 0x18	; 24
 250:	9c 4f       	sbci	r25, 0xFC	; 252
 252:	9a 83       	std	Y+2, r25	; 0x02
 254:	89 83       	std	Y+1, r24	; 0x01

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	9c 81       	ldd	r25, Y+4	; 0x04
 25a:	ad 81       	ldd	r26, Y+5	; 0x05
 25c:	be 81       	ldd	r27, Y+6	; 0x06
 25e:	00 97       	sbiw	r24, 0x00	; 0
 260:	a1 05       	cpc	r26, r1
 262:	b1 05       	cpc	r27, r1
 264:	01 f4       	brne	.+0      	; 0x266 <delay+0x74>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 266:	26 96       	adiw	r28, 0x06	; 6
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	cd bf       	out	0x3d, r28	; 61
 272:	cf 91       	pop	r28
 274:	df 91       	pop	r29
 276:	08 95       	ret

00000278 <delayMicroseconds>:

/* Delay for the given number of microseconds.  Assumes a 8 or 16 MHz clock. */
void delayMicroseconds(unsigned int us)
{
 278:	df 93       	push	r29
 27a:	cf 93       	push	r28
 27c:	00 d0       	rcall	.+0      	; 0x27e <delayMicroseconds+0x6>
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	9a 83       	std	Y+2, r25	; 0x02
 284:	89 83       	std	Y+1, r24	; 0x01
	// for the 8 MHz internal clock on the ATmega168

	// for a one- or two-microsecond delay, simply return.  the overhead of
	// the function calls takes more than two microseconds.  can't just
	// subtract two, since us is unsigned; we'd overflow.
	if (--us == 0)
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	9a 81       	ldd	r25, Y+2	; 0x02
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	9a 83       	std	Y+2, r25	; 0x02
 28e:	89 83       	std	Y+1, r24	; 0x01
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	9a 81       	ldd	r25, Y+2	; 0x02
 294:	00 97       	sbiw	r24, 0x00	; 0
 296:	01 f0       	breq	.+0      	; 0x298 <delayMicroseconds+0x20>
		return;
	if (--us == 0)
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	9a 81       	ldd	r25, Y+2	; 0x02
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	9a 83       	std	Y+2, r25	; 0x02
 2a0:	89 83       	std	Y+1, r24	; 0x01
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	9a 81       	ldd	r25, Y+2	; 0x02
 2a6:	00 97       	sbiw	r24, 0x00	; 0
 2a8:	01 f0       	breq	.+0      	; 0x2aa <delayMicroseconds+0x32>
		return;

	// the following loop takes half of a microsecond (4 cycles)
	// per iteration, so execute it twice for each microsecond of
	// delay requested.
	us <<= 1;
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	9a 81       	ldd	r25, Y+2	; 0x02
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	9a 83       	std	Y+2, r25	; 0x02
 2b4:	89 83       	std	Y+1, r24	; 0x01
    
	// partially compensate for the time taken by the preceeding commands.
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	9a 83       	std	Y+2, r25	; 0x02
 2be:	89 83       	std	Y+1, r24	; 0x01
#endif

	// busy wait
	__asm__ __volatile__ (
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	9a 81       	ldd	r25, Y+2	; 0x02
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	01 f4       	brne	.+0      	; 0x2c8 <delayMicroseconds+0x50>
 2c8:	9a 83       	std	Y+2, r25	; 0x02
 2ca:	89 83       	std	Y+1, r24	; 0x01
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
}
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	cf 91       	pop	r28
 2d2:	df 91       	pop	r29
 2d4:	08 95       	ret

000002d6 <init>:

void init()
{
 2d6:	df 93       	push	r29
 2d8:	cf 93       	push	r28
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 2de:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 2e0:	a4 e4       	ldi	r26, 0x44	; 68
 2e2:	b0 e0       	ldi	r27, 0x00	; 0
 2e4:	e4 e4       	ldi	r30, 0x44	; 68
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	82 60       	ori	r24, 0x02	; 2
 2ec:	8c 93       	st	X, r24
	sbi(TCCR0A, WGM00);
 2ee:	a4 e4       	ldi	r26, 0x44	; 68
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	e4 e4       	ldi	r30, 0x44	; 68
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	81 60       	ori	r24, 0x01	; 1
 2fa:	8c 93       	st	X, r24
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 2fc:	a5 e4       	ldi	r26, 0x45	; 69
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	e5 e4       	ldi	r30, 0x45	; 69
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	82 60       	ori	r24, 0x02	; 2
 308:	8c 93       	st	X, r24
	sbi(TCCR0B, CS00);
 30a:	a5 e4       	ldi	r26, 0x45	; 69
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	e5 e4       	ldi	r30, 0x45	; 69
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	81 60       	ori	r24, 0x01	; 1
 316:	8c 93       	st	X, r24

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 318:	ae e6       	ldi	r26, 0x6E	; 110
 31a:	b0 e0       	ldi	r27, 0x00	; 0
 31c:	ee e6       	ldi	r30, 0x6E	; 110
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	81 60       	ori	r24, 0x01	; 1
 324:	8c 93       	st	X, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 326:	e1 e8       	ldi	r30, 0x81	; 129
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 32c:	a1 e8       	ldi	r26, 0x81	; 129
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	e1 e8       	ldi	r30, 0x81	; 129
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	82 60       	ori	r24, 0x02	; 2
 338:	8c 93       	st	X, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 33a:	a1 e8       	ldi	r26, 0x81	; 129
 33c:	b0 e0       	ldi	r27, 0x00	; 0
 33e:	e1 e8       	ldi	r30, 0x81	; 129
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	81 60       	ori	r24, 0x01	; 1
 346:	8c 93       	st	X, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 348:	a0 e8       	ldi	r26, 0x80	; 128
 34a:	b0 e0       	ldi	r27, 0x00	; 0
 34c:	e0 e8       	ldi	r30, 0x80	; 128
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	81 60       	ori	r24, 0x01	; 1
 354:	8c 93       	st	X, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 356:	a1 eb       	ldi	r26, 0xB1	; 177
 358:	b0 e0       	ldi	r27, 0x00	; 0
 35a:	e1 eb       	ldi	r30, 0xB1	; 177
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	84 60       	ori	r24, 0x04	; 4
 362:	8c 93       	st	X, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 364:	a0 eb       	ldi	r26, 0xB0	; 176
 366:	b0 e0       	ldi	r27, 0x00	; 0
 368:	e0 eb       	ldi	r30, 0xB0	; 176
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	81 60       	ori	r24, 0x01	; 1
 370:	8c 93       	st	X, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 372:	aa e7       	ldi	r26, 0x7A	; 122
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	ea e7       	ldi	r30, 0x7A	; 122
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	84 60       	ori	r24, 0x04	; 4
 37e:	8c 93       	st	X, r24
	sbi(ADCSRA, ADPS1);
 380:	aa e7       	ldi	r26, 0x7A	; 122
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	ea e7       	ldi	r30, 0x7A	; 122
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	82 60       	ori	r24, 0x02	; 2
 38c:	8c 93       	st	X, r24
	sbi(ADCSRA, ADPS0);
 38e:	aa e7       	ldi	r26, 0x7A	; 122
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	ea e7       	ldi	r30, 0x7A	; 122
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	81 60       	ori	r24, 0x01	; 1
 39a:	8c 93       	st	X, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 39c:	aa e7       	ldi	r26, 0x7A	; 122
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	ea e7       	ldi	r30, 0x7A	; 122
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	80 68       	ori	r24, 0x80	; 128
 3a8:	8c 93       	st	X, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 3aa:	e1 ec       	ldi	r30, 0xC1	; 193
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	10 82       	st	Z, r1
#endif
}
 3b0:	cf 91       	pop	r28
 3b2:	df 91       	pop	r29
 3b4:	08 95       	ret

wiring_analog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000228  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000010  00000000  00000000  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000026c  2**0
                  ALLOC
  3 .stab         000007bc  00000000  00000000  0000026c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000cfd  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <analogReference>:
#include "pins_arduino.h"

uint8_t analog_reference = DEFAULT;

void analogReference(uint8_t mode)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
   c:	89 81       	ldd	r24, Y+1	; 0x01
   e:	80 93 00 00 	sts	0x0000, r24
}
  12:	0f 90       	pop	r0
  14:	cf 91       	pop	r28
  16:	df 91       	pop	r29
  18:	08 95       	ret

0000001a <analogRead>:

int analogRead(uint8_t pin)
{
  1a:	df 93       	push	r29
  1c:	cf 93       	push	r28
  1e:	00 d0       	rcall	.+0      	; 0x20 <analogRead+0x6>
  20:	0f 92       	push	r0
  22:	cd b7       	in	r28, 0x3d	; 61
  24:	de b7       	in	r29, 0x3e	; 62
  26:	8b 83       	std	Y+3, r24	; 0x03
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#elif defined(analogPinToChannel) && (defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__))
	pin = analogPinToChannel(pin);
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
  28:	8b 81       	ldd	r24, Y+3	; 0x03
  2a:	8e 30       	cpi	r24, 0x0E	; 14
  2c:	00 f0       	brcs	.+0      	; 0x2e <analogRead+0x14>
  2e:	8b 81       	ldd	r24, Y+3	; 0x03
  30:	8e 50       	subi	r24, 0x0E	; 14
  32:	8b 83       	std	Y+3, r24	; 0x03
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
  34:	ec e7       	ldi	r30, 0x7C	; 124
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	80 91 00 00 	lds	r24, 0x0000
  3c:	88 2f       	mov	r24, r24
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	00 24       	eor	r0, r0
  42:	96 95       	lsr	r25
  44:	87 95       	ror	r24
  46:	07 94       	ror	r0
  48:	96 95       	lsr	r25
  4a:	87 95       	ror	r24
  4c:	07 94       	ror	r0
  4e:	98 2f       	mov	r25, r24
  50:	80 2d       	mov	r24, r0
  52:	98 2f       	mov	r25, r24
  54:	8b 81       	ldd	r24, Y+3	; 0x03
  56:	87 70       	andi	r24, 0x07	; 7
  58:	89 2b       	or	r24, r25
  5a:	80 83       	st	Z, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
  5c:	aa e7       	ldi	r26, 0x7A	; 122
  5e:	b0 e0       	ldi	r27, 0x00	; 0
  60:	ea e7       	ldi	r30, 0x7A	; 122
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	80 81       	ld	r24, Z
  66:	80 64       	ori	r24, 0x40	; 64
  68:	8c 93       	st	X, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
  6a:	ea e7       	ldi	r30, 0x7A	; 122
  6c:	f0 e0       	ldi	r31, 0x00	; 0
  6e:	80 81       	ld	r24, Z
  70:	88 2f       	mov	r24, r24
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	80 74       	andi	r24, 0x40	; 64
  76:	90 70       	andi	r25, 0x00	; 0
  78:	00 97       	sbiw	r24, 0x00	; 0
  7a:	01 f4       	brne	.+0      	; 0x7c <analogRead+0x62>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
  7c:	e8 e7       	ldi	r30, 0x78	; 120
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	8a 83       	std	Y+2, r24	; 0x02
	high = ADCH;
  84:	e9 e7       	ldi	r30, 0x79	; 121
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	89 83       	std	Y+1, r24	; 0x01
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
  8c:	89 81       	ldd	r24, Y+1	; 0x01
  8e:	88 2f       	mov	r24, r24
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	38 2f       	mov	r19, r24
  94:	22 27       	eor	r18, r18
  96:	8a 81       	ldd	r24, Y+2	; 0x02
  98:	88 2f       	mov	r24, r24
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	82 2b       	or	r24, r18
  9e:	93 2b       	or	r25, r19
}
  a0:	0f 90       	pop	r0
  a2:	0f 90       	pop	r0
  a4:	0f 90       	pop	r0
  a6:	cf 91       	pop	r28
  a8:	df 91       	pop	r29
  aa:	08 95       	ret

000000ac <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
  ac:	df 93       	push	r29
  ae:	cf 93       	push	r28
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	28 97       	sbiw	r28, 0x08	; 8
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	f8 94       	cli
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	0f be       	out	0x3f, r0	; 63
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	8c 83       	std	Y+4, r24	; 0x04
  c2:	7e 83       	std	Y+6, r23	; 0x06
  c4:	6d 83       	std	Y+5, r22	; 0x05
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
  c6:	8c 81       	ldd	r24, Y+4	; 0x04
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 00 00 	call	0	; 0x0 <analogReference>
	if (val == 0)
  ce:	8d 81       	ldd	r24, Y+5	; 0x05
  d0:	9e 81       	ldd	r25, Y+6	; 0x06
  d2:	00 97       	sbiw	r24, 0x00	; 0
  d4:	01 f4       	brne	.+0      	; 0xd6 <analogWrite+0x2a>
	{
		digitalWrite(pin, LOW);
  d6:	8c 81       	ldd	r24, Y+4	; 0x04
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	0e 94 00 00 	call	0	; 0x0 <analogReference>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <analogWrite+0x34>
	}
	else if (val == 255)
  e0:	8d 81       	ldd	r24, Y+5	; 0x05
  e2:	9e 81       	ldd	r25, Y+6	; 0x06
  e4:	8f 3f       	cpi	r24, 0xFF	; 255
  e6:	91 05       	cpc	r25, r1
  e8:	01 f4       	brne	.+0      	; 0xea <analogWrite+0x3e>
	{
		digitalWrite(pin, HIGH);
  ea:	8c 81       	ldd	r24, Y+4	; 0x04
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	0e 94 00 00 	call	0	; 0x0 <analogReference>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <analogWrite+0x48>
	}
	else
	{
		switch(digitalPinToTimer(pin))
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	88 2f       	mov	r24, r24
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	80 50       	subi	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	9b 83       	std	Y+3, r25	; 0x03
 100:	8a 83       	std	Y+2, r24	; 0x02
 102:	ea 81       	ldd	r30, Y+2	; 0x02
 104:	fb 81       	ldd	r31, Y+3	; 0x03
 106:	84 91       	lpm	r24, Z+
 108:	89 83       	std	Y+1, r24	; 0x01
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	38 87       	std	Y+8, r19	; 0x08
 112:	2f 83       	std	Y+7, r18	; 0x07
 114:	8f 81       	ldd	r24, Y+7	; 0x07
 116:	98 85       	ldd	r25, Y+8	; 0x08
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	91 05       	cpc	r25, r1
 11c:	01 f0       	breq	.+0      	; 0x11e <analogWrite+0x72>
 11e:	2f 81       	ldd	r18, Y+7	; 0x07
 120:	38 85       	ldd	r19, Y+8	; 0x08
 122:	24 30       	cpi	r18, 0x04	; 4
 124:	31 05       	cpc	r19, r1
 126:	04 f4       	brge	.+0      	; 0x128 <analogWrite+0x7c>
 128:	8f 81       	ldd	r24, Y+7	; 0x07
 12a:	98 85       	ldd	r25, Y+8	; 0x08
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	91 05       	cpc	r25, r1
 130:	01 f0       	breq	.+0      	; 0x132 <analogWrite+0x86>
 132:	2f 81       	ldd	r18, Y+7	; 0x07
 134:	38 85       	ldd	r19, Y+8	; 0x08
 136:	22 30       	cpi	r18, 0x02	; 2
 138:	31 05       	cpc	r19, r1
 13a:	01 f0       	breq	.+0      	; 0x13c <analogWrite+0x90>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <analogWrite+0x92>
 13e:	8f 81       	ldd	r24, Y+7	; 0x07
 140:	98 85       	ldd	r25, Y+8	; 0x08
 142:	86 30       	cpi	r24, 0x06	; 6
 144:	91 05       	cpc	r25, r1
 146:	01 f4       	brne	.+0      	; 0x148 <analogWrite+0x9c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <analogWrite+0x9e>
 14a:	2f 81       	ldd	r18, Y+7	; 0x07
 14c:	38 85       	ldd	r19, Y+8	; 0x08
 14e:	27 30       	cpi	r18, 0x07	; 7
 150:	31 05       	cpc	r19, r1
 152:	01 f4       	brne	.+0      	; 0x154 <analogWrite+0xa8>
 154:	00 c0       	rjmp	.+0      	; 0x156 <analogWrite+0xaa>
 156:	8f 81       	ldd	r24, Y+7	; 0x07
 158:	98 85       	ldd	r25, Y+8	; 0x08
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	91 05       	cpc	r25, r1
 15e:	01 f0       	breq	.+0      	; 0x160 <analogWrite+0xb4>
 160:	00 c0       	rjmp	.+0      	; 0x162 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
 162:	a4 e4       	ldi	r26, 0x44	; 68
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	e4 e4       	ldi	r30, 0x44	; 68
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	8c 93       	st	X, r24
				OCR0A = val; // set pwm duty
 170:	e7 e4       	ldi	r30, 0x47	; 71
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	8d 81       	ldd	r24, Y+5	; 0x05
 176:	80 83       	st	Z, r24
 178:	00 c0       	rjmp	.+0      	; 0x17a <analogWrite+0xce>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
 17a:	a4 e4       	ldi	r26, 0x44	; 68
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	e4 e4       	ldi	r30, 0x44	; 68
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 62       	ori	r24, 0x20	; 32
 186:	8c 93       	st	X, r24
				OCR0B = val; // set pwm duty
 188:	e8 e4       	ldi	r30, 0x48	; 72
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	8d 81       	ldd	r24, Y+5	; 0x05
 18e:	80 83       	st	Z, r24
 190:	00 c0       	rjmp	.+0      	; 0x192 <analogWrite+0xe6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
 192:	a0 e8       	ldi	r26, 0x80	; 128
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	e0 e8       	ldi	r30, 0x80	; 128
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 68       	ori	r24, 0x80	; 128
 19e:	8c 93       	st	X, r24
				OCR1A = val; // set pwm duty
 1a0:	e8 e8       	ldi	r30, 0x88	; 136
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	8d 81       	ldd	r24, Y+5	; 0x05
 1a6:	9e 81       	ldd	r25, Y+6	; 0x06
 1a8:	91 83       	std	Z+1, r25	; 0x01
 1aa:	80 83       	st	Z, r24
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <analogWrite+0x102>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
 1ae:	a0 e8       	ldi	r26, 0x80	; 128
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	e0 e8       	ldi	r30, 0x80	; 128
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	8c 93       	st	X, r24
				OCR1B = val; // set pwm duty
 1bc:	ea e8       	ldi	r30, 0x8A	; 138
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	8d 81       	ldd	r24, Y+5	; 0x05
 1c2:	9e 81       	ldd	r25, Y+6	; 0x06
 1c4:	91 83       	std	Z+1, r25	; 0x01
 1c6:	80 83       	st	Z, r24
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <analogWrite+0x11e>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
 1ca:	a0 eb       	ldi	r26, 0xB0	; 176
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	e0 eb       	ldi	r30, 0xB0	; 176
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 68       	ori	r24, 0x80	; 128
 1d6:	8c 93       	st	X, r24
				OCR2A = val; // set pwm duty
 1d8:	e3 eb       	ldi	r30, 0xB3	; 179
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	8d 81       	ldd	r24, Y+5	; 0x05
 1de:	80 83       	st	Z, r24
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <analogWrite+0x136>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
 1e2:	a0 eb       	ldi	r26, 0xB0	; 176
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e0 eb       	ldi	r30, 0xB0	; 176
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	80 62       	ori	r24, 0x20	; 32
 1ee:	8c 93       	st	X, r24
				OCR2B = val; // set pwm duty
 1f0:	e4 eb       	ldi	r30, 0xB4	; 180
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	8d 81       	ldd	r24, Y+5	; 0x05
 1f6:	80 83       	st	Z, r24
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <analogWrite+0x14e>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
 1fa:	8d 81       	ldd	r24, Y+5	; 0x05
 1fc:	9e 81       	ldd	r25, Y+6	; 0x06
 1fe:	80 38       	cpi	r24, 0x80	; 128
 200:	91 05       	cpc	r25, r1
 202:	04 f4       	brge	.+0      	; 0x204 <analogWrite+0x158>
					digitalWrite(pin, LOW);
 204:	8c 81       	ldd	r24, Y+4	; 0x04
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	0e 94 00 00 	call	0	; 0x0 <analogReference>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <analogWrite+0x162>
				} else {
					digitalWrite(pin, HIGH);
 20e:	8c 81       	ldd	r24, Y+4	; 0x04
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	0e 94 00 00 	call	0	; 0x0 <analogReference>
				}
		}
	}
}
 216:	28 96       	adiw	r28, 0x08	; 8
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
 222:	cf 91       	pop	r28
 224:	df 91       	pop	r29
 226:	08 95       	ret

wiring_digital.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f6  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000f  00000000  00000000  0000042a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000439  2**0
                  ALLOC
  3 .stab         00000c30  00000000  00000000  0000043c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000fe0  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .progmem.data 0000005a  00000000  00000000  0000204c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text:

00000000 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	69 97       	sbiw	r28, 0x19	; 25
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	88 8f       	std	Y+24, r24	; 0x18
  16:	69 8f       	std	Y+25, r22	; 0x19
	uint8_t bit = digitalPinToBitMask(pin);
  18:	88 8d       	ldd	r24, Y+24	; 0x18
  1a:	88 2f       	mov	r24, r24
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	80 50       	subi	r24, 0x00	; 0
  20:	90 40       	sbci	r25, 0x00	; 0
  22:	99 8b       	std	Y+17, r25	; 0x11
  24:	88 8b       	std	Y+16, r24	; 0x10
  26:	e8 89       	ldd	r30, Y+16	; 0x10
  28:	f9 89       	ldd	r31, Y+17	; 0x11
  2a:	84 91       	lpm	r24, Z+
  2c:	8f 87       	std	Y+15, r24	; 0x0f
  2e:	8f 85       	ldd	r24, Y+15	; 0x0f
  30:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t port = digitalPinToPort(pin);
  32:	88 8d       	ldd	r24, Y+24	; 0x18
  34:	88 2f       	mov	r24, r24
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	80 50       	subi	r24, 0x00	; 0
  3a:	90 40       	sbci	r25, 0x00	; 0
  3c:	9e 87       	std	Y+14, r25	; 0x0e
  3e:	8d 87       	std	Y+13, r24	; 0x0d
  40:	ed 85       	ldd	r30, Y+13	; 0x0d
  42:	fe 85       	ldd	r31, Y+14	; 0x0e
  44:	84 91       	lpm	r24, Z+
  46:	8c 87       	std	Y+12, r24	; 0x0c
  48:	8c 85       	ldd	r24, Y+12	; 0x0c
  4a:	8e 8b       	std	Y+22, r24	; 0x16
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
  4c:	8e 89       	ldd	r24, Y+22	; 0x16
  4e:	88 23       	and	r24, r24
  50:	01 f4       	brne	.+0      	; 0x52 <pinMode+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <pinMode+0x54>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
  54:	8e 89       	ldd	r24, Y+22	; 0x16
  56:	88 2f       	mov	r24, r24
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	88 0f       	add	r24, r24
  5c:	99 1f       	adc	r25, r25
  5e:	80 50       	subi	r24, 0x00	; 0
  60:	90 40       	sbci	r25, 0x00	; 0
  62:	9b 87       	std	Y+11, r25	; 0x0b
  64:	8a 87       	std	Y+10, r24	; 0x0a
  66:	8a 85       	ldd	r24, Y+10	; 0x0a
  68:	9b 85       	ldd	r25, Y+11	; 0x0b
  6a:	fc 01       	movw	r30, r24
  6c:	85 91       	lpm	r24, Z+
  6e:	94 91       	lpm	r25, Z+
  70:	99 87       	std	Y+9, r25	; 0x09
  72:	88 87       	std	Y+8, r24	; 0x08
  74:	fb 87       	std	Y+11, r31	; 0x0b
  76:	ea 87       	std	Y+10, r30	; 0x0a
  78:	88 85       	ldd	r24, Y+8	; 0x08
  7a:	99 85       	ldd	r25, Y+9	; 0x09
  7c:	9d 8b       	std	Y+21, r25	; 0x15
  7e:	8c 8b       	std	Y+20, r24	; 0x14
	out = portOutputRegister(port);
  80:	8e 89       	ldd	r24, Y+22	; 0x16
  82:	88 2f       	mov	r24, r24
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	80 50       	subi	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	9f 83       	std	Y+7, r25	; 0x07
  90:	8e 83       	std	Y+6, r24	; 0x06
  92:	8e 81       	ldd	r24, Y+6	; 0x06
  94:	9f 81       	ldd	r25, Y+7	; 0x07
  96:	fc 01       	movw	r30, r24
  98:	85 91       	lpm	r24, Z+
  9a:	94 91       	lpm	r25, Z+
  9c:	9d 83       	std	Y+5, r25	; 0x05
  9e:	8c 83       	std	Y+4, r24	; 0x04
  a0:	ff 83       	std	Y+7, r31	; 0x07
  a2:	ee 83       	std	Y+6, r30	; 0x06
  a4:	8c 81       	ldd	r24, Y+4	; 0x04
  a6:	9d 81       	ldd	r25, Y+5	; 0x05
  a8:	9b 8b       	std	Y+19, r25	; 0x13
  aa:	8a 8b       	std	Y+18, r24	; 0x12

	if (mode == INPUT) { 
  ac:	89 8d       	ldd	r24, Y+25	; 0x19
  ae:	88 23       	and	r24, r24
  b0:	01 f4       	brne	.+0      	; 0xb2 <pinMode+0xb2>
		uint8_t oldSREG = SREG;
  b2:	ef e5       	ldi	r30, 0x5F	; 95
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8b 83       	std	Y+3, r24	; 0x03
                cli();
  ba:	f8 94       	cli
		*reg &= ~bit;
  bc:	ec 89       	ldd	r30, Y+20	; 0x14
  be:	fd 89       	ldd	r31, Y+21	; 0x15
  c0:	80 81       	ld	r24, Z
  c2:	98 2f       	mov	r25, r24
  c4:	8f 89       	ldd	r24, Y+23	; 0x17
  c6:	80 95       	com	r24
  c8:	89 23       	and	r24, r25
  ca:	ec 89       	ldd	r30, Y+20	; 0x14
  cc:	fd 89       	ldd	r31, Y+21	; 0x15
  ce:	80 83       	st	Z, r24
		*out &= ~bit;
  d0:	ea 89       	ldd	r30, Y+18	; 0x12
  d2:	fb 89       	ldd	r31, Y+19	; 0x13
  d4:	80 81       	ld	r24, Z
  d6:	98 2f       	mov	r25, r24
  d8:	8f 89       	ldd	r24, Y+23	; 0x17
  da:	80 95       	com	r24
  dc:	89 23       	and	r24, r25
  de:	ea 89       	ldd	r30, Y+18	; 0x12
  e0:	fb 89       	ldd	r31, Y+19	; 0x13
  e2:	80 83       	st	Z, r24
		SREG = oldSREG;
  e4:	ef e5       	ldi	r30, 0x5F	; 95
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	80 83       	st	Z, r24
  ec:	00 c0       	rjmp	.+0      	; 0xee <pinMode+0xee>
	} else if (mode == INPUT_PULLUP) {
  ee:	89 8d       	ldd	r24, Y+25	; 0x19
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	01 f4       	brne	.+0      	; 0xf4 <pinMode+0xf4>
		uint8_t oldSREG = SREG;
  f4:	ef e5       	ldi	r30, 0x5F	; 95
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8a 83       	std	Y+2, r24	; 0x02
                cli();
  fc:	f8 94       	cli
		*reg &= ~bit;
  fe:	ec 89       	ldd	r30, Y+20	; 0x14
 100:	fd 89       	ldd	r31, Y+21	; 0x15
 102:	80 81       	ld	r24, Z
 104:	98 2f       	mov	r25, r24
 106:	8f 89       	ldd	r24, Y+23	; 0x17
 108:	80 95       	com	r24
 10a:	89 23       	and	r24, r25
 10c:	ec 89       	ldd	r30, Y+20	; 0x14
 10e:	fd 89       	ldd	r31, Y+21	; 0x15
 110:	80 83       	st	Z, r24
		*out |= bit;
 112:	ea 89       	ldd	r30, Y+18	; 0x12
 114:	fb 89       	ldd	r31, Y+19	; 0x13
 116:	90 81       	ld	r25, Z
 118:	8f 89       	ldd	r24, Y+23	; 0x17
 11a:	89 2b       	or	r24, r25
 11c:	ea 89       	ldd	r30, Y+18	; 0x12
 11e:	fb 89       	ldd	r31, Y+19	; 0x13
 120:	80 83       	st	Z, r24
		SREG = oldSREG;
 122:	ef e5       	ldi	r30, 0x5F	; 95
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	8a 81       	ldd	r24, Y+2	; 0x02
 128:	80 83       	st	Z, r24
 12a:	00 c0       	rjmp	.+0      	; 0x12c <pinMode+0x12c>
	} else {
		uint8_t oldSREG = SREG;
 12c:	ef e5       	ldi	r30, 0x5F	; 95
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	89 83       	std	Y+1, r24	; 0x01
                cli();
 134:	f8 94       	cli
		*reg |= bit;
 136:	ec 89       	ldd	r30, Y+20	; 0x14
 138:	fd 89       	ldd	r31, Y+21	; 0x15
 13a:	90 81       	ld	r25, Z
 13c:	8f 89       	ldd	r24, Y+23	; 0x17
 13e:	89 2b       	or	r24, r25
 140:	ec 89       	ldd	r30, Y+20	; 0x14
 142:	fd 89       	ldd	r31, Y+21	; 0x15
 144:	80 83       	st	Z, r24
		SREG = oldSREG;
 146:	ef e5       	ldi	r30, 0x5F	; 95
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	80 83       	st	Z, r24
	}
}
 14e:	69 96       	adiw	r28, 0x19	; 25
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
 15a:	cf 91       	pop	r28
 15c:	df 91       	pop	r29
 15e:	08 95       	ret

00000160 <turnOffPWM>:
// - Added more #ifdefs, now compiles for atmega645
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
 160:	df 93       	push	r29
 162:	cf 93       	push	r28
 164:	00 d0       	rcall	.+0      	; 0x166 <turnOffPWM+0x6>
 166:	0f 92       	push	r0
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	89 83       	std	Y+1, r24	; 0x01
	switch (timer)
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	28 2f       	mov	r18, r24
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	3b 83       	std	Y+3, r19	; 0x03
 176:	2a 83       	std	Y+2, r18	; 0x02
 178:	8a 81       	ldd	r24, Y+2	; 0x02
 17a:	9b 81       	ldd	r25, Y+3	; 0x03
 17c:	83 30       	cpi	r24, 0x03	; 3
 17e:	91 05       	cpc	r25, r1
 180:	01 f0       	breq	.+0      	; 0x182 <turnOffPWM+0x22>
 182:	2a 81       	ldd	r18, Y+2	; 0x02
 184:	3b 81       	ldd	r19, Y+3	; 0x03
 186:	24 30       	cpi	r18, 0x04	; 4
 188:	31 05       	cpc	r19, r1
 18a:	04 f4       	brge	.+0      	; 0x18c <turnOffPWM+0x2c>
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	9b 81       	ldd	r25, Y+3	; 0x03
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	91 05       	cpc	r25, r1
 194:	01 f0       	breq	.+0      	; 0x196 <turnOffPWM+0x36>
 196:	2a 81       	ldd	r18, Y+2	; 0x02
 198:	3b 81       	ldd	r19, Y+3	; 0x03
 19a:	22 30       	cpi	r18, 0x02	; 2
 19c:	31 05       	cpc	r19, r1
 19e:	01 f0       	breq	.+0      	; 0x1a0 <turnOffPWM+0x40>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <turnOffPWM+0x42>
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	9b 81       	ldd	r25, Y+3	; 0x03
 1a6:	86 30       	cpi	r24, 0x06	; 6
 1a8:	91 05       	cpc	r25, r1
 1aa:	01 f0       	breq	.+0      	; 0x1ac <turnOffPWM+0x4c>
 1ac:	2a 81       	ldd	r18, Y+2	; 0x02
 1ae:	3b 81       	ldd	r19, Y+3	; 0x03
 1b0:	27 30       	cpi	r18, 0x07	; 7
 1b2:	31 05       	cpc	r19, r1
 1b4:	01 f0       	breq	.+0      	; 0x1b6 <turnOffPWM+0x56>
 1b6:	8a 81       	ldd	r24, Y+2	; 0x02
 1b8:	9b 81       	ldd	r25, Y+3	; 0x03
 1ba:	84 30       	cpi	r24, 0x04	; 4
 1bc:	91 05       	cpc	r25, r1
 1be:	01 f0       	breq	.+0      	; 0x1c0 <turnOffPWM+0x60>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <turnOffPWM+0x62>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 1c2:	a0 e8       	ldi	r26, 0x80	; 128
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	e0 e8       	ldi	r30, 0x80	; 128
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	8f 77       	andi	r24, 0x7F	; 127
 1ce:	8c 93       	st	X, r24
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <turnOffPWM+0x72>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1d2:	a0 e8       	ldi	r26, 0x80	; 128
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	e0 e8       	ldi	r30, 0x80	; 128
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	8f 7d       	andi	r24, 0xDF	; 223
 1de:	8c 93       	st	X, r24
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <turnOffPWM+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 1e2:	a4 e4       	ldi	r26, 0x44	; 68
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e4 e4       	ldi	r30, 0x44	; 68
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	8f 77       	andi	r24, 0x7F	; 127
 1ee:	8c 93       	st	X, r24
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <turnOffPWM+0x92>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1f2:	a4 e4       	ldi	r26, 0x44	; 68
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	e4 e4       	ldi	r30, 0x44	; 68
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	8f 7d       	andi	r24, 0xDF	; 223
 1fe:	8c 93       	st	X, r24
 200:	00 c0       	rjmp	.+0      	; 0x202 <turnOffPWM+0xa2>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 202:	a0 eb       	ldi	r26, 0xB0	; 176
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	e0 eb       	ldi	r30, 0xB0	; 176
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	8f 77       	andi	r24, 0x7F	; 127
 20e:	8c 93       	st	X, r24
 210:	00 c0       	rjmp	.+0      	; 0x212 <turnOffPWM+0xb2>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 212:	a0 eb       	ldi	r26, 0xB0	; 176
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	e0 eb       	ldi	r30, 0xB0	; 176
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	8f 7d       	andi	r24, 0xDF	; 223
 21e:	8c 93       	st	X, r24
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	cf 91       	pop	r28
 228:	df 91       	pop	r29
 22a:	08 95       	ret

0000022c <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
 22c:	df 93       	push	r29
 22e:	cf 93       	push	r28
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	65 97       	sbiw	r28, 0x15	; 21
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	8c 8b       	std	Y+20, r24	; 0x14
 242:	6d 8b       	std	Y+21, r22	; 0x15
	uint8_t timer = digitalPinToTimer(pin);
 244:	8c 89       	ldd	r24, Y+20	; 0x14
 246:	88 2f       	mov	r24, r24
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	80 50       	subi	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	9d 87       	std	Y+13, r25	; 0x0d
 250:	8c 87       	std	Y+12, r24	; 0x0c
 252:	ec 85       	ldd	r30, Y+12	; 0x0c
 254:	fd 85       	ldd	r31, Y+13	; 0x0d
 256:	84 91       	lpm	r24, Z+
 258:	8b 87       	std	Y+11, r24	; 0x0b
 25a:	8b 85       	ldd	r24, Y+11	; 0x0b
 25c:	8b 8b       	std	Y+19, r24	; 0x13
	uint8_t bit = digitalPinToBitMask(pin);
 25e:	8c 89       	ldd	r24, Y+20	; 0x14
 260:	88 2f       	mov	r24, r24
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	80 50       	subi	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	9a 87       	std	Y+10, r25	; 0x0a
 26a:	89 87       	std	Y+9, r24	; 0x09
 26c:	e9 85       	ldd	r30, Y+9	; 0x09
 26e:	fa 85       	ldd	r31, Y+10	; 0x0a
 270:	84 91       	lpm	r24, Z+
 272:	88 87       	std	Y+8, r24	; 0x08
 274:	88 85       	ldd	r24, Y+8	; 0x08
 276:	8a 8b       	std	Y+18, r24	; 0x12
	uint8_t port = digitalPinToPort(pin);
 278:	8c 89       	ldd	r24, Y+20	; 0x14
 27a:	88 2f       	mov	r24, r24
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	80 50       	subi	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	9f 83       	std	Y+7, r25	; 0x07
 284:	8e 83       	std	Y+6, r24	; 0x06
 286:	ee 81       	ldd	r30, Y+6	; 0x06
 288:	ff 81       	ldd	r31, Y+7	; 0x07
 28a:	84 91       	lpm	r24, Z+
 28c:	8d 83       	std	Y+5, r24	; 0x05
 28e:	8d 81       	ldd	r24, Y+5	; 0x05
 290:	89 8b       	std	Y+17, r24	; 0x11
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 292:	89 89       	ldd	r24, Y+17	; 0x11
 294:	88 23       	and	r24, r24
 296:	01 f4       	brne	.+0      	; 0x298 <digitalWrite+0x6c>
 298:	00 c0       	rjmp	.+0      	; 0x29a <digitalWrite+0x6e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 29a:	8b 89       	ldd	r24, Y+19	; 0x13
 29c:	88 23       	and	r24, r24
 29e:	01 f0       	breq	.+0      	; 0x2a0 <digitalWrite+0x74>
 2a0:	8b 89       	ldd	r24, Y+19	; 0x13
 2a2:	0e 94 00 00 	call	0	; 0x0 <pinMode>

	out = portOutputRegister(port);
 2a6:	89 89       	ldd	r24, Y+17	; 0x11
 2a8:	88 2f       	mov	r24, r24
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	80 50       	subi	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	9c 83       	std	Y+4, r25	; 0x04
 2b6:	8b 83       	std	Y+3, r24	; 0x03
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	9c 81       	ldd	r25, Y+4	; 0x04
 2bc:	fc 01       	movw	r30, r24
 2be:	85 91       	lpm	r24, Z+
 2c0:	94 91       	lpm	r25, Z+
 2c2:	9a 83       	std	Y+2, r25	; 0x02
 2c4:	89 83       	std	Y+1, r24	; 0x01
 2c6:	fc 83       	std	Y+4, r31	; 0x04
 2c8:	eb 83       	std	Y+3, r30	; 0x03
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	9a 81       	ldd	r25, Y+2	; 0x02
 2ce:	98 8b       	std	Y+16, r25	; 0x10
 2d0:	8f 87       	std	Y+15, r24	; 0x0f

	uint8_t oldSREG = SREG;
 2d2:	ef e5       	ldi	r30, 0x5F	; 95
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	8e 87       	std	Y+14, r24	; 0x0e
	cli();
 2da:	f8 94       	cli

	if (val == LOW) {
 2dc:	8d 89       	ldd	r24, Y+21	; 0x15
 2de:	88 23       	and	r24, r24
 2e0:	01 f4       	brne	.+0      	; 0x2e2 <digitalWrite+0xb6>
		*out &= ~bit;
 2e2:	ef 85       	ldd	r30, Y+15	; 0x0f
 2e4:	f8 89       	ldd	r31, Y+16	; 0x10
 2e6:	80 81       	ld	r24, Z
 2e8:	98 2f       	mov	r25, r24
 2ea:	8a 89       	ldd	r24, Y+18	; 0x12
 2ec:	80 95       	com	r24
 2ee:	89 23       	and	r24, r25
 2f0:	ef 85       	ldd	r30, Y+15	; 0x0f
 2f2:	f8 89       	ldd	r31, Y+16	; 0x10
 2f4:	80 83       	st	Z, r24
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <digitalWrite+0xcc>
	} else {
		*out |= bit;
 2f8:	ef 85       	ldd	r30, Y+15	; 0x0f
 2fa:	f8 89       	ldd	r31, Y+16	; 0x10
 2fc:	90 81       	ld	r25, Z
 2fe:	8a 89       	ldd	r24, Y+18	; 0x12
 300:	89 2b       	or	r24, r25
 302:	ef 85       	ldd	r30, Y+15	; 0x0f
 304:	f8 89       	ldd	r31, Y+16	; 0x10
 306:	80 83       	st	Z, r24
	}

	SREG = oldSREG;
 308:	ef e5       	ldi	r30, 0x5F	; 95
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	8e 85       	ldd	r24, Y+14	; 0x0e
 30e:	80 83       	st	Z, r24
}
 310:	65 96       	adiw	r28, 0x15	; 21
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	de bf       	out	0x3e, r29	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	cd bf       	out	0x3d, r28	; 61
 31c:	cf 91       	pop	r28
 31e:	df 91       	pop	r29
 320:	08 95       	ret

00000322 <digitalRead>:

int digitalRead(uint8_t pin)
{
 322:	df 93       	push	r29
 324:	cf 93       	push	r28
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	63 97       	sbiw	r28, 0x13	; 19
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
 336:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t timer = digitalPinToTimer(pin);
 338:	89 89       	ldd	r24, Y+17	; 0x11
 33a:	88 2f       	mov	r24, r24
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	80 50       	subi	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	9d 87       	std	Y+13, r25	; 0x0d
 344:	8c 87       	std	Y+12, r24	; 0x0c
 346:	ec 85       	ldd	r30, Y+12	; 0x0c
 348:	fd 85       	ldd	r31, Y+13	; 0x0d
 34a:	84 91       	lpm	r24, Z+
 34c:	8b 87       	std	Y+11, r24	; 0x0b
 34e:	8b 85       	ldd	r24, Y+11	; 0x0b
 350:	88 8b       	std	Y+16, r24	; 0x10
	uint8_t bit = digitalPinToBitMask(pin);
 352:	89 89       	ldd	r24, Y+17	; 0x11
 354:	88 2f       	mov	r24, r24
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	80 50       	subi	r24, 0x00	; 0
 35a:	90 40       	sbci	r25, 0x00	; 0
 35c:	9a 87       	std	Y+10, r25	; 0x0a
 35e:	89 87       	std	Y+9, r24	; 0x09
 360:	e9 85       	ldd	r30, Y+9	; 0x09
 362:	fa 85       	ldd	r31, Y+10	; 0x0a
 364:	84 91       	lpm	r24, Z+
 366:	88 87       	std	Y+8, r24	; 0x08
 368:	88 85       	ldd	r24, Y+8	; 0x08
 36a:	8f 87       	std	Y+15, r24	; 0x0f
	uint8_t port = digitalPinToPort(pin);
 36c:	89 89       	ldd	r24, Y+17	; 0x11
 36e:	88 2f       	mov	r24, r24
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	80 50       	subi	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	9f 83       	std	Y+7, r25	; 0x07
 378:	8e 83       	std	Y+6, r24	; 0x06
 37a:	ee 81       	ldd	r30, Y+6	; 0x06
 37c:	ff 81       	ldd	r31, Y+7	; 0x07
 37e:	84 91       	lpm	r24, Z+
 380:	8d 83       	std	Y+5, r24	; 0x05
 382:	8d 81       	ldd	r24, Y+5	; 0x05
 384:	8e 87       	std	Y+14, r24	; 0x0e

	if (port == NOT_A_PIN) return LOW;
 386:	8e 85       	ldd	r24, Y+14	; 0x0e
 388:	88 23       	and	r24, r24
 38a:	01 f4       	brne	.+0      	; 0x38c <digitalRead+0x6a>
 38c:	1b 8a       	std	Y+19, r1	; 0x13
 38e:	1a 8a       	std	Y+18, r1	; 0x12
 390:	00 c0       	rjmp	.+0      	; 0x392 <digitalRead+0x70>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 392:	88 89       	ldd	r24, Y+16	; 0x10
 394:	88 23       	and	r24, r24
 396:	01 f0       	breq	.+0      	; 0x398 <digitalRead+0x76>
 398:	88 89       	ldd	r24, Y+16	; 0x10
 39a:	0e 94 00 00 	call	0	; 0x0 <pinMode>

	if (*portInputRegister(port) & bit) return HIGH;
 39e:	8e 85       	ldd	r24, Y+14	; 0x0e
 3a0:	88 2f       	mov	r24, r24
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	80 50       	subi	r24, 0x00	; 0
 3aa:	90 40       	sbci	r25, 0x00	; 0
 3ac:	9c 83       	std	Y+4, r25	; 0x04
 3ae:	8b 83       	std	Y+3, r24	; 0x03
 3b0:	8b 81       	ldd	r24, Y+3	; 0x03
 3b2:	9c 81       	ldd	r25, Y+4	; 0x04
 3b4:	fc 01       	movw	r30, r24
 3b6:	85 91       	lpm	r24, Z+
 3b8:	94 91       	lpm	r25, Z+
 3ba:	9a 83       	std	Y+2, r25	; 0x02
 3bc:	89 83       	std	Y+1, r24	; 0x01
 3be:	fc 83       	std	Y+4, r31	; 0x04
 3c0:	eb 83       	std	Y+3, r30	; 0x03
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	9a 81       	ldd	r25, Y+2	; 0x02
 3c6:	fc 01       	movw	r30, r24
 3c8:	90 81       	ld	r25, Z
 3ca:	8f 85       	ldd	r24, Y+15	; 0x0f
 3cc:	89 23       	and	r24, r25
 3ce:	88 23       	and	r24, r24
 3d0:	01 f0       	breq	.+0      	; 0x3d2 <digitalRead+0xb0>
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	9b 8b       	std	Y+19, r25	; 0x13
 3d8:	8a 8b       	std	Y+18, r24	; 0x12
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <digitalRead+0xba>
	return LOW;
 3dc:	1b 8a       	std	Y+19, r1	; 0x13
 3de:	1a 8a       	std	Y+18, r1	; 0x12
 3e0:	8a 89       	ldd	r24, Y+18	; 0x12
 3e2:	9b 89       	ldd	r25, Y+19	; 0x13
}
 3e4:	63 96       	adiw	r28, 0x13	; 19
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	cf 91       	pop	r28
 3f2:	df 91       	pop	r29
 3f4:	08 95       	ret

wiring_pulse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000f  00000000  00000000  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000002e3  2**0
                  ALLOC
  3 .stab         000007bc  00000000  00000000  000002e4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000d60  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	af 97       	sbiw	r28, 0x2f	; 47
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8a a3       	std	Y+34, r24	; 0x22
  16:	6b a3       	std	Y+35, r22	; 0x23
  18:	2c a3       	std	Y+36, r18	; 0x24
  1a:	3d a3       	std	Y+37, r19	; 0x25
  1c:	4e a3       	std	Y+38, r20	; 0x26
  1e:	5f a3       	std	Y+39, r21	; 0x27
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
  20:	8a a1       	ldd	r24, Y+34	; 0x22
  22:	88 2f       	mov	r24, r24
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	80 50       	subi	r24, 0x00	; 0
  28:	90 40       	sbci	r25, 0x00	; 0
  2a:	9a 8b       	std	Y+18, r25	; 0x12
  2c:	89 8b       	std	Y+17, r24	; 0x11
  2e:	e9 89       	ldd	r30, Y+17	; 0x11
  30:	fa 89       	ldd	r31, Y+18	; 0x12
  32:	84 91       	lpm	r24, Z+
  34:	88 8b       	std	Y+16, r24	; 0x10
  36:	88 89       	ldd	r24, Y+16	; 0x10
  38:	89 a3       	std	Y+33, r24	; 0x21
	uint8_t port = digitalPinToPort(pin);
  3a:	8a a1       	ldd	r24, Y+34	; 0x22
  3c:	88 2f       	mov	r24, r24
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	80 50       	subi	r24, 0x00	; 0
  42:	90 40       	sbci	r25, 0x00	; 0
  44:	9f 87       	std	Y+15, r25	; 0x0f
  46:	8e 87       	std	Y+14, r24	; 0x0e
  48:	ee 85       	ldd	r30, Y+14	; 0x0e
  4a:	ff 85       	ldd	r31, Y+15	; 0x0f
  4c:	84 91       	lpm	r24, Z+
  4e:	8d 87       	std	Y+13, r24	; 0x0d
  50:	8d 85       	ldd	r24, Y+13	; 0x0d
  52:	88 a3       	std	Y+32, r24	; 0x20
	uint8_t stateMask = (state ? bit : 0);
  54:	8b a1       	ldd	r24, Y+35	; 0x23
  56:	88 23       	and	r24, r24
  58:	01 f0       	breq	.+0      	; 0x5a <pulseIn+0x5a>
  5a:	29 a1       	ldd	r18, Y+33	; 0x21
  5c:	2f a7       	std	Y+47, r18	; 0x2f
  5e:	00 c0       	rjmp	.+0      	; 0x60 <pulseIn+0x60>
  60:	1f a6       	std	Y+47, r1	; 0x2f
  62:	3f a5       	ldd	r19, Y+47	; 0x2f
  64:	3f 8f       	std	Y+31, r19	; 0x1f
	unsigned long width = 0; // keep initialization out of time critical area
  66:	1b 8e       	std	Y+27, r1	; 0x1b
  68:	1c 8e       	std	Y+28, r1	; 0x1c
  6a:	1d 8e       	std	Y+29, r1	; 0x1d
  6c:	1e 8e       	std	Y+30, r1	; 0x1e
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
  6e:	1f 8a       	std	Y+23, r1	; 0x17
  70:	18 8e       	std	Y+24, r1	; 0x18
  72:	19 8e       	std	Y+25, r1	; 0x19
  74:	1a 8e       	std	Y+26, r1	; 0x1a
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
  76:	8c a1       	ldd	r24, Y+36	; 0x24
  78:	9d a1       	ldd	r25, Y+37	; 0x25
  7a:	ae a1       	ldd	r26, Y+38	; 0x26
  7c:	bf a1       	ldd	r27, Y+39	; 0x27
  7e:	88 0f       	add	r24, r24
  80:	99 1f       	adc	r25, r25
  82:	aa 1f       	adc	r26, r26
  84:	bb 1f       	adc	r27, r27
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	aa 1f       	adc	r26, r26
  8c:	bb 1f       	adc	r27, r27
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	aa 1f       	adc	r26, r26
  94:	bb 1f       	adc	r27, r27
  96:	68 94       	set
  98:	13 f8       	bld	r1, 3
  9a:	b6 95       	lsr	r27
  9c:	a7 95       	ror	r26
  9e:	97 95       	ror	r25
  a0:	87 95       	ror	r24
  a2:	16 94       	lsr	r1
  a4:	01 f4       	brne	.+0      	; 0xa6 <pulseIn+0xa6>
  a6:	8b 8b       	std	Y+19, r24	; 0x13
  a8:	9c 8b       	std	Y+20, r25	; 0x14
  aa:	ad 8b       	std	Y+21, r26	; 0x15
  ac:	be 8b       	std	Y+22, r27	; 0x16
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <pulseIn+0xb0>
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
  b0:	1e a6       	std	Y+46, r1	; 0x2e
  b2:	2f 89       	ldd	r18, Y+23	; 0x17
  b4:	38 8d       	ldd	r19, Y+24	; 0x18
  b6:	49 8d       	ldd	r20, Y+25	; 0x19
  b8:	5a 8d       	ldd	r21, Y+26	; 0x1a
  ba:	8b 89       	ldd	r24, Y+19	; 0x13
  bc:	9c 89       	ldd	r25, Y+20	; 0x14
  be:	ad 89       	ldd	r26, Y+21	; 0x15
  c0:	be 89       	ldd	r27, Y+22	; 0x16
  c2:	28 17       	cp	r18, r24
  c4:	39 07       	cpc	r19, r25
  c6:	4a 07       	cpc	r20, r26
  c8:	5b 07       	cpc	r21, r27
  ca:	01 f4       	brne	.+0      	; 0xcc <pulseIn+0xcc>
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	4e a7       	std	Y+46, r20	; 0x2e
  d0:	8f 89       	ldd	r24, Y+23	; 0x17
  d2:	98 8d       	ldd	r25, Y+24	; 0x18
  d4:	a9 8d       	ldd	r26, Y+25	; 0x19
  d6:	ba 8d       	ldd	r27, Y+26	; 0x1a
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	a1 1d       	adc	r26, r1
  dc:	b1 1d       	adc	r27, r1
  de:	8f 8b       	std	Y+23, r24	; 0x17
  e0:	98 8f       	std	Y+24, r25	; 0x18
  e2:	a9 8f       	std	Y+25, r26	; 0x19
  e4:	ba 8f       	std	Y+26, r27	; 0x1a
  e6:	5e a5       	ldd	r21, Y+46	; 0x2e
  e8:	55 23       	and	r21, r21
  ea:	01 f0       	breq	.+0      	; 0xec <pulseIn+0xec>
			return 0;
  ec:	1a a6       	std	Y+42, r1	; 0x2a
  ee:	1b a6       	std	Y+43, r1	; 0x2b
  f0:	1c a6       	std	Y+44, r1	; 0x2c
  f2:	1d a6       	std	Y+45, r1	; 0x2d
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <pulseIn+0xf6>
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  f6:	88 a1       	ldd	r24, Y+32	; 0x20
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	80 50       	subi	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	9c 87       	std	Y+12, r25	; 0x0c
 106:	8b 87       	std	Y+11, r24	; 0x0b
 108:	8b 85       	ldd	r24, Y+11	; 0x0b
 10a:	9c 85       	ldd	r25, Y+12	; 0x0c
 10c:	fc 01       	movw	r30, r24
 10e:	85 91       	lpm	r24, Z+
 110:	94 91       	lpm	r25, Z+
 112:	9a 87       	std	Y+10, r25	; 0x0a
 114:	89 87       	std	Y+9, r24	; 0x09
 116:	fc 87       	std	Y+12, r31	; 0x0c
 118:	eb 87       	std	Y+11, r30	; 0x0b
 11a:	89 85       	ldd	r24, Y+9	; 0x09
 11c:	9a 85       	ldd	r25, Y+10	; 0x0a
 11e:	fc 01       	movw	r30, r24
 120:	90 81       	ld	r25, Z
 122:	89 a1       	ldd	r24, Y+33	; 0x21
 124:	98 23       	and	r25, r24
 126:	8f 8d       	ldd	r24, Y+31	; 0x1f
 128:	98 17       	cp	r25, r24
 12a:	01 f4       	brne	.+0      	; 0x12c <pulseIn+0x12c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <pulseIn+0x12e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <pulseIn+0x130>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
 130:	19 a6       	std	Y+41, r1	; 0x29
 132:	2f 89       	ldd	r18, Y+23	; 0x17
 134:	38 8d       	ldd	r19, Y+24	; 0x18
 136:	49 8d       	ldd	r20, Y+25	; 0x19
 138:	5a 8d       	ldd	r21, Y+26	; 0x1a
 13a:	8b 89       	ldd	r24, Y+19	; 0x13
 13c:	9c 89       	ldd	r25, Y+20	; 0x14
 13e:	ad 89       	ldd	r26, Y+21	; 0x15
 140:	be 89       	ldd	r27, Y+22	; 0x16
 142:	28 17       	cp	r18, r24
 144:	39 07       	cpc	r19, r25
 146:	4a 07       	cpc	r20, r26
 148:	5b 07       	cpc	r21, r27
 14a:	01 f4       	brne	.+0      	; 0x14c <pulseIn+0x14c>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	89 a7       	std	Y+41, r24	; 0x29
 150:	8f 89       	ldd	r24, Y+23	; 0x17
 152:	98 8d       	ldd	r25, Y+24	; 0x18
 154:	a9 8d       	ldd	r26, Y+25	; 0x19
 156:	ba 8d       	ldd	r27, Y+26	; 0x1a
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	a1 1d       	adc	r26, r1
 15c:	b1 1d       	adc	r27, r1
 15e:	8f 8b       	std	Y+23, r24	; 0x17
 160:	98 8f       	std	Y+24, r25	; 0x18
 162:	a9 8f       	std	Y+25, r26	; 0x19
 164:	ba 8f       	std	Y+26, r27	; 0x1a
 166:	29 a5       	ldd	r18, Y+41	; 0x29
 168:	22 23       	and	r18, r18
 16a:	01 f0       	breq	.+0      	; 0x16c <pulseIn+0x16c>
			return 0;
 16c:	1a a6       	std	Y+42, r1	; 0x2a
 16e:	1b a6       	std	Y+43, r1	; 0x2b
 170:	1c a6       	std	Y+44, r1	; 0x2c
 172:	1d a6       	std	Y+45, r1	; 0x2d
 174:	00 c0       	rjmp	.+0      	; 0x176 <pulseIn+0x176>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
 176:	88 a1       	ldd	r24, Y+32	; 0x20
 178:	88 2f       	mov	r24, r24
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	80 50       	subi	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	98 87       	std	Y+8, r25	; 0x08
 186:	8f 83       	std	Y+7, r24	; 0x07
 188:	8f 81       	ldd	r24, Y+7	; 0x07
 18a:	98 85       	ldd	r25, Y+8	; 0x08
 18c:	fc 01       	movw	r30, r24
 18e:	85 91       	lpm	r24, Z+
 190:	94 91       	lpm	r25, Z+
 192:	9e 83       	std	Y+6, r25	; 0x06
 194:	8d 83       	std	Y+5, r24	; 0x05
 196:	f8 87       	std	Y+8, r31	; 0x08
 198:	ef 83       	std	Y+7, r30	; 0x07
 19a:	8d 81       	ldd	r24, Y+5	; 0x05
 19c:	9e 81       	ldd	r25, Y+6	; 0x06
 19e:	fc 01       	movw	r30, r24
 1a0:	90 81       	ld	r25, Z
 1a2:	89 a1       	ldd	r24, Y+33	; 0x21
 1a4:	98 23       	and	r25, r24
 1a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
 1a8:	98 17       	cp	r25, r24
 1aa:	01 f0       	breq	.+0      	; 0x1ac <pulseIn+0x1ac>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <pulseIn+0x1ae>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <pulseIn+0x1b0>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
		if (numloops++ == maxloops)
 1b0:	18 a6       	std	Y+40, r1	; 0x28
 1b2:	2f 89       	ldd	r18, Y+23	; 0x17
 1b4:	38 8d       	ldd	r19, Y+24	; 0x18
 1b6:	49 8d       	ldd	r20, Y+25	; 0x19
 1b8:	5a 8d       	ldd	r21, Y+26	; 0x1a
 1ba:	8b 89       	ldd	r24, Y+19	; 0x13
 1bc:	9c 89       	ldd	r25, Y+20	; 0x14
 1be:	ad 89       	ldd	r26, Y+21	; 0x15
 1c0:	be 89       	ldd	r27, Y+22	; 0x16
 1c2:	28 17       	cp	r18, r24
 1c4:	39 07       	cpc	r19, r25
 1c6:	4a 07       	cpc	r20, r26
 1c8:	5b 07       	cpc	r21, r27
 1ca:	01 f4       	brne	.+0      	; 0x1cc <pulseIn+0x1cc>
 1cc:	31 e0       	ldi	r19, 0x01	; 1
 1ce:	38 a7       	std	Y+40, r19	; 0x28
 1d0:	8f 89       	ldd	r24, Y+23	; 0x17
 1d2:	98 8d       	ldd	r25, Y+24	; 0x18
 1d4:	a9 8d       	ldd	r26, Y+25	; 0x19
 1d6:	ba 8d       	ldd	r27, Y+26	; 0x1a
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	a1 1d       	adc	r26, r1
 1dc:	b1 1d       	adc	r27, r1
 1de:	8f 8b       	std	Y+23, r24	; 0x17
 1e0:	98 8f       	std	Y+24, r25	; 0x18
 1e2:	a9 8f       	std	Y+25, r26	; 0x19
 1e4:	ba 8f       	std	Y+26, r27	; 0x1a
 1e6:	48 a5       	ldd	r20, Y+40	; 0x28
 1e8:	44 23       	and	r20, r20
 1ea:	01 f0       	breq	.+0      	; 0x1ec <pulseIn+0x1ec>
			return 0;
 1ec:	1a a6       	std	Y+42, r1	; 0x2a
 1ee:	1b a6       	std	Y+43, r1	; 0x2b
 1f0:	1c a6       	std	Y+44, r1	; 0x2c
 1f2:	1d a6       	std	Y+45, r1	; 0x2d
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <pulseIn+0x1f6>
		width++;
 1f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1fa:	ad 8d       	ldd	r26, Y+29	; 0x1d
 1fc:	be 8d       	ldd	r27, Y+30	; 0x1e
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	a1 1d       	adc	r26, r1
 202:	b1 1d       	adc	r27, r1
 204:	8b 8f       	std	Y+27, r24	; 0x1b
 206:	9c 8f       	std	Y+28, r25	; 0x1c
 208:	ad 8f       	std	Y+29, r26	; 0x1d
 20a:	be 8f       	std	Y+30, r27	; 0x1e
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
 20c:	88 a1       	ldd	r24, Y+32	; 0x20
 20e:	88 2f       	mov	r24, r24
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	80 50       	subi	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	9c 83       	std	Y+4, r25	; 0x04
 21c:	8b 83       	std	Y+3, r24	; 0x03
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	9c 81       	ldd	r25, Y+4	; 0x04
 222:	fc 01       	movw	r30, r24
 224:	85 91       	lpm	r24, Z+
 226:	94 91       	lpm	r25, Z+
 228:	9a 83       	std	Y+2, r25	; 0x02
 22a:	89 83       	std	Y+1, r24	; 0x01
 22c:	fc 83       	std	Y+4, r31	; 0x04
 22e:	eb 83       	std	Y+3, r30	; 0x03
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	9a 81       	ldd	r25, Y+2	; 0x02
 234:	fc 01       	movw	r30, r24
 236:	90 81       	ld	r25, Z
 238:	89 a1       	ldd	r24, Y+33	; 0x21
 23a:	98 23       	and	r25, r24
 23c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 23e:	98 17       	cp	r25, r24
 240:	01 f4       	brne	.+0      	; 0x242 <pulseIn+0x242>
 242:	00 c0       	rjmp	.+0      	; 0x244 <pulseIn+0x244>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
 244:	8b 8d       	ldd	r24, Y+27	; 0x1b
 246:	9c 8d       	ldd	r25, Y+28	; 0x1c
 248:	ad 8d       	ldd	r26, Y+29	; 0x1d
 24a:	be 8d       	ldd	r27, Y+30	; 0x1e
 24c:	25 e1       	ldi	r18, 0x15	; 21
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	bc 01       	movw	r22, r24
 256:	cd 01       	movw	r24, r26
 258:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
 25c:	dc 01       	movw	r26, r24
 25e:	cb 01       	movw	r24, r22
 260:	40 96       	adiw	r24, 0x10	; 16
 262:	a1 1d       	adc	r26, r1
 264:	b1 1d       	adc	r27, r1
 266:	9c 01       	movw	r18, r24
 268:	ad 01       	movw	r20, r26
 26a:	68 94       	set
 26c:	12 f8       	bld	r1, 2
 26e:	56 95       	lsr	r21
 270:	47 95       	ror	r20
 272:	37 95       	ror	r19
 274:	27 95       	ror	r18
 276:	16 94       	lsr	r1
 278:	01 f4       	brne	.+0      	; 0x27a <pulseIn+0x27a>
 27a:	2a a7       	std	Y+42, r18	; 0x2a
 27c:	3b a7       	std	Y+43, r19	; 0x2b
 27e:	4c a7       	std	Y+44, r20	; 0x2c
 280:	5d a7       	std	Y+45, r21	; 0x2d
 282:	8a a5       	ldd	r24, Y+42	; 0x2a
 284:	9b a5       	ldd	r25, Y+43	; 0x2b
 286:	ac a5       	ldd	r26, Y+44	; 0x2c
 288:	bd a5       	ldd	r27, Y+45	; 0x2d
}
 28a:	bc 01       	movw	r22, r24
 28c:	cd 01       	movw	r24, r26
 28e:	af 96       	adiw	r28, 0x2f	; 47
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

wiring_shift.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000f  00000000  00000000  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000185  2**0
                  ALLOC
  3 .stab         00000708  00000000  00000000  00000188  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000cea  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <shiftIn>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <shiftIn+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <shiftIn+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8b 83       	std	Y+3, r24	; 0x03
  10:	6c 83       	std	Y+4, r22	; 0x04
  12:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t value = 0;
  14:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  16:	19 82       	std	Y+1, r1	; 0x01
  18:	00 c0       	rjmp	.+0      	; 0x1a <shiftIn+0x1a>
		digitalWrite(clockPin, HIGH);
  1a:	8c 81       	ldd	r24, Y+4	; 0x04
  1c:	61 e0       	ldi	r22, 0x01	; 1
  1e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		if (bitOrder == LSBFIRST)
  22:	8d 81       	ldd	r24, Y+5	; 0x05
  24:	88 23       	and	r24, r24
  26:	01 f4       	brne	.+0      	; 0x28 <shiftIn+0x28>
			value |= digitalRead(dataPin) << i;
  28:	8b 81       	ldd	r24, Y+3	; 0x03
  2a:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  2e:	9c 01       	movw	r18, r24
  30:	89 81       	ldd	r24, Y+1	; 0x01
  32:	88 2f       	mov	r24, r24
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	a9 01       	movw	r20, r18
  38:	00 c0       	rjmp	.+0      	; 0x3a <shiftIn+0x3a>
  3a:	44 0f       	add	r20, r20
  3c:	55 1f       	adc	r21, r21
  3e:	8a 95       	dec	r24
  40:	02 f4       	brpl	.+0      	; 0x42 <shiftIn+0x42>
  42:	ca 01       	movw	r24, r20
  44:	98 2f       	mov	r25, r24
  46:	8a 81       	ldd	r24, Y+2	; 0x02
  48:	89 2b       	or	r24, r25
  4a:	8a 83       	std	Y+2, r24	; 0x02
  4c:	00 c0       	rjmp	.+0      	; 0x4e <shiftIn+0x4e>
		else
			value |= digitalRead(dataPin) << (7 - i);
  4e:	8b 81       	ldd	r24, Y+3	; 0x03
  50:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  54:	ac 01       	movw	r20, r24
  56:	89 81       	ldd	r24, Y+1	; 0x01
  58:	28 2f       	mov	r18, r24
  5a:	30 e0       	ldi	r19, 0x00	; 0
  5c:	87 e0       	ldi	r24, 0x07	; 7
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	82 1b       	sub	r24, r18
  62:	93 0b       	sbc	r25, r19
  64:	9a 01       	movw	r18, r20
  66:	00 c0       	rjmp	.+0      	; 0x68 <shiftIn+0x68>
  68:	22 0f       	add	r18, r18
  6a:	33 1f       	adc	r19, r19
  6c:	8a 95       	dec	r24
  6e:	02 f4       	brpl	.+0      	; 0x70 <shiftIn+0x70>
  70:	c9 01       	movw	r24, r18
  72:	98 2f       	mov	r25, r24
  74:	8a 81       	ldd	r24, Y+2	; 0x02
  76:	89 2b       	or	r24, r25
  78:	8a 83       	std	Y+2, r24	; 0x02
		digitalWrite(clockPin, LOW);
  7a:	8c 81       	ldd	r24, Y+4	; 0x04
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	8f 5f       	subi	r24, 0xFF	; 255
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	89 81       	ldd	r24, Y+1	; 0x01
  8a:	88 30       	cpi	r24, 0x08	; 8
  8c:	00 f0       	brcs	.+0      	; 0x8e <shiftIn+0x8e>
			value |= digitalRead(dataPin) << i;
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
  8e:	8a 81       	ldd	r24, Y+2	; 0x02
}
  90:	0f 90       	pop	r0
  92:	0f 90       	pop	r0
  94:	0f 90       	pop	r0
  96:	0f 90       	pop	r0
  98:	0f 90       	pop	r0
  9a:	cf 91       	pop	r28
  9c:	df 91       	pop	r29
  9e:	08 95       	ret

000000a0 <shiftOut>:

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  a0:	df 93       	push	r29
  a2:	cf 93       	push	r28
  a4:	00 d0       	rcall	.+0      	; 0xa6 <shiftOut+0x6>
  a6:	00 d0       	rcall	.+0      	; 0xa8 <shiftOut+0x8>
  a8:	0f 92       	push	r0
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	8a 83       	std	Y+2, r24	; 0x02
  b0:	6b 83       	std	Y+3, r22	; 0x03
  b2:	4c 83       	std	Y+4, r20	; 0x04
  b4:	2d 83       	std	Y+5, r18	; 0x05
	uint8_t i;

	for (i = 0; i < 8; i++)  {
  b6:	19 82       	std	Y+1, r1	; 0x01
  b8:	00 c0       	rjmp	.+0      	; 0xba <shiftOut+0x1a>
		if (bitOrder == LSBFIRST)
  ba:	8c 81       	ldd	r24, Y+4	; 0x04
  bc:	88 23       	and	r24, r24
  be:	01 f4       	brne	.+0      	; 0xc0 <shiftOut+0x20>
			digitalWrite(dataPin, !!(val & (1 << i)));
  c0:	8d 81       	ldd	r24, Y+5	; 0x05
  c2:	28 2f       	mov	r18, r24
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	88 2f       	mov	r24, r24
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	a9 01       	movw	r20, r18
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <shiftOut+0x30>
  d0:	55 95       	asr	r21
  d2:	47 95       	ror	r20
  d4:	8a 95       	dec	r24
  d6:	02 f4       	brpl	.+0      	; 0xd8 <shiftOut+0x38>
  d8:	ca 01       	movw	r24, r20
  da:	98 2f       	mov	r25, r24
  dc:	91 70       	andi	r25, 0x01	; 1
  de:	8a 81       	ldd	r24, Y+2	; 0x02
  e0:	69 2f       	mov	r22, r25
  e2:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <shiftOut+0x48>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
  e8:	8d 81       	ldd	r24, Y+5	; 0x05
  ea:	48 2f       	mov	r20, r24
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	87 e0       	ldi	r24, 0x07	; 7
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	82 1b       	sub	r24, r18
  fa:	93 0b       	sbc	r25, r19
  fc:	9a 01       	movw	r18, r20
  fe:	00 c0       	rjmp	.+0      	; 0x100 <shiftOut+0x60>
 100:	35 95       	asr	r19
 102:	27 95       	ror	r18
 104:	8a 95       	dec	r24
 106:	02 f4       	brpl	.+0      	; 0x108 <shiftOut+0x68>
 108:	c9 01       	movw	r24, r18
 10a:	98 2f       	mov	r25, r24
 10c:	91 70       	andi	r25, 0x01	; 1
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	69 2f       	mov	r22, r25
 112:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
			
		digitalWrite(clockPin, HIGH);
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		digitalWrite(clockPin, LOW);		
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	0e 94 00 00 	call	0	; 0x0 <shiftIn>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	89 83       	std	Y+1, r24	; 0x01
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	88 30       	cpi	r24, 0x08	; 8
 130:	00 f0       	brcs	.+0      	; 0x132 <shiftOut+0x92>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	0f 90       	pop	r0
 13c:	cf 91       	pop	r28
 13e:	df 91       	pop	r29
 140:	08 95       	ret
